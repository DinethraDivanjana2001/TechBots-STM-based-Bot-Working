
LED_Blink_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005258  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08005314  08005314  00015314  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080053f0  080053f0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080053f0  080053f0  000153f0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080053f8  080053f8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080053f8  080053f8  000153f8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080053fc  080053fc  000153fc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08005400  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001ac  2000000c  0800540c  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001b8  0800540c  000201b8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   00011eb9  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002242  00000000  00000000  00031f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001058  00000000  00000000  00034178  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000cdf  00000000  00000000  000351d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001ccd0  00000000  00000000  00035eaf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001311a  00000000  00000000  00052b7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2235  00000000  00000000  00065c99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003c10  00000000  00000000  00127ed0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  0012bae0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080052fc 	.word	0x080052fc

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080052fc 	.word	0x080052fc

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f8f0 	bl	80003ec <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__divsi3>:
 8000218:	4603      	mov	r3, r0
 800021a:	430b      	orrs	r3, r1
 800021c:	d47f      	bmi.n	800031e <__divsi3+0x106>
 800021e:	2200      	movs	r2, #0
 8000220:	0843      	lsrs	r3, r0, #1
 8000222:	428b      	cmp	r3, r1
 8000224:	d374      	bcc.n	8000310 <__divsi3+0xf8>
 8000226:	0903      	lsrs	r3, r0, #4
 8000228:	428b      	cmp	r3, r1
 800022a:	d35f      	bcc.n	80002ec <__divsi3+0xd4>
 800022c:	0a03      	lsrs	r3, r0, #8
 800022e:	428b      	cmp	r3, r1
 8000230:	d344      	bcc.n	80002bc <__divsi3+0xa4>
 8000232:	0b03      	lsrs	r3, r0, #12
 8000234:	428b      	cmp	r3, r1
 8000236:	d328      	bcc.n	800028a <__divsi3+0x72>
 8000238:	0c03      	lsrs	r3, r0, #16
 800023a:	428b      	cmp	r3, r1
 800023c:	d30d      	bcc.n	800025a <__divsi3+0x42>
 800023e:	22ff      	movs	r2, #255	; 0xff
 8000240:	0209      	lsls	r1, r1, #8
 8000242:	ba12      	rev	r2, r2
 8000244:	0c03      	lsrs	r3, r0, #16
 8000246:	428b      	cmp	r3, r1
 8000248:	d302      	bcc.n	8000250 <__divsi3+0x38>
 800024a:	1212      	asrs	r2, r2, #8
 800024c:	0209      	lsls	r1, r1, #8
 800024e:	d065      	beq.n	800031c <__divsi3+0x104>
 8000250:	0b03      	lsrs	r3, r0, #12
 8000252:	428b      	cmp	r3, r1
 8000254:	d319      	bcc.n	800028a <__divsi3+0x72>
 8000256:	e000      	b.n	800025a <__divsi3+0x42>
 8000258:	0a09      	lsrs	r1, r1, #8
 800025a:	0bc3      	lsrs	r3, r0, #15
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__divsi3+0x4c>
 8000260:	03cb      	lsls	r3, r1, #15
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0b83      	lsrs	r3, r0, #14
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__divsi3+0x58>
 800026c:	038b      	lsls	r3, r1, #14
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	0b43      	lsrs	r3, r0, #13
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__divsi3+0x64>
 8000278:	034b      	lsls	r3, r1, #13
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0b03      	lsrs	r3, r0, #12
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__divsi3+0x70>
 8000284:	030b      	lsls	r3, r1, #12
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0ac3      	lsrs	r3, r0, #11
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__divsi3+0x7c>
 8000290:	02cb      	lsls	r3, r1, #11
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	0a83      	lsrs	r3, r0, #10
 8000298:	428b      	cmp	r3, r1
 800029a:	d301      	bcc.n	80002a0 <__divsi3+0x88>
 800029c:	028b      	lsls	r3, r1, #10
 800029e:	1ac0      	subs	r0, r0, r3
 80002a0:	4152      	adcs	r2, r2
 80002a2:	0a43      	lsrs	r3, r0, #9
 80002a4:	428b      	cmp	r3, r1
 80002a6:	d301      	bcc.n	80002ac <__divsi3+0x94>
 80002a8:	024b      	lsls	r3, r1, #9
 80002aa:	1ac0      	subs	r0, r0, r3
 80002ac:	4152      	adcs	r2, r2
 80002ae:	0a03      	lsrs	r3, r0, #8
 80002b0:	428b      	cmp	r3, r1
 80002b2:	d301      	bcc.n	80002b8 <__divsi3+0xa0>
 80002b4:	020b      	lsls	r3, r1, #8
 80002b6:	1ac0      	subs	r0, r0, r3
 80002b8:	4152      	adcs	r2, r2
 80002ba:	d2cd      	bcs.n	8000258 <__divsi3+0x40>
 80002bc:	09c3      	lsrs	r3, r0, #7
 80002be:	428b      	cmp	r3, r1
 80002c0:	d301      	bcc.n	80002c6 <__divsi3+0xae>
 80002c2:	01cb      	lsls	r3, r1, #7
 80002c4:	1ac0      	subs	r0, r0, r3
 80002c6:	4152      	adcs	r2, r2
 80002c8:	0983      	lsrs	r3, r0, #6
 80002ca:	428b      	cmp	r3, r1
 80002cc:	d301      	bcc.n	80002d2 <__divsi3+0xba>
 80002ce:	018b      	lsls	r3, r1, #6
 80002d0:	1ac0      	subs	r0, r0, r3
 80002d2:	4152      	adcs	r2, r2
 80002d4:	0943      	lsrs	r3, r0, #5
 80002d6:	428b      	cmp	r3, r1
 80002d8:	d301      	bcc.n	80002de <__divsi3+0xc6>
 80002da:	014b      	lsls	r3, r1, #5
 80002dc:	1ac0      	subs	r0, r0, r3
 80002de:	4152      	adcs	r2, r2
 80002e0:	0903      	lsrs	r3, r0, #4
 80002e2:	428b      	cmp	r3, r1
 80002e4:	d301      	bcc.n	80002ea <__divsi3+0xd2>
 80002e6:	010b      	lsls	r3, r1, #4
 80002e8:	1ac0      	subs	r0, r0, r3
 80002ea:	4152      	adcs	r2, r2
 80002ec:	08c3      	lsrs	r3, r0, #3
 80002ee:	428b      	cmp	r3, r1
 80002f0:	d301      	bcc.n	80002f6 <__divsi3+0xde>
 80002f2:	00cb      	lsls	r3, r1, #3
 80002f4:	1ac0      	subs	r0, r0, r3
 80002f6:	4152      	adcs	r2, r2
 80002f8:	0883      	lsrs	r3, r0, #2
 80002fa:	428b      	cmp	r3, r1
 80002fc:	d301      	bcc.n	8000302 <__divsi3+0xea>
 80002fe:	008b      	lsls	r3, r1, #2
 8000300:	1ac0      	subs	r0, r0, r3
 8000302:	4152      	adcs	r2, r2
 8000304:	0843      	lsrs	r3, r0, #1
 8000306:	428b      	cmp	r3, r1
 8000308:	d301      	bcc.n	800030e <__divsi3+0xf6>
 800030a:	004b      	lsls	r3, r1, #1
 800030c:	1ac0      	subs	r0, r0, r3
 800030e:	4152      	adcs	r2, r2
 8000310:	1a41      	subs	r1, r0, r1
 8000312:	d200      	bcs.n	8000316 <__divsi3+0xfe>
 8000314:	4601      	mov	r1, r0
 8000316:	4152      	adcs	r2, r2
 8000318:	4610      	mov	r0, r2
 800031a:	4770      	bx	lr
 800031c:	e05d      	b.n	80003da <__divsi3+0x1c2>
 800031e:	0fca      	lsrs	r2, r1, #31
 8000320:	d000      	beq.n	8000324 <__divsi3+0x10c>
 8000322:	4249      	negs	r1, r1
 8000324:	1003      	asrs	r3, r0, #32
 8000326:	d300      	bcc.n	800032a <__divsi3+0x112>
 8000328:	4240      	negs	r0, r0
 800032a:	4053      	eors	r3, r2
 800032c:	2200      	movs	r2, #0
 800032e:	469c      	mov	ip, r3
 8000330:	0903      	lsrs	r3, r0, #4
 8000332:	428b      	cmp	r3, r1
 8000334:	d32d      	bcc.n	8000392 <__divsi3+0x17a>
 8000336:	0a03      	lsrs	r3, r0, #8
 8000338:	428b      	cmp	r3, r1
 800033a:	d312      	bcc.n	8000362 <__divsi3+0x14a>
 800033c:	22fc      	movs	r2, #252	; 0xfc
 800033e:	0189      	lsls	r1, r1, #6
 8000340:	ba12      	rev	r2, r2
 8000342:	0a03      	lsrs	r3, r0, #8
 8000344:	428b      	cmp	r3, r1
 8000346:	d30c      	bcc.n	8000362 <__divsi3+0x14a>
 8000348:	0189      	lsls	r1, r1, #6
 800034a:	1192      	asrs	r2, r2, #6
 800034c:	428b      	cmp	r3, r1
 800034e:	d308      	bcc.n	8000362 <__divsi3+0x14a>
 8000350:	0189      	lsls	r1, r1, #6
 8000352:	1192      	asrs	r2, r2, #6
 8000354:	428b      	cmp	r3, r1
 8000356:	d304      	bcc.n	8000362 <__divsi3+0x14a>
 8000358:	0189      	lsls	r1, r1, #6
 800035a:	d03a      	beq.n	80003d2 <__divsi3+0x1ba>
 800035c:	1192      	asrs	r2, r2, #6
 800035e:	e000      	b.n	8000362 <__divsi3+0x14a>
 8000360:	0989      	lsrs	r1, r1, #6
 8000362:	09c3      	lsrs	r3, r0, #7
 8000364:	428b      	cmp	r3, r1
 8000366:	d301      	bcc.n	800036c <__divsi3+0x154>
 8000368:	01cb      	lsls	r3, r1, #7
 800036a:	1ac0      	subs	r0, r0, r3
 800036c:	4152      	adcs	r2, r2
 800036e:	0983      	lsrs	r3, r0, #6
 8000370:	428b      	cmp	r3, r1
 8000372:	d301      	bcc.n	8000378 <__divsi3+0x160>
 8000374:	018b      	lsls	r3, r1, #6
 8000376:	1ac0      	subs	r0, r0, r3
 8000378:	4152      	adcs	r2, r2
 800037a:	0943      	lsrs	r3, r0, #5
 800037c:	428b      	cmp	r3, r1
 800037e:	d301      	bcc.n	8000384 <__divsi3+0x16c>
 8000380:	014b      	lsls	r3, r1, #5
 8000382:	1ac0      	subs	r0, r0, r3
 8000384:	4152      	adcs	r2, r2
 8000386:	0903      	lsrs	r3, r0, #4
 8000388:	428b      	cmp	r3, r1
 800038a:	d301      	bcc.n	8000390 <__divsi3+0x178>
 800038c:	010b      	lsls	r3, r1, #4
 800038e:	1ac0      	subs	r0, r0, r3
 8000390:	4152      	adcs	r2, r2
 8000392:	08c3      	lsrs	r3, r0, #3
 8000394:	428b      	cmp	r3, r1
 8000396:	d301      	bcc.n	800039c <__divsi3+0x184>
 8000398:	00cb      	lsls	r3, r1, #3
 800039a:	1ac0      	subs	r0, r0, r3
 800039c:	4152      	adcs	r2, r2
 800039e:	0883      	lsrs	r3, r0, #2
 80003a0:	428b      	cmp	r3, r1
 80003a2:	d301      	bcc.n	80003a8 <__divsi3+0x190>
 80003a4:	008b      	lsls	r3, r1, #2
 80003a6:	1ac0      	subs	r0, r0, r3
 80003a8:	4152      	adcs	r2, r2
 80003aa:	d2d9      	bcs.n	8000360 <__divsi3+0x148>
 80003ac:	0843      	lsrs	r3, r0, #1
 80003ae:	428b      	cmp	r3, r1
 80003b0:	d301      	bcc.n	80003b6 <__divsi3+0x19e>
 80003b2:	004b      	lsls	r3, r1, #1
 80003b4:	1ac0      	subs	r0, r0, r3
 80003b6:	4152      	adcs	r2, r2
 80003b8:	1a41      	subs	r1, r0, r1
 80003ba:	d200      	bcs.n	80003be <__divsi3+0x1a6>
 80003bc:	4601      	mov	r1, r0
 80003be:	4663      	mov	r3, ip
 80003c0:	4152      	adcs	r2, r2
 80003c2:	105b      	asrs	r3, r3, #1
 80003c4:	4610      	mov	r0, r2
 80003c6:	d301      	bcc.n	80003cc <__divsi3+0x1b4>
 80003c8:	4240      	negs	r0, r0
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	d500      	bpl.n	80003d0 <__divsi3+0x1b8>
 80003ce:	4249      	negs	r1, r1
 80003d0:	4770      	bx	lr
 80003d2:	4663      	mov	r3, ip
 80003d4:	105b      	asrs	r3, r3, #1
 80003d6:	d300      	bcc.n	80003da <__divsi3+0x1c2>
 80003d8:	4240      	negs	r0, r0
 80003da:	b501      	push	{r0, lr}
 80003dc:	2000      	movs	r0, #0
 80003de:	f000 f805 	bl	80003ec <__aeabi_idiv0>
 80003e2:	bd02      	pop	{r1, pc}

080003e4 <__aeabi_idivmod>:
 80003e4:	2900      	cmp	r1, #0
 80003e6:	d0f8      	beq.n	80003da <__divsi3+0x1c2>
 80003e8:	e716      	b.n	8000218 <__divsi3>
 80003ea:	4770      	bx	lr

080003ec <__aeabi_idiv0>:
 80003ec:	4770      	bx	lr
 80003ee:	46c0      	nop			; (mov r8, r8)

080003f0 <__aeabi_uldivmod>:
 80003f0:	2b00      	cmp	r3, #0
 80003f2:	d111      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f4:	2a00      	cmp	r2, #0
 80003f6:	d10f      	bne.n	8000418 <__aeabi_uldivmod+0x28>
 80003f8:	2900      	cmp	r1, #0
 80003fa:	d100      	bne.n	80003fe <__aeabi_uldivmod+0xe>
 80003fc:	2800      	cmp	r0, #0
 80003fe:	d002      	beq.n	8000406 <__aeabi_uldivmod+0x16>
 8000400:	2100      	movs	r1, #0
 8000402:	43c9      	mvns	r1, r1
 8000404:	0008      	movs	r0, r1
 8000406:	b407      	push	{r0, r1, r2}
 8000408:	4802      	ldr	r0, [pc, #8]	; (8000414 <__aeabi_uldivmod+0x24>)
 800040a:	a102      	add	r1, pc, #8	; (adr r1, 8000414 <__aeabi_uldivmod+0x24>)
 800040c:	1840      	adds	r0, r0, r1
 800040e:	9002      	str	r0, [sp, #8]
 8000410:	bd03      	pop	{r0, r1, pc}
 8000412:	46c0      	nop			; (mov r8, r8)
 8000414:	ffffffd9 	.word	0xffffffd9
 8000418:	b403      	push	{r0, r1}
 800041a:	4668      	mov	r0, sp
 800041c:	b501      	push	{r0, lr}
 800041e:	9802      	ldr	r0, [sp, #8]
 8000420:	f000 f806 	bl	8000430 <__udivmoddi4>
 8000424:	9b01      	ldr	r3, [sp, #4]
 8000426:	469e      	mov	lr, r3
 8000428:	b002      	add	sp, #8
 800042a:	bc0c      	pop	{r2, r3}
 800042c:	4770      	bx	lr
 800042e:	46c0      	nop			; (mov r8, r8)

08000430 <__udivmoddi4>:
 8000430:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000432:	4657      	mov	r7, sl
 8000434:	464e      	mov	r6, r9
 8000436:	4645      	mov	r5, r8
 8000438:	46de      	mov	lr, fp
 800043a:	b5e0      	push	{r5, r6, r7, lr}
 800043c:	0004      	movs	r4, r0
 800043e:	000d      	movs	r5, r1
 8000440:	4692      	mov	sl, r2
 8000442:	4699      	mov	r9, r3
 8000444:	b083      	sub	sp, #12
 8000446:	428b      	cmp	r3, r1
 8000448:	d830      	bhi.n	80004ac <__udivmoddi4+0x7c>
 800044a:	d02d      	beq.n	80004a8 <__udivmoddi4+0x78>
 800044c:	4649      	mov	r1, r9
 800044e:	4650      	mov	r0, sl
 8000450:	f000 f8ba 	bl	80005c8 <__clzdi2>
 8000454:	0029      	movs	r1, r5
 8000456:	0006      	movs	r6, r0
 8000458:	0020      	movs	r0, r4
 800045a:	f000 f8b5 	bl	80005c8 <__clzdi2>
 800045e:	1a33      	subs	r3, r6, r0
 8000460:	4698      	mov	r8, r3
 8000462:	3b20      	subs	r3, #32
 8000464:	d434      	bmi.n	80004d0 <__udivmoddi4+0xa0>
 8000466:	469b      	mov	fp, r3
 8000468:	4653      	mov	r3, sl
 800046a:	465a      	mov	r2, fp
 800046c:	4093      	lsls	r3, r2
 800046e:	4642      	mov	r2, r8
 8000470:	001f      	movs	r7, r3
 8000472:	4653      	mov	r3, sl
 8000474:	4093      	lsls	r3, r2
 8000476:	001e      	movs	r6, r3
 8000478:	42af      	cmp	r7, r5
 800047a:	d83b      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800047c:	42af      	cmp	r7, r5
 800047e:	d100      	bne.n	8000482 <__udivmoddi4+0x52>
 8000480:	e079      	b.n	8000576 <__udivmoddi4+0x146>
 8000482:	465b      	mov	r3, fp
 8000484:	1ba4      	subs	r4, r4, r6
 8000486:	41bd      	sbcs	r5, r7
 8000488:	2b00      	cmp	r3, #0
 800048a:	da00      	bge.n	800048e <__udivmoddi4+0x5e>
 800048c:	e076      	b.n	800057c <__udivmoddi4+0x14c>
 800048e:	2200      	movs	r2, #0
 8000490:	2300      	movs	r3, #0
 8000492:	9200      	str	r2, [sp, #0]
 8000494:	9301      	str	r3, [sp, #4]
 8000496:	2301      	movs	r3, #1
 8000498:	465a      	mov	r2, fp
 800049a:	4093      	lsls	r3, r2
 800049c:	9301      	str	r3, [sp, #4]
 800049e:	2301      	movs	r3, #1
 80004a0:	4642      	mov	r2, r8
 80004a2:	4093      	lsls	r3, r2
 80004a4:	9300      	str	r3, [sp, #0]
 80004a6:	e029      	b.n	80004fc <__udivmoddi4+0xcc>
 80004a8:	4282      	cmp	r2, r0
 80004aa:	d9cf      	bls.n	800044c <__udivmoddi4+0x1c>
 80004ac:	2200      	movs	r2, #0
 80004ae:	2300      	movs	r3, #0
 80004b0:	9200      	str	r2, [sp, #0]
 80004b2:	9301      	str	r3, [sp, #4]
 80004b4:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80004b6:	2b00      	cmp	r3, #0
 80004b8:	d001      	beq.n	80004be <__udivmoddi4+0x8e>
 80004ba:	601c      	str	r4, [r3, #0]
 80004bc:	605d      	str	r5, [r3, #4]
 80004be:	9800      	ldr	r0, [sp, #0]
 80004c0:	9901      	ldr	r1, [sp, #4]
 80004c2:	b003      	add	sp, #12
 80004c4:	bcf0      	pop	{r4, r5, r6, r7}
 80004c6:	46bb      	mov	fp, r7
 80004c8:	46b2      	mov	sl, r6
 80004ca:	46a9      	mov	r9, r5
 80004cc:	46a0      	mov	r8, r4
 80004ce:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80004d0:	4642      	mov	r2, r8
 80004d2:	469b      	mov	fp, r3
 80004d4:	2320      	movs	r3, #32
 80004d6:	1a9b      	subs	r3, r3, r2
 80004d8:	4652      	mov	r2, sl
 80004da:	40da      	lsrs	r2, r3
 80004dc:	4641      	mov	r1, r8
 80004de:	0013      	movs	r3, r2
 80004e0:	464a      	mov	r2, r9
 80004e2:	408a      	lsls	r2, r1
 80004e4:	0017      	movs	r7, r2
 80004e6:	4642      	mov	r2, r8
 80004e8:	431f      	orrs	r7, r3
 80004ea:	4653      	mov	r3, sl
 80004ec:	4093      	lsls	r3, r2
 80004ee:	001e      	movs	r6, r3
 80004f0:	42af      	cmp	r7, r5
 80004f2:	d9c3      	bls.n	800047c <__udivmoddi4+0x4c>
 80004f4:	2200      	movs	r2, #0
 80004f6:	2300      	movs	r3, #0
 80004f8:	9200      	str	r2, [sp, #0]
 80004fa:	9301      	str	r3, [sp, #4]
 80004fc:	4643      	mov	r3, r8
 80004fe:	2b00      	cmp	r3, #0
 8000500:	d0d8      	beq.n	80004b4 <__udivmoddi4+0x84>
 8000502:	07fb      	lsls	r3, r7, #31
 8000504:	0872      	lsrs	r2, r6, #1
 8000506:	431a      	orrs	r2, r3
 8000508:	4646      	mov	r6, r8
 800050a:	087b      	lsrs	r3, r7, #1
 800050c:	e00e      	b.n	800052c <__udivmoddi4+0xfc>
 800050e:	42ab      	cmp	r3, r5
 8000510:	d101      	bne.n	8000516 <__udivmoddi4+0xe6>
 8000512:	42a2      	cmp	r2, r4
 8000514:	d80c      	bhi.n	8000530 <__udivmoddi4+0x100>
 8000516:	1aa4      	subs	r4, r4, r2
 8000518:	419d      	sbcs	r5, r3
 800051a:	2001      	movs	r0, #1
 800051c:	1924      	adds	r4, r4, r4
 800051e:	416d      	adcs	r5, r5
 8000520:	2100      	movs	r1, #0
 8000522:	3e01      	subs	r6, #1
 8000524:	1824      	adds	r4, r4, r0
 8000526:	414d      	adcs	r5, r1
 8000528:	2e00      	cmp	r6, #0
 800052a:	d006      	beq.n	800053a <__udivmoddi4+0x10a>
 800052c:	42ab      	cmp	r3, r5
 800052e:	d9ee      	bls.n	800050e <__udivmoddi4+0xde>
 8000530:	3e01      	subs	r6, #1
 8000532:	1924      	adds	r4, r4, r4
 8000534:	416d      	adcs	r5, r5
 8000536:	2e00      	cmp	r6, #0
 8000538:	d1f8      	bne.n	800052c <__udivmoddi4+0xfc>
 800053a:	9800      	ldr	r0, [sp, #0]
 800053c:	9901      	ldr	r1, [sp, #4]
 800053e:	465b      	mov	r3, fp
 8000540:	1900      	adds	r0, r0, r4
 8000542:	4169      	adcs	r1, r5
 8000544:	2b00      	cmp	r3, #0
 8000546:	db24      	blt.n	8000592 <__udivmoddi4+0x162>
 8000548:	002b      	movs	r3, r5
 800054a:	465a      	mov	r2, fp
 800054c:	4644      	mov	r4, r8
 800054e:	40d3      	lsrs	r3, r2
 8000550:	002a      	movs	r2, r5
 8000552:	40e2      	lsrs	r2, r4
 8000554:	001c      	movs	r4, r3
 8000556:	465b      	mov	r3, fp
 8000558:	0015      	movs	r5, r2
 800055a:	2b00      	cmp	r3, #0
 800055c:	db2a      	blt.n	80005b4 <__udivmoddi4+0x184>
 800055e:	0026      	movs	r6, r4
 8000560:	409e      	lsls	r6, r3
 8000562:	0033      	movs	r3, r6
 8000564:	0026      	movs	r6, r4
 8000566:	4647      	mov	r7, r8
 8000568:	40be      	lsls	r6, r7
 800056a:	0032      	movs	r2, r6
 800056c:	1a80      	subs	r0, r0, r2
 800056e:	4199      	sbcs	r1, r3
 8000570:	9000      	str	r0, [sp, #0]
 8000572:	9101      	str	r1, [sp, #4]
 8000574:	e79e      	b.n	80004b4 <__udivmoddi4+0x84>
 8000576:	42a3      	cmp	r3, r4
 8000578:	d8bc      	bhi.n	80004f4 <__udivmoddi4+0xc4>
 800057a:	e782      	b.n	8000482 <__udivmoddi4+0x52>
 800057c:	4642      	mov	r2, r8
 800057e:	2320      	movs	r3, #32
 8000580:	2100      	movs	r1, #0
 8000582:	1a9b      	subs	r3, r3, r2
 8000584:	2200      	movs	r2, #0
 8000586:	9100      	str	r1, [sp, #0]
 8000588:	9201      	str	r2, [sp, #4]
 800058a:	2201      	movs	r2, #1
 800058c:	40da      	lsrs	r2, r3
 800058e:	9201      	str	r2, [sp, #4]
 8000590:	e785      	b.n	800049e <__udivmoddi4+0x6e>
 8000592:	4642      	mov	r2, r8
 8000594:	2320      	movs	r3, #32
 8000596:	1a9b      	subs	r3, r3, r2
 8000598:	002a      	movs	r2, r5
 800059a:	4646      	mov	r6, r8
 800059c:	409a      	lsls	r2, r3
 800059e:	0023      	movs	r3, r4
 80005a0:	40f3      	lsrs	r3, r6
 80005a2:	4644      	mov	r4, r8
 80005a4:	4313      	orrs	r3, r2
 80005a6:	002a      	movs	r2, r5
 80005a8:	40e2      	lsrs	r2, r4
 80005aa:	001c      	movs	r4, r3
 80005ac:	465b      	mov	r3, fp
 80005ae:	0015      	movs	r5, r2
 80005b0:	2b00      	cmp	r3, #0
 80005b2:	dad4      	bge.n	800055e <__udivmoddi4+0x12e>
 80005b4:	4642      	mov	r2, r8
 80005b6:	002f      	movs	r7, r5
 80005b8:	2320      	movs	r3, #32
 80005ba:	0026      	movs	r6, r4
 80005bc:	4097      	lsls	r7, r2
 80005be:	1a9b      	subs	r3, r3, r2
 80005c0:	40de      	lsrs	r6, r3
 80005c2:	003b      	movs	r3, r7
 80005c4:	4333      	orrs	r3, r6
 80005c6:	e7cd      	b.n	8000564 <__udivmoddi4+0x134>

080005c8 <__clzdi2>:
 80005c8:	b510      	push	{r4, lr}
 80005ca:	2900      	cmp	r1, #0
 80005cc:	d103      	bne.n	80005d6 <__clzdi2+0xe>
 80005ce:	f000 f807 	bl	80005e0 <__clzsi2>
 80005d2:	3020      	adds	r0, #32
 80005d4:	e002      	b.n	80005dc <__clzdi2+0x14>
 80005d6:	0008      	movs	r0, r1
 80005d8:	f000 f802 	bl	80005e0 <__clzsi2>
 80005dc:	bd10      	pop	{r4, pc}
 80005de:	46c0      	nop			; (mov r8, r8)

080005e0 <__clzsi2>:
 80005e0:	211c      	movs	r1, #28
 80005e2:	2301      	movs	r3, #1
 80005e4:	041b      	lsls	r3, r3, #16
 80005e6:	4298      	cmp	r0, r3
 80005e8:	d301      	bcc.n	80005ee <__clzsi2+0xe>
 80005ea:	0c00      	lsrs	r0, r0, #16
 80005ec:	3910      	subs	r1, #16
 80005ee:	0a1b      	lsrs	r3, r3, #8
 80005f0:	4298      	cmp	r0, r3
 80005f2:	d301      	bcc.n	80005f8 <__clzsi2+0x18>
 80005f4:	0a00      	lsrs	r0, r0, #8
 80005f6:	3908      	subs	r1, #8
 80005f8:	091b      	lsrs	r3, r3, #4
 80005fa:	4298      	cmp	r0, r3
 80005fc:	d301      	bcc.n	8000602 <__clzsi2+0x22>
 80005fe:	0900      	lsrs	r0, r0, #4
 8000600:	3904      	subs	r1, #4
 8000602:	a202      	add	r2, pc, #8	; (adr r2, 800060c <__clzsi2+0x2c>)
 8000604:	5c10      	ldrb	r0, [r2, r0]
 8000606:	1840      	adds	r0, r0, r1
 8000608:	4770      	bx	lr
 800060a:	46c0      	nop			; (mov r8, r8)
 800060c:	02020304 	.word	0x02020304
 8000610:	01010101 	.word	0x01010101
	...

0800061c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800061c:	b580      	push	{r7, lr}
 800061e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000620:	f000 fcf4 	bl	800100c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000624:	f000 f8d6 	bl	80007d4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000628:	f000 fac0 	bl	8000bac <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800062c:	f000 fa70 	bl	8000b10 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8000630:	f000 f998 	bl	8000964 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000634:	f000 f92c 	bl	8000890 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, MotorR_PWM);
 8000638:	4b5f      	ldr	r3, [pc, #380]	; (80007b8 <main+0x19c>)
 800063a:	2100      	movs	r1, #0
 800063c:	0018      	movs	r0, r3
 800063e:	f002 ff43 	bl	80034c8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, MotorL_PWM);
 8000642:	4b5d      	ldr	r3, [pc, #372]	; (80007b8 <main+0x19c>)
 8000644:	2104      	movs	r1, #4
 8000646:	0018      	movs	r0, r3
 8000648:	f002 ff3e 	bl	80034c8 <HAL_TIM_PWM_Start>

  HAL_ADC_Start(&hadc1);
 800064c:	4b5b      	ldr	r3, [pc, #364]	; (80007bc <main+0x1a0>)
 800064e:	0018      	movs	r0, r3
 8000650:	f001 f88a 	bl	8001768 <HAL_ADC_Start>

  sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8000654:	4b5a      	ldr	r3, [pc, #360]	; (80007c0 <main+0x1a4>)
 8000656:	2200      	movs	r2, #0
 8000658:	605a      	str	r2, [r3, #4]
  sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 800065a:	4b59      	ldr	r3, [pc, #356]	; (80007c0 <main+0x1a4>)
 800065c:	2200      	movs	r2, #0
 800065e:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  sConfigPrivate.Channel = ADC_CHANNEL_0;
 8000660:	4b57      	ldr	r3, [pc, #348]	; (80007c0 <main+0x1a4>)
 8000662:	2201      	movs	r2, #1
 8000664:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 8000666:	4a56      	ldr	r2, [pc, #344]	; (80007c0 <main+0x1a4>)
 8000668:	4b54      	ldr	r3, [pc, #336]	; (80007bc <main+0x1a0>)
 800066a:	0011      	movs	r1, r2
 800066c:	0018      	movs	r0, r3
 800066e:	f001 f9a5 	bl	80019bc <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 8000672:	4b52      	ldr	r3, [pc, #328]	; (80007bc <main+0x1a0>)
 8000674:	0018      	movs	r0, r3
 8000676:	f001 f877 	bl	8001768 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 800067a:	23fa      	movs	r3, #250	; 0xfa
 800067c:	009a      	lsls	r2, r3, #2
 800067e:	4b4f      	ldr	r3, [pc, #316]	; (80007bc <main+0x1a0>)
 8000680:	0011      	movs	r1, r2
 8000682:	0018      	movs	r0, r3
 8000684:	f001 f8fa 	bl	800187c <HAL_ADC_PollForConversion>
	  Digital_array[0] = HAL_ADC_GetValue(&hadc1)<3200;
 8000688:	4b4c      	ldr	r3, [pc, #304]	; (80007bc <main+0x1a0>)
 800068a:	0018      	movs	r0, r3
 800068c:	f001 f98a 	bl	80019a4 <HAL_ADC_GetValue>
 8000690:	0002      	movs	r2, r0
 8000692:	23c8      	movs	r3, #200	; 0xc8
 8000694:	011b      	lsls	r3, r3, #4
 8000696:	429a      	cmp	r2, r3
 8000698:	419b      	sbcs	r3, r3
 800069a:	425b      	negs	r3, r3
 800069c:	b2db      	uxtb	r3, r3
 800069e:	001a      	movs	r2, r3
 80006a0:	4b48      	ldr	r3, [pc, #288]	; (80007c4 <main+0x1a8>)
 80006a2:	601a      	str	r2, [r3, #0]
	  HAL_ADC_Stop(&hadc1);
 80006a4:	4b45      	ldr	r3, [pc, #276]	; (80007bc <main+0x1a0>)
 80006a6:	0018      	movs	r0, r3
 80006a8:	f001 f8ac 	bl	8001804 <HAL_ADC_Stop>

	  sConfigPrivate.Channel = ADC_CHANNEL_1;
 80006ac:	4b44      	ldr	r3, [pc, #272]	; (80007c0 <main+0x1a4>)
 80006ae:	4a46      	ldr	r2, [pc, #280]	; (80007c8 <main+0x1ac>)
 80006b0:	601a      	str	r2, [r3, #0]
	  HAL_ADC_ConfigChannel(&hadc1, &sConfigPrivate);
 80006b2:	4a43      	ldr	r2, [pc, #268]	; (80007c0 <main+0x1a4>)
 80006b4:	4b41      	ldr	r3, [pc, #260]	; (80007bc <main+0x1a0>)
 80006b6:	0011      	movs	r1, r2
 80006b8:	0018      	movs	r0, r3
 80006ba:	f001 f97f 	bl	80019bc <HAL_ADC_ConfigChannel>

	  HAL_ADC_Start(&hadc1);
 80006be:	4b3f      	ldr	r3, [pc, #252]	; (80007bc <main+0x1a0>)
 80006c0:	0018      	movs	r0, r3
 80006c2:	f001 f851 	bl	8001768 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1,1000);
 80006c6:	23fa      	movs	r3, #250	; 0xfa
 80006c8:	009a      	lsls	r2, r3, #2
 80006ca:	4b3c      	ldr	r3, [pc, #240]	; (80007bc <main+0x1a0>)
 80006cc:	0011      	movs	r1, r2
 80006ce:	0018      	movs	r0, r3
 80006d0:	f001 f8d4 	bl	800187c <HAL_ADC_PollForConversion>
	  Digital_array[1] = HAL_ADC_GetValue(&hadc1)<3200;
 80006d4:	4b39      	ldr	r3, [pc, #228]	; (80007bc <main+0x1a0>)
 80006d6:	0018      	movs	r0, r3
 80006d8:	f001 f964 	bl	80019a4 <HAL_ADC_GetValue>
 80006dc:	0002      	movs	r2, r0
 80006de:	23c8      	movs	r3, #200	; 0xc8
 80006e0:	011b      	lsls	r3, r3, #4
 80006e2:	429a      	cmp	r2, r3
 80006e4:	419b      	sbcs	r3, r3
 80006e6:	425b      	negs	r3, r3
 80006e8:	b2db      	uxtb	r3, r3
 80006ea:	001a      	movs	r2, r3
 80006ec:	4b35      	ldr	r3, [pc, #212]	; (80007c4 <main+0x1a8>)
 80006ee:	605a      	str	r2, [r3, #4]
	  HAL_ADC_Stop(&hadc1);
 80006f0:	4b32      	ldr	r3, [pc, #200]	; (80007bc <main+0x1a0>)
 80006f2:	0018      	movs	r0, r3
 80006f4:	f001 f886 	bl	8001804 <HAL_ADC_Stop>

	  __HAL_TIM_SET_COMPARE(&htim1, MotorR_PWM, 200);
 80006f8:	4b2f      	ldr	r3, [pc, #188]	; (80007b8 <main+0x19c>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	22c8      	movs	r2, #200	; 0xc8
 80006fe:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1, MotorL_PWM, 200);
 8000700:	4b2d      	ldr	r3, [pc, #180]	; (80007b8 <main+0x19c>)
 8000702:	681b      	ldr	r3, [r3, #0]
 8000704:	22c8      	movs	r2, #200	; 0xc8
 8000706:	639a      	str	r2, [r3, #56]	; 0x38

	  if (Digital_array[0] == Digital_array[1]){
 8000708:	4b2e      	ldr	r3, [pc, #184]	; (80007c4 <main+0x1a8>)
 800070a:	681a      	ldr	r2, [r3, #0]
 800070c:	4b2d      	ldr	r3, [pc, #180]	; (80007c4 <main+0x1a8>)
 800070e:	685b      	ldr	r3, [r3, #4]
 8000710:	429a      	cmp	r2, r3
 8000712:	d119      	bne.n	8000748 <main+0x12c>
		  	  // Set Right motor forward
		  	  HAL_GPIO_WritePin(MotorR_A_GPIO_Port, MotorR_A_Pin, GPIO_PIN_RESET);
 8000714:	4b2d      	ldr	r3, [pc, #180]	; (80007cc <main+0x1b0>)
 8000716:	2200      	movs	r2, #0
 8000718:	2108      	movs	r1, #8
 800071a:	0018      	movs	r0, r3
 800071c:	f001 fe6c 	bl	80023f8 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(MotorR_B_GPIO_Port, MotorR_B_Pin, GPIO_PIN_SET);
 8000720:	4b2a      	ldr	r3, [pc, #168]	; (80007cc <main+0x1b0>)
 8000722:	2201      	movs	r2, #1
 8000724:	2104      	movs	r1, #4
 8000726:	0018      	movs	r0, r3
 8000728:	f001 fe66 	bl	80023f8 <HAL_GPIO_WritePin>

		  	  // Set Left motor forward
		  	  HAL_GPIO_WritePin(MotorL_A_GPIO_Port, MotorL_A_Pin, GPIO_PIN_RESET);
 800072c:	4b28      	ldr	r3, [pc, #160]	; (80007d0 <main+0x1b4>)
 800072e:	2200      	movs	r2, #0
 8000730:	2102      	movs	r1, #2
 8000732:	0018      	movs	r0, r3
 8000734:	f001 fe60 	bl	80023f8 <HAL_GPIO_WritePin>
		  	  HAL_GPIO_WritePin(MotorL_B_GPIO_Port, MotorL_B_Pin, GPIO_PIN_SET);
 8000738:	23a0      	movs	r3, #160	; 0xa0
 800073a:	05db      	lsls	r3, r3, #23
 800073c:	2201      	movs	r2, #1
 800073e:	2110      	movs	r1, #16
 8000740:	0018      	movs	r0, r3
 8000742:	f001 fe59 	bl	80023f8 <HAL_GPIO_WritePin>
 8000746:	e78b      	b.n	8000660 <main+0x44>
	  }else{
		  if(Digital_array[0] == 1){
 8000748:	4b1e      	ldr	r3, [pc, #120]	; (80007c4 <main+0x1a8>)
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	2b01      	cmp	r3, #1
 800074e:	d119      	bne.n	8000784 <main+0x168>
			  // Set Left motor forward
			  HAL_GPIO_WritePin(MotorL_A_GPIO_Port, MotorL_A_Pin, GPIO_PIN_RESET);
 8000750:	4b1f      	ldr	r3, [pc, #124]	; (80007d0 <main+0x1b4>)
 8000752:	2200      	movs	r2, #0
 8000754:	2102      	movs	r1, #2
 8000756:	0018      	movs	r0, r3
 8000758:	f001 fe4e 	bl	80023f8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MotorL_B_GPIO_Port, MotorL_B_Pin, GPIO_PIN_RESET);
 800075c:	23a0      	movs	r3, #160	; 0xa0
 800075e:	05db      	lsls	r3, r3, #23
 8000760:	2200      	movs	r2, #0
 8000762:	2110      	movs	r1, #16
 8000764:	0018      	movs	r0, r3
 8000766:	f001 fe47 	bl	80023f8 <HAL_GPIO_WritePin>

			  // Set Right motor forward
			  HAL_GPIO_WritePin(MotorR_A_GPIO_Port, MotorR_A_Pin, GPIO_PIN_RESET);
 800076a:	4b18      	ldr	r3, [pc, #96]	; (80007cc <main+0x1b0>)
 800076c:	2200      	movs	r2, #0
 800076e:	2108      	movs	r1, #8
 8000770:	0018      	movs	r0, r3
 8000772:	f001 fe41 	bl	80023f8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MotorR_B_GPIO_Port, MotorR_B_Pin, GPIO_PIN_SET);
 8000776:	4b15      	ldr	r3, [pc, #84]	; (80007cc <main+0x1b0>)
 8000778:	2201      	movs	r2, #1
 800077a:	2104      	movs	r1, #4
 800077c:	0018      	movs	r0, r3
 800077e:	f001 fe3b 	bl	80023f8 <HAL_GPIO_WritePin>
 8000782:	e76d      	b.n	8000660 <main+0x44>
		  } else{
			  // Set Left motor forward
			  HAL_GPIO_WritePin(MotorL_A_GPIO_Port, MotorL_A_Pin, GPIO_PIN_RESET);
 8000784:	4b12      	ldr	r3, [pc, #72]	; (80007d0 <main+0x1b4>)
 8000786:	2200      	movs	r2, #0
 8000788:	2102      	movs	r1, #2
 800078a:	0018      	movs	r0, r3
 800078c:	f001 fe34 	bl	80023f8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MotorL_B_GPIO_Port, MotorL_B_Pin, GPIO_PIN_SET);
 8000790:	23a0      	movs	r3, #160	; 0xa0
 8000792:	05db      	lsls	r3, r3, #23
 8000794:	2201      	movs	r2, #1
 8000796:	2110      	movs	r1, #16
 8000798:	0018      	movs	r0, r3
 800079a:	f001 fe2d 	bl	80023f8 <HAL_GPIO_WritePin>

			  // Set Right motor forward
			  HAL_GPIO_WritePin(MotorR_A_GPIO_Port, MotorR_A_Pin, GPIO_PIN_RESET);
 800079e:	4b0b      	ldr	r3, [pc, #44]	; (80007cc <main+0x1b0>)
 80007a0:	2200      	movs	r2, #0
 80007a2:	2108      	movs	r1, #8
 80007a4:	0018      	movs	r0, r3
 80007a6:	f001 fe27 	bl	80023f8 <HAL_GPIO_WritePin>
			  HAL_GPIO_WritePin(MotorR_B_GPIO_Port, MotorR_B_Pin, GPIO_PIN_RESET);
 80007aa:	4b08      	ldr	r3, [pc, #32]	; (80007cc <main+0x1b0>)
 80007ac:	2200      	movs	r2, #0
 80007ae:	2104      	movs	r1, #4
 80007b0:	0018      	movs	r0, r3
 80007b2:	f001 fe21 	bl	80023f8 <HAL_GPIO_WritePin>
	  sConfigPrivate.Channel = ADC_CHANNEL_0;
 80007b6:	e753      	b.n	8000660 <main+0x44>
 80007b8:	2000008c 	.word	0x2000008c
 80007bc:	20000028 	.word	0x20000028
 80007c0:	2000016c 	.word	0x2000016c
 80007c4:	20000178 	.word	0x20000178
 80007c8:	04000002 	.word	0x04000002
 80007cc:	50000800 	.word	0x50000800
 80007d0:	50000400 	.word	0x50000400

080007d4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b095      	sub	sp, #84	; 0x54
 80007d8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80007da:	2414      	movs	r4, #20
 80007dc:	193b      	adds	r3, r7, r4
 80007de:	0018      	movs	r0, r3
 80007e0:	233c      	movs	r3, #60	; 0x3c
 80007e2:	001a      	movs	r2, r3
 80007e4:	2100      	movs	r1, #0
 80007e6:	f004 fd5d 	bl	80052a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	0018      	movs	r0, r3
 80007ee:	2310      	movs	r3, #16
 80007f0:	001a      	movs	r2, r3
 80007f2:	2100      	movs	r1, #0
 80007f4:	f004 fd56 	bl	80052a4 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80007f8:	2380      	movs	r3, #128	; 0x80
 80007fa:	009b      	lsls	r3, r3, #2
 80007fc:	0018      	movs	r0, r3
 80007fe:	f001 fe19 	bl	8002434 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000802:	193b      	adds	r3, r7, r4
 8000804:	2202      	movs	r2, #2
 8000806:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000808:	193b      	adds	r3, r7, r4
 800080a:	2280      	movs	r2, #128	; 0x80
 800080c:	0052      	lsls	r2, r2, #1
 800080e:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000810:	0021      	movs	r1, r4
 8000812:	187b      	adds	r3, r7, r1
 8000814:	2200      	movs	r2, #0
 8000816:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000818:	187b      	adds	r3, r7, r1
 800081a:	2240      	movs	r2, #64	; 0x40
 800081c:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800081e:	187b      	adds	r3, r7, r1
 8000820:	2202      	movs	r2, #2
 8000822:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000824:	187b      	adds	r3, r7, r1
 8000826:	2202      	movs	r2, #2
 8000828:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 800082a:	187b      	adds	r3, r7, r1
 800082c:	2200      	movs	r2, #0
 800082e:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000830:	187b      	adds	r3, r7, r1
 8000832:	2208      	movs	r2, #8
 8000834:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000836:	187b      	adds	r3, r7, r1
 8000838:	2280      	movs	r2, #128	; 0x80
 800083a:	0292      	lsls	r2, r2, #10
 800083c:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 800083e:	187b      	adds	r3, r7, r1
 8000840:	2280      	movs	r2, #128	; 0x80
 8000842:	0492      	lsls	r2, r2, #18
 8000844:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000846:	187b      	adds	r3, r7, r1
 8000848:	2280      	movs	r2, #128	; 0x80
 800084a:	0592      	lsls	r2, r2, #22
 800084c:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800084e:	187b      	adds	r3, r7, r1
 8000850:	0018      	movs	r0, r3
 8000852:	f001 fe3b 	bl	80024cc <HAL_RCC_OscConfig>
 8000856:	1e03      	subs	r3, r0, #0
 8000858:	d001      	beq.n	800085e <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800085a:	f000 fa4b 	bl	8000cf4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800085e:	1d3b      	adds	r3, r7, #4
 8000860:	2207      	movs	r2, #7
 8000862:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000864:	1d3b      	adds	r3, r7, #4
 8000866:	2202      	movs	r2, #2
 8000868:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800086a:	1d3b      	adds	r3, r7, #4
 800086c:	2200      	movs	r2, #0
 800086e:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000870:	1d3b      	adds	r3, r7, #4
 8000872:	2200      	movs	r2, #0
 8000874:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000876:	1d3b      	adds	r3, r7, #4
 8000878:	2102      	movs	r1, #2
 800087a:	0018      	movs	r0, r3
 800087c:	f002 f986 	bl	8002b8c <HAL_RCC_ClockConfig>
 8000880:	1e03      	subs	r3, r0, #0
 8000882:	d001      	beq.n	8000888 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000884:	f000 fa36 	bl	8000cf4 <Error_Handler>
  }
}
 8000888:	46c0      	nop			; (mov r8, r8)
 800088a:	46bd      	mov	sp, r7
 800088c:	b015      	add	sp, #84	; 0x54
 800088e:	bd90      	pop	{r4, r7, pc}

08000890 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000890:	b580      	push	{r7, lr}
 8000892:	b084      	sub	sp, #16
 8000894:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000896:	1d3b      	adds	r3, r7, #4
 8000898:	0018      	movs	r0, r3
 800089a:	230c      	movs	r3, #12
 800089c:	001a      	movs	r2, r3
 800089e:	2100      	movs	r1, #0
 80008a0:	f004 fd00 	bl	80052a4 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80008a4:	4b2d      	ldr	r3, [pc, #180]	; (800095c <MX_ADC1_Init+0xcc>)
 80008a6:	4a2e      	ldr	r2, [pc, #184]	; (8000960 <MX_ADC1_Init+0xd0>)
 80008a8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80008aa:	4b2c      	ldr	r3, [pc, #176]	; (800095c <MX_ADC1_Init+0xcc>)
 80008ac:	2280      	movs	r2, #128	; 0x80
 80008ae:	05d2      	lsls	r2, r2, #23
 80008b0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80008b2:	4b2a      	ldr	r3, [pc, #168]	; (800095c <MX_ADC1_Init+0xcc>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_ADC1_Init+0xcc>)
 80008ba:	2200      	movs	r2, #0
 80008bc:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_ADC1_Init+0xcc>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_ADC1_Init+0xcc>)
 80008c6:	2204      	movs	r2, #4
 80008c8:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <MX_ADC1_Init+0xcc>)
 80008cc:	2200      	movs	r2, #0
 80008ce:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_ADC1_Init+0xcc>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_ADC1_Init+0xcc>)
 80008d8:	2200      	movs	r2, #0
 80008da:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_ADC1_Init+0xcc>)
 80008de:	2201      	movs	r2, #1
 80008e0:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_ADC1_Init+0xcc>)
 80008e4:	2220      	movs	r2, #32
 80008e6:	2100      	movs	r1, #0
 80008e8:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80008ea:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_ADC1_Init+0xcc>)
 80008ec:	2200      	movs	r2, #0
 80008ee:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80008f0:	4b1a      	ldr	r3, [pc, #104]	; (800095c <MX_ADC1_Init+0xcc>)
 80008f2:	2200      	movs	r2, #0
 80008f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80008f6:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_ADC1_Init+0xcc>)
 80008f8:	222c      	movs	r2, #44	; 0x2c
 80008fa:	2100      	movs	r1, #0
 80008fc:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80008fe:	4b17      	ldr	r3, [pc, #92]	; (800095c <MX_ADC1_Init+0xcc>)
 8000900:	2200      	movs	r2, #0
 8000902:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000904:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_ADC1_Init+0xcc>)
 8000906:	2200      	movs	r2, #0
 8000908:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 800090a:	4b14      	ldr	r3, [pc, #80]	; (800095c <MX_ADC1_Init+0xcc>)
 800090c:	2200      	movs	r2, #0
 800090e:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000910:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_ADC1_Init+0xcc>)
 8000912:	223c      	movs	r2, #60	; 0x3c
 8000914:	2100      	movs	r1, #0
 8000916:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_ADC1_Init+0xcc>)
 800091a:	2200      	movs	r2, #0
 800091c:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_ADC1_Init+0xcc>)
 8000920:	0018      	movs	r0, r3
 8000922:	f000 fd79 	bl	8001418 <HAL_ADC_Init>
 8000926:	1e03      	subs	r3, r0, #0
 8000928:	d001      	beq.n	800092e <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 800092a:	f000 f9e3 	bl	8000cf4 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 800092e:	1d3b      	adds	r3, r7, #4
 8000930:	2201      	movs	r2, #1
 8000932:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000934:	1d3b      	adds	r3, r7, #4
 8000936:	2200      	movs	r2, #0
 8000938:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 800093a:	1d3b      	adds	r3, r7, #4
 800093c:	2200      	movs	r2, #0
 800093e:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000940:	1d3a      	adds	r2, r7, #4
 8000942:	4b06      	ldr	r3, [pc, #24]	; (800095c <MX_ADC1_Init+0xcc>)
 8000944:	0011      	movs	r1, r2
 8000946:	0018      	movs	r0, r3
 8000948:	f001 f838 	bl	80019bc <HAL_ADC_ConfigChannel>
 800094c:	1e03      	subs	r3, r0, #0
 800094e:	d001      	beq.n	8000954 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000950:	f000 f9d0 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000954:	46c0      	nop			; (mov r8, r8)
 8000956:	46bd      	mov	sp, r7
 8000958:	b004      	add	sp, #16
 800095a:	bd80      	pop	{r7, pc}
 800095c:	20000028 	.word	0x20000028
 8000960:	40012400 	.word	0x40012400

08000964 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	b09c      	sub	sp, #112	; 0x70
 8000968:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800096a:	2360      	movs	r3, #96	; 0x60
 800096c:	18fb      	adds	r3, r7, r3
 800096e:	0018      	movs	r0, r3
 8000970:	2310      	movs	r3, #16
 8000972:	001a      	movs	r2, r3
 8000974:	2100      	movs	r1, #0
 8000976:	f004 fc95 	bl	80052a4 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800097a:	2354      	movs	r3, #84	; 0x54
 800097c:	18fb      	adds	r3, r7, r3
 800097e:	0018      	movs	r0, r3
 8000980:	230c      	movs	r3, #12
 8000982:	001a      	movs	r2, r3
 8000984:	2100      	movs	r1, #0
 8000986:	f004 fc8d 	bl	80052a4 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800098a:	2338      	movs	r3, #56	; 0x38
 800098c:	18fb      	adds	r3, r7, r3
 800098e:	0018      	movs	r0, r3
 8000990:	231c      	movs	r3, #28
 8000992:	001a      	movs	r2, r3
 8000994:	2100      	movs	r1, #0
 8000996:	f004 fc85 	bl	80052a4 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800099a:	1d3b      	adds	r3, r7, #4
 800099c:	0018      	movs	r0, r3
 800099e:	2334      	movs	r3, #52	; 0x34
 80009a0:	001a      	movs	r2, r3
 80009a2:	2100      	movs	r1, #0
 80009a4:	f004 fc7e 	bl	80052a4 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80009a8:	4b56      	ldr	r3, [pc, #344]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 80009aa:	4a57      	ldr	r2, [pc, #348]	; (8000b08 <MX_TIM1_Init+0x1a4>)
 80009ac:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 80009ae:	4b55      	ldr	r3, [pc, #340]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 80009b0:	227f      	movs	r2, #127	; 0x7f
 80009b2:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80009b4:	4b53      	ldr	r3, [pc, #332]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 80009b6:	2200      	movs	r2, #0
 80009b8:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625;
 80009ba:	4b52      	ldr	r3, [pc, #328]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 80009bc:	4a53      	ldr	r2, [pc, #332]	; (8000b0c <MX_TIM1_Init+0x1a8>)
 80009be:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80009c0:	4b50      	ldr	r3, [pc, #320]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 80009c2:	2200      	movs	r2, #0
 80009c4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80009c6:	4b4f      	ldr	r3, [pc, #316]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 80009c8:	2200      	movs	r2, #0
 80009ca:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80009cc:	4b4d      	ldr	r3, [pc, #308]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 80009ce:	2200      	movs	r2, #0
 80009d0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80009d2:	4b4c      	ldr	r3, [pc, #304]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 80009d4:	0018      	movs	r0, r3
 80009d6:	f002 fcbf 	bl	8003358 <HAL_TIM_Base_Init>
 80009da:	1e03      	subs	r3, r0, #0
 80009dc:	d001      	beq.n	80009e2 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80009de:	f000 f989 	bl	8000cf4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80009e2:	2160      	movs	r1, #96	; 0x60
 80009e4:	187b      	adds	r3, r7, r1
 80009e6:	2280      	movs	r2, #128	; 0x80
 80009e8:	0152      	lsls	r2, r2, #5
 80009ea:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80009ec:	187a      	adds	r2, r7, r1
 80009ee:	4b45      	ldr	r3, [pc, #276]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 80009f0:	0011      	movs	r1, r2
 80009f2:	0018      	movs	r0, r3
 80009f4:	f002 ff58 	bl	80038a8 <HAL_TIM_ConfigClockSource>
 80009f8:	1e03      	subs	r3, r0, #0
 80009fa:	d001      	beq.n	8000a00 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80009fc:	f000 f97a 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000a00:	4b40      	ldr	r3, [pc, #256]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 8000a02:	0018      	movs	r0, r3
 8000a04:	f002 fd00 	bl	8003408 <HAL_TIM_PWM_Init>
 8000a08:	1e03      	subs	r3, r0, #0
 8000a0a:	d001      	beq.n	8000a10 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000a0c:	f000 f972 	bl	8000cf4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000a10:	2154      	movs	r1, #84	; 0x54
 8000a12:	187b      	adds	r3, r7, r1
 8000a14:	2200      	movs	r2, #0
 8000a16:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000a18:	187b      	adds	r3, r7, r1
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000a1e:	187b      	adds	r3, r7, r1
 8000a20:	2200      	movs	r2, #0
 8000a22:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000a24:	187a      	adds	r2, r7, r1
 8000a26:	4b37      	ldr	r3, [pc, #220]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 8000a28:	0011      	movs	r1, r2
 8000a2a:	0018      	movs	r0, r3
 8000a2c:	f003 fc2e 	bl	800428c <HAL_TIMEx_MasterConfigSynchronization>
 8000a30:	1e03      	subs	r3, r0, #0
 8000a32:	d001      	beq.n	8000a38 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000a34:	f000 f95e 	bl	8000cf4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000a38:	2138      	movs	r1, #56	; 0x38
 8000a3a:	187b      	adds	r3, r7, r1
 8000a3c:	2260      	movs	r2, #96	; 0x60
 8000a3e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000a40:	187b      	adds	r3, r7, r1
 8000a42:	2200      	movs	r2, #0
 8000a44:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000a46:	187b      	adds	r3, r7, r1
 8000a48:	2200      	movs	r2, #0
 8000a4a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000a4c:	187b      	adds	r3, r7, r1
 8000a4e:	2200      	movs	r2, #0
 8000a50:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000a52:	187b      	adds	r3, r7, r1
 8000a54:	2200      	movs	r2, #0
 8000a56:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000a58:	187b      	adds	r3, r7, r1
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000a5e:	187b      	adds	r3, r7, r1
 8000a60:	2200      	movs	r2, #0
 8000a62:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000a64:	1879      	adds	r1, r7, r1
 8000a66:	4b27      	ldr	r3, [pc, #156]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 8000a68:	2200      	movs	r2, #0
 8000a6a:	0018      	movs	r0, r3
 8000a6c:	f002 fe1c 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 8000a70:	1e03      	subs	r3, r0, #0
 8000a72:	d001      	beq.n	8000a78 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000a74:	f000 f93e 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000a78:	2338      	movs	r3, #56	; 0x38
 8000a7a:	18f9      	adds	r1, r7, r3
 8000a7c:	4b21      	ldr	r3, [pc, #132]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 8000a7e:	2204      	movs	r2, #4
 8000a80:	0018      	movs	r0, r3
 8000a82:	f002 fe11 	bl	80036a8 <HAL_TIM_PWM_ConfigChannel>
 8000a86:	1e03      	subs	r3, r0, #0
 8000a88:	d001      	beq.n	8000a8e <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000a8a:	f000 f933 	bl	8000cf4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000a8e:	1d3b      	adds	r3, r7, #4
 8000a90:	2200      	movs	r2, #0
 8000a92:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000a94:	1d3b      	adds	r3, r7, #4
 8000a96:	2200      	movs	r2, #0
 8000a98:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000a9a:	1d3b      	adds	r3, r7, #4
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000aa0:	1d3b      	adds	r3, r7, #4
 8000aa2:	2200      	movs	r2, #0
 8000aa4:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000aa6:	1d3b      	adds	r3, r7, #4
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000aac:	1d3b      	adds	r3, r7, #4
 8000aae:	2280      	movs	r2, #128	; 0x80
 8000ab0:	0192      	lsls	r2, r2, #6
 8000ab2:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000ab4:	1d3b      	adds	r3, r7, #4
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000aba:	1d3b      	adds	r3, r7, #4
 8000abc:	2200      	movs	r2, #0
 8000abe:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ac0:	1d3b      	adds	r3, r7, #4
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000ac6:	1d3b      	adds	r3, r7, #4
 8000ac8:	2280      	movs	r2, #128	; 0x80
 8000aca:	0492      	lsls	r2, r2, #18
 8000acc:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000ace:	1d3b      	adds	r3, r7, #4
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000ad4:	1d3b      	adds	r3, r7, #4
 8000ad6:	2200      	movs	r2, #0
 8000ad8:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000ada:	1d3b      	adds	r3, r7, #4
 8000adc:	2200      	movs	r2, #0
 8000ade:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000ae0:	1d3a      	adds	r2, r7, #4
 8000ae2:	4b08      	ldr	r3, [pc, #32]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 8000ae4:	0011      	movs	r1, r2
 8000ae6:	0018      	movs	r0, r3
 8000ae8:	f003 fc46 	bl	8004378 <HAL_TIMEx_ConfigBreakDeadTime>
 8000aec:	1e03      	subs	r3, r0, #0
 8000aee:	d001      	beq.n	8000af4 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8000af0:	f000 f900 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000af4:	4b03      	ldr	r3, [pc, #12]	; (8000b04 <MX_TIM1_Init+0x1a0>)
 8000af6:	0018      	movs	r0, r3
 8000af8:	f000 f9a4 	bl	8000e44 <HAL_TIM_MspPostInit>

}
 8000afc:	46c0      	nop			; (mov r8, r8)
 8000afe:	46bd      	mov	sp, r7
 8000b00:	b01c      	add	sp, #112	; 0x70
 8000b02:	bd80      	pop	{r7, pc}
 8000b04:	2000008c 	.word	0x2000008c
 8000b08:	40012c00 	.word	0x40012c00
 8000b0c:	00000271 	.word	0x00000271

08000b10 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000b10:	b580      	push	{r7, lr}
 8000b12:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000b14:	4b23      	ldr	r3, [pc, #140]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b16:	4a24      	ldr	r2, [pc, #144]	; (8000ba8 <MX_USART2_UART_Init+0x98>)
 8000b18:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000b1a:	4b22      	ldr	r3, [pc, #136]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b1c:	22e1      	movs	r2, #225	; 0xe1
 8000b1e:	0252      	lsls	r2, r2, #9
 8000b20:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000b22:	4b20      	ldr	r3, [pc, #128]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b24:	2200      	movs	r2, #0
 8000b26:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000b28:	4b1e      	ldr	r3, [pc, #120]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b2a:	2200      	movs	r2, #0
 8000b2c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000b2e:	4b1d      	ldr	r3, [pc, #116]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b30:	2200      	movs	r2, #0
 8000b32:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000b34:	4b1b      	ldr	r3, [pc, #108]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b36:	220c      	movs	r2, #12
 8000b38:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000b3a:	4b1a      	ldr	r3, [pc, #104]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b3c:	2200      	movs	r2, #0
 8000b3e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000b40:	4b18      	ldr	r3, [pc, #96]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b42:	2200      	movs	r2, #0
 8000b44:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000b46:	4b17      	ldr	r3, [pc, #92]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b48:	2200      	movs	r2, #0
 8000b4a:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b4c:	4b15      	ldr	r3, [pc, #84]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b4e:	2200      	movs	r2, #0
 8000b50:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b52:	4b14      	ldr	r3, [pc, #80]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b54:	2200      	movs	r2, #0
 8000b56:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000b58:	4b12      	ldr	r3, [pc, #72]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b5a:	0018      	movs	r0, r3
 8000b5c:	f003 fca8 	bl	80044b0 <HAL_UART_Init>
 8000b60:	1e03      	subs	r3, r0, #0
 8000b62:	d001      	beq.n	8000b68 <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8000b64:	f000 f8c6 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b68:	4b0e      	ldr	r3, [pc, #56]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b6a:	2100      	movs	r1, #0
 8000b6c:	0018      	movs	r0, r3
 8000b6e:	f004 fab9 	bl	80050e4 <HAL_UARTEx_SetTxFifoThreshold>
 8000b72:	1e03      	subs	r3, r0, #0
 8000b74:	d001      	beq.n	8000b7a <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8000b76:	f000 f8bd 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b7a:	4b0a      	ldr	r3, [pc, #40]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b7c:	2100      	movs	r1, #0
 8000b7e:	0018      	movs	r0, r3
 8000b80:	f004 faf0 	bl	8005164 <HAL_UARTEx_SetRxFifoThreshold>
 8000b84:	1e03      	subs	r3, r0, #0
 8000b86:	d001      	beq.n	8000b8c <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8000b88:	f000 f8b4 	bl	8000cf4 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8000b8c:	4b05      	ldr	r3, [pc, #20]	; (8000ba4 <MX_USART2_UART_Init+0x94>)
 8000b8e:	0018      	movs	r0, r3
 8000b90:	f004 fa6e 	bl	8005070 <HAL_UARTEx_DisableFifoMode>
 8000b94:	1e03      	subs	r3, r0, #0
 8000b96:	d001      	beq.n	8000b9c <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8000b98:	f000 f8ac 	bl	8000cf4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000b9c:	46c0      	nop			; (mov r8, r8)
 8000b9e:	46bd      	mov	sp, r7
 8000ba0:	bd80      	pop	{r7, pc}
 8000ba2:	46c0      	nop			; (mov r8, r8)
 8000ba4:	200000d8 	.word	0x200000d8
 8000ba8:	40004400 	.word	0x40004400

08000bac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000bac:	b590      	push	{r4, r7, lr}
 8000bae:	b08b      	sub	sp, #44	; 0x2c
 8000bb0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bb2:	2414      	movs	r4, #20
 8000bb4:	193b      	adds	r3, r7, r4
 8000bb6:	0018      	movs	r0, r3
 8000bb8:	2314      	movs	r3, #20
 8000bba:	001a      	movs	r2, r3
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	f004 fb71 	bl	80052a4 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000bc2:	4b49      	ldr	r3, [pc, #292]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000bc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bc6:	4b48      	ldr	r3, [pc, #288]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000bc8:	2104      	movs	r1, #4
 8000bca:	430a      	orrs	r2, r1
 8000bcc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bce:	4b46      	ldr	r3, [pc, #280]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000bd0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bd2:	2204      	movs	r2, #4
 8000bd4:	4013      	ands	r3, r2
 8000bd6:	613b      	str	r3, [r7, #16]
 8000bd8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000bda:	4b43      	ldr	r3, [pc, #268]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000bdc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bde:	4b42      	ldr	r3, [pc, #264]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000be0:	2120      	movs	r1, #32
 8000be2:	430a      	orrs	r2, r1
 8000be4:	635a      	str	r2, [r3, #52]	; 0x34
 8000be6:	4b40      	ldr	r3, [pc, #256]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000bea:	2220      	movs	r2, #32
 8000bec:	4013      	ands	r3, r2
 8000bee:	60fb      	str	r3, [r7, #12]
 8000bf0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf2:	4b3d      	ldr	r3, [pc, #244]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000bf4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000bf6:	4b3c      	ldr	r3, [pc, #240]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000bf8:	2101      	movs	r1, #1
 8000bfa:	430a      	orrs	r2, r1
 8000bfc:	635a      	str	r2, [r3, #52]	; 0x34
 8000bfe:	4b3a      	ldr	r3, [pc, #232]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000c00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c02:	2201      	movs	r2, #1
 8000c04:	4013      	ands	r3, r2
 8000c06:	60bb      	str	r3, [r7, #8]
 8000c08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c0a:	4b37      	ldr	r3, [pc, #220]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000c0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000c0e:	4b36      	ldr	r3, [pc, #216]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000c10:	2102      	movs	r1, #2
 8000c12:	430a      	orrs	r2, r1
 8000c14:	635a      	str	r2, [r3, #52]	; 0x34
 8000c16:	4b34      	ldr	r3, [pc, #208]	; (8000ce8 <MX_GPIO_Init+0x13c>)
 8000c18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000c1a:	2202      	movs	r2, #2
 8000c1c:	4013      	ands	r3, r2
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MotorR_B_Pin|MotorR_A_Pin, GPIO_PIN_RESET);
 8000c22:	4b32      	ldr	r3, [pc, #200]	; (8000cec <MX_GPIO_Init+0x140>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	210c      	movs	r1, #12
 8000c28:	0018      	movs	r0, r3
 8000c2a:	f001 fbe5 	bl	80023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, MotorL_B_Pin|LED_GREEN_Pin, GPIO_PIN_RESET);
 8000c2e:	23a0      	movs	r3, #160	; 0xa0
 8000c30:	05db      	lsls	r3, r3, #23
 8000c32:	2200      	movs	r2, #0
 8000c34:	2130      	movs	r1, #48	; 0x30
 8000c36:	0018      	movs	r0, r3
 8000c38:	f001 fbde 	bl	80023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MotorL_A_GPIO_Port, MotorL_A_Pin, GPIO_PIN_RESET);
 8000c3c:	4b2c      	ldr	r3, [pc, #176]	; (8000cf0 <MX_GPIO_Init+0x144>)
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2102      	movs	r1, #2
 8000c42:	0018      	movs	r0, r3
 8000c44:	f001 fbd8 	bl	80023f8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : MotorR_B_Pin MotorR_A_Pin */
  GPIO_InitStruct.Pin = MotorR_B_Pin|MotorR_A_Pin;
 8000c48:	193b      	adds	r3, r7, r4
 8000c4a:	220c      	movs	r2, #12
 8000c4c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c4e:	193b      	adds	r3, r7, r4
 8000c50:	2201      	movs	r2, #1
 8000c52:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c54:	193b      	adds	r3, r7, r4
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5a:	193b      	adds	r3, r7, r4
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000c60:	193b      	adds	r3, r7, r4
 8000c62:	4a22      	ldr	r2, [pc, #136]	; (8000cec <MX_GPIO_Init+0x140>)
 8000c64:	0019      	movs	r1, r3
 8000c66:	0010      	movs	r0, r2
 8000c68:	f001 fa5a 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotorL_B_Pin */
  GPIO_InitStruct.Pin = MotorL_B_Pin;
 8000c6c:	193b      	adds	r3, r7, r4
 8000c6e:	2210      	movs	r2, #16
 8000c70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	193b      	adds	r3, r7, r4
 8000c74:	2201      	movs	r2, #1
 8000c76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c78:	193b      	adds	r3, r7, r4
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7e:	193b      	adds	r3, r7, r4
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MotorL_B_GPIO_Port, &GPIO_InitStruct);
 8000c84:	193a      	adds	r2, r7, r4
 8000c86:	23a0      	movs	r3, #160	; 0xa0
 8000c88:	05db      	lsls	r3, r3, #23
 8000c8a:	0011      	movs	r1, r2
 8000c8c:	0018      	movs	r0, r3
 8000c8e:	f001 fa47 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pin : LED_GREEN_Pin */
  GPIO_InitStruct.Pin = LED_GREEN_Pin;
 8000c92:	193b      	adds	r3, r7, r4
 8000c94:	2220      	movs	r2, #32
 8000c96:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c98:	193b      	adds	r3, r7, r4
 8000c9a:	2201      	movs	r2, #1
 8000c9c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c9e:	193b      	adds	r3, r7, r4
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000ca4:	193b      	adds	r3, r7, r4
 8000ca6:	2202      	movs	r2, #2
 8000ca8:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(LED_GREEN_GPIO_Port, &GPIO_InitStruct);
 8000caa:	193a      	adds	r2, r7, r4
 8000cac:	23a0      	movs	r3, #160	; 0xa0
 8000cae:	05db      	lsls	r3, r3, #23
 8000cb0:	0011      	movs	r1, r2
 8000cb2:	0018      	movs	r0, r3
 8000cb4:	f001 fa34 	bl	8002120 <HAL_GPIO_Init>

  /*Configure GPIO pin : MotorL_A_Pin */
  GPIO_InitStruct.Pin = MotorL_A_Pin;
 8000cb8:	0021      	movs	r1, r4
 8000cba:	187b      	adds	r3, r7, r1
 8000cbc:	2202      	movs	r2, #2
 8000cbe:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000cc0:	187b      	adds	r3, r7, r1
 8000cc2:	2201      	movs	r2, #1
 8000cc4:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc6:	187b      	adds	r3, r7, r1
 8000cc8:	2200      	movs	r2, #0
 8000cca:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ccc:	187b      	adds	r3, r7, r1
 8000cce:	2200      	movs	r2, #0
 8000cd0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(MotorL_A_GPIO_Port, &GPIO_InitStruct);
 8000cd2:	187b      	adds	r3, r7, r1
 8000cd4:	4a06      	ldr	r2, [pc, #24]	; (8000cf0 <MX_GPIO_Init+0x144>)
 8000cd6:	0019      	movs	r1, r3
 8000cd8:	0010      	movs	r0, r2
 8000cda:	f001 fa21 	bl	8002120 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000cde:	46c0      	nop			; (mov r8, r8)
 8000ce0:	46bd      	mov	sp, r7
 8000ce2:	b00b      	add	sp, #44	; 0x2c
 8000ce4:	bd90      	pop	{r4, r7, pc}
 8000ce6:	46c0      	nop			; (mov r8, r8)
 8000ce8:	40021000 	.word	0x40021000
 8000cec:	50000800 	.word	0x50000800
 8000cf0:	50000400 	.word	0x50000400

08000cf4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000cf4:	b580      	push	{r7, lr}
 8000cf6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000cf8:	b672      	cpsid	i
}
 8000cfa:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000cfc:	e7fe      	b.n	8000cfc <Error_Handler+0x8>
	...

08000d00 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d06:	4b11      	ldr	r3, [pc, #68]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d08:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d0a:	4b10      	ldr	r3, [pc, #64]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d0c:	2101      	movs	r1, #1
 8000d0e:	430a      	orrs	r2, r1
 8000d10:	641a      	str	r2, [r3, #64]	; 0x40
 8000d12:	4b0e      	ldr	r3, [pc, #56]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d16:	2201      	movs	r2, #1
 8000d18:	4013      	ands	r3, r2
 8000d1a:	607b      	str	r3, [r7, #4]
 8000d1c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d1e:	4b0b      	ldr	r3, [pc, #44]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d20:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d22:	4b0a      	ldr	r3, [pc, #40]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d24:	2180      	movs	r1, #128	; 0x80
 8000d26:	0549      	lsls	r1, r1, #21
 8000d28:	430a      	orrs	r2, r1
 8000d2a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000d2c:	4b07      	ldr	r3, [pc, #28]	; (8000d4c <HAL_MspInit+0x4c>)
 8000d2e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000d30:	2380      	movs	r3, #128	; 0x80
 8000d32:	055b      	lsls	r3, r3, #21
 8000d34:	4013      	ands	r3, r2
 8000d36:	603b      	str	r3, [r7, #0]
 8000d38:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8000d3a:	23c0      	movs	r3, #192	; 0xc0
 8000d3c:	00db      	lsls	r3, r3, #3
 8000d3e:	0018      	movs	r0, r3
 8000d40:	f000 f9ea 	bl	8001118 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000d44:	46c0      	nop			; (mov r8, r8)
 8000d46:	46bd      	mov	sp, r7
 8000d48:	b002      	add	sp, #8
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000

08000d50 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000d50:	b590      	push	{r4, r7, lr}
 8000d52:	b08b      	sub	sp, #44	; 0x2c
 8000d54:	af00      	add	r7, sp, #0
 8000d56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d58:	2414      	movs	r4, #20
 8000d5a:	193b      	adds	r3, r7, r4
 8000d5c:	0018      	movs	r0, r3
 8000d5e:	2314      	movs	r3, #20
 8000d60:	001a      	movs	r2, r3
 8000d62:	2100      	movs	r1, #0
 8000d64:	f004 fa9e 	bl	80052a4 <memset>
  if(hadc->Instance==ADC1)
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	681b      	ldr	r3, [r3, #0]
 8000d6c:	4a18      	ldr	r2, [pc, #96]	; (8000dd0 <HAL_ADC_MspInit+0x80>)
 8000d6e:	4293      	cmp	r3, r2
 8000d70:	d129      	bne.n	8000dc6 <HAL_ADC_MspInit+0x76>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 8000d72:	4b18      	ldr	r3, [pc, #96]	; (8000dd4 <HAL_ADC_MspInit+0x84>)
 8000d74:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d76:	4b17      	ldr	r3, [pc, #92]	; (8000dd4 <HAL_ADC_MspInit+0x84>)
 8000d78:	2180      	movs	r1, #128	; 0x80
 8000d7a:	0349      	lsls	r1, r1, #13
 8000d7c:	430a      	orrs	r2, r1
 8000d7e:	641a      	str	r2, [r3, #64]	; 0x40
 8000d80:	4b14      	ldr	r3, [pc, #80]	; (8000dd4 <HAL_ADC_MspInit+0x84>)
 8000d82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000d84:	2380      	movs	r3, #128	; 0x80
 8000d86:	035b      	lsls	r3, r3, #13
 8000d88:	4013      	ands	r3, r2
 8000d8a:	613b      	str	r3, [r7, #16]
 8000d8c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d8e:	4b11      	ldr	r3, [pc, #68]	; (8000dd4 <HAL_ADC_MspInit+0x84>)
 8000d90:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000d92:	4b10      	ldr	r3, [pc, #64]	; (8000dd4 <HAL_ADC_MspInit+0x84>)
 8000d94:	2101      	movs	r1, #1
 8000d96:	430a      	orrs	r2, r1
 8000d98:	635a      	str	r2, [r3, #52]	; 0x34
 8000d9a:	4b0e      	ldr	r3, [pc, #56]	; (8000dd4 <HAL_ADC_MspInit+0x84>)
 8000d9c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000d9e:	2201      	movs	r2, #1
 8000da0:	4013      	ands	r3, r2
 8000da2:	60fb      	str	r3, [r7, #12]
 8000da4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA0     ------> ADC1_IN0
    PA1     ------> ADC1_IN1
    */
    GPIO_InitStruct.Pin = Sensor_0_Pin|Sensor_14_Pin;
 8000da6:	193b      	adds	r3, r7, r4
 8000da8:	2203      	movs	r2, #3
 8000daa:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000dac:	193b      	adds	r3, r7, r4
 8000dae:	2203      	movs	r2, #3
 8000db0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000db2:	193b      	adds	r3, r7, r4
 8000db4:	2200      	movs	r2, #0
 8000db6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000db8:	193a      	adds	r2, r7, r4
 8000dba:	23a0      	movs	r3, #160	; 0xa0
 8000dbc:	05db      	lsls	r3, r3, #23
 8000dbe:	0011      	movs	r1, r2
 8000dc0:	0018      	movs	r0, r3
 8000dc2:	f001 f9ad 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000dc6:	46c0      	nop			; (mov r8, r8)
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	b00b      	add	sp, #44	; 0x2c
 8000dcc:	bd90      	pop	{r4, r7, pc}
 8000dce:	46c0      	nop			; (mov r8, r8)
 8000dd0:	40012400 	.word	0x40012400
 8000dd4:	40021000 	.word	0x40021000

08000dd8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000dd8:	b590      	push	{r4, r7, lr}
 8000dda:	b097      	sub	sp, #92	; 0x5c
 8000ddc:	af00      	add	r7, sp, #0
 8000dde:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000de0:	240c      	movs	r4, #12
 8000de2:	193b      	adds	r3, r7, r4
 8000de4:	0018      	movs	r0, r3
 8000de6:	234c      	movs	r3, #76	; 0x4c
 8000de8:	001a      	movs	r2, r3
 8000dea:	2100      	movs	r1, #0
 8000dec:	f004 fa5a 	bl	80052a4 <memset>
  if(htim_base->Instance==TIM1)
 8000df0:	687b      	ldr	r3, [r7, #4]
 8000df2:	681b      	ldr	r3, [r3, #0]
 8000df4:	4a11      	ldr	r2, [pc, #68]	; (8000e3c <HAL_TIM_Base_MspInit+0x64>)
 8000df6:	4293      	cmp	r3, r2
 8000df8:	d11c      	bne.n	8000e34 <HAL_TIM_Base_MspInit+0x5c>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8000dfa:	193b      	adds	r3, r7, r4
 8000dfc:	2280      	movs	r2, #128	; 0x80
 8000dfe:	0392      	lsls	r2, r2, #14
 8000e00:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 8000e02:	193b      	adds	r3, r7, r4
 8000e04:	2200      	movs	r2, #0
 8000e06:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000e08:	193b      	adds	r3, r7, r4
 8000e0a:	0018      	movs	r0, r3
 8000e0c:	f002 f868 	bl	8002ee0 <HAL_RCCEx_PeriphCLKConfig>
 8000e10:	1e03      	subs	r3, r0, #0
 8000e12:	d001      	beq.n	8000e18 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8000e14:	f7ff ff6e 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8000e18:	4b09      	ldr	r3, [pc, #36]	; (8000e40 <HAL_TIM_Base_MspInit+0x68>)
 8000e1a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e1c:	4b08      	ldr	r3, [pc, #32]	; (8000e40 <HAL_TIM_Base_MspInit+0x68>)
 8000e1e:	2180      	movs	r1, #128	; 0x80
 8000e20:	0109      	lsls	r1, r1, #4
 8000e22:	430a      	orrs	r2, r1
 8000e24:	641a      	str	r2, [r3, #64]	; 0x40
 8000e26:	4b06      	ldr	r3, [pc, #24]	; (8000e40 <HAL_TIM_Base_MspInit+0x68>)
 8000e28:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000e2a:	2380      	movs	r3, #128	; 0x80
 8000e2c:	011b      	lsls	r3, r3, #4
 8000e2e:	4013      	ands	r3, r2
 8000e30:	60bb      	str	r3, [r7, #8]
 8000e32:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8000e34:	46c0      	nop			; (mov r8, r8)
 8000e36:	46bd      	mov	sp, r7
 8000e38:	b017      	add	sp, #92	; 0x5c
 8000e3a:	bd90      	pop	{r4, r7, pc}
 8000e3c:	40012c00 	.word	0x40012c00
 8000e40:	40021000 	.word	0x40021000

08000e44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000e44:	b590      	push	{r4, r7, lr}
 8000e46:	b089      	sub	sp, #36	; 0x24
 8000e48:	af00      	add	r7, sp, #0
 8000e4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e4c:	240c      	movs	r4, #12
 8000e4e:	193b      	adds	r3, r7, r4
 8000e50:	0018      	movs	r0, r3
 8000e52:	2314      	movs	r3, #20
 8000e54:	001a      	movs	r2, r3
 8000e56:	2100      	movs	r1, #0
 8000e58:	f004 fa24 	bl	80052a4 <memset>
  if(htim->Instance==TIM1)
 8000e5c:	687b      	ldr	r3, [r7, #4]
 8000e5e:	681b      	ldr	r3, [r3, #0]
 8000e60:	4a15      	ldr	r2, [pc, #84]	; (8000eb8 <HAL_TIM_MspPostInit+0x74>)
 8000e62:	4293      	cmp	r3, r2
 8000e64:	d123      	bne.n	8000eae <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e66:	4b15      	ldr	r3, [pc, #84]	; (8000ebc <HAL_TIM_MspPostInit+0x78>)
 8000e68:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000e6a:	4b14      	ldr	r3, [pc, #80]	; (8000ebc <HAL_TIM_MspPostInit+0x78>)
 8000e6c:	2101      	movs	r1, #1
 8000e6e:	430a      	orrs	r2, r1
 8000e70:	635a      	str	r2, [r3, #52]	; 0x34
 8000e72:	4b12      	ldr	r3, [pc, #72]	; (8000ebc <HAL_TIM_MspPostInit+0x78>)
 8000e74:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e76:	2201      	movs	r2, #1
 8000e78:	4013      	ands	r3, r2
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MotorR_PWM_Pin|MotorL_PWM_Pin;
 8000e7e:	193b      	adds	r3, r7, r4
 8000e80:	22c0      	movs	r2, #192	; 0xc0
 8000e82:	0092      	lsls	r2, r2, #2
 8000e84:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000e86:	0021      	movs	r1, r4
 8000e88:	187b      	adds	r3, r7, r1
 8000e8a:	2202      	movs	r2, #2
 8000e8c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e8e:	187b      	adds	r3, r7, r1
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000e94:	187b      	adds	r3, r7, r1
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000e9a:	187b      	adds	r3, r7, r1
 8000e9c:	2202      	movs	r2, #2
 8000e9e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ea0:	187a      	adds	r2, r7, r1
 8000ea2:	23a0      	movs	r3, #160	; 0xa0
 8000ea4:	05db      	lsls	r3, r3, #23
 8000ea6:	0011      	movs	r1, r2
 8000ea8:	0018      	movs	r0, r3
 8000eaa:	f001 f939 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000eae:	46c0      	nop			; (mov r8, r8)
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	b009      	add	sp, #36	; 0x24
 8000eb4:	bd90      	pop	{r4, r7, pc}
 8000eb6:	46c0      	nop			; (mov r8, r8)
 8000eb8:	40012c00 	.word	0x40012c00
 8000ebc:	40021000 	.word	0x40021000

08000ec0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ec0:	b590      	push	{r4, r7, lr}
 8000ec2:	b09d      	sub	sp, #116	; 0x74
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec8:	235c      	movs	r3, #92	; 0x5c
 8000eca:	18fb      	adds	r3, r7, r3
 8000ecc:	0018      	movs	r0, r3
 8000ece:	2314      	movs	r3, #20
 8000ed0:	001a      	movs	r2, r3
 8000ed2:	2100      	movs	r1, #0
 8000ed4:	f004 f9e6 	bl	80052a4 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ed8:	2410      	movs	r4, #16
 8000eda:	193b      	adds	r3, r7, r4
 8000edc:	0018      	movs	r0, r3
 8000ede:	234c      	movs	r3, #76	; 0x4c
 8000ee0:	001a      	movs	r2, r3
 8000ee2:	2100      	movs	r1, #0
 8000ee4:	f004 f9de 	bl	80052a4 <memset>
  if(huart->Instance==USART2)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a22      	ldr	r2, [pc, #136]	; (8000f78 <HAL_UART_MspInit+0xb8>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d13e      	bne.n	8000f70 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8000ef2:	193b      	adds	r3, r7, r4
 8000ef4:	2202      	movs	r2, #2
 8000ef6:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8000ef8:	193b      	adds	r3, r7, r4
 8000efa:	2200      	movs	r2, #0
 8000efc:	609a      	str	r2, [r3, #8]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8000efe:	193b      	adds	r3, r7, r4
 8000f00:	0018      	movs	r0, r3
 8000f02:	f001 ffed 	bl	8002ee0 <HAL_RCCEx_PeriphCLKConfig>
 8000f06:	1e03      	subs	r3, r0, #0
 8000f08:	d001      	beq.n	8000f0e <HAL_UART_MspInit+0x4e>
    {
      Error_Handler();
 8000f0a:	f7ff fef3 	bl	8000cf4 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8000f0e:	4b1b      	ldr	r3, [pc, #108]	; (8000f7c <HAL_UART_MspInit+0xbc>)
 8000f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f12:	4b1a      	ldr	r3, [pc, #104]	; (8000f7c <HAL_UART_MspInit+0xbc>)
 8000f14:	2180      	movs	r1, #128	; 0x80
 8000f16:	0289      	lsls	r1, r1, #10
 8000f18:	430a      	orrs	r2, r1
 8000f1a:	63da      	str	r2, [r3, #60]	; 0x3c
 8000f1c:	4b17      	ldr	r3, [pc, #92]	; (8000f7c <HAL_UART_MspInit+0xbc>)
 8000f1e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000f20:	2380      	movs	r3, #128	; 0x80
 8000f22:	029b      	lsls	r3, r3, #10
 8000f24:	4013      	ands	r3, r2
 8000f26:	60fb      	str	r3, [r7, #12]
 8000f28:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f2a:	4b14      	ldr	r3, [pc, #80]	; (8000f7c <HAL_UART_MspInit+0xbc>)
 8000f2c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f2e:	4b13      	ldr	r3, [pc, #76]	; (8000f7c <HAL_UART_MspInit+0xbc>)
 8000f30:	2101      	movs	r1, #1
 8000f32:	430a      	orrs	r2, r1
 8000f34:	635a      	str	r2, [r3, #52]	; 0x34
 8000f36:	4b11      	ldr	r3, [pc, #68]	; (8000f7c <HAL_UART_MspInit+0xbc>)
 8000f38:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f3a:	2201      	movs	r2, #1
 8000f3c:	4013      	ands	r3, r2
 8000f3e:	60bb      	str	r3, [r7, #8]
 8000f40:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART2_TX_Pin|USART2_RX_Pin;
 8000f42:	215c      	movs	r1, #92	; 0x5c
 8000f44:	187b      	adds	r3, r7, r1
 8000f46:	220c      	movs	r2, #12
 8000f48:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000f4a:	187b      	adds	r3, r7, r1
 8000f4c:	2202      	movs	r2, #2
 8000f4e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f50:	187b      	adds	r3, r7, r1
 8000f52:	2200      	movs	r2, #0
 8000f54:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f56:	187b      	adds	r3, r7, r1
 8000f58:	2200      	movs	r2, #0
 8000f5a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_USART2;
 8000f5c:	187b      	adds	r3, r7, r1
 8000f5e:	2201      	movs	r2, #1
 8000f60:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f62:	187a      	adds	r2, r7, r1
 8000f64:	23a0      	movs	r3, #160	; 0xa0
 8000f66:	05db      	lsls	r3, r3, #23
 8000f68:	0011      	movs	r1, r2
 8000f6a:	0018      	movs	r0, r3
 8000f6c:	f001 f8d8 	bl	8002120 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8000f70:	46c0      	nop			; (mov r8, r8)
 8000f72:	46bd      	mov	sp, r7
 8000f74:	b01d      	add	sp, #116	; 0x74
 8000f76:	bd90      	pop	{r4, r7, pc}
 8000f78:	40004400 	.word	0x40004400
 8000f7c:	40021000 	.word	0x40021000

08000f80 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000f84:	e7fe      	b.n	8000f84 <NMI_Handler+0x4>

08000f86 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000f86:	b580      	push	{r7, lr}
 8000f88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000f8a:	e7fe      	b.n	8000f8a <HardFault_Handler+0x4>

08000f8c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000f8c:	b580      	push	{r7, lr}
 8000f8e:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000f90:	46c0      	nop			; (mov r8, r8)
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000f96:	b580      	push	{r7, lr}
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000f9a:	46c0      	nop			; (mov r8, r8)
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bd80      	pop	{r7, pc}

08000fa0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000fa4:	f000 f89c 	bl	80010e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000fa8:	46c0      	nop			; (mov r8, r8)
 8000faa:	46bd      	mov	sp, r7
 8000fac:	bd80      	pop	{r7, pc}

08000fae <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fae:	b580      	push	{r7, lr}
 8000fb0:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fb2:	46c0      	nop			; (mov r8, r8)
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000fb8:	480d      	ldr	r0, [pc, #52]	; (8000ff0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000fba:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000fbc:	f7ff fff7 	bl	8000fae <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000fc0:	480c      	ldr	r0, [pc, #48]	; (8000ff4 <LoopForever+0x6>)
  ldr r1, =_edata
 8000fc2:	490d      	ldr	r1, [pc, #52]	; (8000ff8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000fc4:	4a0d      	ldr	r2, [pc, #52]	; (8000ffc <LoopForever+0xe>)
  movs r3, #0
 8000fc6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000fc8:	e002      	b.n	8000fd0 <LoopCopyDataInit>

08000fca <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000fca:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000fcc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000fce:	3304      	adds	r3, #4

08000fd0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000fd0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000fd2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000fd4:	d3f9      	bcc.n	8000fca <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000fd6:	4a0a      	ldr	r2, [pc, #40]	; (8001000 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000fd8:	4c0a      	ldr	r4, [pc, #40]	; (8001004 <LoopForever+0x16>)
  movs r3, #0
 8000fda:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000fdc:	e001      	b.n	8000fe2 <LoopFillZerobss>

08000fde <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000fde:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000fe0:	3204      	adds	r2, #4

08000fe2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000fe2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000fe4:	d3fb      	bcc.n	8000fde <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000fe6:	f004 f965 	bl	80052b4 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000fea:	f7ff fb17 	bl	800061c <main>

08000fee <LoopForever>:

LoopForever:
  b LoopForever
 8000fee:	e7fe      	b.n	8000fee <LoopForever>
  ldr   r0, =_estack
 8000ff0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000ff4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ff8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ffc:	08005400 	.word	0x08005400
  ldr r2, =_sbss
 8001000:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001004:	200001b8 	.word	0x200001b8

08001008 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001008:	e7fe      	b.n	8001008 <ADC1_COMP_IRQHandler>
	...

0800100c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8001012:	1dfb      	adds	r3, r7, #7
 8001014:	2200      	movs	r2, #0
 8001016:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001018:	4b0b      	ldr	r3, [pc, #44]	; (8001048 <HAL_Init+0x3c>)
 800101a:	681a      	ldr	r2, [r3, #0]
 800101c:	4b0a      	ldr	r3, [pc, #40]	; (8001048 <HAL_Init+0x3c>)
 800101e:	2180      	movs	r1, #128	; 0x80
 8001020:	0049      	lsls	r1, r1, #1
 8001022:	430a      	orrs	r2, r1
 8001024:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001026:	2000      	movs	r0, #0
 8001028:	f000 f810 	bl	800104c <HAL_InitTick>
 800102c:	1e03      	subs	r3, r0, #0
 800102e:	d003      	beq.n	8001038 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001030:	1dfb      	adds	r3, r7, #7
 8001032:	2201      	movs	r2, #1
 8001034:	701a      	strb	r2, [r3, #0]
 8001036:	e001      	b.n	800103c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001038:	f7ff fe62 	bl	8000d00 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800103c:	1dfb      	adds	r3, r7, #7
 800103e:	781b      	ldrb	r3, [r3, #0]
}
 8001040:	0018      	movs	r0, r3
 8001042:	46bd      	mov	sp, r7
 8001044:	b002      	add	sp, #8
 8001046:	bd80      	pop	{r7, pc}
 8001048:	40022000 	.word	0x40022000

0800104c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b085      	sub	sp, #20
 8001050:	af00      	add	r7, sp, #0
 8001052:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001054:	230f      	movs	r3, #15
 8001056:	18fb      	adds	r3, r7, r3
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800105c:	4b1d      	ldr	r3, [pc, #116]	; (80010d4 <HAL_InitTick+0x88>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	2b00      	cmp	r3, #0
 8001062:	d02b      	beq.n	80010bc <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001064:	4b1c      	ldr	r3, [pc, #112]	; (80010d8 <HAL_InitTick+0x8c>)
 8001066:	681c      	ldr	r4, [r3, #0]
 8001068:	4b1a      	ldr	r3, [pc, #104]	; (80010d4 <HAL_InitTick+0x88>)
 800106a:	781b      	ldrb	r3, [r3, #0]
 800106c:	0019      	movs	r1, r3
 800106e:	23fa      	movs	r3, #250	; 0xfa
 8001070:	0098      	lsls	r0, r3, #2
 8001072:	f7ff f847 	bl	8000104 <__udivsi3>
 8001076:	0003      	movs	r3, r0
 8001078:	0019      	movs	r1, r3
 800107a:	0020      	movs	r0, r4
 800107c:	f7ff f842 	bl	8000104 <__udivsi3>
 8001080:	0003      	movs	r3, r0
 8001082:	0018      	movs	r0, r3
 8001084:	f001 f83f 	bl	8002106 <HAL_SYSTICK_Config>
 8001088:	1e03      	subs	r3, r0, #0
 800108a:	d112      	bne.n	80010b2 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800108c:	687b      	ldr	r3, [r7, #4]
 800108e:	2b03      	cmp	r3, #3
 8001090:	d80a      	bhi.n	80010a8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001092:	6879      	ldr	r1, [r7, #4]
 8001094:	2301      	movs	r3, #1
 8001096:	425b      	negs	r3, r3
 8001098:	2200      	movs	r2, #0
 800109a:	0018      	movs	r0, r3
 800109c:	f001 f81e 	bl	80020dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80010a0:	4b0e      	ldr	r3, [pc, #56]	; (80010dc <HAL_InitTick+0x90>)
 80010a2:	687a      	ldr	r2, [r7, #4]
 80010a4:	601a      	str	r2, [r3, #0]
 80010a6:	e00d      	b.n	80010c4 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 80010a8:	230f      	movs	r3, #15
 80010aa:	18fb      	adds	r3, r7, r3
 80010ac:	2201      	movs	r2, #1
 80010ae:	701a      	strb	r2, [r3, #0]
 80010b0:	e008      	b.n	80010c4 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 80010b2:	230f      	movs	r3, #15
 80010b4:	18fb      	adds	r3, r7, r3
 80010b6:	2201      	movs	r2, #1
 80010b8:	701a      	strb	r2, [r3, #0]
 80010ba:	e003      	b.n	80010c4 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 80010bc:	230f      	movs	r3, #15
 80010be:	18fb      	adds	r3, r7, r3
 80010c0:	2201      	movs	r2, #1
 80010c2:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 80010c4:	230f      	movs	r3, #15
 80010c6:	18fb      	adds	r3, r7, r3
 80010c8:	781b      	ldrb	r3, [r3, #0]
}
 80010ca:	0018      	movs	r0, r3
 80010cc:	46bd      	mov	sp, r7
 80010ce:	b005      	add	sp, #20
 80010d0:	bd90      	pop	{r4, r7, pc}
 80010d2:	46c0      	nop			; (mov r8, r8)
 80010d4:	20000008 	.word	0x20000008
 80010d8:	20000000 	.word	0x20000000
 80010dc:	20000004 	.word	0x20000004

080010e0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80010e0:	b580      	push	{r7, lr}
 80010e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80010e4:	4b05      	ldr	r3, [pc, #20]	; (80010fc <HAL_IncTick+0x1c>)
 80010e6:	781b      	ldrb	r3, [r3, #0]
 80010e8:	001a      	movs	r2, r3
 80010ea:	4b05      	ldr	r3, [pc, #20]	; (8001100 <HAL_IncTick+0x20>)
 80010ec:	681b      	ldr	r3, [r3, #0]
 80010ee:	18d2      	adds	r2, r2, r3
 80010f0:	4b03      	ldr	r3, [pc, #12]	; (8001100 <HAL_IncTick+0x20>)
 80010f2:	601a      	str	r2, [r3, #0]
}
 80010f4:	46c0      	nop			; (mov r8, r8)
 80010f6:	46bd      	mov	sp, r7
 80010f8:	bd80      	pop	{r7, pc}
 80010fa:	46c0      	nop			; (mov r8, r8)
 80010fc:	20000008 	.word	0x20000008
 8001100:	200001b4 	.word	0x200001b4

08001104 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001104:	b580      	push	{r7, lr}
 8001106:	af00      	add	r7, sp, #0
  return uwTick;
 8001108:	4b02      	ldr	r3, [pc, #8]	; (8001114 <HAL_GetTick+0x10>)
 800110a:	681b      	ldr	r3, [r3, #0]
}
 800110c:	0018      	movs	r0, r3
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	46c0      	nop			; (mov r8, r8)
 8001114:	200001b4 	.word	0x200001b4

08001118 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b082      	sub	sp, #8
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8001122:	681b      	ldr	r3, [r3, #0]
 8001124:	4a06      	ldr	r2, [pc, #24]	; (8001140 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8001126:	4013      	ands	r3, r2
 8001128:	0019      	movs	r1, r3
 800112a:	4b04      	ldr	r3, [pc, #16]	; (800113c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 800112c:	687a      	ldr	r2, [r7, #4]
 800112e:	430a      	orrs	r2, r1
 8001130:	601a      	str	r2, [r3, #0]
}
 8001132:	46c0      	nop			; (mov r8, r8)
 8001134:	46bd      	mov	sp, r7
 8001136:	b002      	add	sp, #8
 8001138:	bd80      	pop	{r7, pc}
 800113a:	46c0      	nop			; (mov r8, r8)
 800113c:	40010000 	.word	0x40010000
 8001140:	fffff9ff 	.word	0xfffff9ff

08001144 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b082      	sub	sp, #8
 8001148:	af00      	add	r7, sp, #0
 800114a:	6078      	str	r0, [r7, #4]
 800114c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	4a05      	ldr	r2, [pc, #20]	; (8001168 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001154:	401a      	ands	r2, r3
 8001156:	683b      	ldr	r3, [r7, #0]
 8001158:	431a      	orrs	r2, r3
 800115a:	687b      	ldr	r3, [r7, #4]
 800115c:	601a      	str	r2, [r3, #0]
}
 800115e:	46c0      	nop			; (mov r8, r8)
 8001160:	46bd      	mov	sp, r7
 8001162:	b002      	add	sp, #8
 8001164:	bd80      	pop	{r7, pc}
 8001166:	46c0      	nop			; (mov r8, r8)
 8001168:	fe3fffff 	.word	0xfe3fffff

0800116c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b082      	sub	sp, #8
 8001170:	af00      	add	r7, sp, #0
 8001172:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	681a      	ldr	r2, [r3, #0]
 8001178:	23e0      	movs	r3, #224	; 0xe0
 800117a:	045b      	lsls	r3, r3, #17
 800117c:	4013      	ands	r3, r2
}
 800117e:	0018      	movs	r0, r3
 8001180:	46bd      	mov	sp, r7
 8001182:	b002      	add	sp, #8
 8001184:	bd80      	pop	{r7, pc}

08001186 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001186:	b580      	push	{r7, lr}
 8001188:	b084      	sub	sp, #16
 800118a:	af00      	add	r7, sp, #0
 800118c:	60f8      	str	r0, [r7, #12]
 800118e:	60b9      	str	r1, [r7, #8]
 8001190:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001192:	68fb      	ldr	r3, [r7, #12]
 8001194:	695b      	ldr	r3, [r3, #20]
 8001196:	68ba      	ldr	r2, [r7, #8]
 8001198:	2104      	movs	r1, #4
 800119a:	400a      	ands	r2, r1
 800119c:	2107      	movs	r1, #7
 800119e:	4091      	lsls	r1, r2
 80011a0:	000a      	movs	r2, r1
 80011a2:	43d2      	mvns	r2, r2
 80011a4:	401a      	ands	r2, r3
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	2104      	movs	r1, #4
 80011aa:	400b      	ands	r3, r1
 80011ac:	6879      	ldr	r1, [r7, #4]
 80011ae:	4099      	lsls	r1, r3
 80011b0:	000b      	movs	r3, r1
 80011b2:	431a      	orrs	r2, r3
 80011b4:	68fb      	ldr	r3, [r7, #12]
 80011b6:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 80011b8:	46c0      	nop			; (mov r8, r8)
 80011ba:	46bd      	mov	sp, r7
 80011bc:	b004      	add	sp, #16
 80011be:	bd80      	pop	{r7, pc}

080011c0 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
 80011c8:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	695b      	ldr	r3, [r3, #20]
 80011ce:	683a      	ldr	r2, [r7, #0]
 80011d0:	2104      	movs	r1, #4
 80011d2:	400a      	ands	r2, r1
 80011d4:	2107      	movs	r1, #7
 80011d6:	4091      	lsls	r1, r2
 80011d8:	000a      	movs	r2, r1
 80011da:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80011dc:	683b      	ldr	r3, [r7, #0]
 80011de:	2104      	movs	r1, #4
 80011e0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80011e2:	40da      	lsrs	r2, r3
 80011e4:	0013      	movs	r3, r2
}
 80011e6:	0018      	movs	r0, r3
 80011e8:	46bd      	mov	sp, r7
 80011ea:	b002      	add	sp, #8
 80011ec:	bd80      	pop	{r7, pc}

080011ee <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(const ADC_TypeDef *ADCx)
{
 80011ee:	b580      	push	{r7, lr}
 80011f0:	b082      	sub	sp, #8
 80011f2:	af00      	add	r7, sp, #0
 80011f4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR1, ADC_CFGR1_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR1_EXTEN)) ? 1UL : 0UL);
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	68da      	ldr	r2, [r3, #12]
 80011fa:	23c0      	movs	r3, #192	; 0xc0
 80011fc:	011b      	lsls	r3, r3, #4
 80011fe:	4013      	ands	r3, r2
 8001200:	d101      	bne.n	8001206 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8001202:	2301      	movs	r3, #1
 8001204:	e000      	b.n	8001208 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001206:	2300      	movs	r3, #0
}
 8001208:	0018      	movs	r0, r3
 800120a:	46bd      	mov	sp, r7
 800120c:	b002      	add	sp, #8
 800120e:	bd80      	pop	{r7, pc}

08001210 <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	b084      	sub	sp, #16
 8001214:	af00      	add	r7, sp, #0
 8001216:	60f8      	str	r0, [r7, #12]
 8001218:	60b9      	str	r1, [r7, #8]
 800121a:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001220:	68ba      	ldr	r2, [r7, #8]
 8001222:	211f      	movs	r1, #31
 8001224:	400a      	ands	r2, r1
 8001226:	210f      	movs	r1, #15
 8001228:	4091      	lsls	r1, r2
 800122a:	000a      	movs	r2, r1
 800122c:	43d2      	mvns	r2, r2
 800122e:	401a      	ands	r2, r3
 8001230:	687b      	ldr	r3, [r7, #4]
 8001232:	0e9b      	lsrs	r3, r3, #26
 8001234:	210f      	movs	r1, #15
 8001236:	4019      	ands	r1, r3
 8001238:	68bb      	ldr	r3, [r7, #8]
 800123a:	201f      	movs	r0, #31
 800123c:	4003      	ands	r3, r0
 800123e:	4099      	lsls	r1, r3
 8001240:	000b      	movs	r3, r1
 8001242:	431a      	orrs	r2, r3
 8001244:	68fb      	ldr	r3, [r7, #12]
 8001246:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001248:	46c0      	nop			; (mov r8, r8)
 800124a:	46bd      	mov	sp, r7
 800124c:	b004      	add	sp, #16
 800124e:	bd80      	pop	{r7, pc}

08001250 <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	6078      	str	r0, [r7, #4]
 8001258:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800125a:	687b      	ldr	r3, [r7, #4]
 800125c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800125e:	683b      	ldr	r3, [r7, #0]
 8001260:	035b      	lsls	r3, r3, #13
 8001262:	0b5b      	lsrs	r3, r3, #13
 8001264:	431a      	orrs	r2, r3
 8001266:	687b      	ldr	r3, [r7, #4]
 8001268:	629a      	str	r2, [r3, #40]	; 0x28
}
 800126a:	46c0      	nop			; (mov r8, r8)
 800126c:	46bd      	mov	sp, r7
 800126e:	b002      	add	sp, #8
 8001270:	bd80      	pop	{r7, pc}

08001272 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001272:	b580      	push	{r7, lr}
 8001274:	b082      	sub	sp, #8
 8001276:	af00      	add	r7, sp, #0
 8001278:	6078      	str	r0, [r7, #4]
 800127a:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001280:	683a      	ldr	r2, [r7, #0]
 8001282:	0352      	lsls	r2, r2, #13
 8001284:	0b52      	lsrs	r2, r2, #13
 8001286:	43d2      	mvns	r2, r2
 8001288:	401a      	ands	r2, r3
 800128a:	687b      	ldr	r3, [r7, #4]
 800128c:	629a      	str	r2, [r3, #40]	; 0x28
}
 800128e:	46c0      	nop			; (mov r8, r8)
 8001290:	46bd      	mov	sp, r7
 8001292:	b002      	add	sp, #8
 8001294:	bd80      	pop	{r7, pc}
	...

08001298 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b084      	sub	sp, #16
 800129c:	af00      	add	r7, sp, #0
 800129e:	60f8      	str	r0, [r7, #12]
 80012a0:	60b9      	str	r1, [r7, #8]
 80012a2:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	695b      	ldr	r3, [r3, #20]
 80012a8:	68ba      	ldr	r2, [r7, #8]
 80012aa:	0212      	lsls	r2, r2, #8
 80012ac:	43d2      	mvns	r2, r2
 80012ae:	401a      	ands	r2, r3
 80012b0:	68bb      	ldr	r3, [r7, #8]
 80012b2:	021b      	lsls	r3, r3, #8
 80012b4:	6879      	ldr	r1, [r7, #4]
 80012b6:	400b      	ands	r3, r1
 80012b8:	4904      	ldr	r1, [pc, #16]	; (80012cc <LL_ADC_SetChannelSamplingTime+0x34>)
 80012ba:	400b      	ands	r3, r1
 80012bc:	431a      	orrs	r2, r3
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 80012c2:	46c0      	nop			; (mov r8, r8)
 80012c4:	46bd      	mov	sp, r7
 80012c6:	b004      	add	sp, #16
 80012c8:	bd80      	pop	{r7, pc}
 80012ca:	46c0      	nop			; (mov r8, r8)
 80012cc:	07ffff00 	.word	0x07ffff00

080012d0 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 80012d0:	b580      	push	{r7, lr}
 80012d2:	b082      	sub	sp, #8
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80012d8:	687b      	ldr	r3, [r7, #4]
 80012da:	689b      	ldr	r3, [r3, #8]
 80012dc:	4a05      	ldr	r2, [pc, #20]	; (80012f4 <LL_ADC_EnableInternalRegulator+0x24>)
 80012de:	4013      	ands	r3, r2
 80012e0:	2280      	movs	r2, #128	; 0x80
 80012e2:	0552      	lsls	r2, r2, #21
 80012e4:	431a      	orrs	r2, r3
 80012e6:	687b      	ldr	r3, [r7, #4]
 80012e8:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 80012ea:	46c0      	nop			; (mov r8, r8)
 80012ec:	46bd      	mov	sp, r7
 80012ee:	b002      	add	sp, #8
 80012f0:	bd80      	pop	{r7, pc}
 80012f2:	46c0      	nop			; (mov r8, r8)
 80012f4:	6fffffe8 	.word	0x6fffffe8

080012f8 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80012f8:	b580      	push	{r7, lr}
 80012fa:	b082      	sub	sp, #8
 80012fc:	af00      	add	r7, sp, #0
 80012fe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	689a      	ldr	r2, [r3, #8]
 8001304:	2380      	movs	r3, #128	; 0x80
 8001306:	055b      	lsls	r3, r3, #21
 8001308:	401a      	ands	r2, r3
 800130a:	2380      	movs	r3, #128	; 0x80
 800130c:	055b      	lsls	r3, r3, #21
 800130e:	429a      	cmp	r2, r3
 8001310:	d101      	bne.n	8001316 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8001312:	2301      	movs	r3, #1
 8001314:	e000      	b.n	8001318 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8001316:	2300      	movs	r3, #0
}
 8001318:	0018      	movs	r0, r3
 800131a:	46bd      	mov	sp, r7
 800131c:	b002      	add	sp, #8
 800131e:	bd80      	pop	{r7, pc}

08001320 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001320:	b580      	push	{r7, lr}
 8001322:	b082      	sub	sp, #8
 8001324:	af00      	add	r7, sp, #0
 8001326:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001328:	687b      	ldr	r3, [r7, #4]
 800132a:	689b      	ldr	r3, [r3, #8]
 800132c:	4a04      	ldr	r2, [pc, #16]	; (8001340 <LL_ADC_Enable+0x20>)
 800132e:	4013      	ands	r3, r2
 8001330:	2201      	movs	r2, #1
 8001332:	431a      	orrs	r2, r3
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8001338:	46c0      	nop			; (mov r8, r8)
 800133a:	46bd      	mov	sp, r7
 800133c:	b002      	add	sp, #8
 800133e:	bd80      	pop	{r7, pc}
 8001340:	7fffffe8 	.word	0x7fffffe8

08001344 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	b082      	sub	sp, #8
 8001348:	af00      	add	r7, sp, #0
 800134a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800134c:	687b      	ldr	r3, [r7, #4]
 800134e:	689b      	ldr	r3, [r3, #8]
 8001350:	4a04      	ldr	r2, [pc, #16]	; (8001364 <LL_ADC_Disable+0x20>)
 8001352:	4013      	ands	r3, r2
 8001354:	2202      	movs	r2, #2
 8001356:	431a      	orrs	r2, r3
 8001358:	687b      	ldr	r3, [r7, #4]
 800135a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 800135c:	46c0      	nop			; (mov r8, r8)
 800135e:	46bd      	mov	sp, r7
 8001360:	b002      	add	sp, #8
 8001362:	bd80      	pop	{r7, pc}
 8001364:	7fffffe8 	.word	0x7fffffe8

08001368 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8001368:	b580      	push	{r7, lr}
 800136a:	b082      	sub	sp, #8
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	2201      	movs	r2, #1
 8001376:	4013      	ands	r3, r2
 8001378:	2b01      	cmp	r3, #1
 800137a:	d101      	bne.n	8001380 <LL_ADC_IsEnabled+0x18>
 800137c:	2301      	movs	r3, #1
 800137e:	e000      	b.n	8001382 <LL_ADC_IsEnabled+0x1a>
 8001380:	2300      	movs	r3, #0
}
 8001382:	0018      	movs	r0, r3
 8001384:	46bd      	mov	sp, r7
 8001386:	b002      	add	sp, #8
 8001388:	bd80      	pop	{r7, pc}

0800138a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(const ADC_TypeDef *ADCx)
{
 800138a:	b580      	push	{r7, lr}
 800138c:	b082      	sub	sp, #8
 800138e:	af00      	add	r7, sp, #0
 8001390:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	689b      	ldr	r3, [r3, #8]
 8001396:	2202      	movs	r2, #2
 8001398:	4013      	ands	r3, r2
 800139a:	2b02      	cmp	r3, #2
 800139c:	d101      	bne.n	80013a2 <LL_ADC_IsDisableOngoing+0x18>
 800139e:	2301      	movs	r3, #1
 80013a0:	e000      	b.n	80013a4 <LL_ADC_IsDisableOngoing+0x1a>
 80013a2:	2300      	movs	r3, #0
}
 80013a4:	0018      	movs	r0, r3
 80013a6:	46bd      	mov	sp, r7
 80013a8:	b002      	add	sp, #8
 80013aa:	bd80      	pop	{r7, pc}

080013ac <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013ac:	b580      	push	{r7, lr}
 80013ae:	b082      	sub	sp, #8
 80013b0:	af00      	add	r7, sp, #0
 80013b2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	689b      	ldr	r3, [r3, #8]
 80013b8:	4a04      	ldr	r2, [pc, #16]	; (80013cc <LL_ADC_REG_StartConversion+0x20>)
 80013ba:	4013      	ands	r3, r2
 80013bc:	2204      	movs	r2, #4
 80013be:	431a      	orrs	r2, r3
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013c4:	46c0      	nop			; (mov r8, r8)
 80013c6:	46bd      	mov	sp, r7
 80013c8:	b002      	add	sp, #8
 80013ca:	bd80      	pop	{r7, pc}
 80013cc:	7fffffe8 	.word	0x7fffffe8

080013d0 <LL_ADC_REG_StopConversion>:
  * @rmtoll CR       ADSTP          LL_ADC_REG_StopConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StopConversion(ADC_TypeDef *ADCx)
{
 80013d0:	b580      	push	{r7, lr}
 80013d2:	b082      	sub	sp, #8
 80013d4:	af00      	add	r7, sp, #0
 80013d6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	689b      	ldr	r3, [r3, #8]
 80013dc:	4a04      	ldr	r2, [pc, #16]	; (80013f0 <LL_ADC_REG_StopConversion+0x20>)
 80013de:	4013      	ands	r3, r2
 80013e0:	2210      	movs	r2, #16
 80013e2:	431a      	orrs	r2, r3
 80013e4:	687b      	ldr	r3, [r7, #4]
 80013e6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTP);
}
 80013e8:	46c0      	nop			; (mov r8, r8)
 80013ea:	46bd      	mov	sp, r7
 80013ec:	b002      	add	sp, #8
 80013ee:	bd80      	pop	{r7, pc}
 80013f0:	7fffffe8 	.word	0x7fffffe8

080013f4 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	689b      	ldr	r3, [r3, #8]
 8001400:	2204      	movs	r2, #4
 8001402:	4013      	ands	r3, r2
 8001404:	2b04      	cmp	r3, #4
 8001406:	d101      	bne.n	800140c <LL_ADC_REG_IsConversionOngoing+0x18>
 8001408:	2301      	movs	r3, #1
 800140a:	e000      	b.n	800140e <LL_ADC_REG_IsConversionOngoing+0x1a>
 800140c:	2300      	movs	r3, #0
}
 800140e:	0018      	movs	r0, r3
 8001410:	46bd      	mov	sp, r7
 8001412:	b002      	add	sp, #8
 8001414:	bd80      	pop	{r7, pc}
	...

08001418 <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b088      	sub	sp, #32
 800141c:	af00      	add	r7, sp, #0
 800141e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001420:	231f      	movs	r3, #31
 8001422:	18fb      	adds	r3, r7, r3
 8001424:	2200      	movs	r2, #0
 8001426:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8001428:	2300      	movs	r3, #0
 800142a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 800142c:	2300      	movs	r3, #0
 800142e:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001430:	2300      	movs	r3, #0
 8001432:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	2b00      	cmp	r3, #0
 8001438:	d101      	bne.n	800143e <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800143a:	2301      	movs	r3, #1
 800143c:	e17f      	b.n	800173e <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001442:	2b00      	cmp	r3, #0
 8001444:	d10a      	bne.n	800145c <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001446:	687b      	ldr	r3, [r7, #4]
 8001448:	0018      	movs	r0, r3
 800144a:	f7ff fc81 	bl	8000d50 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	2200      	movs	r2, #0
 8001452:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001454:	687b      	ldr	r3, [r7, #4]
 8001456:	2254      	movs	r2, #84	; 0x54
 8001458:	2100      	movs	r1, #0
 800145a:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	681b      	ldr	r3, [r3, #0]
 8001460:	0018      	movs	r0, r3
 8001462:	f7ff ff49 	bl	80012f8 <LL_ADC_IsInternalRegulatorEnabled>
 8001466:	1e03      	subs	r3, r0, #0
 8001468:	d115      	bne.n	8001496 <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	681b      	ldr	r3, [r3, #0]
 800146e:	0018      	movs	r0, r3
 8001470:	f7ff ff2e 	bl	80012d0 <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001474:	4bb4      	ldr	r3, [pc, #720]	; (8001748 <HAL_ADC_Init+0x330>)
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	49b4      	ldr	r1, [pc, #720]	; (800174c <HAL_ADC_Init+0x334>)
 800147a:	0018      	movs	r0, r3
 800147c:	f7fe fe42 	bl	8000104 <__udivsi3>
 8001480:	0003      	movs	r3, r0
 8001482:	3301      	adds	r3, #1
 8001484:	005b      	lsls	r3, r3, #1
 8001486:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001488:	e002      	b.n	8001490 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	3b01      	subs	r3, #1
 800148e:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8001490:	68fb      	ldr	r3, [r7, #12]
 8001492:	2b00      	cmp	r3, #0
 8001494:	d1f9      	bne.n	800148a <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	681b      	ldr	r3, [r3, #0]
 800149a:	0018      	movs	r0, r3
 800149c:	f7ff ff2c 	bl	80012f8 <LL_ADC_IsInternalRegulatorEnabled>
 80014a0:	1e03      	subs	r3, r0, #0
 80014a2:	d10f      	bne.n	80014c4 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014a8:	2210      	movs	r2, #16
 80014aa:	431a      	orrs	r2, r3
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80014b4:	2201      	movs	r2, #1
 80014b6:	431a      	orrs	r2, r3
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80014bc:	231f      	movs	r3, #31
 80014be:	18fb      	adds	r3, r7, r3
 80014c0:	2201      	movs	r2, #1
 80014c2:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80014c4:	687b      	ldr	r3, [r7, #4]
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	0018      	movs	r0, r3
 80014ca:	f7ff ff93 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 80014ce:	0003      	movs	r3, r0
 80014d0:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014d6:	2210      	movs	r2, #16
 80014d8:	4013      	ands	r3, r2
 80014da:	d000      	beq.n	80014de <HAL_ADC_Init+0xc6>
 80014dc:	e122      	b.n	8001724 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 80014de:	693b      	ldr	r3, [r7, #16]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d000      	beq.n	80014e6 <HAL_ADC_Init+0xce>
 80014e4:	e11e      	b.n	8001724 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80014ea:	4a99      	ldr	r2, [pc, #612]	; (8001750 <HAL_ADC_Init+0x338>)
 80014ec:	4013      	ands	r3, r2
 80014ee:	2202      	movs	r2, #2
 80014f0:	431a      	orrs	r2, r3
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80014f6:	687b      	ldr	r3, [r7, #4]
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	0018      	movs	r0, r3
 80014fc:	f7ff ff34 	bl	8001368 <LL_ADC_IsEnabled>
 8001500:	1e03      	subs	r3, r0, #0
 8001502:	d000      	beq.n	8001506 <HAL_ADC_Init+0xee>
 8001504:	e0ad      	b.n	8001662 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001506:	687b      	ldr	r3, [r7, #4]
 8001508:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 800150a:	687b      	ldr	r3, [r7, #4]
 800150c:	7e1b      	ldrb	r3, [r3, #24]
 800150e:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001510:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001512:	687b      	ldr	r3, [r7, #4]
 8001514:	7e5b      	ldrb	r3, [r3, #25]
 8001516:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001518:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 800151a:	687b      	ldr	r3, [r7, #4]
 800151c:	7e9b      	ldrb	r3, [r3, #26]
 800151e:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001520:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001522:	687b      	ldr	r3, [r7, #4]
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	2b00      	cmp	r3, #0
 8001528:	d002      	beq.n	8001530 <HAL_ADC_Init+0x118>
 800152a:	2380      	movs	r3, #128	; 0x80
 800152c:	015b      	lsls	r3, r3, #5
 800152e:	e000      	b.n	8001532 <HAL_ADC_Init+0x11a>
 8001530:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001532:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001538:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	691b      	ldr	r3, [r3, #16]
 800153e:	2b00      	cmp	r3, #0
 8001540:	da04      	bge.n	800154c <HAL_ADC_Init+0x134>
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	691b      	ldr	r3, [r3, #16]
 8001546:	005b      	lsls	r3, r3, #1
 8001548:	085b      	lsrs	r3, r3, #1
 800154a:	e001      	b.n	8001550 <HAL_ADC_Init+0x138>
 800154c:	2380      	movs	r3, #128	; 0x80
 800154e:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001550:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	212c      	movs	r1, #44	; 0x2c
 8001556:	5c5b      	ldrb	r3, [r3, r1]
 8001558:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800155a:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 800155c:	69ba      	ldr	r2, [r7, #24]
 800155e:	4313      	orrs	r3, r2
 8001560:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001562:	687b      	ldr	r3, [r7, #4]
 8001564:	2220      	movs	r2, #32
 8001566:	5c9b      	ldrb	r3, [r3, r2]
 8001568:	2b01      	cmp	r3, #1
 800156a:	d115      	bne.n	8001598 <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	7e9b      	ldrb	r3, [r3, #26]
 8001570:	2b00      	cmp	r3, #0
 8001572:	d105      	bne.n	8001580 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001574:	69bb      	ldr	r3, [r7, #24]
 8001576:	2280      	movs	r2, #128	; 0x80
 8001578:	0252      	lsls	r2, r2, #9
 800157a:	4313      	orrs	r3, r2
 800157c:	61bb      	str	r3, [r7, #24]
 800157e:	e00b      	b.n	8001598 <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001580:	687b      	ldr	r3, [r7, #4]
 8001582:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001584:	2220      	movs	r2, #32
 8001586:	431a      	orrs	r2, r3
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001590:	2201      	movs	r2, #1
 8001592:	431a      	orrs	r2, r3
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001598:	687b      	ldr	r3, [r7, #4]
 800159a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800159c:	2b00      	cmp	r3, #0
 800159e:	d00a      	beq.n	80015b6 <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015a0:	687b      	ldr	r3, [r7, #4]
 80015a2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80015a4:	23e0      	movs	r3, #224	; 0xe0
 80015a6:	005b      	lsls	r3, r3, #1
 80015a8:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 80015aa:	687b      	ldr	r3, [r7, #4]
 80015ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 80015ae:	4313      	orrs	r3, r2
 80015b0:	69ba      	ldr	r2, [r7, #24]
 80015b2:	4313      	orrs	r3, r2
 80015b4:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	681b      	ldr	r3, [r3, #0]
 80015ba:	68db      	ldr	r3, [r3, #12]
 80015bc:	4a65      	ldr	r2, [pc, #404]	; (8001754 <HAL_ADC_Init+0x33c>)
 80015be:	4013      	ands	r3, r2
 80015c0:	0019      	movs	r1, r3
 80015c2:	687b      	ldr	r3, [r7, #4]
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	69ba      	ldr	r2, [r7, #24]
 80015c8:	430a      	orrs	r2, r1
 80015ca:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	685b      	ldr	r3, [r3, #4]
 80015d0:	0f9b      	lsrs	r3, r3, #30
 80015d2:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015d8:	4313      	orrs	r3, r2
 80015da:	697a      	ldr	r2, [r7, #20]
 80015dc:	4313      	orrs	r3, r2
 80015de:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	223c      	movs	r2, #60	; 0x3c
 80015e4:	5c9b      	ldrb	r3, [r3, r2]
 80015e6:	2b01      	cmp	r3, #1
 80015e8:	d111      	bne.n	800160e <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015ea:	687b      	ldr	r3, [r7, #4]
 80015ec:	685b      	ldr	r3, [r3, #4]
 80015ee:	0f9b      	lsrs	r3, r3, #30
 80015f0:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80015f2:	687b      	ldr	r3, [r7, #4]
 80015f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80015f6:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 80015fc:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001602:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001604:	697b      	ldr	r3, [r7, #20]
 8001606:	4313      	orrs	r3, r2
 8001608:	2201      	movs	r2, #1
 800160a:	4313      	orrs	r3, r2
 800160c:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	681b      	ldr	r3, [r3, #0]
 8001612:	691b      	ldr	r3, [r3, #16]
 8001614:	4a50      	ldr	r2, [pc, #320]	; (8001758 <HAL_ADC_Init+0x340>)
 8001616:	4013      	ands	r3, r2
 8001618:	0019      	movs	r1, r3
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	681b      	ldr	r3, [r3, #0]
 800161e:	697a      	ldr	r2, [r7, #20]
 8001620:	430a      	orrs	r2, r1
 8001622:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001624:	687b      	ldr	r3, [r7, #4]
 8001626:	685a      	ldr	r2, [r3, #4]
 8001628:	23c0      	movs	r3, #192	; 0xc0
 800162a:	061b      	lsls	r3, r3, #24
 800162c:	429a      	cmp	r2, r3
 800162e:	d018      	beq.n	8001662 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001634:	2380      	movs	r3, #128	; 0x80
 8001636:	05db      	lsls	r3, r3, #23
 8001638:	429a      	cmp	r2, r3
 800163a:	d012      	beq.n	8001662 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 800163c:	687b      	ldr	r3, [r7, #4]
 800163e:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001640:	2380      	movs	r3, #128	; 0x80
 8001642:	061b      	lsls	r3, r3, #24
 8001644:	429a      	cmp	r2, r3
 8001646:	d00c      	beq.n	8001662 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001648:	4b44      	ldr	r3, [pc, #272]	; (800175c <HAL_ADC_Init+0x344>)
 800164a:	681b      	ldr	r3, [r3, #0]
 800164c:	4a44      	ldr	r2, [pc, #272]	; (8001760 <HAL_ADC_Init+0x348>)
 800164e:	4013      	ands	r3, r2
 8001650:	0019      	movs	r1, r3
 8001652:	687b      	ldr	r3, [r7, #4]
 8001654:	685a      	ldr	r2, [r3, #4]
 8001656:	23f0      	movs	r3, #240	; 0xf0
 8001658:	039b      	lsls	r3, r3, #14
 800165a:	401a      	ands	r2, r3
 800165c:	4b3f      	ldr	r3, [pc, #252]	; (800175c <HAL_ADC_Init+0x344>)
 800165e:	430a      	orrs	r2, r1
 8001660:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001662:	687b      	ldr	r3, [r7, #4]
 8001664:	6818      	ldr	r0, [r3, #0]
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800166a:	001a      	movs	r2, r3
 800166c:	2100      	movs	r1, #0
 800166e:	f7ff fd8a 	bl	8001186 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001672:	687b      	ldr	r3, [r7, #4]
 8001674:	6818      	ldr	r0, [r3, #0]
 8001676:	687b      	ldr	r3, [r7, #4]
 8001678:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800167a:	493a      	ldr	r1, [pc, #232]	; (8001764 <HAL_ADC_Init+0x34c>)
 800167c:	001a      	movs	r2, r3
 800167e:	f7ff fd82 	bl	8001186 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	691b      	ldr	r3, [r3, #16]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d109      	bne.n	800169e <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800168a:	687b      	ldr	r3, [r7, #4]
 800168c:	681b      	ldr	r3, [r3, #0]
 800168e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001690:	687b      	ldr	r3, [r7, #4]
 8001692:	681b      	ldr	r3, [r3, #0]
 8001694:	2110      	movs	r1, #16
 8001696:	4249      	negs	r1, r1
 8001698:	430a      	orrs	r2, r1
 800169a:	629a      	str	r2, [r3, #40]	; 0x28
 800169c:	e018      	b.n	80016d0 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	691a      	ldr	r2, [r3, #16]
 80016a2:	2380      	movs	r3, #128	; 0x80
 80016a4:	039b      	lsls	r3, r3, #14
 80016a6:	429a      	cmp	r2, r3
 80016a8:	d112      	bne.n	80016d0 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	69db      	ldr	r3, [r3, #28]
 80016b4:	3b01      	subs	r3, #1
 80016b6:	009b      	lsls	r3, r3, #2
 80016b8:	221c      	movs	r2, #28
 80016ba:	4013      	ands	r3, r2
 80016bc:	2210      	movs	r2, #16
 80016be:	4252      	negs	r2, r2
 80016c0:	409a      	lsls	r2, r3
 80016c2:	0011      	movs	r1, r2
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 80016c8:	687b      	ldr	r3, [r7, #4]
 80016ca:	681b      	ldr	r3, [r3, #0]
 80016cc:	430a      	orrs	r2, r1
 80016ce:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	2100      	movs	r1, #0
 80016d6:	0018      	movs	r0, r3
 80016d8:	f7ff fd72 	bl	80011c0 <LL_ADC_GetSamplingTimeCommonChannels>
 80016dc:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80016de:	687b      	ldr	r3, [r7, #4]
 80016e0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016e2:	429a      	cmp	r2, r3
 80016e4:	d10b      	bne.n	80016fe <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	2200      	movs	r2, #0
 80016ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016f0:	2203      	movs	r2, #3
 80016f2:	4393      	bics	r3, r2
 80016f4:	2201      	movs	r2, #1
 80016f6:	431a      	orrs	r2, r3
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80016fc:	e01c      	b.n	8001738 <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001702:	2212      	movs	r2, #18
 8001704:	4393      	bics	r3, r2
 8001706:	2210      	movs	r2, #16
 8001708:	431a      	orrs	r2, r3
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800170e:	687b      	ldr	r3, [r7, #4]
 8001710:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001712:	2201      	movs	r2, #1
 8001714:	431a      	orrs	r2, r3
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 800171a:	231f      	movs	r3, #31
 800171c:	18fb      	adds	r3, r7, r3
 800171e:	2201      	movs	r2, #1
 8001720:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001722:	e009      	b.n	8001738 <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001728:	2210      	movs	r2, #16
 800172a:	431a      	orrs	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001730:	231f      	movs	r3, #31
 8001732:	18fb      	adds	r3, r7, r3
 8001734:	2201      	movs	r2, #1
 8001736:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001738:	231f      	movs	r3, #31
 800173a:	18fb      	adds	r3, r7, r3
 800173c:	781b      	ldrb	r3, [r3, #0]
}
 800173e:	0018      	movs	r0, r3
 8001740:	46bd      	mov	sp, r7
 8001742:	b008      	add	sp, #32
 8001744:	bd80      	pop	{r7, pc}
 8001746:	46c0      	nop			; (mov r8, r8)
 8001748:	20000000 	.word	0x20000000
 800174c:	00030d40 	.word	0x00030d40
 8001750:	fffffefd 	.word	0xfffffefd
 8001754:	ffde0201 	.word	0xffde0201
 8001758:	1ffffc02 	.word	0x1ffffc02
 800175c:	40012708 	.word	0x40012708
 8001760:	ffc3ffff 	.word	0xffc3ffff
 8001764:	07ffff04 	.word	0x07ffff04

08001768 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001768:	b5b0      	push	{r4, r5, r7, lr}
 800176a:	b084      	sub	sp, #16
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	0018      	movs	r0, r3
 8001776:	f7ff fe3d 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 800177a:	1e03      	subs	r3, r0, #0
 800177c:	d135      	bne.n	80017ea <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	2254      	movs	r2, #84	; 0x54
 8001782:	5c9b      	ldrb	r3, [r3, r2]
 8001784:	2b01      	cmp	r3, #1
 8001786:	d101      	bne.n	800178c <HAL_ADC_Start+0x24>
 8001788:	2302      	movs	r3, #2
 800178a:	e035      	b.n	80017f8 <HAL_ADC_Start+0x90>
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2254      	movs	r2, #84	; 0x54
 8001790:	2101      	movs	r1, #1
 8001792:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001794:	250f      	movs	r5, #15
 8001796:	197c      	adds	r4, r7, r5
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	0018      	movs	r0, r3
 800179c:	f000 fb28 	bl	8001df0 <ADC_Enable>
 80017a0:	0003      	movs	r3, r0
 80017a2:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017a4:	197b      	adds	r3, r7, r5
 80017a6:	781b      	ldrb	r3, [r3, #0]
 80017a8:	2b00      	cmp	r3, #0
 80017aa:	d119      	bne.n	80017e0 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017b0:	4a13      	ldr	r2, [pc, #76]	; (8001800 <HAL_ADC_Start+0x98>)
 80017b2:	4013      	ands	r3, r2
 80017b4:	2280      	movs	r2, #128	; 0x80
 80017b6:	0052      	lsls	r2, r2, #1
 80017b8:	431a      	orrs	r2, r3
 80017ba:	687b      	ldr	r3, [r7, #4]
 80017bc:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	2200      	movs	r2, #0
 80017c2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 80017c4:	687b      	ldr	r3, [r7, #4]
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	221c      	movs	r2, #28
 80017ca:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	2254      	movs	r2, #84	; 0x54
 80017d0:	2100      	movs	r1, #0
 80017d2:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	0018      	movs	r0, r3
 80017da:	f7ff fde7 	bl	80013ac <LL_ADC_REG_StartConversion>
 80017de:	e008      	b.n	80017f2 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	2254      	movs	r2, #84	; 0x54
 80017e4:	2100      	movs	r1, #0
 80017e6:	5499      	strb	r1, [r3, r2]
 80017e8:	e003      	b.n	80017f2 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80017ea:	230f      	movs	r3, #15
 80017ec:	18fb      	adds	r3, r7, r3
 80017ee:	2202      	movs	r2, #2
 80017f0:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80017f2:	230f      	movs	r3, #15
 80017f4:	18fb      	adds	r3, r7, r3
 80017f6:	781b      	ldrb	r3, [r3, #0]
}
 80017f8:	0018      	movs	r0, r3
 80017fa:	46bd      	mov	sp, r7
 80017fc:	b004      	add	sp, #16
 80017fe:	bdb0      	pop	{r4, r5, r7, pc}
 8001800:	fffff0fe 	.word	0xfffff0fe

08001804 <HAL_ADC_Stop>:
  *         should be preliminarily stopped using HAL_ADCEx_InjectedStop function.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Stop(ADC_HandleTypeDef *hadc)
{
 8001804:	b5b0      	push	{r4, r5, r7, lr}
 8001806:	b084      	sub	sp, #16
 8001808:	af00      	add	r7, sp, #0
 800180a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  __HAL_LOCK(hadc);
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	2254      	movs	r2, #84	; 0x54
 8001810:	5c9b      	ldrb	r3, [r3, r2]
 8001812:	2b01      	cmp	r3, #1
 8001814:	d101      	bne.n	800181a <HAL_ADC_Stop+0x16>
 8001816:	2302      	movs	r3, #2
 8001818:	e029      	b.n	800186e <HAL_ADC_Stop+0x6a>
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	2254      	movs	r2, #84	; 0x54
 800181e:	2101      	movs	r1, #1
 8001820:	5499      	strb	r1, [r3, r2]

  /* 1. Stop potential conversion on going, on ADC group regular */
  tmp_hal_status = ADC_ConversionStop(hadc);
 8001822:	250f      	movs	r5, #15
 8001824:	197c      	adds	r4, r7, r5
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	0018      	movs	r0, r3
 800182a:	f000 fa9f 	bl	8001d6c <ADC_ConversionStop>
 800182e:	0003      	movs	r3, r0
 8001830:	7023      	strb	r3, [r4, #0]

  /* Disable ADC peripheral if conversions are effectively stopped */
  if (tmp_hal_status == HAL_OK)
 8001832:	197b      	adds	r3, r7, r5
 8001834:	781b      	ldrb	r3, [r3, #0]
 8001836:	2b00      	cmp	r3, #0
 8001838:	d112      	bne.n	8001860 <HAL_ADC_Stop+0x5c>
  {
    /* 2. Disable the ADC peripheral */
    tmp_hal_status = ADC_Disable(hadc);
 800183a:	197c      	adds	r4, r7, r5
 800183c:	687b      	ldr	r3, [r7, #4]
 800183e:	0018      	movs	r0, r3
 8001840:	f000 fb5c 	bl	8001efc <ADC_Disable>
 8001844:	0003      	movs	r3, r0
 8001846:	7023      	strb	r3, [r4, #0]

    /* Check if ADC is effectively disabled */
    if (tmp_hal_status == HAL_OK)
 8001848:	197b      	adds	r3, r7, r5
 800184a:	781b      	ldrb	r3, [r3, #0]
 800184c:	2b00      	cmp	r3, #0
 800184e:	d107      	bne.n	8001860 <HAL_ADC_Stop+0x5c>
    {
      /* Set ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001850:	687b      	ldr	r3, [r7, #4]
 8001852:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001854:	4a08      	ldr	r2, [pc, #32]	; (8001878 <HAL_ADC_Stop+0x74>)
 8001856:	4013      	ands	r3, r2
 8001858:	2201      	movs	r2, #1
 800185a:	431a      	orrs	r2, r3
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_REG_BUSY,
                        HAL_ADC_STATE_READY);
    }
  }

  __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2254      	movs	r2, #84	; 0x54
 8001864:	2100      	movs	r1, #0
 8001866:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001868:	230f      	movs	r3, #15
 800186a:	18fb      	adds	r3, r7, r3
 800186c:	781b      	ldrb	r3, [r3, #0]
}
 800186e:	0018      	movs	r0, r3
 8001870:	46bd      	mov	sp, r7
 8001872:	b004      	add	sp, #16
 8001874:	bdb0      	pop	{r4, r5, r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	fffffefe 	.word	0xfffffefe

0800187c <HAL_ADC_PollForConversion>:
  * @param hadc ADC handle
  * @param Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b084      	sub	sp, #16
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
 8001884:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	695b      	ldr	r3, [r3, #20]
 800188a:	2b08      	cmp	r3, #8
 800188c:	d102      	bne.n	8001894 <HAL_ADC_PollForConversion+0x18>
  {
    tmp_flag_end = ADC_FLAG_EOS;
 800188e:	2308      	movs	r3, #8
 8001890:	60fb      	str	r3, [r7, #12]
 8001892:	e00f      	b.n	80018b4 <HAL_ADC_PollForConversion+0x38>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if ((hadc->Instance->CFGR1 & ADC_CFGR1_DMAEN) != 0UL)
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	68db      	ldr	r3, [r3, #12]
 800189a:	2201      	movs	r2, #1
 800189c:	4013      	ands	r3, r2
 800189e:	d007      	beq.n	80018b0 <HAL_ADC_PollForConversion+0x34>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018a4:	2220      	movs	r2, #32
 80018a6:	431a      	orrs	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80018ac:	2301      	movs	r3, #1
 80018ae:	e072      	b.n	8001996 <HAL_ADC_PollForConversion+0x11a>
    }
    else
    {
      tmp_flag_end = (ADC_FLAG_EOC);
 80018b0:	2304      	movs	r3, #4
 80018b2:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 80018b4:	f7ff fc26 	bl	8001104 <HAL_GetTick>
 80018b8:	0003      	movs	r3, r0
 80018ba:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80018bc:	e01f      	b.n	80018fe <HAL_ADC_PollForConversion+0x82>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80018be:	683b      	ldr	r3, [r7, #0]
 80018c0:	3301      	adds	r3, #1
 80018c2:	d01c      	beq.n	80018fe <HAL_ADC_PollForConversion+0x82>
    {
      if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0UL))
 80018c4:	f7ff fc1e 	bl	8001104 <HAL_GetTick>
 80018c8:	0002      	movs	r2, r0
 80018ca:	68bb      	ldr	r3, [r7, #8]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d302      	bcc.n	80018da <HAL_ADC_PollForConversion+0x5e>
 80018d4:	683b      	ldr	r3, [r7, #0]
 80018d6:	2b00      	cmp	r3, #0
 80018d8:	d111      	bne.n	80018fe <HAL_ADC_PollForConversion+0x82>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80018da:	687b      	ldr	r3, [r7, #4]
 80018dc:	681b      	ldr	r3, [r3, #0]
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	68fa      	ldr	r2, [r7, #12]
 80018e2:	4013      	ands	r3, r2
 80018e4:	d10b      	bne.n	80018fe <HAL_ADC_PollForConversion+0x82>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80018e6:	687b      	ldr	r3, [r7, #4]
 80018e8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ea:	2204      	movs	r2, #4
 80018ec:	431a      	orrs	r2, r3
 80018ee:	687b      	ldr	r3, [r7, #4]
 80018f0:	659a      	str	r2, [r3, #88]	; 0x58

          __HAL_UNLOCK(hadc);
 80018f2:	687b      	ldr	r3, [r7, #4]
 80018f4:	2254      	movs	r2, #84	; 0x54
 80018f6:	2100      	movs	r1, #0
 80018f8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80018fa:	2303      	movs	r3, #3
 80018fc:	e04b      	b.n	8001996 <HAL_ADC_PollForConversion+0x11a>
  while ((hadc->Instance->ISR & tmp_flag_end) == 0UL)
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	68fa      	ldr	r2, [r7, #12]
 8001906:	4013      	ands	r3, r2
 8001908:	d0d9      	beq.n	80018be <HAL_ADC_PollForConversion+0x42>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800190e:	2280      	movs	r2, #128	; 0x80
 8001910:	0092      	lsls	r2, r2, #2
 8001912:	431a      	orrs	r2, r3
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	659a      	str	r2, [r3, #88]	; 0x58

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if ((LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	681b      	ldr	r3, [r3, #0]
 800191c:	0018      	movs	r0, r3
 800191e:	f7ff fc66 	bl	80011ee <LL_ADC_REG_IsTriggerSourceSWStart>
 8001922:	1e03      	subs	r3, r0, #0
 8001924:	d02e      	beq.n	8001984 <HAL_ADC_PollForConversion+0x108>
      && (hadc->Init.ContinuousConvMode == DISABLE)
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	7e9b      	ldrb	r3, [r3, #26]
 800192a:	2b00      	cmp	r3, #0
 800192c:	d12a      	bne.n	8001984 <HAL_ADC_PollForConversion+0x108>
     )
  {
    /* Check whether end of sequence is reached */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	681b      	ldr	r3, [r3, #0]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	2208      	movs	r2, #8
 8001936:	4013      	ands	r3, r2
 8001938:	2b08      	cmp	r3, #8
 800193a:	d123      	bne.n	8001984 <HAL_ADC_PollForConversion+0x108>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	681b      	ldr	r3, [r3, #0]
 8001940:	0018      	movs	r0, r3
 8001942:	f7ff fd57 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 8001946:	1e03      	subs	r3, r0, #0
 8001948:	d110      	bne.n	800196c <HAL_ADC_PollForConversion+0xf0>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	681b      	ldr	r3, [r3, #0]
 800194e:	685a      	ldr	r2, [r3, #4]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	210c      	movs	r1, #12
 8001956:	438a      	bics	r2, r1
 8001958:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800195e:	4a10      	ldr	r2, [pc, #64]	; (80019a0 <HAL_ADC_PollForConversion+0x124>)
 8001960:	4013      	ands	r3, r2
 8001962:	2201      	movs	r2, #1
 8001964:	431a      	orrs	r2, r3
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	659a      	str	r2, [r3, #88]	; 0x58
 800196a:	e00b      	b.n	8001984 <HAL_ADC_PollForConversion+0x108>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800196c:	687b      	ldr	r3, [r7, #4]
 800196e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001970:	2220      	movs	r2, #32
 8001972:	431a      	orrs	r2, r3
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	659a      	str	r2, [r3, #88]	; 0x58

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800197c:	2201      	movs	r2, #1
 800197e:	431a      	orrs	r2, r3
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	7e1b      	ldrb	r3, [r3, #24]
 8001988:	2b00      	cmp	r3, #0
 800198a:	d103      	bne.n	8001994 <HAL_ADC_PollForConversion+0x118>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800198c:	687b      	ldr	r3, [r7, #4]
 800198e:	681b      	ldr	r3, [r3, #0]
 8001990:	220c      	movs	r2, #12
 8001992:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001994:	2300      	movs	r3, #0
}
 8001996:	0018      	movs	r0, r3
 8001998:	46bd      	mov	sp, r7
 800199a:	b004      	add	sp, #16
 800199c:	bd80      	pop	{r7, pc}
 800199e:	46c0      	nop			; (mov r8, r8)
 80019a0:	fffffefe 	.word	0xfffffefe

080019a4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(const ADC_HandleTypeDef *hadc)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b082      	sub	sp, #8
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	681b      	ldr	r3, [r3, #0]
 80019b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 80019b2:	0018      	movs	r0, r3
 80019b4:	46bd      	mov	sp, r7
 80019b6:	b002      	add	sp, #8
 80019b8:	bd80      	pop	{r7, pc}
	...

080019bc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80019bc:	b580      	push	{r7, lr}
 80019be:	b086      	sub	sp, #24
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80019c6:	2317      	movs	r3, #23
 80019c8:	18fb      	adds	r3, r7, r3
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80019ce:	2300      	movs	r3, #0
 80019d0:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80019d2:	687b      	ldr	r3, [r7, #4]
 80019d4:	2254      	movs	r2, #84	; 0x54
 80019d6:	5c9b      	ldrb	r3, [r3, r2]
 80019d8:	2b01      	cmp	r3, #1
 80019da:	d101      	bne.n	80019e0 <HAL_ADC_ConfigChannel+0x24>
 80019dc:	2302      	movs	r3, #2
 80019de:	e1c0      	b.n	8001d62 <HAL_ADC_ConfigChannel+0x3a6>
 80019e0:	687b      	ldr	r3, [r7, #4]
 80019e2:	2254      	movs	r2, #84	; 0x54
 80019e4:	2101      	movs	r1, #1
 80019e6:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	681b      	ldr	r3, [r3, #0]
 80019ec:	0018      	movs	r0, r3
 80019ee:	f7ff fd01 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 80019f2:	1e03      	subs	r3, r0, #0
 80019f4:	d000      	beq.n	80019f8 <HAL_ADC_ConfigChannel+0x3c>
 80019f6:	e1a3      	b.n	8001d40 <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 80019f8:	683b      	ldr	r3, [r7, #0]
 80019fa:	685b      	ldr	r3, [r3, #4]
 80019fc:	2b02      	cmp	r3, #2
 80019fe:	d100      	bne.n	8001a02 <HAL_ADC_ConfigChannel+0x46>
 8001a00:	e143      	b.n	8001c8a <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	691a      	ldr	r2, [r3, #16]
 8001a06:	2380      	movs	r3, #128	; 0x80
 8001a08:	061b      	lsls	r3, r3, #24
 8001a0a:	429a      	cmp	r2, r3
 8001a0c:	d004      	beq.n	8001a18 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001a12:	4ac1      	ldr	r2, [pc, #772]	; (8001d18 <HAL_ADC_ConfigChannel+0x35c>)
 8001a14:	4293      	cmp	r3, r2
 8001a16:	d108      	bne.n	8001a2a <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	681a      	ldr	r2, [r3, #0]
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	0019      	movs	r1, r3
 8001a22:	0010      	movs	r0, r2
 8001a24:	f7ff fc14 	bl	8001250 <LL_ADC_REG_SetSequencerChAdd>
 8001a28:	e0c9      	b.n	8001bbe <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001a2e:	683b      	ldr	r3, [r7, #0]
 8001a30:	685b      	ldr	r3, [r3, #4]
 8001a32:	211f      	movs	r1, #31
 8001a34:	400b      	ands	r3, r1
 8001a36:	210f      	movs	r1, #15
 8001a38:	4099      	lsls	r1, r3
 8001a3a:	000b      	movs	r3, r1
 8001a3c:	43db      	mvns	r3, r3
 8001a3e:	4013      	ands	r3, r2
 8001a40:	0019      	movs	r1, r3
 8001a42:	683b      	ldr	r3, [r7, #0]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	035b      	lsls	r3, r3, #13
 8001a48:	0b5b      	lsrs	r3, r3, #13
 8001a4a:	d105      	bne.n	8001a58 <HAL_ADC_ConfigChannel+0x9c>
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	0e9b      	lsrs	r3, r3, #26
 8001a52:	221f      	movs	r2, #31
 8001a54:	4013      	ands	r3, r2
 8001a56:	e098      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	681b      	ldr	r3, [r3, #0]
 8001a5c:	2201      	movs	r2, #1
 8001a5e:	4013      	ands	r3, r2
 8001a60:	d000      	beq.n	8001a64 <HAL_ADC_ConfigChannel+0xa8>
 8001a62:	e091      	b.n	8001b88 <HAL_ADC_ConfigChannel+0x1cc>
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	2202      	movs	r2, #2
 8001a6a:	4013      	ands	r3, r2
 8001a6c:	d000      	beq.n	8001a70 <HAL_ADC_ConfigChannel+0xb4>
 8001a6e:	e089      	b.n	8001b84 <HAL_ADC_ConfigChannel+0x1c8>
 8001a70:	683b      	ldr	r3, [r7, #0]
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	2204      	movs	r2, #4
 8001a76:	4013      	ands	r3, r2
 8001a78:	d000      	beq.n	8001a7c <HAL_ADC_ConfigChannel+0xc0>
 8001a7a:	e081      	b.n	8001b80 <HAL_ADC_ConfigChannel+0x1c4>
 8001a7c:	683b      	ldr	r3, [r7, #0]
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	2208      	movs	r2, #8
 8001a82:	4013      	ands	r3, r2
 8001a84:	d000      	beq.n	8001a88 <HAL_ADC_ConfigChannel+0xcc>
 8001a86:	e079      	b.n	8001b7c <HAL_ADC_ConfigChannel+0x1c0>
 8001a88:	683b      	ldr	r3, [r7, #0]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	2210      	movs	r2, #16
 8001a8e:	4013      	ands	r3, r2
 8001a90:	d000      	beq.n	8001a94 <HAL_ADC_ConfigChannel+0xd8>
 8001a92:	e071      	b.n	8001b78 <HAL_ADC_ConfigChannel+0x1bc>
 8001a94:	683b      	ldr	r3, [r7, #0]
 8001a96:	681b      	ldr	r3, [r3, #0]
 8001a98:	2220      	movs	r2, #32
 8001a9a:	4013      	ands	r3, r2
 8001a9c:	d000      	beq.n	8001aa0 <HAL_ADC_ConfigChannel+0xe4>
 8001a9e:	e069      	b.n	8001b74 <HAL_ADC_ConfigChannel+0x1b8>
 8001aa0:	683b      	ldr	r3, [r7, #0]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2240      	movs	r2, #64	; 0x40
 8001aa6:	4013      	ands	r3, r2
 8001aa8:	d000      	beq.n	8001aac <HAL_ADC_ConfigChannel+0xf0>
 8001aaa:	e061      	b.n	8001b70 <HAL_ADC_ConfigChannel+0x1b4>
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	2280      	movs	r2, #128	; 0x80
 8001ab2:	4013      	ands	r3, r2
 8001ab4:	d000      	beq.n	8001ab8 <HAL_ADC_ConfigChannel+0xfc>
 8001ab6:	e059      	b.n	8001b6c <HAL_ADC_ConfigChannel+0x1b0>
 8001ab8:	683b      	ldr	r3, [r7, #0]
 8001aba:	681a      	ldr	r2, [r3, #0]
 8001abc:	2380      	movs	r3, #128	; 0x80
 8001abe:	005b      	lsls	r3, r3, #1
 8001ac0:	4013      	ands	r3, r2
 8001ac2:	d151      	bne.n	8001b68 <HAL_ADC_ConfigChannel+0x1ac>
 8001ac4:	683b      	ldr	r3, [r7, #0]
 8001ac6:	681a      	ldr	r2, [r3, #0]
 8001ac8:	2380      	movs	r3, #128	; 0x80
 8001aca:	009b      	lsls	r3, r3, #2
 8001acc:	4013      	ands	r3, r2
 8001ace:	d149      	bne.n	8001b64 <HAL_ADC_ConfigChannel+0x1a8>
 8001ad0:	683b      	ldr	r3, [r7, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	2380      	movs	r3, #128	; 0x80
 8001ad6:	00db      	lsls	r3, r3, #3
 8001ad8:	4013      	ands	r3, r2
 8001ada:	d141      	bne.n	8001b60 <HAL_ADC_ConfigChannel+0x1a4>
 8001adc:	683b      	ldr	r3, [r7, #0]
 8001ade:	681a      	ldr	r2, [r3, #0]
 8001ae0:	2380      	movs	r3, #128	; 0x80
 8001ae2:	011b      	lsls	r3, r3, #4
 8001ae4:	4013      	ands	r3, r2
 8001ae6:	d139      	bne.n	8001b5c <HAL_ADC_ConfigChannel+0x1a0>
 8001ae8:	683b      	ldr	r3, [r7, #0]
 8001aea:	681a      	ldr	r2, [r3, #0]
 8001aec:	2380      	movs	r3, #128	; 0x80
 8001aee:	015b      	lsls	r3, r3, #5
 8001af0:	4013      	ands	r3, r2
 8001af2:	d131      	bne.n	8001b58 <HAL_ADC_ConfigChannel+0x19c>
 8001af4:	683b      	ldr	r3, [r7, #0]
 8001af6:	681a      	ldr	r2, [r3, #0]
 8001af8:	2380      	movs	r3, #128	; 0x80
 8001afa:	019b      	lsls	r3, r3, #6
 8001afc:	4013      	ands	r3, r2
 8001afe:	d129      	bne.n	8001b54 <HAL_ADC_ConfigChannel+0x198>
 8001b00:	683b      	ldr	r3, [r7, #0]
 8001b02:	681a      	ldr	r2, [r3, #0]
 8001b04:	2380      	movs	r3, #128	; 0x80
 8001b06:	01db      	lsls	r3, r3, #7
 8001b08:	4013      	ands	r3, r2
 8001b0a:	d121      	bne.n	8001b50 <HAL_ADC_ConfigChannel+0x194>
 8001b0c:	683b      	ldr	r3, [r7, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	2380      	movs	r3, #128	; 0x80
 8001b12:	021b      	lsls	r3, r3, #8
 8001b14:	4013      	ands	r3, r2
 8001b16:	d119      	bne.n	8001b4c <HAL_ADC_ConfigChannel+0x190>
 8001b18:	683b      	ldr	r3, [r7, #0]
 8001b1a:	681a      	ldr	r2, [r3, #0]
 8001b1c:	2380      	movs	r3, #128	; 0x80
 8001b1e:	025b      	lsls	r3, r3, #9
 8001b20:	4013      	ands	r3, r2
 8001b22:	d111      	bne.n	8001b48 <HAL_ADC_ConfigChannel+0x18c>
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	681a      	ldr	r2, [r3, #0]
 8001b28:	2380      	movs	r3, #128	; 0x80
 8001b2a:	029b      	lsls	r3, r3, #10
 8001b2c:	4013      	ands	r3, r2
 8001b2e:	d109      	bne.n	8001b44 <HAL_ADC_ConfigChannel+0x188>
 8001b30:	683b      	ldr	r3, [r7, #0]
 8001b32:	681a      	ldr	r2, [r3, #0]
 8001b34:	2380      	movs	r3, #128	; 0x80
 8001b36:	02db      	lsls	r3, r3, #11
 8001b38:	4013      	ands	r3, r2
 8001b3a:	d001      	beq.n	8001b40 <HAL_ADC_ConfigChannel+0x184>
 8001b3c:	2312      	movs	r3, #18
 8001b3e:	e024      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b40:	2300      	movs	r3, #0
 8001b42:	e022      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b44:	2311      	movs	r3, #17
 8001b46:	e020      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b48:	2310      	movs	r3, #16
 8001b4a:	e01e      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b4c:	230f      	movs	r3, #15
 8001b4e:	e01c      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b50:	230e      	movs	r3, #14
 8001b52:	e01a      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b54:	230d      	movs	r3, #13
 8001b56:	e018      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b58:	230c      	movs	r3, #12
 8001b5a:	e016      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b5c:	230b      	movs	r3, #11
 8001b5e:	e014      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b60:	230a      	movs	r3, #10
 8001b62:	e012      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b64:	2309      	movs	r3, #9
 8001b66:	e010      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b68:	2308      	movs	r3, #8
 8001b6a:	e00e      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b6c:	2307      	movs	r3, #7
 8001b6e:	e00c      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b70:	2306      	movs	r3, #6
 8001b72:	e00a      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b74:	2305      	movs	r3, #5
 8001b76:	e008      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b78:	2304      	movs	r3, #4
 8001b7a:	e006      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b7c:	2303      	movs	r3, #3
 8001b7e:	e004      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b80:	2302      	movs	r3, #2
 8001b82:	e002      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b84:	2301      	movs	r3, #1
 8001b86:	e000      	b.n	8001b8a <HAL_ADC_ConfigChannel+0x1ce>
 8001b88:	2300      	movs	r3, #0
 8001b8a:	683a      	ldr	r2, [r7, #0]
 8001b8c:	6852      	ldr	r2, [r2, #4]
 8001b8e:	201f      	movs	r0, #31
 8001b90:	4002      	ands	r2, r0
 8001b92:	4093      	lsls	r3, r2
 8001b94:	000a      	movs	r2, r1
 8001b96:	431a      	orrs	r2, r3
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685b      	ldr	r3, [r3, #4]
 8001ba0:	089b      	lsrs	r3, r3, #2
 8001ba2:	1c5a      	adds	r2, r3, #1
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	69db      	ldr	r3, [r3, #28]
 8001ba8:	429a      	cmp	r2, r3
 8001baa:	d808      	bhi.n	8001bbe <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	6818      	ldr	r0, [r3, #0]
 8001bb0:	683b      	ldr	r3, [r7, #0]
 8001bb2:	6859      	ldr	r1, [r3, #4]
 8001bb4:	683b      	ldr	r3, [r7, #0]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	001a      	movs	r2, r3
 8001bba:	f7ff fb29 	bl	8001210 <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001bbe:	687b      	ldr	r3, [r7, #4]
 8001bc0:	6818      	ldr	r0, [r3, #0]
 8001bc2:	683b      	ldr	r3, [r7, #0]
 8001bc4:	6819      	ldr	r1, [r3, #0]
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	689b      	ldr	r3, [r3, #8]
 8001bca:	001a      	movs	r2, r3
 8001bcc:	f7ff fb64 	bl	8001298 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001bd0:	683b      	ldr	r3, [r7, #0]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	db00      	blt.n	8001bda <HAL_ADC_ConfigChannel+0x21e>
 8001bd8:	e0bc      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001bda:	4b50      	ldr	r3, [pc, #320]	; (8001d1c <HAL_ADC_ConfigChannel+0x360>)
 8001bdc:	0018      	movs	r0, r3
 8001bde:	f7ff fac5 	bl	800116c <LL_ADC_GetCommonPathInternalCh>
 8001be2:	0003      	movs	r3, r0
 8001be4:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4a4d      	ldr	r2, [pc, #308]	; (8001d20 <HAL_ADC_ConfigChannel+0x364>)
 8001bec:	4293      	cmp	r3, r2
 8001bee:	d122      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001bf0:	693a      	ldr	r2, [r7, #16]
 8001bf2:	2380      	movs	r3, #128	; 0x80
 8001bf4:	041b      	lsls	r3, r3, #16
 8001bf6:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001bf8:	d11d      	bne.n	8001c36 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001bfa:	693b      	ldr	r3, [r7, #16]
 8001bfc:	2280      	movs	r2, #128	; 0x80
 8001bfe:	0412      	lsls	r2, r2, #16
 8001c00:	4313      	orrs	r3, r2
 8001c02:	4a46      	ldr	r2, [pc, #280]	; (8001d1c <HAL_ADC_ConfigChannel+0x360>)
 8001c04:	0019      	movs	r1, r3
 8001c06:	0010      	movs	r0, r2
 8001c08:	f7ff fa9c 	bl	8001144 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001c0c:	4b45      	ldr	r3, [pc, #276]	; (8001d24 <HAL_ADC_ConfigChannel+0x368>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4945      	ldr	r1, [pc, #276]	; (8001d28 <HAL_ADC_ConfigChannel+0x36c>)
 8001c12:	0018      	movs	r0, r3
 8001c14:	f7fe fa76 	bl	8000104 <__udivsi3>
 8001c18:	0003      	movs	r3, r0
 8001c1a:	1c5a      	adds	r2, r3, #1
 8001c1c:	0013      	movs	r3, r2
 8001c1e:	005b      	lsls	r3, r3, #1
 8001c20:	189b      	adds	r3, r3, r2
 8001c22:	009b      	lsls	r3, r3, #2
 8001c24:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c26:	e002      	b.n	8001c2e <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	3b01      	subs	r3, #1
 8001c2c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001c2e:	68fb      	ldr	r3, [r7, #12]
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d1f9      	bne.n	8001c28 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001c34:	e08e      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	681b      	ldr	r3, [r3, #0]
 8001c3a:	4a3c      	ldr	r2, [pc, #240]	; (8001d2c <HAL_ADC_ConfigChannel+0x370>)
 8001c3c:	4293      	cmp	r3, r2
 8001c3e:	d10e      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001c40:	693a      	ldr	r2, [r7, #16]
 8001c42:	2380      	movs	r3, #128	; 0x80
 8001c44:	045b      	lsls	r3, r3, #17
 8001c46:	4013      	ands	r3, r2
 8001c48:	d109      	bne.n	8001c5e <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c4a:	693b      	ldr	r3, [r7, #16]
 8001c4c:	2280      	movs	r2, #128	; 0x80
 8001c4e:	0452      	lsls	r2, r2, #17
 8001c50:	4313      	orrs	r3, r2
 8001c52:	4a32      	ldr	r2, [pc, #200]	; (8001d1c <HAL_ADC_ConfigChannel+0x360>)
 8001c54:	0019      	movs	r1, r3
 8001c56:	0010      	movs	r0, r2
 8001c58:	f7ff fa74 	bl	8001144 <LL_ADC_SetCommonPathInternalCh>
 8001c5c:	e07a      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c5e:	683b      	ldr	r3, [r7, #0]
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4a33      	ldr	r2, [pc, #204]	; (8001d30 <HAL_ADC_ConfigChannel+0x374>)
 8001c64:	4293      	cmp	r3, r2
 8001c66:	d000      	beq.n	8001c6a <HAL_ADC_ConfigChannel+0x2ae>
 8001c68:	e074      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001c6a:	693a      	ldr	r2, [r7, #16]
 8001c6c:	2380      	movs	r3, #128	; 0x80
 8001c6e:	03db      	lsls	r3, r3, #15
 8001c70:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001c72:	d000      	beq.n	8001c76 <HAL_ADC_ConfigChannel+0x2ba>
 8001c74:	e06e      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001c76:	693b      	ldr	r3, [r7, #16]
 8001c78:	2280      	movs	r2, #128	; 0x80
 8001c7a:	03d2      	lsls	r2, r2, #15
 8001c7c:	4313      	orrs	r3, r2
 8001c7e:	4a27      	ldr	r2, [pc, #156]	; (8001d1c <HAL_ADC_ConfigChannel+0x360>)
 8001c80:	0019      	movs	r1, r3
 8001c82:	0010      	movs	r0, r2
 8001c84:	f7ff fa5e 	bl	8001144 <LL_ADC_SetCommonPathInternalCh>
 8001c88:	e064      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	691a      	ldr	r2, [r3, #16]
 8001c8e:	2380      	movs	r3, #128	; 0x80
 8001c90:	061b      	lsls	r3, r3, #24
 8001c92:	429a      	cmp	r2, r3
 8001c94:	d004      	beq.n	8001ca0 <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001c96:	687b      	ldr	r3, [r7, #4]
 8001c98:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001c9a:	4a1f      	ldr	r2, [pc, #124]	; (8001d18 <HAL_ADC_ConfigChannel+0x35c>)
 8001c9c:	4293      	cmp	r3, r2
 8001c9e:	d107      	bne.n	8001cb0 <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 8001ca0:	687b      	ldr	r3, [r7, #4]
 8001ca2:	681a      	ldr	r2, [r3, #0]
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	0019      	movs	r1, r3
 8001caa:	0010      	movs	r0, r2
 8001cac:	f7ff fae1 	bl	8001272 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	2b00      	cmp	r3, #0
 8001cb6:	da4d      	bge.n	8001d54 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001cb8:	4b18      	ldr	r3, [pc, #96]	; (8001d1c <HAL_ADC_ConfigChannel+0x360>)
 8001cba:	0018      	movs	r0, r3
 8001cbc:	f7ff fa56 	bl	800116c <LL_ADC_GetCommonPathInternalCh>
 8001cc0:	0003      	movs	r3, r0
 8001cc2:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	4a15      	ldr	r2, [pc, #84]	; (8001d20 <HAL_ADC_ConfigChannel+0x364>)
 8001cca:	4293      	cmp	r3, r2
 8001ccc:	d108      	bne.n	8001ce0 <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cce:	693b      	ldr	r3, [r7, #16]
 8001cd0:	4a18      	ldr	r2, [pc, #96]	; (8001d34 <HAL_ADC_ConfigChannel+0x378>)
 8001cd2:	4013      	ands	r3, r2
 8001cd4:	4a11      	ldr	r2, [pc, #68]	; (8001d1c <HAL_ADC_ConfigChannel+0x360>)
 8001cd6:	0019      	movs	r1, r3
 8001cd8:	0010      	movs	r0, r2
 8001cda:	f7ff fa33 	bl	8001144 <LL_ADC_SetCommonPathInternalCh>
 8001cde:	e039      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	681b      	ldr	r3, [r3, #0]
 8001ce4:	4a11      	ldr	r2, [pc, #68]	; (8001d2c <HAL_ADC_ConfigChannel+0x370>)
 8001ce6:	4293      	cmp	r3, r2
 8001ce8:	d108      	bne.n	8001cfc <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001cea:	693b      	ldr	r3, [r7, #16]
 8001cec:	4a12      	ldr	r2, [pc, #72]	; (8001d38 <HAL_ADC_ConfigChannel+0x37c>)
 8001cee:	4013      	ands	r3, r2
 8001cf0:	4a0a      	ldr	r2, [pc, #40]	; (8001d1c <HAL_ADC_ConfigChannel+0x360>)
 8001cf2:	0019      	movs	r1, r3
 8001cf4:	0010      	movs	r0, r2
 8001cf6:	f7ff fa25 	bl	8001144 <LL_ADC_SetCommonPathInternalCh>
 8001cfa:	e02b      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	681b      	ldr	r3, [r3, #0]
 8001d00:	4a0b      	ldr	r2, [pc, #44]	; (8001d30 <HAL_ADC_ConfigChannel+0x374>)
 8001d02:	4293      	cmp	r3, r2
 8001d04:	d126      	bne.n	8001d54 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001d06:	693b      	ldr	r3, [r7, #16]
 8001d08:	4a0c      	ldr	r2, [pc, #48]	; (8001d3c <HAL_ADC_ConfigChannel+0x380>)
 8001d0a:	4013      	ands	r3, r2
 8001d0c:	4a03      	ldr	r2, [pc, #12]	; (8001d1c <HAL_ADC_ConfigChannel+0x360>)
 8001d0e:	0019      	movs	r1, r3
 8001d10:	0010      	movs	r0, r2
 8001d12:	f7ff fa17 	bl	8001144 <LL_ADC_SetCommonPathInternalCh>
 8001d16:	e01d      	b.n	8001d54 <HAL_ADC_ConfigChannel+0x398>
 8001d18:	80000004 	.word	0x80000004
 8001d1c:	40012708 	.word	0x40012708
 8001d20:	b0001000 	.word	0xb0001000
 8001d24:	20000000 	.word	0x20000000
 8001d28:	00030d40 	.word	0x00030d40
 8001d2c:	b8004000 	.word	0xb8004000
 8001d30:	b4002000 	.word	0xb4002000
 8001d34:	ff7fffff 	.word	0xff7fffff
 8001d38:	feffffff 	.word	0xfeffffff
 8001d3c:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d44:	2220      	movs	r2, #32
 8001d46:	431a      	orrs	r2, r3
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001d4c:	2317      	movs	r3, #23
 8001d4e:	18fb      	adds	r3, r7, r3
 8001d50:	2201      	movs	r2, #1
 8001d52:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	2254      	movs	r2, #84	; 0x54
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001d5c:	2317      	movs	r3, #23
 8001d5e:	18fb      	adds	r3, r7, r3
 8001d60:	781b      	ldrb	r3, [r3, #0]
}
 8001d62:	0018      	movs	r0, r3
 8001d64:	46bd      	mov	sp, r7
 8001d66:	b006      	add	sp, #24
 8001d68:	bd80      	pop	{r7, pc}
 8001d6a:	46c0      	nop			; (mov r8, r8)

08001d6c <ADC_ConversionStop>:
  *         stopped to disable the ADC.
  * @param  hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_ConversionStop(ADC_HandleTypeDef *hadc)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b084      	sub	sp, #16
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Verification if ADC is not already stopped on regular group to bypass    */
  /* this function if not needed.                                             */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) != 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff fb3b 	bl	80013f4 <LL_ADC_REG_IsConversionOngoing>
 8001d7e:	1e03      	subs	r3, r0, #0
 8001d80:	d031      	beq.n	8001de6 <ADC_ConversionStop+0x7a>
  {
    /* Stop potential conversion on going on regular group */
    /* Software is allowed to set ADSTP only when ADSTART=1 and ADDIS=0 */
    if (LL_ADC_IsDisableOngoing(hadc->Instance) == 0UL)
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	0018      	movs	r0, r3
 8001d88:	f7ff faff 	bl	800138a <LL_ADC_IsDisableOngoing>
 8001d8c:	1e03      	subs	r3, r0, #0
 8001d8e:	d104      	bne.n	8001d9a <ADC_ConversionStop+0x2e>
    {
      /* Stop ADC group regular conversion */
      LL_ADC_REG_StopConversion(hadc->Instance);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	0018      	movs	r0, r3
 8001d96:	f7ff fb1b 	bl	80013d0 <LL_ADC_REG_StopConversion>
    }

    /* Wait for conversion effectively stopped */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001d9a:	f7ff f9b3 	bl	8001104 <HAL_GetTick>
 8001d9e:	0003      	movs	r3, r0
 8001da0:	60fb      	str	r3, [r7, #12]

    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001da2:	e01a      	b.n	8001dda <ADC_ConversionStop+0x6e>
    {
      if ((HAL_GetTick() - tickstart) > ADC_STOP_CONVERSION_TIMEOUT)
 8001da4:	f7ff f9ae 	bl	8001104 <HAL_GetTick>
 8001da8:	0002      	movs	r2, r0
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	1ad3      	subs	r3, r2, r3
 8001dae:	2b02      	cmp	r3, #2
 8001db0:	d913      	bls.n	8001dda <ADC_ConversionStop+0x6e>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	689b      	ldr	r3, [r3, #8]
 8001db8:	2204      	movs	r2, #4
 8001dba:	4013      	ands	r3, r2
 8001dbc:	d00d      	beq.n	8001dda <ADC_ConversionStop+0x6e>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001dc2:	2210      	movs	r2, #16
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dce:	2201      	movs	r2, #1
 8001dd0:	431a      	orrs	r2, r3
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001dd6:	2301      	movs	r3, #1
 8001dd8:	e006      	b.n	8001de8 <ADC_ConversionStop+0x7c>
    while ((hadc->Instance->CR & ADC_CR_ADSTART) != 0UL)
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	689b      	ldr	r3, [r3, #8]
 8001de0:	2204      	movs	r2, #4
 8001de2:	4013      	ands	r3, r2
 8001de4:	d1de      	bne.n	8001da4 <ADC_ConversionStop+0x38>
    }

  }

  /* Return HAL status */
  return HAL_OK;
 8001de6:	2300      	movs	r3, #0
}
 8001de8:	0018      	movs	r0, r3
 8001dea:	46bd      	mov	sp, r7
 8001dec:	b004      	add	sp, #16
 8001dee:	bd80      	pop	{r7, pc}

08001df0 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001df0:	b580      	push	{r7, lr}
 8001df2:	b084      	sub	sp, #16
 8001df4:	af00      	add	r7, sp, #0
 8001df6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	0018      	movs	r0, r3
 8001e02:	f7ff fab1 	bl	8001368 <LL_ADC_IsEnabled>
 8001e06:	1e03      	subs	r3, r0, #0
 8001e08:	d000      	beq.n	8001e0c <ADC_Enable+0x1c>
 8001e0a:	e069      	b.n	8001ee0 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	689b      	ldr	r3, [r3, #8]
 8001e12:	4a36      	ldr	r2, [pc, #216]	; (8001eec <ADC_Enable+0xfc>)
 8001e14:	4013      	ands	r3, r2
 8001e16:	d00d      	beq.n	8001e34 <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e1c:	2210      	movs	r2, #16
 8001e1e:	431a      	orrs	r2, r3
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001e28:	2201      	movs	r2, #1
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8001e30:	2301      	movs	r3, #1
 8001e32:	e056      	b.n	8001ee2 <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	0018      	movs	r0, r3
 8001e3a:	f7ff fa71 	bl	8001320 <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8001e3e:	4b2c      	ldr	r3, [pc, #176]	; (8001ef0 <ADC_Enable+0x100>)
 8001e40:	0018      	movs	r0, r3
 8001e42:	f7ff f993 	bl	800116c <LL_ADC_GetCommonPathInternalCh>
 8001e46:	0002      	movs	r2, r0
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	041b      	lsls	r3, r3, #16
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d00f      	beq.n	8001e70 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001e50:	4b28      	ldr	r3, [pc, #160]	; (8001ef4 <ADC_Enable+0x104>)
 8001e52:	681b      	ldr	r3, [r3, #0]
 8001e54:	4928      	ldr	r1, [pc, #160]	; (8001ef8 <ADC_Enable+0x108>)
 8001e56:	0018      	movs	r0, r3
 8001e58:	f7fe f954 	bl	8000104 <__udivsi3>
 8001e5c:	0003      	movs	r3, r0
 8001e5e:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8001e60:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e62:	e002      	b.n	8001e6a <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 8001e64:	68bb      	ldr	r3, [r7, #8]
 8001e66:	3b01      	subs	r3, #1
 8001e68:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8001e6a:	68bb      	ldr	r3, [r7, #8]
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d1f9      	bne.n	8001e64 <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	7e5b      	ldrb	r3, [r3, #25]
 8001e74:	2b01      	cmp	r3, #1
 8001e76:	d033      	beq.n	8001ee0 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001e78:	f7ff f944 	bl	8001104 <HAL_GetTick>
 8001e7c:	0003      	movs	r3, r0
 8001e7e:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001e80:	e027      	b.n	8001ed2 <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	681b      	ldr	r3, [r3, #0]
 8001e86:	0018      	movs	r0, r3
 8001e88:	f7ff fa6e 	bl	8001368 <LL_ADC_IsEnabled>
 8001e8c:	1e03      	subs	r3, r0, #0
 8001e8e:	d104      	bne.n	8001e9a <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	0018      	movs	r0, r3
 8001e96:	f7ff fa43 	bl	8001320 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001e9a:	f7ff f933 	bl	8001104 <HAL_GetTick>
 8001e9e:	0002      	movs	r2, r0
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	1ad3      	subs	r3, r2, r3
 8001ea4:	2b02      	cmp	r3, #2
 8001ea6:	d914      	bls.n	8001ed2 <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ea8:	687b      	ldr	r3, [r7, #4]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	2201      	movs	r2, #1
 8001eb0:	4013      	ands	r3, r2
 8001eb2:	2b01      	cmp	r3, #1
 8001eb4:	d00d      	beq.n	8001ed2 <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001eb6:	687b      	ldr	r3, [r7, #4]
 8001eb8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001eba:	2210      	movs	r2, #16
 8001ebc:	431a      	orrs	r2, r3
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	431a      	orrs	r2, r3
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001ece:	2301      	movs	r3, #1
 8001ed0:	e007      	b.n	8001ee2 <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	681b      	ldr	r3, [r3, #0]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	2201      	movs	r2, #1
 8001eda:	4013      	ands	r3, r2
 8001edc:	2b01      	cmp	r3, #1
 8001ede:	d1d0      	bne.n	8001e82 <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001ee0:	2300      	movs	r3, #0
}
 8001ee2:	0018      	movs	r0, r3
 8001ee4:	46bd      	mov	sp, r7
 8001ee6:	b004      	add	sp, #16
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	46c0      	nop			; (mov r8, r8)
 8001eec:	80000017 	.word	0x80000017
 8001ef0:	40012708 	.word	0x40012708
 8001ef4:	20000000 	.word	0x20000000
 8001ef8:	00030d40 	.word	0x00030d40

08001efc <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b084      	sub	sp, #16
 8001f00:	af00      	add	r7, sp, #0
 8001f02:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8001f04:	687b      	ldr	r3, [r7, #4]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	0018      	movs	r0, r3
 8001f0a:	f7ff fa3e 	bl	800138a <LL_ADC_IsDisableOngoing>
 8001f0e:	0003      	movs	r3, r0
 8001f10:	60fb      	str	r3, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	0018      	movs	r0, r3
 8001f18:	f7ff fa26 	bl	8001368 <LL_ADC_IsEnabled>
 8001f1c:	1e03      	subs	r3, r0, #0
 8001f1e:	d046      	beq.n	8001fae <ADC_Disable+0xb2>
      && (tmp_adc_is_disable_on_going == 0UL)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d143      	bne.n	8001fae <ADC_Disable+0xb2>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	689b      	ldr	r3, [r3, #8]
 8001f2c:	2205      	movs	r2, #5
 8001f2e:	4013      	ands	r3, r2
 8001f30:	2b01      	cmp	r3, #1
 8001f32:	d10d      	bne.n	8001f50 <ADC_Disable+0x54>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	681b      	ldr	r3, [r3, #0]
 8001f38:	0018      	movs	r0, r3
 8001f3a:	f7ff fa03 	bl	8001344 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	2203      	movs	r2, #3
 8001f44:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8001f46:	f7ff f8dd 	bl	8001104 <HAL_GetTick>
 8001f4a:	0003      	movs	r3, r0
 8001f4c:	60bb      	str	r3, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f4e:	e028      	b.n	8001fa2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f54:	2210      	movs	r2, #16
 8001f56:	431a      	orrs	r2, r3
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	659a      	str	r2, [r3, #88]	; 0x58
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f60:	2201      	movs	r2, #1
 8001f62:	431a      	orrs	r2, r3
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	65da      	str	r2, [r3, #92]	; 0x5c
      return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e021      	b.n	8001fb0 <ADC_Disable+0xb4>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8001f6c:	f7ff f8ca 	bl	8001104 <HAL_GetTick>
 8001f70:	0002      	movs	r2, r0
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	1ad3      	subs	r3, r2, r3
 8001f76:	2b02      	cmp	r3, #2
 8001f78:	d913      	bls.n	8001fa2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	689b      	ldr	r3, [r3, #8]
 8001f80:	2201      	movs	r2, #1
 8001f82:	4013      	ands	r3, r2
 8001f84:	d00d      	beq.n	8001fa2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001f86:	687b      	ldr	r3, [r7, #4]
 8001f88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f8a:	2210      	movs	r2, #16
 8001f8c:	431a      	orrs	r2, r3
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001f92:	687b      	ldr	r3, [r7, #4]
 8001f94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f96:	2201      	movs	r2, #1
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	65da      	str	r2, [r3, #92]	; 0x5c

          return HAL_ERROR;
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	e006      	b.n	8001fb0 <ADC_Disable+0xb4>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	689b      	ldr	r3, [r3, #8]
 8001fa8:	2201      	movs	r2, #1
 8001faa:	4013      	ands	r3, r2
 8001fac:	d1de      	bne.n	8001f6c <ADC_Disable+0x70>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001fae:	2300      	movs	r3, #0
}
 8001fb0:	0018      	movs	r0, r3
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	b004      	add	sp, #16
 8001fb6:	bd80      	pop	{r7, pc}

08001fb8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001fb8:	b590      	push	{r4, r7, lr}
 8001fba:	b083      	sub	sp, #12
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	0002      	movs	r2, r0
 8001fc0:	6039      	str	r1, [r7, #0]
 8001fc2:	1dfb      	adds	r3, r7, #7
 8001fc4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001fc6:	1dfb      	adds	r3, r7, #7
 8001fc8:	781b      	ldrb	r3, [r3, #0]
 8001fca:	2b7f      	cmp	r3, #127	; 0x7f
 8001fcc:	d828      	bhi.n	8002020 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001fce:	4a2f      	ldr	r2, [pc, #188]	; (800208c <__NVIC_SetPriority+0xd4>)
 8001fd0:	1dfb      	adds	r3, r7, #7
 8001fd2:	781b      	ldrb	r3, [r3, #0]
 8001fd4:	b25b      	sxtb	r3, r3
 8001fd6:	089b      	lsrs	r3, r3, #2
 8001fd8:	33c0      	adds	r3, #192	; 0xc0
 8001fda:	009b      	lsls	r3, r3, #2
 8001fdc:	589b      	ldr	r3, [r3, r2]
 8001fde:	1dfa      	adds	r2, r7, #7
 8001fe0:	7812      	ldrb	r2, [r2, #0]
 8001fe2:	0011      	movs	r1, r2
 8001fe4:	2203      	movs	r2, #3
 8001fe6:	400a      	ands	r2, r1
 8001fe8:	00d2      	lsls	r2, r2, #3
 8001fea:	21ff      	movs	r1, #255	; 0xff
 8001fec:	4091      	lsls	r1, r2
 8001fee:	000a      	movs	r2, r1
 8001ff0:	43d2      	mvns	r2, r2
 8001ff2:	401a      	ands	r2, r3
 8001ff4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001ff6:	683b      	ldr	r3, [r7, #0]
 8001ff8:	019b      	lsls	r3, r3, #6
 8001ffa:	22ff      	movs	r2, #255	; 0xff
 8001ffc:	401a      	ands	r2, r3
 8001ffe:	1dfb      	adds	r3, r7, #7
 8002000:	781b      	ldrb	r3, [r3, #0]
 8002002:	0018      	movs	r0, r3
 8002004:	2303      	movs	r3, #3
 8002006:	4003      	ands	r3, r0
 8002008:	00db      	lsls	r3, r3, #3
 800200a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800200c:	481f      	ldr	r0, [pc, #124]	; (800208c <__NVIC_SetPriority+0xd4>)
 800200e:	1dfb      	adds	r3, r7, #7
 8002010:	781b      	ldrb	r3, [r3, #0]
 8002012:	b25b      	sxtb	r3, r3
 8002014:	089b      	lsrs	r3, r3, #2
 8002016:	430a      	orrs	r2, r1
 8002018:	33c0      	adds	r3, #192	; 0xc0
 800201a:	009b      	lsls	r3, r3, #2
 800201c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800201e:	e031      	b.n	8002084 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002020:	4a1b      	ldr	r2, [pc, #108]	; (8002090 <__NVIC_SetPriority+0xd8>)
 8002022:	1dfb      	adds	r3, r7, #7
 8002024:	781b      	ldrb	r3, [r3, #0]
 8002026:	0019      	movs	r1, r3
 8002028:	230f      	movs	r3, #15
 800202a:	400b      	ands	r3, r1
 800202c:	3b08      	subs	r3, #8
 800202e:	089b      	lsrs	r3, r3, #2
 8002030:	3306      	adds	r3, #6
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	18d3      	adds	r3, r2, r3
 8002036:	3304      	adds	r3, #4
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	1dfa      	adds	r2, r7, #7
 800203c:	7812      	ldrb	r2, [r2, #0]
 800203e:	0011      	movs	r1, r2
 8002040:	2203      	movs	r2, #3
 8002042:	400a      	ands	r2, r1
 8002044:	00d2      	lsls	r2, r2, #3
 8002046:	21ff      	movs	r1, #255	; 0xff
 8002048:	4091      	lsls	r1, r2
 800204a:	000a      	movs	r2, r1
 800204c:	43d2      	mvns	r2, r2
 800204e:	401a      	ands	r2, r3
 8002050:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002052:	683b      	ldr	r3, [r7, #0]
 8002054:	019b      	lsls	r3, r3, #6
 8002056:	22ff      	movs	r2, #255	; 0xff
 8002058:	401a      	ands	r2, r3
 800205a:	1dfb      	adds	r3, r7, #7
 800205c:	781b      	ldrb	r3, [r3, #0]
 800205e:	0018      	movs	r0, r3
 8002060:	2303      	movs	r3, #3
 8002062:	4003      	ands	r3, r0
 8002064:	00db      	lsls	r3, r3, #3
 8002066:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8002068:	4809      	ldr	r0, [pc, #36]	; (8002090 <__NVIC_SetPriority+0xd8>)
 800206a:	1dfb      	adds	r3, r7, #7
 800206c:	781b      	ldrb	r3, [r3, #0]
 800206e:	001c      	movs	r4, r3
 8002070:	230f      	movs	r3, #15
 8002072:	4023      	ands	r3, r4
 8002074:	3b08      	subs	r3, #8
 8002076:	089b      	lsrs	r3, r3, #2
 8002078:	430a      	orrs	r2, r1
 800207a:	3306      	adds	r3, #6
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	18c3      	adds	r3, r0, r3
 8002080:	3304      	adds	r3, #4
 8002082:	601a      	str	r2, [r3, #0]
}
 8002084:	46c0      	nop			; (mov r8, r8)
 8002086:	46bd      	mov	sp, r7
 8002088:	b003      	add	sp, #12
 800208a:	bd90      	pop	{r4, r7, pc}
 800208c:	e000e100 	.word	0xe000e100
 8002090:	e000ed00 	.word	0xe000ed00

08002094 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002094:	b580      	push	{r7, lr}
 8002096:	b082      	sub	sp, #8
 8002098:	af00      	add	r7, sp, #0
 800209a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800209c:	687b      	ldr	r3, [r7, #4]
 800209e:	1e5a      	subs	r2, r3, #1
 80020a0:	2380      	movs	r3, #128	; 0x80
 80020a2:	045b      	lsls	r3, r3, #17
 80020a4:	429a      	cmp	r2, r3
 80020a6:	d301      	bcc.n	80020ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020a8:	2301      	movs	r3, #1
 80020aa:	e010      	b.n	80020ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020ac:	4b0a      	ldr	r3, [pc, #40]	; (80020d8 <SysTick_Config+0x44>)
 80020ae:	687a      	ldr	r2, [r7, #4]
 80020b0:	3a01      	subs	r2, #1
 80020b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020b4:	2301      	movs	r3, #1
 80020b6:	425b      	negs	r3, r3
 80020b8:	2103      	movs	r1, #3
 80020ba:	0018      	movs	r0, r3
 80020bc:	f7ff ff7c 	bl	8001fb8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020c0:	4b05      	ldr	r3, [pc, #20]	; (80020d8 <SysTick_Config+0x44>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020c6:	4b04      	ldr	r3, [pc, #16]	; (80020d8 <SysTick_Config+0x44>)
 80020c8:	2207      	movs	r2, #7
 80020ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020cc:	2300      	movs	r3, #0
}
 80020ce:	0018      	movs	r0, r3
 80020d0:	46bd      	mov	sp, r7
 80020d2:	b002      	add	sp, #8
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	46c0      	nop			; (mov r8, r8)
 80020d8:	e000e010 	.word	0xe000e010

080020dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b084      	sub	sp, #16
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	60b9      	str	r1, [r7, #8]
 80020e4:	607a      	str	r2, [r7, #4]
 80020e6:	210f      	movs	r1, #15
 80020e8:	187b      	adds	r3, r7, r1
 80020ea:	1c02      	adds	r2, r0, #0
 80020ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	187b      	adds	r3, r7, r1
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	b25b      	sxtb	r3, r3
 80020f6:	0011      	movs	r1, r2
 80020f8:	0018      	movs	r0, r3
 80020fa:	f7ff ff5d 	bl	8001fb8 <__NVIC_SetPriority>
}
 80020fe:	46c0      	nop			; (mov r8, r8)
 8002100:	46bd      	mov	sp, r7
 8002102:	b004      	add	sp, #16
 8002104:	bd80      	pop	{r7, pc}

08002106 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002106:	b580      	push	{r7, lr}
 8002108:	b082      	sub	sp, #8
 800210a:	af00      	add	r7, sp, #0
 800210c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	0018      	movs	r0, r3
 8002112:	f7ff ffbf 	bl	8002094 <SysTick_Config>
 8002116:	0003      	movs	r3, r0
}
 8002118:	0018      	movs	r0, r3
 800211a:	46bd      	mov	sp, r7
 800211c:	b002      	add	sp, #8
 800211e:	bd80      	pop	{r7, pc}

08002120 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b086      	sub	sp, #24
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
 8002128:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800212a:	2300      	movs	r3, #0
 800212c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800212e:	e14d      	b.n	80023cc <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8002130:	683b      	ldr	r3, [r7, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	2101      	movs	r1, #1
 8002136:	697a      	ldr	r2, [r7, #20]
 8002138:	4091      	lsls	r1, r2
 800213a:	000a      	movs	r2, r1
 800213c:	4013      	ands	r3, r2
 800213e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	2b00      	cmp	r3, #0
 8002144:	d100      	bne.n	8002148 <HAL_GPIO_Init+0x28>
 8002146:	e13e      	b.n	80023c6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	685b      	ldr	r3, [r3, #4]
 800214c:	2203      	movs	r2, #3
 800214e:	4013      	ands	r3, r2
 8002150:	2b01      	cmp	r3, #1
 8002152:	d005      	beq.n	8002160 <HAL_GPIO_Init+0x40>
 8002154:	683b      	ldr	r3, [r7, #0]
 8002156:	685b      	ldr	r3, [r3, #4]
 8002158:	2203      	movs	r2, #3
 800215a:	4013      	ands	r3, r2
 800215c:	2b02      	cmp	r3, #2
 800215e:	d130      	bne.n	80021c2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	689b      	ldr	r3, [r3, #8]
 8002164:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002166:	697b      	ldr	r3, [r7, #20]
 8002168:	005b      	lsls	r3, r3, #1
 800216a:	2203      	movs	r2, #3
 800216c:	409a      	lsls	r2, r3
 800216e:	0013      	movs	r3, r2
 8002170:	43da      	mvns	r2, r3
 8002172:	693b      	ldr	r3, [r7, #16]
 8002174:	4013      	ands	r3, r2
 8002176:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002178:	683b      	ldr	r3, [r7, #0]
 800217a:	68da      	ldr	r2, [r3, #12]
 800217c:	697b      	ldr	r3, [r7, #20]
 800217e:	005b      	lsls	r3, r3, #1
 8002180:	409a      	lsls	r2, r3
 8002182:	0013      	movs	r3, r2
 8002184:	693a      	ldr	r2, [r7, #16]
 8002186:	4313      	orrs	r3, r2
 8002188:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	693a      	ldr	r2, [r7, #16]
 800218e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002196:	2201      	movs	r2, #1
 8002198:	697b      	ldr	r3, [r7, #20]
 800219a:	409a      	lsls	r2, r3
 800219c:	0013      	movs	r3, r2
 800219e:	43da      	mvns	r2, r3
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	4013      	ands	r3, r2
 80021a4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80021a6:	683b      	ldr	r3, [r7, #0]
 80021a8:	685b      	ldr	r3, [r3, #4]
 80021aa:	091b      	lsrs	r3, r3, #4
 80021ac:	2201      	movs	r2, #1
 80021ae:	401a      	ands	r2, r3
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	409a      	lsls	r2, r3
 80021b4:	0013      	movs	r3, r2
 80021b6:	693a      	ldr	r2, [r7, #16]
 80021b8:	4313      	orrs	r3, r2
 80021ba:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	693a      	ldr	r2, [r7, #16]
 80021c0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021c2:	683b      	ldr	r3, [r7, #0]
 80021c4:	685b      	ldr	r3, [r3, #4]
 80021c6:	2203      	movs	r2, #3
 80021c8:	4013      	ands	r3, r2
 80021ca:	2b03      	cmp	r3, #3
 80021cc:	d017      	beq.n	80021fe <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	68db      	ldr	r3, [r3, #12]
 80021d2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80021d4:	697b      	ldr	r3, [r7, #20]
 80021d6:	005b      	lsls	r3, r3, #1
 80021d8:	2203      	movs	r2, #3
 80021da:	409a      	lsls	r2, r3
 80021dc:	0013      	movs	r3, r2
 80021de:	43da      	mvns	r2, r3
 80021e0:	693b      	ldr	r3, [r7, #16]
 80021e2:	4013      	ands	r3, r2
 80021e4:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 80021e6:	683b      	ldr	r3, [r7, #0]
 80021e8:	689a      	ldr	r2, [r3, #8]
 80021ea:	697b      	ldr	r3, [r7, #20]
 80021ec:	005b      	lsls	r3, r3, #1
 80021ee:	409a      	lsls	r2, r3
 80021f0:	0013      	movs	r3, r2
 80021f2:	693a      	ldr	r2, [r7, #16]
 80021f4:	4313      	orrs	r3, r2
 80021f6:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	693a      	ldr	r2, [r7, #16]
 80021fc:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021fe:	683b      	ldr	r3, [r7, #0]
 8002200:	685b      	ldr	r3, [r3, #4]
 8002202:	2203      	movs	r2, #3
 8002204:	4013      	ands	r3, r2
 8002206:	2b02      	cmp	r3, #2
 8002208:	d123      	bne.n	8002252 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 800220a:	697b      	ldr	r3, [r7, #20]
 800220c:	08da      	lsrs	r2, r3, #3
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	3208      	adds	r2, #8
 8002212:	0092      	lsls	r2, r2, #2
 8002214:	58d3      	ldr	r3, [r2, r3]
 8002216:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	2207      	movs	r2, #7
 800221c:	4013      	ands	r3, r2
 800221e:	009b      	lsls	r3, r3, #2
 8002220:	220f      	movs	r2, #15
 8002222:	409a      	lsls	r2, r3
 8002224:	0013      	movs	r3, r2
 8002226:	43da      	mvns	r2, r3
 8002228:	693b      	ldr	r3, [r7, #16]
 800222a:	4013      	ands	r3, r2
 800222c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	691a      	ldr	r2, [r3, #16]
 8002232:	697b      	ldr	r3, [r7, #20]
 8002234:	2107      	movs	r1, #7
 8002236:	400b      	ands	r3, r1
 8002238:	009b      	lsls	r3, r3, #2
 800223a:	409a      	lsls	r2, r3
 800223c:	0013      	movs	r3, r2
 800223e:	693a      	ldr	r2, [r7, #16]
 8002240:	4313      	orrs	r3, r2
 8002242:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8002244:	697b      	ldr	r3, [r7, #20]
 8002246:	08da      	lsrs	r2, r3, #3
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	3208      	adds	r2, #8
 800224c:	0092      	lsls	r2, r2, #2
 800224e:	6939      	ldr	r1, [r7, #16]
 8002250:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8002258:	697b      	ldr	r3, [r7, #20]
 800225a:	005b      	lsls	r3, r3, #1
 800225c:	2203      	movs	r2, #3
 800225e:	409a      	lsls	r2, r3
 8002260:	0013      	movs	r3, r2
 8002262:	43da      	mvns	r2, r3
 8002264:	693b      	ldr	r3, [r7, #16]
 8002266:	4013      	ands	r3, r2
 8002268:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800226a:	683b      	ldr	r3, [r7, #0]
 800226c:	685b      	ldr	r3, [r3, #4]
 800226e:	2203      	movs	r2, #3
 8002270:	401a      	ands	r2, r3
 8002272:	697b      	ldr	r3, [r7, #20]
 8002274:	005b      	lsls	r3, r3, #1
 8002276:	409a      	lsls	r2, r3
 8002278:	0013      	movs	r3, r2
 800227a:	693a      	ldr	r2, [r7, #16]
 800227c:	4313      	orrs	r3, r2
 800227e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	693a      	ldr	r2, [r7, #16]
 8002284:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002286:	683b      	ldr	r3, [r7, #0]
 8002288:	685a      	ldr	r2, [r3, #4]
 800228a:	23c0      	movs	r3, #192	; 0xc0
 800228c:	029b      	lsls	r3, r3, #10
 800228e:	4013      	ands	r3, r2
 8002290:	d100      	bne.n	8002294 <HAL_GPIO_Init+0x174>
 8002292:	e098      	b.n	80023c6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002294:	4a53      	ldr	r2, [pc, #332]	; (80023e4 <HAL_GPIO_Init+0x2c4>)
 8002296:	697b      	ldr	r3, [r7, #20]
 8002298:	089b      	lsrs	r3, r3, #2
 800229a:	3318      	adds	r3, #24
 800229c:	009b      	lsls	r3, r3, #2
 800229e:	589b      	ldr	r3, [r3, r2]
 80022a0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 80022a2:	697b      	ldr	r3, [r7, #20]
 80022a4:	2203      	movs	r2, #3
 80022a6:	4013      	ands	r3, r2
 80022a8:	00db      	lsls	r3, r3, #3
 80022aa:	220f      	movs	r2, #15
 80022ac:	409a      	lsls	r2, r3
 80022ae:	0013      	movs	r3, r2
 80022b0:	43da      	mvns	r2, r3
 80022b2:	693b      	ldr	r3, [r7, #16]
 80022b4:	4013      	ands	r3, r2
 80022b6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 80022b8:	687a      	ldr	r2, [r7, #4]
 80022ba:	23a0      	movs	r3, #160	; 0xa0
 80022bc:	05db      	lsls	r3, r3, #23
 80022be:	429a      	cmp	r2, r3
 80022c0:	d019      	beq.n	80022f6 <HAL_GPIO_Init+0x1d6>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a48      	ldr	r2, [pc, #288]	; (80023e8 <HAL_GPIO_Init+0x2c8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d013      	beq.n	80022f2 <HAL_GPIO_Init+0x1d2>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a47      	ldr	r2, [pc, #284]	; (80023ec <HAL_GPIO_Init+0x2cc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d00d      	beq.n	80022ee <HAL_GPIO_Init+0x1ce>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a46      	ldr	r2, [pc, #280]	; (80023f0 <HAL_GPIO_Init+0x2d0>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d007      	beq.n	80022ea <HAL_GPIO_Init+0x1ca>
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	4a45      	ldr	r2, [pc, #276]	; (80023f4 <HAL_GPIO_Init+0x2d4>)
 80022de:	4293      	cmp	r3, r2
 80022e0:	d101      	bne.n	80022e6 <HAL_GPIO_Init+0x1c6>
 80022e2:	2304      	movs	r3, #4
 80022e4:	e008      	b.n	80022f8 <HAL_GPIO_Init+0x1d8>
 80022e6:	2305      	movs	r3, #5
 80022e8:	e006      	b.n	80022f8 <HAL_GPIO_Init+0x1d8>
 80022ea:	2303      	movs	r3, #3
 80022ec:	e004      	b.n	80022f8 <HAL_GPIO_Init+0x1d8>
 80022ee:	2302      	movs	r3, #2
 80022f0:	e002      	b.n	80022f8 <HAL_GPIO_Init+0x1d8>
 80022f2:	2301      	movs	r3, #1
 80022f4:	e000      	b.n	80022f8 <HAL_GPIO_Init+0x1d8>
 80022f6:	2300      	movs	r3, #0
 80022f8:	697a      	ldr	r2, [r7, #20]
 80022fa:	2103      	movs	r1, #3
 80022fc:	400a      	ands	r2, r1
 80022fe:	00d2      	lsls	r2, r2, #3
 8002300:	4093      	lsls	r3, r2
 8002302:	693a      	ldr	r2, [r7, #16]
 8002304:	4313      	orrs	r3, r2
 8002306:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8002308:	4936      	ldr	r1, [pc, #216]	; (80023e4 <HAL_GPIO_Init+0x2c4>)
 800230a:	697b      	ldr	r3, [r7, #20]
 800230c:	089b      	lsrs	r3, r3, #2
 800230e:	3318      	adds	r3, #24
 8002310:	009b      	lsls	r3, r3, #2
 8002312:	693a      	ldr	r2, [r7, #16]
 8002314:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002316:	4b33      	ldr	r3, [pc, #204]	; (80023e4 <HAL_GPIO_Init+0x2c4>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	43da      	mvns	r2, r3
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	4013      	ands	r3, r2
 8002324:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8002326:	683b      	ldr	r3, [r7, #0]
 8002328:	685a      	ldr	r2, [r3, #4]
 800232a:	2380      	movs	r3, #128	; 0x80
 800232c:	035b      	lsls	r3, r3, #13
 800232e:	4013      	ands	r3, r2
 8002330:	d003      	beq.n	800233a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8002332:	693a      	ldr	r2, [r7, #16]
 8002334:	68fb      	ldr	r3, [r7, #12]
 8002336:	4313      	orrs	r3, r2
 8002338:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 800233a:	4b2a      	ldr	r3, [pc, #168]	; (80023e4 <HAL_GPIO_Init+0x2c4>)
 800233c:	693a      	ldr	r2, [r7, #16]
 800233e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8002340:	4b28      	ldr	r3, [pc, #160]	; (80023e4 <HAL_GPIO_Init+0x2c4>)
 8002342:	685b      	ldr	r3, [r3, #4]
 8002344:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	43da      	mvns	r2, r3
 800234a:	693b      	ldr	r3, [r7, #16]
 800234c:	4013      	ands	r3, r2
 800234e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8002350:	683b      	ldr	r3, [r7, #0]
 8002352:	685a      	ldr	r2, [r3, #4]
 8002354:	2380      	movs	r3, #128	; 0x80
 8002356:	039b      	lsls	r3, r3, #14
 8002358:	4013      	ands	r3, r2
 800235a:	d003      	beq.n	8002364 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 800235c:	693a      	ldr	r2, [r7, #16]
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002364:	4b1f      	ldr	r3, [pc, #124]	; (80023e4 <HAL_GPIO_Init+0x2c4>)
 8002366:	693a      	ldr	r2, [r7, #16]
 8002368:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800236a:	4a1e      	ldr	r2, [pc, #120]	; (80023e4 <HAL_GPIO_Init+0x2c4>)
 800236c:	2384      	movs	r3, #132	; 0x84
 800236e:	58d3      	ldr	r3, [r2, r3]
 8002370:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	43da      	mvns	r2, r3
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	4013      	ands	r3, r2
 800237a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	685a      	ldr	r2, [r3, #4]
 8002380:	2380      	movs	r3, #128	; 0x80
 8002382:	029b      	lsls	r3, r3, #10
 8002384:	4013      	ands	r3, r2
 8002386:	d003      	beq.n	8002390 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002388:	693a      	ldr	r2, [r7, #16]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	4313      	orrs	r3, r2
 800238e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002390:	4914      	ldr	r1, [pc, #80]	; (80023e4 <HAL_GPIO_Init+0x2c4>)
 8002392:	2284      	movs	r2, #132	; 0x84
 8002394:	693b      	ldr	r3, [r7, #16]
 8002396:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002398:	4a12      	ldr	r2, [pc, #72]	; (80023e4 <HAL_GPIO_Init+0x2c4>)
 800239a:	2380      	movs	r3, #128	; 0x80
 800239c:	58d3      	ldr	r3, [r2, r3]
 800239e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80023a0:	68fb      	ldr	r3, [r7, #12]
 80023a2:	43da      	mvns	r2, r3
 80023a4:	693b      	ldr	r3, [r7, #16]
 80023a6:	4013      	ands	r3, r2
 80023a8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80023aa:	683b      	ldr	r3, [r7, #0]
 80023ac:	685a      	ldr	r2, [r3, #4]
 80023ae:	2380      	movs	r3, #128	; 0x80
 80023b0:	025b      	lsls	r3, r3, #9
 80023b2:	4013      	ands	r3, r2
 80023b4:	d003      	beq.n	80023be <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 80023b6:	693a      	ldr	r2, [r7, #16]
 80023b8:	68fb      	ldr	r3, [r7, #12]
 80023ba:	4313      	orrs	r3, r2
 80023bc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 80023be:	4909      	ldr	r1, [pc, #36]	; (80023e4 <HAL_GPIO_Init+0x2c4>)
 80023c0:	2280      	movs	r2, #128	; 0x80
 80023c2:	693b      	ldr	r3, [r7, #16]
 80023c4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	3301      	adds	r3, #1
 80023ca:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	681a      	ldr	r2, [r3, #0]
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	40da      	lsrs	r2, r3
 80023d4:	1e13      	subs	r3, r2, #0
 80023d6:	d000      	beq.n	80023da <HAL_GPIO_Init+0x2ba>
 80023d8:	e6aa      	b.n	8002130 <HAL_GPIO_Init+0x10>
  }
}
 80023da:	46c0      	nop			; (mov r8, r8)
 80023dc:	46c0      	nop			; (mov r8, r8)
 80023de:	46bd      	mov	sp, r7
 80023e0:	b006      	add	sp, #24
 80023e2:	bd80      	pop	{r7, pc}
 80023e4:	40021800 	.word	0x40021800
 80023e8:	50000400 	.word	0x50000400
 80023ec:	50000800 	.word	0x50000800
 80023f0:	50000c00 	.word	0x50000c00
 80023f4:	50001000 	.word	0x50001000

080023f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80023f8:	b580      	push	{r7, lr}
 80023fa:	b082      	sub	sp, #8
 80023fc:	af00      	add	r7, sp, #0
 80023fe:	6078      	str	r0, [r7, #4]
 8002400:	0008      	movs	r0, r1
 8002402:	0011      	movs	r1, r2
 8002404:	1cbb      	adds	r3, r7, #2
 8002406:	1c02      	adds	r2, r0, #0
 8002408:	801a      	strh	r2, [r3, #0]
 800240a:	1c7b      	adds	r3, r7, #1
 800240c:	1c0a      	adds	r2, r1, #0
 800240e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002410:	1c7b      	adds	r3, r7, #1
 8002412:	781b      	ldrb	r3, [r3, #0]
 8002414:	2b00      	cmp	r3, #0
 8002416:	d004      	beq.n	8002422 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8002418:	1cbb      	adds	r3, r7, #2
 800241a:	881a      	ldrh	r2, [r3, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8002420:	e003      	b.n	800242a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8002422:	1cbb      	adds	r3, r7, #2
 8002424:	881a      	ldrh	r2, [r3, #0]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	629a      	str	r2, [r3, #40]	; 0x28
}
 800242a:	46c0      	nop			; (mov r8, r8)
 800242c:	46bd      	mov	sp, r7
 800242e:	b002      	add	sp, #8
 8002430:	bd80      	pop	{r7, pc}
	...

08002434 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8002434:	b580      	push	{r7, lr}
 8002436:	b084      	sub	sp, #16
 8002438:	af00      	add	r7, sp, #0
 800243a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 800243c:	4b19      	ldr	r3, [pc, #100]	; (80024a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a19      	ldr	r2, [pc, #100]	; (80024a8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8002442:	4013      	ands	r3, r2
 8002444:	0019      	movs	r1, r3
 8002446:	4b17      	ldr	r3, [pc, #92]	; (80024a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002448:	687a      	ldr	r2, [r7, #4]
 800244a:	430a      	orrs	r2, r1
 800244c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 800244e:	687a      	ldr	r2, [r7, #4]
 8002450:	2380      	movs	r3, #128	; 0x80
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	429a      	cmp	r2, r3
 8002456:	d11f      	bne.n	8002498 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8002458:	4b14      	ldr	r3, [pc, #80]	; (80024ac <HAL_PWREx_ControlVoltageScaling+0x78>)
 800245a:	681a      	ldr	r2, [r3, #0]
 800245c:	0013      	movs	r3, r2
 800245e:	005b      	lsls	r3, r3, #1
 8002460:	189b      	adds	r3, r3, r2
 8002462:	005b      	lsls	r3, r3, #1
 8002464:	4912      	ldr	r1, [pc, #72]	; (80024b0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8002466:	0018      	movs	r0, r3
 8002468:	f7fd fe4c 	bl	8000104 <__udivsi3>
 800246c:	0003      	movs	r3, r0
 800246e:	3301      	adds	r3, #1
 8002470:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002472:	e008      	b.n	8002486 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	2b00      	cmp	r3, #0
 8002478:	d003      	beq.n	8002482 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	3b01      	subs	r3, #1
 800247e:	60fb      	str	r3, [r7, #12]
 8002480:	e001      	b.n	8002486 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8002482:	2303      	movs	r3, #3
 8002484:	e009      	b.n	800249a <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8002486:	4b07      	ldr	r3, [pc, #28]	; (80024a4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8002488:	695a      	ldr	r2, [r3, #20]
 800248a:	2380      	movs	r3, #128	; 0x80
 800248c:	00db      	lsls	r3, r3, #3
 800248e:	401a      	ands	r2, r3
 8002490:	2380      	movs	r3, #128	; 0x80
 8002492:	00db      	lsls	r3, r3, #3
 8002494:	429a      	cmp	r2, r3
 8002496:	d0ed      	beq.n	8002474 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8002498:	2300      	movs	r3, #0
}
 800249a:	0018      	movs	r0, r3
 800249c:	46bd      	mov	sp, r7
 800249e:	b004      	add	sp, #16
 80024a0:	bd80      	pop	{r7, pc}
 80024a2:	46c0      	nop			; (mov r8, r8)
 80024a4:	40007000 	.word	0x40007000
 80024a8:	fffff9ff 	.word	0xfffff9ff
 80024ac:	20000000 	.word	0x20000000
 80024b0:	000f4240 	.word	0x000f4240

080024b4 <LL_RCC_GetAPB1Prescaler>:
  *         @arg @ref LL_RCC_APB1_DIV_4
  *         @arg @ref LL_RCC_APB1_DIV_8
  *         @arg @ref LL_RCC_APB1_DIV_16
  */
__STATIC_INLINE uint32_t LL_RCC_GetAPB1Prescaler(void)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	af00      	add	r7, sp, #0
  return (uint32_t)(READ_BIT(RCC->CFGR, RCC_CFGR_PPRE));
 80024b8:	4b03      	ldr	r3, [pc, #12]	; (80024c8 <LL_RCC_GetAPB1Prescaler+0x14>)
 80024ba:	689a      	ldr	r2, [r3, #8]
 80024bc:	23e0      	movs	r3, #224	; 0xe0
 80024be:	01db      	lsls	r3, r3, #7
 80024c0:	4013      	ands	r3, r2
}
 80024c2:	0018      	movs	r0, r3
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40021000 	.word	0x40021000

080024cc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80024cc:	b580      	push	{r7, lr}
 80024ce:	b088      	sub	sp, #32
 80024d0:	af00      	add	r7, sp, #0
 80024d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d102      	bne.n	80024e0 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80024da:	2301      	movs	r3, #1
 80024dc:	f000 fb50 	bl	8002b80 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	2201      	movs	r2, #1
 80024e6:	4013      	ands	r3, r2
 80024e8:	d100      	bne.n	80024ec <HAL_RCC_OscConfig+0x20>
 80024ea:	e07c      	b.n	80025e6 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80024ec:	4bc3      	ldr	r3, [pc, #780]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80024ee:	689b      	ldr	r3, [r3, #8]
 80024f0:	2238      	movs	r2, #56	; 0x38
 80024f2:	4013      	ands	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80024f6:	4bc1      	ldr	r3, [pc, #772]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	2203      	movs	r2, #3
 80024fc:	4013      	ands	r3, r2
 80024fe:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8002500:	69bb      	ldr	r3, [r7, #24]
 8002502:	2b10      	cmp	r3, #16
 8002504:	d102      	bne.n	800250c <HAL_RCC_OscConfig+0x40>
 8002506:	697b      	ldr	r3, [r7, #20]
 8002508:	2b03      	cmp	r3, #3
 800250a:	d002      	beq.n	8002512 <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 800250c:	69bb      	ldr	r3, [r7, #24]
 800250e:	2b08      	cmp	r3, #8
 8002510:	d10b      	bne.n	800252a <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002512:	4bba      	ldr	r3, [pc, #744]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002514:	681a      	ldr	r2, [r3, #0]
 8002516:	2380      	movs	r3, #128	; 0x80
 8002518:	029b      	lsls	r3, r3, #10
 800251a:	4013      	ands	r3, r2
 800251c:	d062      	beq.n	80025e4 <HAL_RCC_OscConfig+0x118>
 800251e:	687b      	ldr	r3, [r7, #4]
 8002520:	685b      	ldr	r3, [r3, #4]
 8002522:	2b00      	cmp	r3, #0
 8002524:	d15e      	bne.n	80025e4 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8002526:	2301      	movs	r3, #1
 8002528:	e32a      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	685a      	ldr	r2, [r3, #4]
 800252e:	2380      	movs	r3, #128	; 0x80
 8002530:	025b      	lsls	r3, r3, #9
 8002532:	429a      	cmp	r2, r3
 8002534:	d107      	bne.n	8002546 <HAL_RCC_OscConfig+0x7a>
 8002536:	4bb1      	ldr	r3, [pc, #708]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002538:	681a      	ldr	r2, [r3, #0]
 800253a:	4bb0      	ldr	r3, [pc, #704]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 800253c:	2180      	movs	r1, #128	; 0x80
 800253e:	0249      	lsls	r1, r1, #9
 8002540:	430a      	orrs	r2, r1
 8002542:	601a      	str	r2, [r3, #0]
 8002544:	e020      	b.n	8002588 <HAL_RCC_OscConfig+0xbc>
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	685a      	ldr	r2, [r3, #4]
 800254a:	23a0      	movs	r3, #160	; 0xa0
 800254c:	02db      	lsls	r3, r3, #11
 800254e:	429a      	cmp	r2, r3
 8002550:	d10e      	bne.n	8002570 <HAL_RCC_OscConfig+0xa4>
 8002552:	4baa      	ldr	r3, [pc, #680]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002554:	681a      	ldr	r2, [r3, #0]
 8002556:	4ba9      	ldr	r3, [pc, #676]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002558:	2180      	movs	r1, #128	; 0x80
 800255a:	02c9      	lsls	r1, r1, #11
 800255c:	430a      	orrs	r2, r1
 800255e:	601a      	str	r2, [r3, #0]
 8002560:	4ba6      	ldr	r3, [pc, #664]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002562:	681a      	ldr	r2, [r3, #0]
 8002564:	4ba5      	ldr	r3, [pc, #660]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002566:	2180      	movs	r1, #128	; 0x80
 8002568:	0249      	lsls	r1, r1, #9
 800256a:	430a      	orrs	r2, r1
 800256c:	601a      	str	r2, [r3, #0]
 800256e:	e00b      	b.n	8002588 <HAL_RCC_OscConfig+0xbc>
 8002570:	4ba2      	ldr	r3, [pc, #648]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002572:	681a      	ldr	r2, [r3, #0]
 8002574:	4ba1      	ldr	r3, [pc, #644]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002576:	49a2      	ldr	r1, [pc, #648]	; (8002800 <HAL_RCC_OscConfig+0x334>)
 8002578:	400a      	ands	r2, r1
 800257a:	601a      	str	r2, [r3, #0]
 800257c:	4b9f      	ldr	r3, [pc, #636]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 800257e:	681a      	ldr	r2, [r3, #0]
 8002580:	4b9e      	ldr	r3, [pc, #632]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002582:	49a0      	ldr	r1, [pc, #640]	; (8002804 <HAL_RCC_OscConfig+0x338>)
 8002584:	400a      	ands	r2, r1
 8002586:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	685b      	ldr	r3, [r3, #4]
 800258c:	2b00      	cmp	r3, #0
 800258e:	d014      	beq.n	80025ba <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002590:	f7fe fdb8 	bl	8001104 <HAL_GetTick>
 8002594:	0003      	movs	r3, r0
 8002596:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002598:	e008      	b.n	80025ac <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800259a:	f7fe fdb3 	bl	8001104 <HAL_GetTick>
 800259e:	0002      	movs	r2, r0
 80025a0:	693b      	ldr	r3, [r7, #16]
 80025a2:	1ad3      	subs	r3, r2, r3
 80025a4:	2b64      	cmp	r3, #100	; 0x64
 80025a6:	d901      	bls.n	80025ac <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 80025a8:	2303      	movs	r3, #3
 80025aa:	e2e9      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80025ac:	4b93      	ldr	r3, [pc, #588]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80025ae:	681a      	ldr	r2, [r3, #0]
 80025b0:	2380      	movs	r3, #128	; 0x80
 80025b2:	029b      	lsls	r3, r3, #10
 80025b4:	4013      	ands	r3, r2
 80025b6:	d0f0      	beq.n	800259a <HAL_RCC_OscConfig+0xce>
 80025b8:	e015      	b.n	80025e6 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025ba:	f7fe fda3 	bl	8001104 <HAL_GetTick>
 80025be:	0003      	movs	r3, r0
 80025c0:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025c2:	e008      	b.n	80025d6 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80025c4:	f7fe fd9e 	bl	8001104 <HAL_GetTick>
 80025c8:	0002      	movs	r2, r0
 80025ca:	693b      	ldr	r3, [r7, #16]
 80025cc:	1ad3      	subs	r3, r2, r3
 80025ce:	2b64      	cmp	r3, #100	; 0x64
 80025d0:	d901      	bls.n	80025d6 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 80025d2:	2303      	movs	r3, #3
 80025d4:	e2d4      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 80025d6:	4b89      	ldr	r3, [pc, #548]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80025d8:	681a      	ldr	r2, [r3, #0]
 80025da:	2380      	movs	r3, #128	; 0x80
 80025dc:	029b      	lsls	r3, r3, #10
 80025de:	4013      	ands	r3, r2
 80025e0:	d1f0      	bne.n	80025c4 <HAL_RCC_OscConfig+0xf8>
 80025e2:	e000      	b.n	80025e6 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80025e4:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	2202      	movs	r2, #2
 80025ec:	4013      	ands	r3, r2
 80025ee:	d100      	bne.n	80025f2 <HAL_RCC_OscConfig+0x126>
 80025f0:	e099      	b.n	8002726 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80025f2:	4b82      	ldr	r3, [pc, #520]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80025f4:	689b      	ldr	r3, [r3, #8]
 80025f6:	2238      	movs	r2, #56	; 0x38
 80025f8:	4013      	ands	r3, r2
 80025fa:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80025fc:	4b7f      	ldr	r3, [pc, #508]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	2203      	movs	r2, #3
 8002602:	4013      	ands	r3, r2
 8002604:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8002606:	69bb      	ldr	r3, [r7, #24]
 8002608:	2b10      	cmp	r3, #16
 800260a:	d102      	bne.n	8002612 <HAL_RCC_OscConfig+0x146>
 800260c:	697b      	ldr	r3, [r7, #20]
 800260e:	2b02      	cmp	r3, #2
 8002610:	d002      	beq.n	8002618 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8002612:	69bb      	ldr	r3, [r7, #24]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d135      	bne.n	8002684 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002618:	4b78      	ldr	r3, [pc, #480]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	2380      	movs	r3, #128	; 0x80
 800261e:	00db      	lsls	r3, r3, #3
 8002620:	4013      	ands	r3, r2
 8002622:	d005      	beq.n	8002630 <HAL_RCC_OscConfig+0x164>
 8002624:	687b      	ldr	r3, [r7, #4]
 8002626:	68db      	ldr	r3, [r3, #12]
 8002628:	2b00      	cmp	r3, #0
 800262a:	d101      	bne.n	8002630 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 800262c:	2301      	movs	r3, #1
 800262e:	e2a7      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002630:	4b72      	ldr	r3, [pc, #456]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002632:	685b      	ldr	r3, [r3, #4]
 8002634:	4a74      	ldr	r2, [pc, #464]	; (8002808 <HAL_RCC_OscConfig+0x33c>)
 8002636:	4013      	ands	r3, r2
 8002638:	0019      	movs	r1, r3
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	695b      	ldr	r3, [r3, #20]
 800263e:	021a      	lsls	r2, r3, #8
 8002640:	4b6e      	ldr	r3, [pc, #440]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002642:	430a      	orrs	r2, r1
 8002644:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002646:	69bb      	ldr	r3, [r7, #24]
 8002648:	2b00      	cmp	r3, #0
 800264a:	d112      	bne.n	8002672 <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800264c:	4b6b      	ldr	r3, [pc, #428]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 800264e:	681b      	ldr	r3, [r3, #0]
 8002650:	4a6e      	ldr	r2, [pc, #440]	; (800280c <HAL_RCC_OscConfig+0x340>)
 8002652:	4013      	ands	r3, r2
 8002654:	0019      	movs	r1, r3
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	691a      	ldr	r2, [r3, #16]
 800265a:	4b68      	ldr	r3, [pc, #416]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 800265c:	430a      	orrs	r2, r1
 800265e:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8002660:	4b66      	ldr	r3, [pc, #408]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	0adb      	lsrs	r3, r3, #11
 8002666:	2207      	movs	r2, #7
 8002668:	4013      	ands	r3, r2
 800266a:	4a69      	ldr	r2, [pc, #420]	; (8002810 <HAL_RCC_OscConfig+0x344>)
 800266c:	40da      	lsrs	r2, r3
 800266e:	4b69      	ldr	r3, [pc, #420]	; (8002814 <HAL_RCC_OscConfig+0x348>)
 8002670:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8002672:	4b69      	ldr	r3, [pc, #420]	; (8002818 <HAL_RCC_OscConfig+0x34c>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	0018      	movs	r0, r3
 8002678:	f7fe fce8 	bl	800104c <HAL_InitTick>
 800267c:	1e03      	subs	r3, r0, #0
 800267e:	d051      	beq.n	8002724 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8002680:	2301      	movs	r3, #1
 8002682:	e27d      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	2b00      	cmp	r3, #0
 800268a:	d030      	beq.n	80026ee <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 800268c:	4b5b      	ldr	r3, [pc, #364]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	4a5e      	ldr	r2, [pc, #376]	; (800280c <HAL_RCC_OscConfig+0x340>)
 8002692:	4013      	ands	r3, r2
 8002694:	0019      	movs	r1, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	691a      	ldr	r2, [r3, #16]
 800269a:	4b58      	ldr	r3, [pc, #352]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 800269c:	430a      	orrs	r2, r1
 800269e:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 80026a0:	4b56      	ldr	r3, [pc, #344]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80026a2:	681a      	ldr	r2, [r3, #0]
 80026a4:	4b55      	ldr	r3, [pc, #340]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80026a6:	2180      	movs	r1, #128	; 0x80
 80026a8:	0049      	lsls	r1, r1, #1
 80026aa:	430a      	orrs	r2, r1
 80026ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026ae:	f7fe fd29 	bl	8001104 <HAL_GetTick>
 80026b2:	0003      	movs	r3, r0
 80026b4:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026b6:	e008      	b.n	80026ca <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80026b8:	f7fe fd24 	bl	8001104 <HAL_GetTick>
 80026bc:	0002      	movs	r2, r0
 80026be:	693b      	ldr	r3, [r7, #16]
 80026c0:	1ad3      	subs	r3, r2, r3
 80026c2:	2b02      	cmp	r3, #2
 80026c4:	d901      	bls.n	80026ca <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 80026c6:	2303      	movs	r3, #3
 80026c8:	e25a      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80026ca:	4b4c      	ldr	r3, [pc, #304]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80026cc:	681a      	ldr	r2, [r3, #0]
 80026ce:	2380      	movs	r3, #128	; 0x80
 80026d0:	00db      	lsls	r3, r3, #3
 80026d2:	4013      	ands	r3, r2
 80026d4:	d0f0      	beq.n	80026b8 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80026d6:	4b49      	ldr	r3, [pc, #292]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	4a4b      	ldr	r2, [pc, #300]	; (8002808 <HAL_RCC_OscConfig+0x33c>)
 80026dc:	4013      	ands	r3, r2
 80026de:	0019      	movs	r1, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	021a      	lsls	r2, r3, #8
 80026e6:	4b45      	ldr	r3, [pc, #276]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80026e8:	430a      	orrs	r2, r1
 80026ea:	605a      	str	r2, [r3, #4]
 80026ec:	e01b      	b.n	8002726 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 80026ee:	4b43      	ldr	r3, [pc, #268]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80026f0:	681a      	ldr	r2, [r3, #0]
 80026f2:	4b42      	ldr	r3, [pc, #264]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80026f4:	4949      	ldr	r1, [pc, #292]	; (800281c <HAL_RCC_OscConfig+0x350>)
 80026f6:	400a      	ands	r2, r1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80026fa:	f7fe fd03 	bl	8001104 <HAL_GetTick>
 80026fe:	0003      	movs	r3, r0
 8002700:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002702:	e008      	b.n	8002716 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002704:	f7fe fcfe 	bl	8001104 <HAL_GetTick>
 8002708:	0002      	movs	r2, r0
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	1ad3      	subs	r3, r2, r3
 800270e:	2b02      	cmp	r3, #2
 8002710:	d901      	bls.n	8002716 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8002712:	2303      	movs	r3, #3
 8002714:	e234      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8002716:	4b39      	ldr	r3, [pc, #228]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002718:	681a      	ldr	r2, [r3, #0]
 800271a:	2380      	movs	r3, #128	; 0x80
 800271c:	00db      	lsls	r3, r3, #3
 800271e:	4013      	ands	r3, r2
 8002720:	d1f0      	bne.n	8002704 <HAL_RCC_OscConfig+0x238>
 8002722:	e000      	b.n	8002726 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8002724:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	2208      	movs	r2, #8
 800272c:	4013      	ands	r3, r2
 800272e:	d047      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002730:	4b32      	ldr	r3, [pc, #200]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002732:	689b      	ldr	r3, [r3, #8]
 8002734:	2238      	movs	r2, #56	; 0x38
 8002736:	4013      	ands	r3, r2
 8002738:	2b18      	cmp	r3, #24
 800273a:	d10a      	bne.n	8002752 <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 800273c:	4b2f      	ldr	r3, [pc, #188]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 800273e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002740:	2202      	movs	r2, #2
 8002742:	4013      	ands	r3, r2
 8002744:	d03c      	beq.n	80027c0 <HAL_RCC_OscConfig+0x2f4>
 8002746:	687b      	ldr	r3, [r7, #4]
 8002748:	699b      	ldr	r3, [r3, #24]
 800274a:	2b00      	cmp	r3, #0
 800274c:	d138      	bne.n	80027c0 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 800274e:	2301      	movs	r3, #1
 8002750:	e216      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	699b      	ldr	r3, [r3, #24]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d019      	beq.n	800278e <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 800275a:	4b28      	ldr	r3, [pc, #160]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 800275c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800275e:	4b27      	ldr	r3, [pc, #156]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002760:	2101      	movs	r1, #1
 8002762:	430a      	orrs	r2, r1
 8002764:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002766:	f7fe fccd 	bl	8001104 <HAL_GetTick>
 800276a:	0003      	movs	r3, r0
 800276c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800276e:	e008      	b.n	8002782 <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002770:	f7fe fcc8 	bl	8001104 <HAL_GetTick>
 8002774:	0002      	movs	r2, r0
 8002776:	693b      	ldr	r3, [r7, #16]
 8002778:	1ad3      	subs	r3, r2, r3
 800277a:	2b02      	cmp	r3, #2
 800277c:	d901      	bls.n	8002782 <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800277e:	2303      	movs	r3, #3
 8002780:	e1fe      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002782:	4b1e      	ldr	r3, [pc, #120]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002786:	2202      	movs	r2, #2
 8002788:	4013      	ands	r3, r2
 800278a:	d0f1      	beq.n	8002770 <HAL_RCC_OscConfig+0x2a4>
 800278c:	e018      	b.n	80027c0 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800278e:	4b1b      	ldr	r3, [pc, #108]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002790:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8002792:	4b1a      	ldr	r3, [pc, #104]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 8002794:	2101      	movs	r1, #1
 8002796:	438a      	bics	r2, r1
 8002798:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800279a:	f7fe fcb3 	bl	8001104 <HAL_GetTick>
 800279e:	0003      	movs	r3, r0
 80027a0:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027a2:	e008      	b.n	80027b6 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80027a4:	f7fe fcae 	bl	8001104 <HAL_GetTick>
 80027a8:	0002      	movs	r2, r0
 80027aa:	693b      	ldr	r3, [r7, #16]
 80027ac:	1ad3      	subs	r3, r2, r3
 80027ae:	2b02      	cmp	r3, #2
 80027b0:	d901      	bls.n	80027b6 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 80027b2:	2303      	movs	r3, #3
 80027b4:	e1e4      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80027b6:	4b11      	ldr	r3, [pc, #68]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80027b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80027ba:	2202      	movs	r2, #2
 80027bc:	4013      	ands	r3, r2
 80027be:	d1f1      	bne.n	80027a4 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	2204      	movs	r2, #4
 80027c6:	4013      	ands	r3, r2
 80027c8:	d100      	bne.n	80027cc <HAL_RCC_OscConfig+0x300>
 80027ca:	e0c7      	b.n	800295c <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 80027cc:	231f      	movs	r3, #31
 80027ce:	18fb      	adds	r3, r7, r3
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 80027d4:	4b09      	ldr	r3, [pc, #36]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80027d6:	689b      	ldr	r3, [r3, #8]
 80027d8:	2238      	movs	r2, #56	; 0x38
 80027da:	4013      	ands	r3, r2
 80027dc:	2b20      	cmp	r3, #32
 80027de:	d11f      	bne.n	8002820 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 80027e0:	4b06      	ldr	r3, [pc, #24]	; (80027fc <HAL_RCC_OscConfig+0x330>)
 80027e2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027e4:	2202      	movs	r2, #2
 80027e6:	4013      	ands	r3, r2
 80027e8:	d100      	bne.n	80027ec <HAL_RCC_OscConfig+0x320>
 80027ea:	e0b7      	b.n	800295c <HAL_RCC_OscConfig+0x490>
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	689b      	ldr	r3, [r3, #8]
 80027f0:	2b00      	cmp	r3, #0
 80027f2:	d000      	beq.n	80027f6 <HAL_RCC_OscConfig+0x32a>
 80027f4:	e0b2      	b.n	800295c <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80027f6:	2301      	movs	r3, #1
 80027f8:	e1c2      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
 80027fa:	46c0      	nop			; (mov r8, r8)
 80027fc:	40021000 	.word	0x40021000
 8002800:	fffeffff 	.word	0xfffeffff
 8002804:	fffbffff 	.word	0xfffbffff
 8002808:	ffff80ff 	.word	0xffff80ff
 800280c:	ffffc7ff 	.word	0xffffc7ff
 8002810:	00f42400 	.word	0x00f42400
 8002814:	20000000 	.word	0x20000000
 8002818:	20000004 	.word	0x20000004
 800281c:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002820:	4bb5      	ldr	r3, [pc, #724]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002822:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002824:	2380      	movs	r3, #128	; 0x80
 8002826:	055b      	lsls	r3, r3, #21
 8002828:	4013      	ands	r3, r2
 800282a:	d101      	bne.n	8002830 <HAL_RCC_OscConfig+0x364>
 800282c:	2301      	movs	r3, #1
 800282e:	e000      	b.n	8002832 <HAL_RCC_OscConfig+0x366>
 8002830:	2300      	movs	r3, #0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d011      	beq.n	800285a <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 8002836:	4bb0      	ldr	r3, [pc, #704]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002838:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800283a:	4baf      	ldr	r3, [pc, #700]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 800283c:	2180      	movs	r1, #128	; 0x80
 800283e:	0549      	lsls	r1, r1, #21
 8002840:	430a      	orrs	r2, r1
 8002842:	63da      	str	r2, [r3, #60]	; 0x3c
 8002844:	4bac      	ldr	r3, [pc, #688]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002846:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002848:	2380      	movs	r3, #128	; 0x80
 800284a:	055b      	lsls	r3, r3, #21
 800284c:	4013      	ands	r3, r2
 800284e:	60fb      	str	r3, [r7, #12]
 8002850:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 8002852:	231f      	movs	r3, #31
 8002854:	18fb      	adds	r3, r7, r3
 8002856:	2201      	movs	r2, #1
 8002858:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800285a:	4ba8      	ldr	r3, [pc, #672]	; (8002afc <HAL_RCC_OscConfig+0x630>)
 800285c:	681a      	ldr	r2, [r3, #0]
 800285e:	2380      	movs	r3, #128	; 0x80
 8002860:	005b      	lsls	r3, r3, #1
 8002862:	4013      	ands	r3, r2
 8002864:	d11a      	bne.n	800289c <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002866:	4ba5      	ldr	r3, [pc, #660]	; (8002afc <HAL_RCC_OscConfig+0x630>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	4ba4      	ldr	r3, [pc, #656]	; (8002afc <HAL_RCC_OscConfig+0x630>)
 800286c:	2180      	movs	r1, #128	; 0x80
 800286e:	0049      	lsls	r1, r1, #1
 8002870:	430a      	orrs	r2, r1
 8002872:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8002874:	f7fe fc46 	bl	8001104 <HAL_GetTick>
 8002878:	0003      	movs	r3, r0
 800287a:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800287c:	e008      	b.n	8002890 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800287e:	f7fe fc41 	bl	8001104 <HAL_GetTick>
 8002882:	0002      	movs	r2, r0
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	1ad3      	subs	r3, r2, r3
 8002888:	2b02      	cmp	r3, #2
 800288a:	d901      	bls.n	8002890 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 800288c:	2303      	movs	r3, #3
 800288e:	e177      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002890:	4b9a      	ldr	r3, [pc, #616]	; (8002afc <HAL_RCC_OscConfig+0x630>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	2380      	movs	r3, #128	; 0x80
 8002896:	005b      	lsls	r3, r3, #1
 8002898:	4013      	ands	r3, r2
 800289a:	d0f0      	beq.n	800287e <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	2b01      	cmp	r3, #1
 80028a2:	d106      	bne.n	80028b2 <HAL_RCC_OscConfig+0x3e6>
 80028a4:	4b94      	ldr	r3, [pc, #592]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028a6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028a8:	4b93      	ldr	r3, [pc, #588]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028aa:	2101      	movs	r1, #1
 80028ac:	430a      	orrs	r2, r1
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c
 80028b0:	e01c      	b.n	80028ec <HAL_RCC_OscConfig+0x420>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	2b05      	cmp	r3, #5
 80028b8:	d10c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x408>
 80028ba:	4b8f      	ldr	r3, [pc, #572]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028bc:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028be:	4b8e      	ldr	r3, [pc, #568]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028c0:	2104      	movs	r1, #4
 80028c2:	430a      	orrs	r2, r1
 80028c4:	65da      	str	r2, [r3, #92]	; 0x5c
 80028c6:	4b8c      	ldr	r3, [pc, #560]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028c8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028ca:	4b8b      	ldr	r3, [pc, #556]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028cc:	2101      	movs	r1, #1
 80028ce:	430a      	orrs	r2, r1
 80028d0:	65da      	str	r2, [r3, #92]	; 0x5c
 80028d2:	e00b      	b.n	80028ec <HAL_RCC_OscConfig+0x420>
 80028d4:	4b88      	ldr	r3, [pc, #544]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028d6:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028d8:	4b87      	ldr	r3, [pc, #540]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028da:	2101      	movs	r1, #1
 80028dc:	438a      	bics	r2, r1
 80028de:	65da      	str	r2, [r3, #92]	; 0x5c
 80028e0:	4b85      	ldr	r3, [pc, #532]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028e2:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80028e4:	4b84      	ldr	r3, [pc, #528]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80028e6:	2104      	movs	r1, #4
 80028e8:	438a      	bics	r2, r1
 80028ea:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	689b      	ldr	r3, [r3, #8]
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d014      	beq.n	800291e <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80028f4:	f7fe fc06 	bl	8001104 <HAL_GetTick>
 80028f8:	0003      	movs	r3, r0
 80028fa:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80028fc:	e009      	b.n	8002912 <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80028fe:	f7fe fc01 	bl	8001104 <HAL_GetTick>
 8002902:	0002      	movs	r2, r0
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	1ad3      	subs	r3, r2, r3
 8002908:	4a7d      	ldr	r2, [pc, #500]	; (8002b00 <HAL_RCC_OscConfig+0x634>)
 800290a:	4293      	cmp	r3, r2
 800290c:	d901      	bls.n	8002912 <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 800290e:	2303      	movs	r3, #3
 8002910:	e136      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002912:	4b79      	ldr	r3, [pc, #484]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002914:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002916:	2202      	movs	r2, #2
 8002918:	4013      	ands	r3, r2
 800291a:	d0f0      	beq.n	80028fe <HAL_RCC_OscConfig+0x432>
 800291c:	e013      	b.n	8002946 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800291e:	f7fe fbf1 	bl	8001104 <HAL_GetTick>
 8002922:	0003      	movs	r3, r0
 8002924:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002926:	e009      	b.n	800293c <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002928:	f7fe fbec 	bl	8001104 <HAL_GetTick>
 800292c:	0002      	movs	r2, r0
 800292e:	693b      	ldr	r3, [r7, #16]
 8002930:	1ad3      	subs	r3, r2, r3
 8002932:	4a73      	ldr	r2, [pc, #460]	; (8002b00 <HAL_RCC_OscConfig+0x634>)
 8002934:	4293      	cmp	r3, r2
 8002936:	d901      	bls.n	800293c <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002938:	2303      	movs	r3, #3
 800293a:	e121      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800293c:	4b6e      	ldr	r3, [pc, #440]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 800293e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002940:	2202      	movs	r2, #2
 8002942:	4013      	ands	r3, r2
 8002944:	d1f0      	bne.n	8002928 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 8002946:	231f      	movs	r3, #31
 8002948:	18fb      	adds	r3, r7, r3
 800294a:	781b      	ldrb	r3, [r3, #0]
 800294c:	2b01      	cmp	r3, #1
 800294e:	d105      	bne.n	800295c <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002950:	4b69      	ldr	r3, [pc, #420]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002952:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002954:	4b68      	ldr	r3, [pc, #416]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002956:	496b      	ldr	r1, [pc, #428]	; (8002b04 <HAL_RCC_OscConfig+0x638>)
 8002958:	400a      	ands	r2, r1
 800295a:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	2220      	movs	r2, #32
 8002962:	4013      	ands	r3, r2
 8002964:	d039      	beq.n	80029da <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	69db      	ldr	r3, [r3, #28]
 800296a:	2b00      	cmp	r3, #0
 800296c:	d01b      	beq.n	80029a6 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800296e:	4b62      	ldr	r3, [pc, #392]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002970:	681a      	ldr	r2, [r3, #0]
 8002972:	4b61      	ldr	r3, [pc, #388]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002974:	2180      	movs	r1, #128	; 0x80
 8002976:	03c9      	lsls	r1, r1, #15
 8002978:	430a      	orrs	r2, r1
 800297a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800297c:	f7fe fbc2 	bl	8001104 <HAL_GetTick>
 8002980:	0003      	movs	r3, r0
 8002982:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002984:	e008      	b.n	8002998 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8002986:	f7fe fbbd 	bl	8001104 <HAL_GetTick>
 800298a:	0002      	movs	r2, r0
 800298c:	693b      	ldr	r3, [r7, #16]
 800298e:	1ad3      	subs	r3, r2, r3
 8002990:	2b02      	cmp	r3, #2
 8002992:	d901      	bls.n	8002998 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8002994:	2303      	movs	r3, #3
 8002996:	e0f3      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8002998:	4b57      	ldr	r3, [pc, #348]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	2380      	movs	r3, #128	; 0x80
 800299e:	041b      	lsls	r3, r3, #16
 80029a0:	4013      	ands	r3, r2
 80029a2:	d0f0      	beq.n	8002986 <HAL_RCC_OscConfig+0x4ba>
 80029a4:	e019      	b.n	80029da <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80029a6:	4b54      	ldr	r3, [pc, #336]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80029a8:	681a      	ldr	r2, [r3, #0]
 80029aa:	4b53      	ldr	r3, [pc, #332]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80029ac:	4956      	ldr	r1, [pc, #344]	; (8002b08 <HAL_RCC_OscConfig+0x63c>)
 80029ae:	400a      	ands	r2, r1
 80029b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029b2:	f7fe fba7 	bl	8001104 <HAL_GetTick>
 80029b6:	0003      	movs	r3, r0
 80029b8:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029ba:	e008      	b.n	80029ce <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80029bc:	f7fe fba2 	bl	8001104 <HAL_GetTick>
 80029c0:	0002      	movs	r2, r0
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	1ad3      	subs	r3, r2, r3
 80029c6:	2b02      	cmp	r3, #2
 80029c8:	d901      	bls.n	80029ce <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80029ca:	2303      	movs	r3, #3
 80029cc:	e0d8      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80029ce:	4b4a      	ldr	r3, [pc, #296]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80029d0:	681a      	ldr	r2, [r3, #0]
 80029d2:	2380      	movs	r3, #128	; 0x80
 80029d4:	041b      	lsls	r3, r3, #16
 80029d6:	4013      	ands	r3, r2
 80029d8:	d1f0      	bne.n	80029bc <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	6a1b      	ldr	r3, [r3, #32]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d100      	bne.n	80029e4 <HAL_RCC_OscConfig+0x518>
 80029e2:	e0cc      	b.n	8002b7e <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80029e4:	4b44      	ldr	r3, [pc, #272]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80029e6:	689b      	ldr	r3, [r3, #8]
 80029e8:	2238      	movs	r2, #56	; 0x38
 80029ea:	4013      	ands	r3, r2
 80029ec:	2b10      	cmp	r3, #16
 80029ee:	d100      	bne.n	80029f2 <HAL_RCC_OscConfig+0x526>
 80029f0:	e07b      	b.n	8002aea <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6a1b      	ldr	r3, [r3, #32]
 80029f6:	2b02      	cmp	r3, #2
 80029f8:	d156      	bne.n	8002aa8 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80029fa:	4b3f      	ldr	r3, [pc, #252]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 80029fc:	681a      	ldr	r2, [r3, #0]
 80029fe:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a00:	4942      	ldr	r1, [pc, #264]	; (8002b0c <HAL_RCC_OscConfig+0x640>)
 8002a02:	400a      	ands	r2, r1
 8002a04:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a06:	f7fe fb7d 	bl	8001104 <HAL_GetTick>
 8002a0a:	0003      	movs	r3, r0
 8002a0c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a0e:	e008      	b.n	8002a22 <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a10:	f7fe fb78 	bl	8001104 <HAL_GetTick>
 8002a14:	0002      	movs	r2, r0
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	2b02      	cmp	r3, #2
 8002a1c:	d901      	bls.n	8002a22 <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002a1e:	2303      	movs	r3, #3
 8002a20:	e0ae      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002a22:	4b35      	ldr	r3, [pc, #212]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a24:	681a      	ldr	r2, [r3, #0]
 8002a26:	2380      	movs	r3, #128	; 0x80
 8002a28:	049b      	lsls	r3, r3, #18
 8002a2a:	4013      	ands	r3, r2
 8002a2c:	d1f0      	bne.n	8002a10 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002a2e:	4b32      	ldr	r3, [pc, #200]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a30:	68db      	ldr	r3, [r3, #12]
 8002a32:	4a37      	ldr	r2, [pc, #220]	; (8002b10 <HAL_RCC_OscConfig+0x644>)
 8002a34:	4013      	ands	r3, r2
 8002a36:	0019      	movs	r1, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002a40:	431a      	orrs	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002a46:	021b      	lsls	r3, r3, #8
 8002a48:	431a      	orrs	r2, r3
 8002a4a:	687b      	ldr	r3, [r7, #4]
 8002a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4e:	431a      	orrs	r2, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002a54:	431a      	orrs	r2, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002a5a:	431a      	orrs	r2, r3
 8002a5c:	4b26      	ldr	r3, [pc, #152]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a5e:	430a      	orrs	r2, r1
 8002a60:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002a62:	4b25      	ldr	r3, [pc, #148]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a64:	681a      	ldr	r2, [r3, #0]
 8002a66:	4b24      	ldr	r3, [pc, #144]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a68:	2180      	movs	r1, #128	; 0x80
 8002a6a:	0449      	lsls	r1, r1, #17
 8002a6c:	430a      	orrs	r2, r1
 8002a6e:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002a70:	4b21      	ldr	r3, [pc, #132]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a72:	68da      	ldr	r2, [r3, #12]
 8002a74:	4b20      	ldr	r3, [pc, #128]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a76:	2180      	movs	r1, #128	; 0x80
 8002a78:	0549      	lsls	r1, r1, #21
 8002a7a:	430a      	orrs	r2, r1
 8002a7c:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002a7e:	f7fe fb41 	bl	8001104 <HAL_GetTick>
 8002a82:	0003      	movs	r3, r0
 8002a84:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a86:	e008      	b.n	8002a9a <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002a88:	f7fe fb3c 	bl	8001104 <HAL_GetTick>
 8002a8c:	0002      	movs	r2, r0
 8002a8e:	693b      	ldr	r3, [r7, #16]
 8002a90:	1ad3      	subs	r3, r2, r3
 8002a92:	2b02      	cmp	r3, #2
 8002a94:	d901      	bls.n	8002a9a <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8002a96:	2303      	movs	r3, #3
 8002a98:	e072      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002a9a:	4b17      	ldr	r3, [pc, #92]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002a9c:	681a      	ldr	r2, [r3, #0]
 8002a9e:	2380      	movs	r3, #128	; 0x80
 8002aa0:	049b      	lsls	r3, r3, #18
 8002aa2:	4013      	ands	r3, r2
 8002aa4:	d0f0      	beq.n	8002a88 <HAL_RCC_OscConfig+0x5bc>
 8002aa6:	e06a      	b.n	8002b7e <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002aa8:	4b13      	ldr	r3, [pc, #76]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002aaa:	681a      	ldr	r2, [r3, #0]
 8002aac:	4b12      	ldr	r3, [pc, #72]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002aae:	4917      	ldr	r1, [pc, #92]	; (8002b0c <HAL_RCC_OscConfig+0x640>)
 8002ab0:	400a      	ands	r2, r1
 8002ab2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ab4:	f7fe fb26 	bl	8001104 <HAL_GetTick>
 8002ab8:	0003      	movs	r3, r0
 8002aba:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002abc:	e008      	b.n	8002ad0 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002abe:	f7fe fb21 	bl	8001104 <HAL_GetTick>
 8002ac2:	0002      	movs	r2, r0
 8002ac4:	693b      	ldr	r3, [r7, #16]
 8002ac6:	1ad3      	subs	r3, r2, r3
 8002ac8:	2b02      	cmp	r3, #2
 8002aca:	d901      	bls.n	8002ad0 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8002acc:	2303      	movs	r3, #3
 8002ace:	e057      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002ad0:	4b09      	ldr	r3, [pc, #36]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002ad2:	681a      	ldr	r2, [r3, #0]
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	049b      	lsls	r3, r3, #18
 8002ad8:	4013      	ands	r3, r2
 8002ada:	d1f0      	bne.n	8002abe <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCC_OscConfig+0x62c>)
 8002ae2:	490c      	ldr	r1, [pc, #48]	; (8002b14 <HAL_RCC_OscConfig+0x648>)
 8002ae4:	400a      	ands	r2, r1
 8002ae6:	60da      	str	r2, [r3, #12]
 8002ae8:	e049      	b.n	8002b7e <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002aea:	687b      	ldr	r3, [r7, #4]
 8002aec:	6a1b      	ldr	r3, [r3, #32]
 8002aee:	2b01      	cmp	r3, #1
 8002af0:	d112      	bne.n	8002b18 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e044      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
 8002af6:	46c0      	nop			; (mov r8, r8)
 8002af8:	40021000 	.word	0x40021000
 8002afc:	40007000 	.word	0x40007000
 8002b00:	00001388 	.word	0x00001388
 8002b04:	efffffff 	.word	0xefffffff
 8002b08:	ffbfffff 	.word	0xffbfffff
 8002b0c:	feffffff 	.word	0xfeffffff
 8002b10:	11c1808c 	.word	0x11c1808c
 8002b14:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002b18:	4b1b      	ldr	r3, [pc, #108]	; (8002b88 <HAL_RCC_OscConfig+0x6bc>)
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	2203      	movs	r2, #3
 8002b22:	401a      	ands	r2, r3
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	d126      	bne.n	8002b7a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b2c:	697b      	ldr	r3, [r7, #20]
 8002b2e:	2270      	movs	r2, #112	; 0x70
 8002b30:	401a      	ands	r2, r3
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002b36:	429a      	cmp	r2, r3
 8002b38:	d11f      	bne.n	8002b7a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b3a:	697a      	ldr	r2, [r7, #20]
 8002b3c:	23fe      	movs	r3, #254	; 0xfe
 8002b3e:	01db      	lsls	r3, r3, #7
 8002b40:	401a      	ands	r2, r3
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b46:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002b48:	429a      	cmp	r2, r3
 8002b4a:	d116      	bne.n	8002b7a <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b4c:	697a      	ldr	r2, [r7, #20]
 8002b4e:	23f8      	movs	r3, #248	; 0xf8
 8002b50:	039b      	lsls	r3, r3, #14
 8002b52:	401a      	ands	r2, r3
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002b58:	429a      	cmp	r2, r3
 8002b5a:	d10e      	bne.n	8002b7a <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b5c:	697a      	ldr	r2, [r7, #20]
 8002b5e:	23e0      	movs	r3, #224	; 0xe0
 8002b60:	051b      	lsls	r3, r3, #20
 8002b62:	401a      	ands	r2, r3
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	d106      	bne.n	8002b7a <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002b6c:	697b      	ldr	r3, [r7, #20]
 8002b6e:	0f5b      	lsrs	r3, r3, #29
 8002b70:	075a      	lsls	r2, r3, #29
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002b76:	429a      	cmp	r2, r3
 8002b78:	d001      	beq.n	8002b7e <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002b7a:	2301      	movs	r3, #1
 8002b7c:	e000      	b.n	8002b80 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002b7e:	2300      	movs	r3, #0
}
 8002b80:	0018      	movs	r0, r3
 8002b82:	46bd      	mov	sp, r7
 8002b84:	b008      	add	sp, #32
 8002b86:	bd80      	pop	{r7, pc}
 8002b88:	40021000 	.word	0x40021000

08002b8c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
 8002b94:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d101      	bne.n	8002ba0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002b9c:	2301      	movs	r3, #1
 8002b9e:	e0e9      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002ba0:	4b76      	ldr	r3, [pc, #472]	; (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	2207      	movs	r2, #7
 8002ba6:	4013      	ands	r3, r2
 8002ba8:	683a      	ldr	r2, [r7, #0]
 8002baa:	429a      	cmp	r2, r3
 8002bac:	d91e      	bls.n	8002bec <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002bae:	4b73      	ldr	r3, [pc, #460]	; (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	2207      	movs	r2, #7
 8002bb4:	4393      	bics	r3, r2
 8002bb6:	0019      	movs	r1, r3
 8002bb8:	4b70      	ldr	r3, [pc, #448]	; (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002bba:	683a      	ldr	r2, [r7, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002bc0:	f7fe faa0 	bl	8001104 <HAL_GetTick>
 8002bc4:	0003      	movs	r3, r0
 8002bc6:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bc8:	e009      	b.n	8002bde <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002bca:	f7fe fa9b 	bl	8001104 <HAL_GetTick>
 8002bce:	0002      	movs	r2, r0
 8002bd0:	68fb      	ldr	r3, [r7, #12]
 8002bd2:	1ad3      	subs	r3, r2, r3
 8002bd4:	4a6a      	ldr	r2, [pc, #424]	; (8002d80 <HAL_RCC_ClockConfig+0x1f4>)
 8002bd6:	4293      	cmp	r3, r2
 8002bd8:	d901      	bls.n	8002bde <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8002bda:	2303      	movs	r3, #3
 8002bdc:	e0ca      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002bde:	4b67      	ldr	r3, [pc, #412]	; (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	2207      	movs	r2, #7
 8002be4:	4013      	ands	r3, r2
 8002be6:	683a      	ldr	r2, [r7, #0]
 8002be8:	429a      	cmp	r2, r3
 8002bea:	d1ee      	bne.n	8002bca <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	681b      	ldr	r3, [r3, #0]
 8002bf0:	2202      	movs	r2, #2
 8002bf2:	4013      	ands	r3, r2
 8002bf4:	d015      	beq.n	8002c22 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2204      	movs	r2, #4
 8002bfc:	4013      	ands	r3, r2
 8002bfe:	d006      	beq.n	8002c0e <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002c00:	4b60      	ldr	r3, [pc, #384]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	4b5f      	ldr	r3, [pc, #380]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c06:	21e0      	movs	r1, #224	; 0xe0
 8002c08:	01c9      	lsls	r1, r1, #7
 8002c0a:	430a      	orrs	r2, r1
 8002c0c:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002c0e:	4b5d      	ldr	r3, [pc, #372]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c10:	689b      	ldr	r3, [r3, #8]
 8002c12:	4a5d      	ldr	r2, [pc, #372]	; (8002d88 <HAL_RCC_ClockConfig+0x1fc>)
 8002c14:	4013      	ands	r3, r2
 8002c16:	0019      	movs	r1, r3
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689a      	ldr	r2, [r3, #8]
 8002c1c:	4b59      	ldr	r3, [pc, #356]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	2201      	movs	r2, #1
 8002c28:	4013      	ands	r3, r2
 8002c2a:	d057      	beq.n	8002cdc <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	685b      	ldr	r3, [r3, #4]
 8002c30:	2b01      	cmp	r3, #1
 8002c32:	d107      	bne.n	8002c44 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8002c34:	4b53      	ldr	r3, [pc, #332]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c36:	681a      	ldr	r2, [r3, #0]
 8002c38:	2380      	movs	r3, #128	; 0x80
 8002c3a:	029b      	lsls	r3, r3, #10
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	d12b      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c40:	2301      	movs	r3, #1
 8002c42:	e097      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	685b      	ldr	r3, [r3, #4]
 8002c48:	2b02      	cmp	r3, #2
 8002c4a:	d107      	bne.n	8002c5c <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002c4c:	4b4d      	ldr	r3, [pc, #308]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c4e:	681a      	ldr	r2, [r3, #0]
 8002c50:	2380      	movs	r3, #128	; 0x80
 8002c52:	049b      	lsls	r3, r3, #18
 8002c54:	4013      	ands	r3, r2
 8002c56:	d11f      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e08b      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	685b      	ldr	r3, [r3, #4]
 8002c60:	2b00      	cmp	r3, #0
 8002c62:	d107      	bne.n	8002c74 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8002c64:	4b47      	ldr	r3, [pc, #284]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	2380      	movs	r3, #128	; 0x80
 8002c6a:	00db      	lsls	r3, r3, #3
 8002c6c:	4013      	ands	r3, r2
 8002c6e:	d113      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c70:	2301      	movs	r3, #1
 8002c72:	e07f      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	2b03      	cmp	r3, #3
 8002c7a:	d106      	bne.n	8002c8a <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002c7c:	4b41      	ldr	r3, [pc, #260]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c80:	2202      	movs	r2, #2
 8002c82:	4013      	ands	r3, r2
 8002c84:	d108      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c86:	2301      	movs	r3, #1
 8002c88:	e074      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002c8a:	4b3e      	ldr	r3, [pc, #248]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c8c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c8e:	2202      	movs	r2, #2
 8002c90:	4013      	ands	r3, r2
 8002c92:	d101      	bne.n	8002c98 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002c94:	2301      	movs	r3, #1
 8002c96:	e06d      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8002c98:	4b3a      	ldr	r3, [pc, #232]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002c9a:	689b      	ldr	r3, [r3, #8]
 8002c9c:	2207      	movs	r2, #7
 8002c9e:	4393      	bics	r3, r2
 8002ca0:	0019      	movs	r1, r3
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	685a      	ldr	r2, [r3, #4]
 8002ca6:	4b37      	ldr	r3, [pc, #220]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002ca8:	430a      	orrs	r2, r1
 8002caa:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002cac:	f7fe fa2a 	bl	8001104 <HAL_GetTick>
 8002cb0:	0003      	movs	r3, r0
 8002cb2:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cb4:	e009      	b.n	8002cca <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002cb6:	f7fe fa25 	bl	8001104 <HAL_GetTick>
 8002cba:	0002      	movs	r2, r0
 8002cbc:	68fb      	ldr	r3, [r7, #12]
 8002cbe:	1ad3      	subs	r3, r2, r3
 8002cc0:	4a2f      	ldr	r2, [pc, #188]	; (8002d80 <HAL_RCC_ClockConfig+0x1f4>)
 8002cc2:	4293      	cmp	r3, r2
 8002cc4:	d901      	bls.n	8002cca <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8002cc6:	2303      	movs	r3, #3
 8002cc8:	e054      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002cca:	4b2e      	ldr	r3, [pc, #184]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002ccc:	689b      	ldr	r3, [r3, #8]
 8002cce:	2238      	movs	r2, #56	; 0x38
 8002cd0:	401a      	ands	r2, r3
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	00db      	lsls	r3, r3, #3
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d1ec      	bne.n	8002cb6 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b27      	ldr	r3, [pc, #156]	; (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	2207      	movs	r2, #7
 8002ce2:	4013      	ands	r3, r2
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d21e      	bcs.n	8002d28 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b24      	ldr	r3, [pc, #144]	; (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	2207      	movs	r2, #7
 8002cf0:	4393      	bics	r3, r2
 8002cf2:	0019      	movs	r1, r3
 8002cf4:	4b21      	ldr	r3, [pc, #132]	; (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002cf6:	683a      	ldr	r2, [r7, #0]
 8002cf8:	430a      	orrs	r2, r1
 8002cfa:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002cfc:	f7fe fa02 	bl	8001104 <HAL_GetTick>
 8002d00:	0003      	movs	r3, r0
 8002d02:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d04:	e009      	b.n	8002d1a <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d06:	f7fe f9fd 	bl	8001104 <HAL_GetTick>
 8002d0a:	0002      	movs	r2, r0
 8002d0c:	68fb      	ldr	r3, [r7, #12]
 8002d0e:	1ad3      	subs	r3, r2, r3
 8002d10:	4a1b      	ldr	r2, [pc, #108]	; (8002d80 <HAL_RCC_ClockConfig+0x1f4>)
 8002d12:	4293      	cmp	r3, r2
 8002d14:	d901      	bls.n	8002d1a <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 8002d16:	2303      	movs	r3, #3
 8002d18:	e02c      	b.n	8002d74 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002d1a:	4b18      	ldr	r3, [pc, #96]	; (8002d7c <HAL_RCC_ClockConfig+0x1f0>)
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	2207      	movs	r2, #7
 8002d20:	4013      	ands	r3, r2
 8002d22:	683a      	ldr	r2, [r7, #0]
 8002d24:	429a      	cmp	r2, r3
 8002d26:	d1ee      	bne.n	8002d06 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	2204      	movs	r2, #4
 8002d2e:	4013      	ands	r3, r2
 8002d30:	d009      	beq.n	8002d46 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 8002d32:	4b14      	ldr	r3, [pc, #80]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002d34:	689b      	ldr	r3, [r3, #8]
 8002d36:	4a15      	ldr	r2, [pc, #84]	; (8002d8c <HAL_RCC_ClockConfig+0x200>)
 8002d38:	4013      	ands	r3, r2
 8002d3a:	0019      	movs	r1, r3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	68da      	ldr	r2, [r3, #12]
 8002d40:	4b10      	ldr	r3, [pc, #64]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002d42:	430a      	orrs	r2, r1
 8002d44:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 8002d46:	f000 f829 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8002d4a:	0001      	movs	r1, r0
 8002d4c:	4b0d      	ldr	r3, [pc, #52]	; (8002d84 <HAL_RCC_ClockConfig+0x1f8>)
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	0a1b      	lsrs	r3, r3, #8
 8002d52:	220f      	movs	r2, #15
 8002d54:	401a      	ands	r2, r3
 8002d56:	4b0e      	ldr	r3, [pc, #56]	; (8002d90 <HAL_RCC_ClockConfig+0x204>)
 8002d58:	0092      	lsls	r2, r2, #2
 8002d5a:	58d3      	ldr	r3, [r2, r3]
 8002d5c:	221f      	movs	r2, #31
 8002d5e:	4013      	ands	r3, r2
 8002d60:	000a      	movs	r2, r1
 8002d62:	40da      	lsrs	r2, r3
 8002d64:	4b0b      	ldr	r3, [pc, #44]	; (8002d94 <HAL_RCC_ClockConfig+0x208>)
 8002d66:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002d68:	4b0b      	ldr	r3, [pc, #44]	; (8002d98 <HAL_RCC_ClockConfig+0x20c>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	0018      	movs	r0, r3
 8002d6e:	f7fe f96d 	bl	800104c <HAL_InitTick>
 8002d72:	0003      	movs	r3, r0
}
 8002d74:	0018      	movs	r0, r3
 8002d76:	46bd      	mov	sp, r7
 8002d78:	b004      	add	sp, #16
 8002d7a:	bd80      	pop	{r7, pc}
 8002d7c:	40022000 	.word	0x40022000
 8002d80:	00001388 	.word	0x00001388
 8002d84:	40021000 	.word	0x40021000
 8002d88:	fffff0ff 	.word	0xfffff0ff
 8002d8c:	ffff8fff 	.word	0xffff8fff
 8002d90:	08005314 	.word	0x08005314
 8002d94:	20000000 	.word	0x20000000
 8002d98:	20000004 	.word	0x20000004

08002d9c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002d9c:	b580      	push	{r7, lr}
 8002d9e:	b086      	sub	sp, #24
 8002da0:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002da2:	4b3c      	ldr	r3, [pc, #240]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002da4:	689b      	ldr	r3, [r3, #8]
 8002da6:	2238      	movs	r2, #56	; 0x38
 8002da8:	4013      	ands	r3, r2
 8002daa:	d10f      	bne.n	8002dcc <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8002dac:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dae:	681b      	ldr	r3, [r3, #0]
 8002db0:	0adb      	lsrs	r3, r3, #11
 8002db2:	2207      	movs	r2, #7
 8002db4:	4013      	ands	r3, r2
 8002db6:	2201      	movs	r2, #1
 8002db8:	409a      	lsls	r2, r3
 8002dba:	0013      	movs	r3, r2
 8002dbc:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8002dbe:	6839      	ldr	r1, [r7, #0]
 8002dc0:	4835      	ldr	r0, [pc, #212]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002dc2:	f7fd f99f 	bl	8000104 <__udivsi3>
 8002dc6:	0003      	movs	r3, r0
 8002dc8:	613b      	str	r3, [r7, #16]
 8002dca:	e05d      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002dcc:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dce:	689b      	ldr	r3, [r3, #8]
 8002dd0:	2238      	movs	r2, #56	; 0x38
 8002dd2:	4013      	ands	r3, r2
 8002dd4:	2b08      	cmp	r3, #8
 8002dd6:	d102      	bne.n	8002dde <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8002dd8:	4b30      	ldr	r3, [pc, #192]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x100>)
 8002dda:	613b      	str	r3, [r7, #16]
 8002ddc:	e054      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002dde:	4b2d      	ldr	r3, [pc, #180]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002de0:	689b      	ldr	r3, [r3, #8]
 8002de2:	2238      	movs	r2, #56	; 0x38
 8002de4:	4013      	ands	r3, r2
 8002de6:	2b10      	cmp	r3, #16
 8002de8:	d138      	bne.n	8002e5c <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8002dea:	4b2a      	ldr	r3, [pc, #168]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2203      	movs	r2, #3
 8002df0:	4013      	ands	r3, r2
 8002df2:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8002df4:	4b27      	ldr	r3, [pc, #156]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002df6:	68db      	ldr	r3, [r3, #12]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	2207      	movs	r2, #7
 8002dfc:	4013      	ands	r3, r2
 8002dfe:	3301      	adds	r3, #1
 8002e00:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d10d      	bne.n	8002e24 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002e08:	68b9      	ldr	r1, [r7, #8]
 8002e0a:	4824      	ldr	r0, [pc, #144]	; (8002e9c <HAL_RCC_GetSysClockFreq+0x100>)
 8002e0c:	f7fd f97a 	bl	8000104 <__udivsi3>
 8002e10:	0003      	movs	r3, r0
 8002e12:	0019      	movs	r1, r3
 8002e14:	4b1f      	ldr	r3, [pc, #124]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e16:	68db      	ldr	r3, [r3, #12]
 8002e18:	0a1b      	lsrs	r3, r3, #8
 8002e1a:	227f      	movs	r2, #127	; 0x7f
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	434b      	muls	r3, r1
 8002e20:	617b      	str	r3, [r7, #20]
        break;
 8002e22:	e00d      	b.n	8002e40 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8002e24:	68b9      	ldr	r1, [r7, #8]
 8002e26:	481c      	ldr	r0, [pc, #112]	; (8002e98 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002e28:	f7fd f96c 	bl	8000104 <__udivsi3>
 8002e2c:	0003      	movs	r3, r0
 8002e2e:	0019      	movs	r1, r3
 8002e30:	4b18      	ldr	r3, [pc, #96]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e32:	68db      	ldr	r3, [r3, #12]
 8002e34:	0a1b      	lsrs	r3, r3, #8
 8002e36:	227f      	movs	r2, #127	; 0x7f
 8002e38:	4013      	ands	r3, r2
 8002e3a:	434b      	muls	r3, r1
 8002e3c:	617b      	str	r3, [r7, #20]
        break;
 8002e3e:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002e40:	4b14      	ldr	r3, [pc, #80]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e42:	68db      	ldr	r3, [r3, #12]
 8002e44:	0f5b      	lsrs	r3, r3, #29
 8002e46:	2207      	movs	r2, #7
 8002e48:	4013      	ands	r3, r2
 8002e4a:	3301      	adds	r3, #1
 8002e4c:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002e4e:	6879      	ldr	r1, [r7, #4]
 8002e50:	6978      	ldr	r0, [r7, #20]
 8002e52:	f7fd f957 	bl	8000104 <__udivsi3>
 8002e56:	0003      	movs	r3, r0
 8002e58:	613b      	str	r3, [r7, #16]
 8002e5a:	e015      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002e5c:	4b0d      	ldr	r3, [pc, #52]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e5e:	689b      	ldr	r3, [r3, #8]
 8002e60:	2238      	movs	r2, #56	; 0x38
 8002e62:	4013      	ands	r3, r2
 8002e64:	2b20      	cmp	r3, #32
 8002e66:	d103      	bne.n	8002e70 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002e68:	2380      	movs	r3, #128	; 0x80
 8002e6a:	021b      	lsls	r3, r3, #8
 8002e6c:	613b      	str	r3, [r7, #16]
 8002e6e:	e00b      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002e70:	4b08      	ldr	r3, [pc, #32]	; (8002e94 <HAL_RCC_GetSysClockFreq+0xf8>)
 8002e72:	689b      	ldr	r3, [r3, #8]
 8002e74:	2238      	movs	r2, #56	; 0x38
 8002e76:	4013      	ands	r3, r2
 8002e78:	2b18      	cmp	r3, #24
 8002e7a:	d103      	bne.n	8002e84 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002e7c:	23fa      	movs	r3, #250	; 0xfa
 8002e7e:	01db      	lsls	r3, r3, #7
 8002e80:	613b      	str	r3, [r7, #16]
 8002e82:	e001      	b.n	8002e88 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8002e84:	2300      	movs	r3, #0
 8002e86:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002e88:	693b      	ldr	r3, [r7, #16]
}
 8002e8a:	0018      	movs	r0, r3
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	b006      	add	sp, #24
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	46c0      	nop			; (mov r8, r8)
 8002e94:	40021000 	.word	0x40021000
 8002e98:	00f42400 	.word	0x00f42400
 8002e9c:	007a1200 	.word	0x007a1200

08002ea0 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ea4:	4b02      	ldr	r3, [pc, #8]	; (8002eb0 <HAL_RCC_GetHCLKFreq+0x10>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
}
 8002ea8:	0018      	movs	r0, r3
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}
 8002eae:	46c0      	nop			; (mov r8, r8)
 8002eb0:	20000000 	.word	0x20000000

08002eb4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002eb4:	b5b0      	push	{r4, r5, r7, lr}
 8002eb6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return ((uint32_t)(__LL_RCC_CALC_PCLK1_FREQ(HAL_RCC_GetHCLKFreq(), LL_RCC_GetAPB1Prescaler())));
 8002eb8:	f7ff fff2 	bl	8002ea0 <HAL_RCC_GetHCLKFreq>
 8002ebc:	0004      	movs	r4, r0
 8002ebe:	f7ff faf9 	bl	80024b4 <LL_RCC_GetAPB1Prescaler>
 8002ec2:	0003      	movs	r3, r0
 8002ec4:	0b1a      	lsrs	r2, r3, #12
 8002ec6:	4b05      	ldr	r3, [pc, #20]	; (8002edc <HAL_RCC_GetPCLK1Freq+0x28>)
 8002ec8:	0092      	lsls	r2, r2, #2
 8002eca:	58d3      	ldr	r3, [r2, r3]
 8002ecc:	221f      	movs	r2, #31
 8002ece:	4013      	ands	r3, r2
 8002ed0:	40dc      	lsrs	r4, r3
 8002ed2:	0023      	movs	r3, r4
}
 8002ed4:	0018      	movs	r0, r3
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	bdb0      	pop	{r4, r5, r7, pc}
 8002eda:	46c0      	nop			; (mov r8, r8)
 8002edc:	08005354 	.word	0x08005354

08002ee0 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8002ee8:	2313      	movs	r3, #19
 8002eea:	18fb      	adds	r3, r7, r3
 8002eec:	2200      	movs	r2, #0
 8002eee:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8002ef0:	2312      	movs	r3, #18
 8002ef2:	18fb      	adds	r3, r7, r3
 8002ef4:	2200      	movs	r2, #0
 8002ef6:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681a      	ldr	r2, [r3, #0]
 8002efc:	2380      	movs	r3, #128	; 0x80
 8002efe:	029b      	lsls	r3, r3, #10
 8002f00:	4013      	ands	r3, r2
 8002f02:	d100      	bne.n	8002f06 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8002f04:	e0ad      	b.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f06:	2011      	movs	r0, #17
 8002f08:	183b      	adds	r3, r7, r0
 8002f0a:	2200      	movs	r2, #0
 8002f0c:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f0e:	4b47      	ldr	r3, [pc, #284]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f10:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f12:	2380      	movs	r3, #128	; 0x80
 8002f14:	055b      	lsls	r3, r3, #21
 8002f16:	4013      	ands	r3, r2
 8002f18:	d110      	bne.n	8002f3c <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f1a:	4b44      	ldr	r3, [pc, #272]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f1e:	4b43      	ldr	r3, [pc, #268]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f20:	2180      	movs	r1, #128	; 0x80
 8002f22:	0549      	lsls	r1, r1, #21
 8002f24:	430a      	orrs	r2, r1
 8002f26:	63da      	str	r2, [r3, #60]	; 0x3c
 8002f28:	4b40      	ldr	r3, [pc, #256]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f2a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002f2c:	2380      	movs	r3, #128	; 0x80
 8002f2e:	055b      	lsls	r3, r3, #21
 8002f30:	4013      	ands	r3, r2
 8002f32:	60bb      	str	r3, [r7, #8]
 8002f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f36:	183b      	adds	r3, r7, r0
 8002f38:	2201      	movs	r2, #1
 8002f3a:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002f3c:	4b3c      	ldr	r3, [pc, #240]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f3e:	681a      	ldr	r2, [r3, #0]
 8002f40:	4b3b      	ldr	r3, [pc, #236]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f42:	2180      	movs	r1, #128	; 0x80
 8002f44:	0049      	lsls	r1, r1, #1
 8002f46:	430a      	orrs	r2, r1
 8002f48:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002f4a:	f7fe f8db 	bl	8001104 <HAL_GetTick>
 8002f4e:	0003      	movs	r3, r0
 8002f50:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f52:	e00b      	b.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f54:	f7fe f8d6 	bl	8001104 <HAL_GetTick>
 8002f58:	0002      	movs	r2, r0
 8002f5a:	68fb      	ldr	r3, [r7, #12]
 8002f5c:	1ad3      	subs	r3, r2, r3
 8002f5e:	2b02      	cmp	r3, #2
 8002f60:	d904      	bls.n	8002f6c <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8002f62:	2313      	movs	r3, #19
 8002f64:	18fb      	adds	r3, r7, r3
 8002f66:	2203      	movs	r2, #3
 8002f68:	701a      	strb	r2, [r3, #0]
        break;
 8002f6a:	e005      	b.n	8002f78 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002f6c:	4b30      	ldr	r3, [pc, #192]	; (8003030 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	2380      	movs	r3, #128	; 0x80
 8002f72:	005b      	lsls	r3, r3, #1
 8002f74:	4013      	ands	r3, r2
 8002f76:	d0ed      	beq.n	8002f54 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002f78:	2313      	movs	r3, #19
 8002f7a:	18fb      	adds	r3, r7, r3
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	d15e      	bne.n	8003040 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8002f82:	4b2a      	ldr	r3, [pc, #168]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002f84:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002f86:	23c0      	movs	r3, #192	; 0xc0
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002f8e:	697b      	ldr	r3, [r7, #20]
 8002f90:	2b00      	cmp	r3, #0
 8002f92:	d019      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f98:	697a      	ldr	r2, [r7, #20]
 8002f9a:	429a      	cmp	r2, r3
 8002f9c:	d014      	beq.n	8002fc8 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002f9e:	4b23      	ldr	r3, [pc, #140]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fa0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fa2:	4a24      	ldr	r2, [pc, #144]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002fa8:	4b20      	ldr	r3, [pc, #128]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002faa:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fac:	4b1f      	ldr	r3, [pc, #124]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fae:	2180      	movs	r1, #128	; 0x80
 8002fb0:	0249      	lsls	r1, r1, #9
 8002fb2:	430a      	orrs	r2, r1
 8002fb4:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8002fb6:	4b1d      	ldr	r3, [pc, #116]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fb8:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002fba:	4b1c      	ldr	r3, [pc, #112]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fbc:	491e      	ldr	r1, [pc, #120]	; (8003038 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002fbe:	400a      	ands	r2, r1
 8002fc0:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8002fc2:	4b1a      	ldr	r3, [pc, #104]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002fc4:	697a      	ldr	r2, [r7, #20]
 8002fc6:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	4013      	ands	r3, r2
 8002fce:	d016      	beq.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd0:	f7fe f898 	bl	8001104 <HAL_GetTick>
 8002fd4:	0003      	movs	r3, r0
 8002fd6:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002fd8:	e00c      	b.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002fda:	f7fe f893 	bl	8001104 <HAL_GetTick>
 8002fde:	0002      	movs	r2, r0
 8002fe0:	68fb      	ldr	r3, [r7, #12]
 8002fe2:	1ad3      	subs	r3, r2, r3
 8002fe4:	4a15      	ldr	r2, [pc, #84]	; (800303c <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8002fe6:	4293      	cmp	r3, r2
 8002fe8:	d904      	bls.n	8002ff4 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8002fea:	2313      	movs	r3, #19
 8002fec:	18fb      	adds	r3, r7, r3
 8002fee:	2203      	movs	r2, #3
 8002ff0:	701a      	strb	r2, [r3, #0]
            break;
 8002ff2:	e004      	b.n	8002ffe <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002ff4:	4b0d      	ldr	r3, [pc, #52]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002ff6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002ff8:	2202      	movs	r2, #2
 8002ffa:	4013      	ands	r3, r2
 8002ffc:	d0ed      	beq.n	8002fda <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8002ffe:	2313      	movs	r3, #19
 8003000:	18fb      	adds	r3, r7, r3
 8003002:	781b      	ldrb	r3, [r3, #0]
 8003004:	2b00      	cmp	r3, #0
 8003006:	d10a      	bne.n	800301e <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003008:	4b08      	ldr	r3, [pc, #32]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800300a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800300c:	4a09      	ldr	r2, [pc, #36]	; (8003034 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800300e:	4013      	ands	r3, r2
 8003010:	0019      	movs	r1, r3
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003016:	4b05      	ldr	r3, [pc, #20]	; (800302c <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003018:	430a      	orrs	r2, r1
 800301a:	65da      	str	r2, [r3, #92]	; 0x5c
 800301c:	e016      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 800301e:	2312      	movs	r3, #18
 8003020:	18fb      	adds	r3, r7, r3
 8003022:	2213      	movs	r2, #19
 8003024:	18ba      	adds	r2, r7, r2
 8003026:	7812      	ldrb	r2, [r2, #0]
 8003028:	701a      	strb	r2, [r3, #0]
 800302a:	e00f      	b.n	800304c <HAL_RCCEx_PeriphCLKConfig+0x16c>
 800302c:	40021000 	.word	0x40021000
 8003030:	40007000 	.word	0x40007000
 8003034:	fffffcff 	.word	0xfffffcff
 8003038:	fffeffff 	.word	0xfffeffff
 800303c:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003040:	2312      	movs	r3, #18
 8003042:	18fb      	adds	r3, r7, r3
 8003044:	2213      	movs	r2, #19
 8003046:	18ba      	adds	r2, r7, r2
 8003048:	7812      	ldrb	r2, [r2, #0]
 800304a:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800304c:	2311      	movs	r3, #17
 800304e:	18fb      	adds	r3, r7, r3
 8003050:	781b      	ldrb	r3, [r3, #0]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003056:	4bb6      	ldr	r3, [pc, #728]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003058:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800305a:	4bb5      	ldr	r3, [pc, #724]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800305c:	49b5      	ldr	r1, [pc, #724]	; (8003334 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 800305e:	400a      	ands	r2, r1
 8003060:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	2201      	movs	r2, #1
 8003068:	4013      	ands	r3, r2
 800306a:	d009      	beq.n	8003080 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 800306c:	4bb0      	ldr	r3, [pc, #704]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800306e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003070:	2203      	movs	r2, #3
 8003072:	4393      	bics	r3, r2
 8003074:	0019      	movs	r1, r3
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685a      	ldr	r2, [r3, #4]
 800307a:	4bad      	ldr	r3, [pc, #692]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800307c:	430a      	orrs	r2, r1
 800307e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	2202      	movs	r2, #2
 8003086:	4013      	ands	r3, r2
 8003088:	d009      	beq.n	800309e <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 800308a:	4ba9      	ldr	r3, [pc, #676]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800308c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800308e:	220c      	movs	r2, #12
 8003090:	4393      	bics	r3, r2
 8003092:	0019      	movs	r1, r3
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	689a      	ldr	r2, [r3, #8]
 8003098:	4ba5      	ldr	r3, [pc, #660]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800309a:	430a      	orrs	r2, r1
 800309c:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	2204      	movs	r2, #4
 80030a4:	4013      	ands	r3, r2
 80030a6:	d009      	beq.n	80030bc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80030a8:	4ba1      	ldr	r3, [pc, #644]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030aa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ac:	2230      	movs	r2, #48	; 0x30
 80030ae:	4393      	bics	r3, r2
 80030b0:	0019      	movs	r1, r3
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	68da      	ldr	r2, [r3, #12]
 80030b6:	4b9e      	ldr	r3, [pc, #632]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030b8:	430a      	orrs	r2, r1
 80030ba:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	2210      	movs	r2, #16
 80030c2:	4013      	ands	r3, r2
 80030c4:	d009      	beq.n	80030da <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80030c6:	4b9a      	ldr	r3, [pc, #616]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030c8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ca:	4a9b      	ldr	r2, [pc, #620]	; (8003338 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 80030cc:	4013      	ands	r3, r2
 80030ce:	0019      	movs	r1, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	691a      	ldr	r2, [r3, #16]
 80030d4:	4b96      	ldr	r3, [pc, #600]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030d6:	430a      	orrs	r2, r1
 80030d8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681a      	ldr	r2, [r3, #0]
 80030de:	2380      	movs	r3, #128	; 0x80
 80030e0:	015b      	lsls	r3, r3, #5
 80030e2:	4013      	ands	r3, r2
 80030e4:	d009      	beq.n	80030fa <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80030e6:	4b92      	ldr	r3, [pc, #584]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80030ea:	4a94      	ldr	r2, [pc, #592]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80030ec:	4013      	ands	r3, r2
 80030ee:	0019      	movs	r1, r3
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	695a      	ldr	r2, [r3, #20]
 80030f4:	4b8e      	ldr	r3, [pc, #568]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80030f6:	430a      	orrs	r2, r1
 80030f8:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681a      	ldr	r2, [r3, #0]
 80030fe:	2380      	movs	r3, #128	; 0x80
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	4013      	ands	r3, r2
 8003104:	d009      	beq.n	800311a <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003106:	4b8a      	ldr	r3, [pc, #552]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800310a:	4a8d      	ldr	r2, [pc, #564]	; (8003340 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 800310c:	4013      	ands	r3, r2
 800310e:	0019      	movs	r1, r3
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003114:	4b86      	ldr	r3, [pc, #536]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003116:	430a      	orrs	r2, r1
 8003118:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	681a      	ldr	r2, [r3, #0]
 800311e:	2380      	movs	r3, #128	; 0x80
 8003120:	00db      	lsls	r3, r3, #3
 8003122:	4013      	ands	r3, r2
 8003124:	d009      	beq.n	800313a <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003126:	4b82      	ldr	r3, [pc, #520]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800312a:	4a86      	ldr	r2, [pc, #536]	; (8003344 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 800312c:	4013      	ands	r3, r2
 800312e:	0019      	movs	r1, r3
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003134:	4b7e      	ldr	r3, [pc, #504]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003136:	430a      	orrs	r2, r1
 8003138:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	2220      	movs	r2, #32
 8003140:	4013      	ands	r3, r2
 8003142:	d009      	beq.n	8003158 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003144:	4b7a      	ldr	r3, [pc, #488]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003146:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003148:	4a7f      	ldr	r2, [pc, #508]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 800314a:	4013      	ands	r3, r2
 800314c:	0019      	movs	r1, r3
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	699a      	ldr	r2, [r3, #24]
 8003152:	4b77      	ldr	r3, [pc, #476]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003154:	430a      	orrs	r2, r1
 8003156:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	2240      	movs	r2, #64	; 0x40
 800315e:	4013      	ands	r3, r2
 8003160:	d009      	beq.n	8003176 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003162:	4b73      	ldr	r3, [pc, #460]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003164:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003166:	4a79      	ldr	r2, [pc, #484]	; (800334c <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003168:	4013      	ands	r3, r2
 800316a:	0019      	movs	r1, r3
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69da      	ldr	r2, [r3, #28]
 8003170:	4b6f      	ldr	r3, [pc, #444]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003172:	430a      	orrs	r2, r1
 8003174:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681a      	ldr	r2, [r3, #0]
 800317a:	2380      	movs	r3, #128	; 0x80
 800317c:	01db      	lsls	r3, r3, #7
 800317e:	4013      	ands	r3, r2
 8003180:	d015      	beq.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003182:	4b6b      	ldr	r3, [pc, #428]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003184:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003186:	009b      	lsls	r3, r3, #2
 8003188:	0899      	lsrs	r1, r3, #2
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800318e:	4b68      	ldr	r3, [pc, #416]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003190:	430a      	orrs	r2, r1
 8003192:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003198:	2380      	movs	r3, #128	; 0x80
 800319a:	05db      	lsls	r3, r3, #23
 800319c:	429a      	cmp	r2, r3
 800319e:	d106      	bne.n	80031ae <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80031a0:	4b63      	ldr	r3, [pc, #396]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a2:	68da      	ldr	r2, [r3, #12]
 80031a4:	4b62      	ldr	r3, [pc, #392]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031a6:	2180      	movs	r1, #128	; 0x80
 80031a8:	0249      	lsls	r1, r1, #9
 80031aa:	430a      	orrs	r2, r1
 80031ac:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681a      	ldr	r2, [r3, #0]
 80031b2:	2380      	movs	r3, #128	; 0x80
 80031b4:	031b      	lsls	r3, r3, #12
 80031b6:	4013      	ands	r3, r2
 80031b8:	d009      	beq.n	80031ce <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80031ba:	4b5d      	ldr	r3, [pc, #372]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031be:	2240      	movs	r2, #64	; 0x40
 80031c0:	4393      	bics	r3, r2
 80031c2:	0019      	movs	r1, r3
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80031c8:	4b59      	ldr	r3, [pc, #356]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ca:	430a      	orrs	r2, r1
 80031cc:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681a      	ldr	r2, [r3, #0]
 80031d2:	2380      	movs	r3, #128	; 0x80
 80031d4:	039b      	lsls	r3, r3, #14
 80031d6:	4013      	ands	r3, r2
 80031d8:	d016      	beq.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80031da:	4b55      	ldr	r3, [pc, #340]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80031de:	4a5c      	ldr	r2, [pc, #368]	; (8003350 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	0019      	movs	r1, r3
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031e8:	4b51      	ldr	r3, [pc, #324]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031ea:	430a      	orrs	r2, r1
 80031ec:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80031f2:	2380      	movs	r3, #128	; 0x80
 80031f4:	03db      	lsls	r3, r3, #15
 80031f6:	429a      	cmp	r2, r3
 80031f8:	d106      	bne.n	8003208 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80031fa:	4b4d      	ldr	r3, [pc, #308]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80031fc:	68da      	ldr	r2, [r3, #12]
 80031fe:	4b4c      	ldr	r3, [pc, #304]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003200:	2180      	movs	r1, #128	; 0x80
 8003202:	0449      	lsls	r1, r1, #17
 8003204:	430a      	orrs	r2, r1
 8003206:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681a      	ldr	r2, [r3, #0]
 800320c:	2380      	movs	r3, #128	; 0x80
 800320e:	03db      	lsls	r3, r3, #15
 8003210:	4013      	ands	r3, r2
 8003212:	d016      	beq.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003214:	4b46      	ldr	r3, [pc, #280]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003216:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003218:	4a4e      	ldr	r2, [pc, #312]	; (8003354 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 800321a:	4013      	ands	r3, r2
 800321c:	0019      	movs	r1, r3
 800321e:	687b      	ldr	r3, [r7, #4]
 8003220:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003222:	4b43      	ldr	r3, [pc, #268]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003224:	430a      	orrs	r2, r1
 8003226:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800322c:	2380      	movs	r3, #128	; 0x80
 800322e:	045b      	lsls	r3, r3, #17
 8003230:	429a      	cmp	r2, r3
 8003232:	d106      	bne.n	8003242 <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003234:	4b3e      	ldr	r3, [pc, #248]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003236:	68da      	ldr	r2, [r3, #12]
 8003238:	4b3d      	ldr	r3, [pc, #244]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800323a:	2180      	movs	r1, #128	; 0x80
 800323c:	0449      	lsls	r1, r1, #17
 800323e:	430a      	orrs	r2, r1
 8003240:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681a      	ldr	r2, [r3, #0]
 8003246:	2380      	movs	r3, #128	; 0x80
 8003248:	011b      	lsls	r3, r3, #4
 800324a:	4013      	ands	r3, r2
 800324c:	d014      	beq.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 800324e:	4b38      	ldr	r3, [pc, #224]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003250:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003252:	2203      	movs	r2, #3
 8003254:	4393      	bics	r3, r2
 8003256:	0019      	movs	r1, r3
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	6a1a      	ldr	r2, [r3, #32]
 800325c:	4b34      	ldr	r3, [pc, #208]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800325e:	430a      	orrs	r2, r1
 8003260:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	2b01      	cmp	r3, #1
 8003268:	d106      	bne.n	8003278 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 800326a:	4b31      	ldr	r3, [pc, #196]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800326c:	68da      	ldr	r2, [r3, #12]
 800326e:	4b30      	ldr	r3, [pc, #192]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003270:	2180      	movs	r1, #128	; 0x80
 8003272:	0249      	lsls	r1, r1, #9
 8003274:	430a      	orrs	r2, r1
 8003276:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	2380      	movs	r3, #128	; 0x80
 800327e:	019b      	lsls	r3, r3, #6
 8003280:	4013      	ands	r3, r2
 8003282:	d014      	beq.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003284:	4b2a      	ldr	r3, [pc, #168]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003288:	220c      	movs	r2, #12
 800328a:	4393      	bics	r3, r2
 800328c:	0019      	movs	r1, r3
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003292:	4b27      	ldr	r3, [pc, #156]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003294:	430a      	orrs	r2, r1
 8003296:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800329c:	2b04      	cmp	r3, #4
 800329e:	d106      	bne.n	80032ae <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 80032a0:	4b23      	ldr	r3, [pc, #140]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032a2:	68da      	ldr	r2, [r3, #12]
 80032a4:	4b22      	ldr	r3, [pc, #136]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032a6:	2180      	movs	r1, #128	; 0x80
 80032a8:	0249      	lsls	r1, r1, #9
 80032aa:	430a      	orrs	r2, r1
 80032ac:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681a      	ldr	r2, [r3, #0]
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	045b      	lsls	r3, r3, #17
 80032b6:	4013      	ands	r3, r2
 80032b8:	d016      	beq.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80032ba:	4b1d      	ldr	r3, [pc, #116]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032bc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032be:	4a22      	ldr	r2, [pc, #136]	; (8003348 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 80032c0:	4013      	ands	r3, r2
 80032c2:	0019      	movs	r1, r3
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032c8:	4b19      	ldr	r3, [pc, #100]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032ca:	430a      	orrs	r2, r1
 80032cc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032d2:	2380      	movs	r3, #128	; 0x80
 80032d4:	019b      	lsls	r3, r3, #6
 80032d6:	429a      	cmp	r2, r3
 80032d8:	d106      	bne.n	80032e8 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80032da:	4b15      	ldr	r3, [pc, #84]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032dc:	68da      	ldr	r2, [r3, #12]
 80032de:	4b14      	ldr	r3, [pc, #80]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032e0:	2180      	movs	r1, #128	; 0x80
 80032e2:	0449      	lsls	r1, r1, #17
 80032e4:	430a      	orrs	r2, r1
 80032e6:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	681a      	ldr	r2, [r3, #0]
 80032ec:	2380      	movs	r3, #128	; 0x80
 80032ee:	049b      	lsls	r3, r3, #18
 80032f0:	4013      	ands	r3, r2
 80032f2:	d016      	beq.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80032f4:	4b0e      	ldr	r3, [pc, #56]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80032f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80032f8:	4a10      	ldr	r2, [pc, #64]	; (800333c <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80032fa:	4013      	ands	r3, r2
 80032fc:	0019      	movs	r1, r3
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003302:	4b0b      	ldr	r3, [pc, #44]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003304:	430a      	orrs	r2, r1
 8003306:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800330c:	2380      	movs	r3, #128	; 0x80
 800330e:	005b      	lsls	r3, r3, #1
 8003310:	429a      	cmp	r2, r3
 8003312:	d106      	bne.n	8003322 <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003314:	4b06      	ldr	r3, [pc, #24]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003316:	68da      	ldr	r2, [r3, #12]
 8003318:	4b05      	ldr	r3, [pc, #20]	; (8003330 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800331a:	2180      	movs	r1, #128	; 0x80
 800331c:	0449      	lsls	r1, r1, #17
 800331e:	430a      	orrs	r2, r1
 8003320:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003322:	2312      	movs	r3, #18
 8003324:	18fb      	adds	r3, r7, r3
 8003326:	781b      	ldrb	r3, [r3, #0]
}
 8003328:	0018      	movs	r0, r3
 800332a:	46bd      	mov	sp, r7
 800332c:	b006      	add	sp, #24
 800332e:	bd80      	pop	{r7, pc}
 8003330:	40021000 	.word	0x40021000
 8003334:	efffffff 	.word	0xefffffff
 8003338:	fffff3ff 	.word	0xfffff3ff
 800333c:	fffffcff 	.word	0xfffffcff
 8003340:	fff3ffff 	.word	0xfff3ffff
 8003344:	ffcfffff 	.word	0xffcfffff
 8003348:	ffffcfff 	.word	0xffffcfff
 800334c:	ffff3fff 	.word	0xffff3fff
 8003350:	ffbfffff 	.word	0xffbfffff
 8003354:	feffffff 	.word	0xfeffffff

08003358 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003358:	b580      	push	{r7, lr}
 800335a:	b082      	sub	sp, #8
 800335c:	af00      	add	r7, sp, #0
 800335e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d101      	bne.n	800336a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003366:	2301      	movs	r3, #1
 8003368:	e04a      	b.n	8003400 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	223d      	movs	r2, #61	; 0x3d
 800336e:	5c9b      	ldrb	r3, [r3, r2]
 8003370:	b2db      	uxtb	r3, r3
 8003372:	2b00      	cmp	r3, #0
 8003374:	d107      	bne.n	8003386 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	223c      	movs	r2, #60	; 0x3c
 800337a:	2100      	movs	r1, #0
 800337c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	0018      	movs	r0, r3
 8003382:	f7fd fd29 	bl	8000dd8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	223d      	movs	r2, #61	; 0x3d
 800338a:	2102      	movs	r1, #2
 800338c:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	3304      	adds	r3, #4
 8003396:	0019      	movs	r1, r3
 8003398:	0010      	movs	r0, r2
 800339a:	f000 fb5b 	bl	8003a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2248      	movs	r2, #72	; 0x48
 80033a2:	2101      	movs	r1, #1
 80033a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	223e      	movs	r2, #62	; 0x3e
 80033aa:	2101      	movs	r1, #1
 80033ac:	5499      	strb	r1, [r3, r2]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	223f      	movs	r2, #63	; 0x3f
 80033b2:	2101      	movs	r1, #1
 80033b4:	5499      	strb	r1, [r3, r2]
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	2240      	movs	r2, #64	; 0x40
 80033ba:	2101      	movs	r1, #1
 80033bc:	5499      	strb	r1, [r3, r2]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	2241      	movs	r2, #65	; 0x41
 80033c2:	2101      	movs	r1, #1
 80033c4:	5499      	strb	r1, [r3, r2]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	2242      	movs	r2, #66	; 0x42
 80033ca:	2101      	movs	r1, #1
 80033cc:	5499      	strb	r1, [r3, r2]
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	2243      	movs	r2, #67	; 0x43
 80033d2:	2101      	movs	r1, #1
 80033d4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	2244      	movs	r2, #68	; 0x44
 80033da:	2101      	movs	r1, #1
 80033dc:	5499      	strb	r1, [r3, r2]
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2245      	movs	r2, #69	; 0x45
 80033e2:	2101      	movs	r1, #1
 80033e4:	5499      	strb	r1, [r3, r2]
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2246      	movs	r2, #70	; 0x46
 80033ea:	2101      	movs	r1, #1
 80033ec:	5499      	strb	r1, [r3, r2]
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2247      	movs	r2, #71	; 0x47
 80033f2:	2101      	movs	r1, #1
 80033f4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	223d      	movs	r2, #61	; 0x3d
 80033fa:	2101      	movs	r1, #1
 80033fc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80033fe:	2300      	movs	r3, #0
}
 8003400:	0018      	movs	r0, r3
 8003402:	46bd      	mov	sp, r7
 8003404:	b002      	add	sp, #8
 8003406:	bd80      	pop	{r7, pc}

08003408 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b082      	sub	sp, #8
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	2b00      	cmp	r3, #0
 8003414:	d101      	bne.n	800341a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003416:	2301      	movs	r3, #1
 8003418:	e04a      	b.n	80034b0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	223d      	movs	r2, #61	; 0x3d
 800341e:	5c9b      	ldrb	r3, [r3, r2]
 8003420:	b2db      	uxtb	r3, r3
 8003422:	2b00      	cmp	r3, #0
 8003424:	d107      	bne.n	8003436 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	223c      	movs	r2, #60	; 0x3c
 800342a:	2100      	movs	r1, #0
 800342c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	0018      	movs	r0, r3
 8003432:	f000 f841 	bl	80034b8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	223d      	movs	r2, #61	; 0x3d
 800343a:	2102      	movs	r1, #2
 800343c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681a      	ldr	r2, [r3, #0]
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	3304      	adds	r3, #4
 8003446:	0019      	movs	r1, r3
 8003448:	0010      	movs	r0, r2
 800344a:	f000 fb03 	bl	8003a54 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	2248      	movs	r2, #72	; 0x48
 8003452:	2101      	movs	r1, #1
 8003454:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	223e      	movs	r2, #62	; 0x3e
 800345a:	2101      	movs	r1, #1
 800345c:	5499      	strb	r1, [r3, r2]
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	223f      	movs	r2, #63	; 0x3f
 8003462:	2101      	movs	r1, #1
 8003464:	5499      	strb	r1, [r3, r2]
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	2240      	movs	r2, #64	; 0x40
 800346a:	2101      	movs	r1, #1
 800346c:	5499      	strb	r1, [r3, r2]
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	2241      	movs	r2, #65	; 0x41
 8003472:	2101      	movs	r1, #1
 8003474:	5499      	strb	r1, [r3, r2]
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2242      	movs	r2, #66	; 0x42
 800347a:	2101      	movs	r1, #1
 800347c:	5499      	strb	r1, [r3, r2]
 800347e:	687b      	ldr	r3, [r7, #4]
 8003480:	2243      	movs	r2, #67	; 0x43
 8003482:	2101      	movs	r1, #1
 8003484:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	2244      	movs	r2, #68	; 0x44
 800348a:	2101      	movs	r1, #1
 800348c:	5499      	strb	r1, [r3, r2]
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2245      	movs	r2, #69	; 0x45
 8003492:	2101      	movs	r1, #1
 8003494:	5499      	strb	r1, [r3, r2]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	2246      	movs	r2, #70	; 0x46
 800349a:	2101      	movs	r1, #1
 800349c:	5499      	strb	r1, [r3, r2]
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2247      	movs	r2, #71	; 0x47
 80034a2:	2101      	movs	r1, #1
 80034a4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	223d      	movs	r2, #61	; 0x3d
 80034aa:	2101      	movs	r1, #1
 80034ac:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80034ae:	2300      	movs	r3, #0
}
 80034b0:	0018      	movs	r0, r3
 80034b2:	46bd      	mov	sp, r7
 80034b4:	b002      	add	sp, #8
 80034b6:	bd80      	pop	{r7, pc}

080034b8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80034b8:	b580      	push	{r7, lr}
 80034ba:	b082      	sub	sp, #8
 80034bc:	af00      	add	r7, sp, #0
 80034be:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80034c0:	46c0      	nop			; (mov r8, r8)
 80034c2:	46bd      	mov	sp, r7
 80034c4:	b002      	add	sp, #8
 80034c6:	bd80      	pop	{r7, pc}

080034c8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80034c8:	b580      	push	{r7, lr}
 80034ca:	b084      	sub	sp, #16
 80034cc:	af00      	add	r7, sp, #0
 80034ce:	6078      	str	r0, [r7, #4]
 80034d0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d108      	bne.n	80034ea <HAL_TIM_PWM_Start+0x22>
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	223e      	movs	r2, #62	; 0x3e
 80034dc:	5c9b      	ldrb	r3, [r3, r2]
 80034de:	b2db      	uxtb	r3, r3
 80034e0:	3b01      	subs	r3, #1
 80034e2:	1e5a      	subs	r2, r3, #1
 80034e4:	4193      	sbcs	r3, r2
 80034e6:	b2db      	uxtb	r3, r3
 80034e8:	e037      	b.n	800355a <HAL_TIM_PWM_Start+0x92>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d108      	bne.n	8003502 <HAL_TIM_PWM_Start+0x3a>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	223f      	movs	r2, #63	; 0x3f
 80034f4:	5c9b      	ldrb	r3, [r3, r2]
 80034f6:	b2db      	uxtb	r3, r3
 80034f8:	3b01      	subs	r3, #1
 80034fa:	1e5a      	subs	r2, r3, #1
 80034fc:	4193      	sbcs	r3, r2
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	e02b      	b.n	800355a <HAL_TIM_PWM_Start+0x92>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	2b08      	cmp	r3, #8
 8003506:	d108      	bne.n	800351a <HAL_TIM_PWM_Start+0x52>
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2240      	movs	r2, #64	; 0x40
 800350c:	5c9b      	ldrb	r3, [r3, r2]
 800350e:	b2db      	uxtb	r3, r3
 8003510:	3b01      	subs	r3, #1
 8003512:	1e5a      	subs	r2, r3, #1
 8003514:	4193      	sbcs	r3, r2
 8003516:	b2db      	uxtb	r3, r3
 8003518:	e01f      	b.n	800355a <HAL_TIM_PWM_Start+0x92>
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	2b0c      	cmp	r3, #12
 800351e:	d108      	bne.n	8003532 <HAL_TIM_PWM_Start+0x6a>
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2241      	movs	r2, #65	; 0x41
 8003524:	5c9b      	ldrb	r3, [r3, r2]
 8003526:	b2db      	uxtb	r3, r3
 8003528:	3b01      	subs	r3, #1
 800352a:	1e5a      	subs	r2, r3, #1
 800352c:	4193      	sbcs	r3, r2
 800352e:	b2db      	uxtb	r3, r3
 8003530:	e013      	b.n	800355a <HAL_TIM_PWM_Start+0x92>
 8003532:	683b      	ldr	r3, [r7, #0]
 8003534:	2b10      	cmp	r3, #16
 8003536:	d108      	bne.n	800354a <HAL_TIM_PWM_Start+0x82>
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2242      	movs	r2, #66	; 0x42
 800353c:	5c9b      	ldrb	r3, [r3, r2]
 800353e:	b2db      	uxtb	r3, r3
 8003540:	3b01      	subs	r3, #1
 8003542:	1e5a      	subs	r2, r3, #1
 8003544:	4193      	sbcs	r3, r2
 8003546:	b2db      	uxtb	r3, r3
 8003548:	e007      	b.n	800355a <HAL_TIM_PWM_Start+0x92>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	2243      	movs	r2, #67	; 0x43
 800354e:	5c9b      	ldrb	r3, [r3, r2]
 8003550:	b2db      	uxtb	r3, r3
 8003552:	3b01      	subs	r3, #1
 8003554:	1e5a      	subs	r2, r3, #1
 8003556:	4193      	sbcs	r3, r2
 8003558:	b2db      	uxtb	r3, r3
 800355a:	2b00      	cmp	r3, #0
 800355c:	d001      	beq.n	8003562 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800355e:	2301      	movs	r3, #1
 8003560:	e090      	b.n	8003684 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003562:	683b      	ldr	r3, [r7, #0]
 8003564:	2b00      	cmp	r3, #0
 8003566:	d104      	bne.n	8003572 <HAL_TIM_PWM_Start+0xaa>
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	223e      	movs	r2, #62	; 0x3e
 800356c:	2102      	movs	r1, #2
 800356e:	5499      	strb	r1, [r3, r2]
 8003570:	e023      	b.n	80035ba <HAL_TIM_PWM_Start+0xf2>
 8003572:	683b      	ldr	r3, [r7, #0]
 8003574:	2b04      	cmp	r3, #4
 8003576:	d104      	bne.n	8003582 <HAL_TIM_PWM_Start+0xba>
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	223f      	movs	r2, #63	; 0x3f
 800357c:	2102      	movs	r1, #2
 800357e:	5499      	strb	r1, [r3, r2]
 8003580:	e01b      	b.n	80035ba <HAL_TIM_PWM_Start+0xf2>
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	2b08      	cmp	r3, #8
 8003586:	d104      	bne.n	8003592 <HAL_TIM_PWM_Start+0xca>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2240      	movs	r2, #64	; 0x40
 800358c:	2102      	movs	r1, #2
 800358e:	5499      	strb	r1, [r3, r2]
 8003590:	e013      	b.n	80035ba <HAL_TIM_PWM_Start+0xf2>
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	2b0c      	cmp	r3, #12
 8003596:	d104      	bne.n	80035a2 <HAL_TIM_PWM_Start+0xda>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2241      	movs	r2, #65	; 0x41
 800359c:	2102      	movs	r1, #2
 800359e:	5499      	strb	r1, [r3, r2]
 80035a0:	e00b      	b.n	80035ba <HAL_TIM_PWM_Start+0xf2>
 80035a2:	683b      	ldr	r3, [r7, #0]
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d104      	bne.n	80035b2 <HAL_TIM_PWM_Start+0xea>
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2242      	movs	r2, #66	; 0x42
 80035ac:	2102      	movs	r1, #2
 80035ae:	5499      	strb	r1, [r3, r2]
 80035b0:	e003      	b.n	80035ba <HAL_TIM_PWM_Start+0xf2>
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2243      	movs	r2, #67	; 0x43
 80035b6:	2102      	movs	r1, #2
 80035b8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6839      	ldr	r1, [r7, #0]
 80035c0:	2201      	movs	r2, #1
 80035c2:	0018      	movs	r0, r3
 80035c4:	f000 fe3e 	bl	8004244 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	4a2f      	ldr	r2, [pc, #188]	; (800368c <HAL_TIM_PWM_Start+0x1c4>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d00e      	beq.n	80035f0 <HAL_TIM_PWM_Start+0x128>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	4a2e      	ldr	r2, [pc, #184]	; (8003690 <HAL_TIM_PWM_Start+0x1c8>)
 80035d8:	4293      	cmp	r3, r2
 80035da:	d009      	beq.n	80035f0 <HAL_TIM_PWM_Start+0x128>
 80035dc:	687b      	ldr	r3, [r7, #4]
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	4a2c      	ldr	r2, [pc, #176]	; (8003694 <HAL_TIM_PWM_Start+0x1cc>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d004      	beq.n	80035f0 <HAL_TIM_PWM_Start+0x128>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	4a2b      	ldr	r2, [pc, #172]	; (8003698 <HAL_TIM_PWM_Start+0x1d0>)
 80035ec:	4293      	cmp	r3, r2
 80035ee:	d101      	bne.n	80035f4 <HAL_TIM_PWM_Start+0x12c>
 80035f0:	2301      	movs	r3, #1
 80035f2:	e000      	b.n	80035f6 <HAL_TIM_PWM_Start+0x12e>
 80035f4:	2300      	movs	r3, #0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d008      	beq.n	800360c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2180      	movs	r1, #128	; 0x80
 8003606:	0209      	lsls	r1, r1, #8
 8003608:	430a      	orrs	r2, r1
 800360a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a1e      	ldr	r2, [pc, #120]	; (800368c <HAL_TIM_PWM_Start+0x1c4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	d014      	beq.n	8003640 <HAL_TIM_PWM_Start+0x178>
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	2380      	movs	r3, #128	; 0x80
 800361c:	05db      	lsls	r3, r3, #23
 800361e:	429a      	cmp	r2, r3
 8003620:	d00e      	beq.n	8003640 <HAL_TIM_PWM_Start+0x178>
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	4a1d      	ldr	r2, [pc, #116]	; (800369c <HAL_TIM_PWM_Start+0x1d4>)
 8003628:	4293      	cmp	r3, r2
 800362a:	d009      	beq.n	8003640 <HAL_TIM_PWM_Start+0x178>
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a1b      	ldr	r2, [pc, #108]	; (80036a0 <HAL_TIM_PWM_Start+0x1d8>)
 8003632:	4293      	cmp	r3, r2
 8003634:	d004      	beq.n	8003640 <HAL_TIM_PWM_Start+0x178>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a15      	ldr	r2, [pc, #84]	; (8003690 <HAL_TIM_PWM_Start+0x1c8>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d116      	bne.n	800366e <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	689b      	ldr	r3, [r3, #8]
 8003646:	4a17      	ldr	r2, [pc, #92]	; (80036a4 <HAL_TIM_PWM_Start+0x1dc>)
 8003648:	4013      	ands	r3, r2
 800364a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	2b06      	cmp	r3, #6
 8003650:	d016      	beq.n	8003680 <HAL_TIM_PWM_Start+0x1b8>
 8003652:	68fa      	ldr	r2, [r7, #12]
 8003654:	2380      	movs	r3, #128	; 0x80
 8003656:	025b      	lsls	r3, r3, #9
 8003658:	429a      	cmp	r2, r3
 800365a:	d011      	beq.n	8003680 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	2101      	movs	r1, #1
 8003668:	430a      	orrs	r2, r1
 800366a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800366c:	e008      	b.n	8003680 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	681a      	ldr	r2, [r3, #0]
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	2101      	movs	r1, #1
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
 800367e:	e000      	b.n	8003682 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003680:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8003682:	2300      	movs	r3, #0
}
 8003684:	0018      	movs	r0, r3
 8003686:	46bd      	mov	sp, r7
 8003688:	b004      	add	sp, #16
 800368a:	bd80      	pop	{r7, pc}
 800368c:	40012c00 	.word	0x40012c00
 8003690:	40014000 	.word	0x40014000
 8003694:	40014400 	.word	0x40014400
 8003698:	40014800 	.word	0x40014800
 800369c:	40000400 	.word	0x40000400
 80036a0:	40000800 	.word	0x40000800
 80036a4:	00010007 	.word	0x00010007

080036a8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80036a8:	b580      	push	{r7, lr}
 80036aa:	b086      	sub	sp, #24
 80036ac:	af00      	add	r7, sp, #0
 80036ae:	60f8      	str	r0, [r7, #12]
 80036b0:	60b9      	str	r1, [r7, #8]
 80036b2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80036b4:	2317      	movs	r3, #23
 80036b6:	18fb      	adds	r3, r7, r3
 80036b8:	2200      	movs	r2, #0
 80036ba:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	223c      	movs	r2, #60	; 0x3c
 80036c0:	5c9b      	ldrb	r3, [r3, r2]
 80036c2:	2b01      	cmp	r3, #1
 80036c4:	d101      	bne.n	80036ca <HAL_TIM_PWM_ConfigChannel+0x22>
 80036c6:	2302      	movs	r3, #2
 80036c8:	e0e5      	b.n	8003896 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 80036ca:	68fb      	ldr	r3, [r7, #12]
 80036cc:	223c      	movs	r2, #60	; 0x3c
 80036ce:	2101      	movs	r1, #1
 80036d0:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	2b14      	cmp	r3, #20
 80036d6:	d900      	bls.n	80036da <HAL_TIM_PWM_ConfigChannel+0x32>
 80036d8:	e0d1      	b.n	800387e <HAL_TIM_PWM_ConfigChannel+0x1d6>
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	009a      	lsls	r2, r3, #2
 80036de:	4b70      	ldr	r3, [pc, #448]	; (80038a0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 80036e0:	18d3      	adds	r3, r2, r3
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	68ba      	ldr	r2, [r7, #8]
 80036ec:	0011      	movs	r1, r2
 80036ee:	0018      	movs	r0, r3
 80036f0:	f000 fa48 	bl	8003b84 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699a      	ldr	r2, [r3, #24]
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	681b      	ldr	r3, [r3, #0]
 80036fe:	2108      	movs	r1, #8
 8003700:	430a      	orrs	r2, r1
 8003702:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003704:	68fb      	ldr	r3, [r7, #12]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	699a      	ldr	r2, [r3, #24]
 800370a:	68fb      	ldr	r3, [r7, #12]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	2104      	movs	r1, #4
 8003710:	438a      	bics	r2, r1
 8003712:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	681b      	ldr	r3, [r3, #0]
 8003718:	6999      	ldr	r1, [r3, #24]
 800371a:	68bb      	ldr	r3, [r7, #8]
 800371c:	691a      	ldr	r2, [r3, #16]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	430a      	orrs	r2, r1
 8003724:	619a      	str	r2, [r3, #24]
      break;
 8003726:	e0af      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	68ba      	ldr	r2, [r7, #8]
 800372e:	0011      	movs	r1, r2
 8003730:	0018      	movs	r0, r3
 8003732:	f000 fab1 	bl	8003c98 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	699a      	ldr	r2, [r3, #24]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	2180      	movs	r1, #128	; 0x80
 8003742:	0109      	lsls	r1, r1, #4
 8003744:	430a      	orrs	r2, r1
 8003746:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	699a      	ldr	r2, [r3, #24]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	4954      	ldr	r1, [pc, #336]	; (80038a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003754:	400a      	ands	r2, r1
 8003756:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	6999      	ldr	r1, [r3, #24]
 800375e:	68bb      	ldr	r3, [r7, #8]
 8003760:	691b      	ldr	r3, [r3, #16]
 8003762:	021a      	lsls	r2, r3, #8
 8003764:	68fb      	ldr	r3, [r7, #12]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	619a      	str	r2, [r3, #24]
      break;
 800376c:	e08c      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	681b      	ldr	r3, [r3, #0]
 8003772:	68ba      	ldr	r2, [r7, #8]
 8003774:	0011      	movs	r1, r2
 8003776:	0018      	movs	r0, r3
 8003778:	f000 fb12 	bl	8003da0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800377c:	68fb      	ldr	r3, [r7, #12]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	2108      	movs	r1, #8
 8003788:	430a      	orrs	r2, r1
 800378a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69da      	ldr	r2, [r3, #28]
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	2104      	movs	r1, #4
 8003798:	438a      	bics	r2, r1
 800379a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800379c:	68fb      	ldr	r3, [r7, #12]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	69d9      	ldr	r1, [r3, #28]
 80037a2:	68bb      	ldr	r3, [r7, #8]
 80037a4:	691a      	ldr	r2, [r3, #16]
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	430a      	orrs	r2, r1
 80037ac:	61da      	str	r2, [r3, #28]
      break;
 80037ae:	e06b      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	68ba      	ldr	r2, [r7, #8]
 80037b6:	0011      	movs	r1, r2
 80037b8:	0018      	movs	r0, r3
 80037ba:	f000 fb79 	bl	8003eb0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	69da      	ldr	r2, [r3, #28]
 80037c4:	68fb      	ldr	r3, [r7, #12]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	2180      	movs	r1, #128	; 0x80
 80037ca:	0109      	lsls	r1, r1, #4
 80037cc:	430a      	orrs	r2, r1
 80037ce:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	69da      	ldr	r2, [r3, #28]
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	4932      	ldr	r1, [pc, #200]	; (80038a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80037dc:	400a      	ands	r2, r1
 80037de:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	681b      	ldr	r3, [r3, #0]
 80037e4:	69d9      	ldr	r1, [r3, #28]
 80037e6:	68bb      	ldr	r3, [r7, #8]
 80037e8:	691b      	ldr	r3, [r3, #16]
 80037ea:	021a      	lsls	r2, r3, #8
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	430a      	orrs	r2, r1
 80037f2:	61da      	str	r2, [r3, #28]
      break;
 80037f4:	e048      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	68ba      	ldr	r2, [r7, #8]
 80037fc:	0011      	movs	r1, r2
 80037fe:	0018      	movs	r0, r3
 8003800:	f000 fbc0 	bl	8003f84 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	2108      	movs	r1, #8
 8003810:	430a      	orrs	r2, r1
 8003812:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	2104      	movs	r1, #4
 8003820:	438a      	bics	r2, r1
 8003822:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800382a:	68bb      	ldr	r3, [r7, #8]
 800382c:	691a      	ldr	r2, [r3, #16]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	430a      	orrs	r2, r1
 8003834:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003836:	e027      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	68ba      	ldr	r2, [r7, #8]
 800383e:	0011      	movs	r1, r2
 8003840:	0018      	movs	r0, r3
 8003842:	f000 fbff 	bl	8004044 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2180      	movs	r1, #128	; 0x80
 8003852:	0109      	lsls	r1, r1, #4
 8003854:	430a      	orrs	r2, r1
 8003856:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	4910      	ldr	r1, [pc, #64]	; (80038a4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003864:	400a      	ands	r2, r1
 8003866:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	691b      	ldr	r3, [r3, #16]
 8003872:	021a      	lsls	r2, r3, #8
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	430a      	orrs	r2, r1
 800387a:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 800387c:	e004      	b.n	8003888 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800387e:	2317      	movs	r3, #23
 8003880:	18fb      	adds	r3, r7, r3
 8003882:	2201      	movs	r2, #1
 8003884:	701a      	strb	r2, [r3, #0]
      break;
 8003886:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003888:	68fb      	ldr	r3, [r7, #12]
 800388a:	223c      	movs	r2, #60	; 0x3c
 800388c:	2100      	movs	r1, #0
 800388e:	5499      	strb	r1, [r3, r2]

  return status;
 8003890:	2317      	movs	r3, #23
 8003892:	18fb      	adds	r3, r7, r3
 8003894:	781b      	ldrb	r3, [r3, #0]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b006      	add	sp, #24
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			; (mov r8, r8)
 80038a0:	08005374 	.word	0x08005374
 80038a4:	fffffbff 	.word	0xfffffbff

080038a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80038a8:	b580      	push	{r7, lr}
 80038aa:	b084      	sub	sp, #16
 80038ac:	af00      	add	r7, sp, #0
 80038ae:	6078      	str	r0, [r7, #4]
 80038b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80038b2:	230f      	movs	r3, #15
 80038b4:	18fb      	adds	r3, r7, r3
 80038b6:	2200      	movs	r2, #0
 80038b8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	223c      	movs	r2, #60	; 0x3c
 80038be:	5c9b      	ldrb	r3, [r3, r2]
 80038c0:	2b01      	cmp	r3, #1
 80038c2:	d101      	bne.n	80038c8 <HAL_TIM_ConfigClockSource+0x20>
 80038c4:	2302      	movs	r3, #2
 80038c6:	e0bc      	b.n	8003a42 <HAL_TIM_ConfigClockSource+0x19a>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	223c      	movs	r2, #60	; 0x3c
 80038cc:	2101      	movs	r1, #1
 80038ce:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	223d      	movs	r2, #61	; 0x3d
 80038d4:	2102      	movs	r1, #2
 80038d6:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	689b      	ldr	r3, [r3, #8]
 80038de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	4a5a      	ldr	r2, [pc, #360]	; (8003a4c <HAL_TIM_ConfigClockSource+0x1a4>)
 80038e4:	4013      	ands	r3, r2
 80038e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80038e8:	68bb      	ldr	r3, [r7, #8]
 80038ea:	4a59      	ldr	r2, [pc, #356]	; (8003a50 <HAL_TIM_ConfigClockSource+0x1a8>)
 80038ec:	4013      	ands	r3, r2
 80038ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	68ba      	ldr	r2, [r7, #8]
 80038f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	2280      	movs	r2, #128	; 0x80
 80038fe:	0192      	lsls	r2, r2, #6
 8003900:	4293      	cmp	r3, r2
 8003902:	d040      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0xde>
 8003904:	2280      	movs	r2, #128	; 0x80
 8003906:	0192      	lsls	r2, r2, #6
 8003908:	4293      	cmp	r3, r2
 800390a:	d900      	bls.n	800390e <HAL_TIM_ConfigClockSource+0x66>
 800390c:	e088      	b.n	8003a20 <HAL_TIM_ConfigClockSource+0x178>
 800390e:	2280      	movs	r2, #128	; 0x80
 8003910:	0152      	lsls	r2, r2, #5
 8003912:	4293      	cmp	r3, r2
 8003914:	d100      	bne.n	8003918 <HAL_TIM_ConfigClockSource+0x70>
 8003916:	e088      	b.n	8003a2a <HAL_TIM_ConfigClockSource+0x182>
 8003918:	2280      	movs	r2, #128	; 0x80
 800391a:	0152      	lsls	r2, r2, #5
 800391c:	4293      	cmp	r3, r2
 800391e:	d900      	bls.n	8003922 <HAL_TIM_ConfigClockSource+0x7a>
 8003920:	e07e      	b.n	8003a20 <HAL_TIM_ConfigClockSource+0x178>
 8003922:	2b70      	cmp	r3, #112	; 0x70
 8003924:	d018      	beq.n	8003958 <HAL_TIM_ConfigClockSource+0xb0>
 8003926:	d900      	bls.n	800392a <HAL_TIM_ConfigClockSource+0x82>
 8003928:	e07a      	b.n	8003a20 <HAL_TIM_ConfigClockSource+0x178>
 800392a:	2b60      	cmp	r3, #96	; 0x60
 800392c:	d04f      	beq.n	80039ce <HAL_TIM_ConfigClockSource+0x126>
 800392e:	d900      	bls.n	8003932 <HAL_TIM_ConfigClockSource+0x8a>
 8003930:	e076      	b.n	8003a20 <HAL_TIM_ConfigClockSource+0x178>
 8003932:	2b50      	cmp	r3, #80	; 0x50
 8003934:	d03b      	beq.n	80039ae <HAL_TIM_ConfigClockSource+0x106>
 8003936:	d900      	bls.n	800393a <HAL_TIM_ConfigClockSource+0x92>
 8003938:	e072      	b.n	8003a20 <HAL_TIM_ConfigClockSource+0x178>
 800393a:	2b40      	cmp	r3, #64	; 0x40
 800393c:	d057      	beq.n	80039ee <HAL_TIM_ConfigClockSource+0x146>
 800393e:	d900      	bls.n	8003942 <HAL_TIM_ConfigClockSource+0x9a>
 8003940:	e06e      	b.n	8003a20 <HAL_TIM_ConfigClockSource+0x178>
 8003942:	2b30      	cmp	r3, #48	; 0x30
 8003944:	d063      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0x166>
 8003946:	d86b      	bhi.n	8003a20 <HAL_TIM_ConfigClockSource+0x178>
 8003948:	2b20      	cmp	r3, #32
 800394a:	d060      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0x166>
 800394c:	d868      	bhi.n	8003a20 <HAL_TIM_ConfigClockSource+0x178>
 800394e:	2b00      	cmp	r3, #0
 8003950:	d05d      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0x166>
 8003952:	2b10      	cmp	r3, #16
 8003954:	d05b      	beq.n	8003a0e <HAL_TIM_ConfigClockSource+0x166>
 8003956:	e063      	b.n	8003a20 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800395c:	683b      	ldr	r3, [r7, #0]
 800395e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003960:	683b      	ldr	r3, [r7, #0]
 8003962:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003968:	f000 fc4c 	bl	8004204 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003974:	68bb      	ldr	r3, [r7, #8]
 8003976:	2277      	movs	r2, #119	; 0x77
 8003978:	4313      	orrs	r3, r2
 800397a:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	68ba      	ldr	r2, [r7, #8]
 8003982:	609a      	str	r2, [r3, #8]
      break;
 8003984:	e052      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003992:	683b      	ldr	r3, [r7, #0]
 8003994:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003996:	f000 fc35 	bl	8004204 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	689a      	ldr	r2, [r3, #8]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	2180      	movs	r1, #128	; 0x80
 80039a6:	01c9      	lsls	r1, r1, #7
 80039a8:	430a      	orrs	r2, r1
 80039aa:	609a      	str	r2, [r3, #8]
      break;
 80039ac:	e03e      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039b2:	683b      	ldr	r3, [r7, #0]
 80039b4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039b6:	683b      	ldr	r3, [r7, #0]
 80039b8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ba:	001a      	movs	r2, r3
 80039bc:	f000 fba6 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	2150      	movs	r1, #80	; 0x50
 80039c6:	0018      	movs	r0, r3
 80039c8:	f000 fc00 	bl	80041cc <TIM_ITRx_SetConfig>
      break;
 80039cc:	e02e      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039d2:	683b      	ldr	r3, [r7, #0]
 80039d4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80039da:	001a      	movs	r2, r3
 80039dc:	f000 fbc4 	bl	8004168 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	2160      	movs	r1, #96	; 0x60
 80039e6:	0018      	movs	r0, r3
 80039e8:	f000 fbf0 	bl	80041cc <TIM_ITRx_SetConfig>
      break;
 80039ec:	e01e      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80039f2:	683b      	ldr	r3, [r7, #0]
 80039f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80039f6:	683b      	ldr	r3, [r7, #0]
 80039f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80039fa:	001a      	movs	r2, r3
 80039fc:	f000 fb86 	bl	800410c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	2140      	movs	r1, #64	; 0x40
 8003a06:	0018      	movs	r0, r3
 8003a08:	f000 fbe0 	bl	80041cc <TIM_ITRx_SetConfig>
      break;
 8003a0c:	e00e      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003a0e:	687b      	ldr	r3, [r7, #4]
 8003a10:	681a      	ldr	r2, [r3, #0]
 8003a12:	683b      	ldr	r3, [r7, #0]
 8003a14:	681b      	ldr	r3, [r3, #0]
 8003a16:	0019      	movs	r1, r3
 8003a18:	0010      	movs	r0, r2
 8003a1a:	f000 fbd7 	bl	80041cc <TIM_ITRx_SetConfig>
      break;
 8003a1e:	e005      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8003a20:	230f      	movs	r3, #15
 8003a22:	18fb      	adds	r3, r7, r3
 8003a24:	2201      	movs	r2, #1
 8003a26:	701a      	strb	r2, [r3, #0]
      break;
 8003a28:	e000      	b.n	8003a2c <HAL_TIM_ConfigClockSource+0x184>
      break;
 8003a2a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	223d      	movs	r2, #61	; 0x3d
 8003a30:	2101      	movs	r1, #1
 8003a32:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	223c      	movs	r2, #60	; 0x3c
 8003a38:	2100      	movs	r1, #0
 8003a3a:	5499      	strb	r1, [r3, r2]

  return status;
 8003a3c:	230f      	movs	r3, #15
 8003a3e:	18fb      	adds	r3, r7, r3
 8003a40:	781b      	ldrb	r3, [r3, #0]
}
 8003a42:	0018      	movs	r0, r3
 8003a44:	46bd      	mov	sp, r7
 8003a46:	b004      	add	sp, #16
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	46c0      	nop			; (mov r8, r8)
 8003a4c:	ffceff88 	.word	0xffceff88
 8003a50:	ffff00ff 	.word	0xffff00ff

08003a54 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b084      	sub	sp, #16
 8003a58:	af00      	add	r7, sp, #0
 8003a5a:	6078      	str	r0, [r7, #4]
 8003a5c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a3f      	ldr	r2, [pc, #252]	; (8003b64 <TIM_Base_SetConfig+0x110>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d00c      	beq.n	8003a86 <TIM_Base_SetConfig+0x32>
 8003a6c:	687a      	ldr	r2, [r7, #4]
 8003a6e:	2380      	movs	r3, #128	; 0x80
 8003a70:	05db      	lsls	r3, r3, #23
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d007      	beq.n	8003a86 <TIM_Base_SetConfig+0x32>
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	4a3b      	ldr	r2, [pc, #236]	; (8003b68 <TIM_Base_SetConfig+0x114>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d003      	beq.n	8003a86 <TIM_Base_SetConfig+0x32>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a3a      	ldr	r2, [pc, #232]	; (8003b6c <TIM_Base_SetConfig+0x118>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d108      	bne.n	8003a98 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2270      	movs	r2, #112	; 0x70
 8003a8a:	4393      	bics	r3, r2
 8003a8c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	685b      	ldr	r3, [r3, #4]
 8003a92:	68fa      	ldr	r2, [r7, #12]
 8003a94:	4313      	orrs	r3, r2
 8003a96:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	4a32      	ldr	r2, [pc, #200]	; (8003b64 <TIM_Base_SetConfig+0x110>)
 8003a9c:	4293      	cmp	r3, r2
 8003a9e:	d01c      	beq.n	8003ada <TIM_Base_SetConfig+0x86>
 8003aa0:	687a      	ldr	r2, [r7, #4]
 8003aa2:	2380      	movs	r3, #128	; 0x80
 8003aa4:	05db      	lsls	r3, r3, #23
 8003aa6:	429a      	cmp	r2, r3
 8003aa8:	d017      	beq.n	8003ada <TIM_Base_SetConfig+0x86>
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4a2e      	ldr	r2, [pc, #184]	; (8003b68 <TIM_Base_SetConfig+0x114>)
 8003aae:	4293      	cmp	r3, r2
 8003ab0:	d013      	beq.n	8003ada <TIM_Base_SetConfig+0x86>
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	4a2d      	ldr	r2, [pc, #180]	; (8003b6c <TIM_Base_SetConfig+0x118>)
 8003ab6:	4293      	cmp	r3, r2
 8003ab8:	d00f      	beq.n	8003ada <TIM_Base_SetConfig+0x86>
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	4a2c      	ldr	r2, [pc, #176]	; (8003b70 <TIM_Base_SetConfig+0x11c>)
 8003abe:	4293      	cmp	r3, r2
 8003ac0:	d00b      	beq.n	8003ada <TIM_Base_SetConfig+0x86>
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	4a2b      	ldr	r2, [pc, #172]	; (8003b74 <TIM_Base_SetConfig+0x120>)
 8003ac6:	4293      	cmp	r3, r2
 8003ac8:	d007      	beq.n	8003ada <TIM_Base_SetConfig+0x86>
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4a2a      	ldr	r2, [pc, #168]	; (8003b78 <TIM_Base_SetConfig+0x124>)
 8003ace:	4293      	cmp	r3, r2
 8003ad0:	d003      	beq.n	8003ada <TIM_Base_SetConfig+0x86>
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	4a29      	ldr	r2, [pc, #164]	; (8003b7c <TIM_Base_SetConfig+0x128>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d108      	bne.n	8003aec <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	4a28      	ldr	r2, [pc, #160]	; (8003b80 <TIM_Base_SetConfig+0x12c>)
 8003ade:	4013      	ands	r3, r2
 8003ae0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae2:	683b      	ldr	r3, [r7, #0]
 8003ae4:	68db      	ldr	r3, [r3, #12]
 8003ae6:	68fa      	ldr	r2, [r7, #12]
 8003ae8:	4313      	orrs	r3, r2
 8003aea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	2280      	movs	r2, #128	; 0x80
 8003af0:	4393      	bics	r3, r2
 8003af2:	001a      	movs	r2, r3
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	695b      	ldr	r3, [r3, #20]
 8003af8:	4313      	orrs	r3, r2
 8003afa:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	68fa      	ldr	r2, [r7, #12]
 8003b00:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b02:	683b      	ldr	r3, [r7, #0]
 8003b04:	689a      	ldr	r2, [r3, #8]
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b0a:	683b      	ldr	r3, [r7, #0]
 8003b0c:	681a      	ldr	r2, [r3, #0]
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	4a13      	ldr	r2, [pc, #76]	; (8003b64 <TIM_Base_SetConfig+0x110>)
 8003b16:	4293      	cmp	r3, r2
 8003b18:	d00b      	beq.n	8003b32 <TIM_Base_SetConfig+0xde>
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	4a15      	ldr	r2, [pc, #84]	; (8003b74 <TIM_Base_SetConfig+0x120>)
 8003b1e:	4293      	cmp	r3, r2
 8003b20:	d007      	beq.n	8003b32 <TIM_Base_SetConfig+0xde>
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	4a14      	ldr	r2, [pc, #80]	; (8003b78 <TIM_Base_SetConfig+0x124>)
 8003b26:	4293      	cmp	r3, r2
 8003b28:	d003      	beq.n	8003b32 <TIM_Base_SetConfig+0xde>
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	4a13      	ldr	r2, [pc, #76]	; (8003b7c <TIM_Base_SetConfig+0x128>)
 8003b2e:	4293      	cmp	r3, r2
 8003b30:	d103      	bne.n	8003b3a <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b32:	683b      	ldr	r3, [r7, #0]
 8003b34:	691a      	ldr	r2, [r3, #16]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	2201      	movs	r2, #1
 8003b3e:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	691b      	ldr	r3, [r3, #16]
 8003b44:	2201      	movs	r2, #1
 8003b46:	4013      	ands	r3, r2
 8003b48:	2b01      	cmp	r3, #1
 8003b4a:	d106      	bne.n	8003b5a <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	691b      	ldr	r3, [r3, #16]
 8003b50:	2201      	movs	r2, #1
 8003b52:	4393      	bics	r3, r2
 8003b54:	001a      	movs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	611a      	str	r2, [r3, #16]
  }
}
 8003b5a:	46c0      	nop			; (mov r8, r8)
 8003b5c:	46bd      	mov	sp, r7
 8003b5e:	b004      	add	sp, #16
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	46c0      	nop			; (mov r8, r8)
 8003b64:	40012c00 	.word	0x40012c00
 8003b68:	40000400 	.word	0x40000400
 8003b6c:	40000800 	.word	0x40000800
 8003b70:	40002000 	.word	0x40002000
 8003b74:	40014000 	.word	0x40014000
 8003b78:	40014400 	.word	0x40014400
 8003b7c:	40014800 	.word	0x40014800
 8003b80:	fffffcff 	.word	0xfffffcff

08003b84 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b086      	sub	sp, #24
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
 8003b8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	6a1b      	ldr	r3, [r3, #32]
 8003b92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a1b      	ldr	r3, [r3, #32]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	4393      	bics	r3, r2
 8003b9c:	001a      	movs	r2, r3
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	699b      	ldr	r3, [r3, #24]
 8003bac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	4a32      	ldr	r2, [pc, #200]	; (8003c7c <TIM_OC1_SetConfig+0xf8>)
 8003bb2:	4013      	ands	r3, r2
 8003bb4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	2203      	movs	r2, #3
 8003bba:	4393      	bics	r3, r2
 8003bbc:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003bbe:	683b      	ldr	r3, [r7, #0]
 8003bc0:	681b      	ldr	r3, [r3, #0]
 8003bc2:	68fa      	ldr	r2, [r7, #12]
 8003bc4:	4313      	orrs	r3, r2
 8003bc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003bc8:	697b      	ldr	r3, [r7, #20]
 8003bca:	2202      	movs	r2, #2
 8003bcc:	4393      	bics	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	689b      	ldr	r3, [r3, #8]
 8003bd4:	697a      	ldr	r2, [r7, #20]
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	4a28      	ldr	r2, [pc, #160]	; (8003c80 <TIM_OC1_SetConfig+0xfc>)
 8003bde:	4293      	cmp	r3, r2
 8003be0:	d00b      	beq.n	8003bfa <TIM_OC1_SetConfig+0x76>
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	4a27      	ldr	r2, [pc, #156]	; (8003c84 <TIM_OC1_SetConfig+0x100>)
 8003be6:	4293      	cmp	r3, r2
 8003be8:	d007      	beq.n	8003bfa <TIM_OC1_SetConfig+0x76>
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	4a26      	ldr	r2, [pc, #152]	; (8003c88 <TIM_OC1_SetConfig+0x104>)
 8003bee:	4293      	cmp	r3, r2
 8003bf0:	d003      	beq.n	8003bfa <TIM_OC1_SetConfig+0x76>
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	4a25      	ldr	r2, [pc, #148]	; (8003c8c <TIM_OC1_SetConfig+0x108>)
 8003bf6:	4293      	cmp	r3, r2
 8003bf8:	d10c      	bne.n	8003c14 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2208      	movs	r2, #8
 8003bfe:	4393      	bics	r3, r2
 8003c00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003c02:	683b      	ldr	r3, [r7, #0]
 8003c04:	68db      	ldr	r3, [r3, #12]
 8003c06:	697a      	ldr	r2, [r7, #20]
 8003c08:	4313      	orrs	r3, r2
 8003c0a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003c0c:	697b      	ldr	r3, [r7, #20]
 8003c0e:	2204      	movs	r2, #4
 8003c10:	4393      	bics	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	4a1a      	ldr	r2, [pc, #104]	; (8003c80 <TIM_OC1_SetConfig+0xfc>)
 8003c18:	4293      	cmp	r3, r2
 8003c1a:	d00b      	beq.n	8003c34 <TIM_OC1_SetConfig+0xb0>
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4a19      	ldr	r2, [pc, #100]	; (8003c84 <TIM_OC1_SetConfig+0x100>)
 8003c20:	4293      	cmp	r3, r2
 8003c22:	d007      	beq.n	8003c34 <TIM_OC1_SetConfig+0xb0>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	4a18      	ldr	r2, [pc, #96]	; (8003c88 <TIM_OC1_SetConfig+0x104>)
 8003c28:	4293      	cmp	r3, r2
 8003c2a:	d003      	beq.n	8003c34 <TIM_OC1_SetConfig+0xb0>
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	4a17      	ldr	r2, [pc, #92]	; (8003c8c <TIM_OC1_SetConfig+0x108>)
 8003c30:	4293      	cmp	r3, r2
 8003c32:	d111      	bne.n	8003c58 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003c34:	693b      	ldr	r3, [r7, #16]
 8003c36:	4a16      	ldr	r2, [pc, #88]	; (8003c90 <TIM_OC1_SetConfig+0x10c>)
 8003c38:	4013      	ands	r3, r2
 8003c3a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003c3c:	693b      	ldr	r3, [r7, #16]
 8003c3e:	4a15      	ldr	r2, [pc, #84]	; (8003c94 <TIM_OC1_SetConfig+0x110>)
 8003c40:	4013      	ands	r3, r2
 8003c42:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003c44:	683b      	ldr	r3, [r7, #0]
 8003c46:	695b      	ldr	r3, [r3, #20]
 8003c48:	693a      	ldr	r2, [r7, #16]
 8003c4a:	4313      	orrs	r3, r2
 8003c4c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003c4e:	683b      	ldr	r3, [r7, #0]
 8003c50:	699b      	ldr	r3, [r3, #24]
 8003c52:	693a      	ldr	r2, [r7, #16]
 8003c54:	4313      	orrs	r3, r2
 8003c56:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	693a      	ldr	r2, [r7, #16]
 8003c5c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	68fa      	ldr	r2, [r7, #12]
 8003c62:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003c64:	683b      	ldr	r3, [r7, #0]
 8003c66:	685a      	ldr	r2, [r3, #4]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	697a      	ldr	r2, [r7, #20]
 8003c70:	621a      	str	r2, [r3, #32]
}
 8003c72:	46c0      	nop			; (mov r8, r8)
 8003c74:	46bd      	mov	sp, r7
 8003c76:	b006      	add	sp, #24
 8003c78:	bd80      	pop	{r7, pc}
 8003c7a:	46c0      	nop			; (mov r8, r8)
 8003c7c:	fffeff8f 	.word	0xfffeff8f
 8003c80:	40012c00 	.word	0x40012c00
 8003c84:	40014000 	.word	0x40014000
 8003c88:	40014400 	.word	0x40014400
 8003c8c:	40014800 	.word	0x40014800
 8003c90:	fffffeff 	.word	0xfffffeff
 8003c94:	fffffdff 	.word	0xfffffdff

08003c98 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003c98:	b580      	push	{r7, lr}
 8003c9a:	b086      	sub	sp, #24
 8003c9c:	af00      	add	r7, sp, #0
 8003c9e:	6078      	str	r0, [r7, #4]
 8003ca0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	6a1b      	ldr	r3, [r3, #32]
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	6a1b      	ldr	r3, [r3, #32]
 8003cac:	2210      	movs	r2, #16
 8003cae:	4393      	bics	r3, r2
 8003cb0:	001a      	movs	r2, r3
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	685b      	ldr	r3, [r3, #4]
 8003cba:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	699b      	ldr	r3, [r3, #24]
 8003cc0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4a2e      	ldr	r2, [pc, #184]	; (8003d80 <TIM_OC2_SetConfig+0xe8>)
 8003cc6:	4013      	ands	r3, r2
 8003cc8:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	4a2d      	ldr	r2, [pc, #180]	; (8003d84 <TIM_OC2_SetConfig+0xec>)
 8003cce:	4013      	ands	r3, r2
 8003cd0:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	021b      	lsls	r3, r3, #8
 8003cd8:	68fa      	ldr	r2, [r7, #12]
 8003cda:	4313      	orrs	r3, r2
 8003cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003cde:	697b      	ldr	r3, [r7, #20]
 8003ce0:	2220      	movs	r2, #32
 8003ce2:	4393      	bics	r3, r2
 8003ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003ce6:	683b      	ldr	r3, [r7, #0]
 8003ce8:	689b      	ldr	r3, [r3, #8]
 8003cea:	011b      	lsls	r3, r3, #4
 8003cec:	697a      	ldr	r2, [r7, #20]
 8003cee:	4313      	orrs	r3, r2
 8003cf0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	4a24      	ldr	r2, [pc, #144]	; (8003d88 <TIM_OC2_SetConfig+0xf0>)
 8003cf6:	4293      	cmp	r3, r2
 8003cf8:	d10d      	bne.n	8003d16 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003cfa:	697b      	ldr	r3, [r7, #20]
 8003cfc:	2280      	movs	r2, #128	; 0x80
 8003cfe:	4393      	bics	r3, r2
 8003d00:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003d02:	683b      	ldr	r3, [r7, #0]
 8003d04:	68db      	ldr	r3, [r3, #12]
 8003d06:	011b      	lsls	r3, r3, #4
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	2240      	movs	r2, #64	; 0x40
 8003d12:	4393      	bics	r3, r2
 8003d14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	4a1b      	ldr	r2, [pc, #108]	; (8003d88 <TIM_OC2_SetConfig+0xf0>)
 8003d1a:	4293      	cmp	r3, r2
 8003d1c:	d00b      	beq.n	8003d36 <TIM_OC2_SetConfig+0x9e>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	4a1a      	ldr	r2, [pc, #104]	; (8003d8c <TIM_OC2_SetConfig+0xf4>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d007      	beq.n	8003d36 <TIM_OC2_SetConfig+0x9e>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	4a19      	ldr	r2, [pc, #100]	; (8003d90 <TIM_OC2_SetConfig+0xf8>)
 8003d2a:	4293      	cmp	r3, r2
 8003d2c:	d003      	beq.n	8003d36 <TIM_OC2_SetConfig+0x9e>
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	4a18      	ldr	r2, [pc, #96]	; (8003d94 <TIM_OC2_SetConfig+0xfc>)
 8003d32:	4293      	cmp	r3, r2
 8003d34:	d113      	bne.n	8003d5e <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003d36:	693b      	ldr	r3, [r7, #16]
 8003d38:	4a17      	ldr	r2, [pc, #92]	; (8003d98 <TIM_OC2_SetConfig+0x100>)
 8003d3a:	4013      	ands	r3, r2
 8003d3c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003d3e:	693b      	ldr	r3, [r7, #16]
 8003d40:	4a16      	ldr	r2, [pc, #88]	; (8003d9c <TIM_OC2_SetConfig+0x104>)
 8003d42:	4013      	ands	r3, r2
 8003d44:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	695b      	ldr	r3, [r3, #20]
 8003d4a:	009b      	lsls	r3, r3, #2
 8003d4c:	693a      	ldr	r2, [r7, #16]
 8003d4e:	4313      	orrs	r3, r2
 8003d50:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003d52:	683b      	ldr	r3, [r7, #0]
 8003d54:	699b      	ldr	r3, [r3, #24]
 8003d56:	009b      	lsls	r3, r3, #2
 8003d58:	693a      	ldr	r2, [r7, #16]
 8003d5a:	4313      	orrs	r3, r2
 8003d5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	693a      	ldr	r2, [r7, #16]
 8003d62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	68fa      	ldr	r2, [r7, #12]
 8003d68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003d6a:	683b      	ldr	r3, [r7, #0]
 8003d6c:	685a      	ldr	r2, [r3, #4]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	697a      	ldr	r2, [r7, #20]
 8003d76:	621a      	str	r2, [r3, #32]
}
 8003d78:	46c0      	nop			; (mov r8, r8)
 8003d7a:	46bd      	mov	sp, r7
 8003d7c:	b006      	add	sp, #24
 8003d7e:	bd80      	pop	{r7, pc}
 8003d80:	feff8fff 	.word	0xfeff8fff
 8003d84:	fffffcff 	.word	0xfffffcff
 8003d88:	40012c00 	.word	0x40012c00
 8003d8c:	40014000 	.word	0x40014000
 8003d90:	40014400 	.word	0x40014400
 8003d94:	40014800 	.word	0x40014800
 8003d98:	fffffbff 	.word	0xfffffbff
 8003d9c:	fffff7ff 	.word	0xfffff7ff

08003da0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003da0:	b580      	push	{r7, lr}
 8003da2:	b086      	sub	sp, #24
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
 8003da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003daa:	687b      	ldr	r3, [r7, #4]
 8003dac:	6a1b      	ldr	r3, [r3, #32]
 8003dae:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6a1b      	ldr	r3, [r3, #32]
 8003db4:	4a33      	ldr	r2, [pc, #204]	; (8003e84 <TIM_OC3_SetConfig+0xe4>)
 8003db6:	401a      	ands	r2, r3
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	69db      	ldr	r3, [r3, #28]
 8003dc6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	4a2f      	ldr	r2, [pc, #188]	; (8003e88 <TIM_OC3_SetConfig+0xe8>)
 8003dcc:	4013      	ands	r3, r2
 8003dce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	2203      	movs	r2, #3
 8003dd4:	4393      	bics	r3, r2
 8003dd6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	68fa      	ldr	r2, [r7, #12]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8003de2:	697b      	ldr	r3, [r7, #20]
 8003de4:	4a29      	ldr	r2, [pc, #164]	; (8003e8c <TIM_OC3_SetConfig+0xec>)
 8003de6:	4013      	ands	r3, r2
 8003de8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	689b      	ldr	r3, [r3, #8]
 8003dee:	021b      	lsls	r3, r3, #8
 8003df0:	697a      	ldr	r2, [r7, #20]
 8003df2:	4313      	orrs	r3, r2
 8003df4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	4a25      	ldr	r2, [pc, #148]	; (8003e90 <TIM_OC3_SetConfig+0xf0>)
 8003dfa:	4293      	cmp	r3, r2
 8003dfc:	d10d      	bne.n	8003e1a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	4a24      	ldr	r2, [pc, #144]	; (8003e94 <TIM_OC3_SetConfig+0xf4>)
 8003e02:	4013      	ands	r3, r2
 8003e04:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003e06:	683b      	ldr	r3, [r7, #0]
 8003e08:	68db      	ldr	r3, [r3, #12]
 8003e0a:	021b      	lsls	r3, r3, #8
 8003e0c:	697a      	ldr	r2, [r7, #20]
 8003e0e:	4313      	orrs	r3, r2
 8003e10:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8003e12:	697b      	ldr	r3, [r7, #20]
 8003e14:	4a20      	ldr	r2, [pc, #128]	; (8003e98 <TIM_OC3_SetConfig+0xf8>)
 8003e16:	4013      	ands	r3, r2
 8003e18:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	4a1c      	ldr	r2, [pc, #112]	; (8003e90 <TIM_OC3_SetConfig+0xf0>)
 8003e1e:	4293      	cmp	r3, r2
 8003e20:	d00b      	beq.n	8003e3a <TIM_OC3_SetConfig+0x9a>
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	4a1d      	ldr	r2, [pc, #116]	; (8003e9c <TIM_OC3_SetConfig+0xfc>)
 8003e26:	4293      	cmp	r3, r2
 8003e28:	d007      	beq.n	8003e3a <TIM_OC3_SetConfig+0x9a>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	4a1c      	ldr	r2, [pc, #112]	; (8003ea0 <TIM_OC3_SetConfig+0x100>)
 8003e2e:	4293      	cmp	r3, r2
 8003e30:	d003      	beq.n	8003e3a <TIM_OC3_SetConfig+0x9a>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	4a1b      	ldr	r2, [pc, #108]	; (8003ea4 <TIM_OC3_SetConfig+0x104>)
 8003e36:	4293      	cmp	r3, r2
 8003e38:	d113      	bne.n	8003e62 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003e3a:	693b      	ldr	r3, [r7, #16]
 8003e3c:	4a1a      	ldr	r2, [pc, #104]	; (8003ea8 <TIM_OC3_SetConfig+0x108>)
 8003e3e:	4013      	ands	r3, r2
 8003e40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003e42:	693b      	ldr	r3, [r7, #16]
 8003e44:	4a19      	ldr	r2, [pc, #100]	; (8003eac <TIM_OC3_SetConfig+0x10c>)
 8003e46:	4013      	ands	r3, r2
 8003e48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	695b      	ldr	r3, [r3, #20]
 8003e4e:	011b      	lsls	r3, r3, #4
 8003e50:	693a      	ldr	r2, [r7, #16]
 8003e52:	4313      	orrs	r3, r2
 8003e54:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	699b      	ldr	r3, [r3, #24]
 8003e5a:	011b      	lsls	r3, r3, #4
 8003e5c:	693a      	ldr	r2, [r7, #16]
 8003e5e:	4313      	orrs	r3, r2
 8003e60:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	693a      	ldr	r2, [r7, #16]
 8003e66:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	68fa      	ldr	r2, [r7, #12]
 8003e6c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003e6e:	683b      	ldr	r3, [r7, #0]
 8003e70:	685a      	ldr	r2, [r3, #4]
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	697a      	ldr	r2, [r7, #20]
 8003e7a:	621a      	str	r2, [r3, #32]
}
 8003e7c:	46c0      	nop			; (mov r8, r8)
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	b006      	add	sp, #24
 8003e82:	bd80      	pop	{r7, pc}
 8003e84:	fffffeff 	.word	0xfffffeff
 8003e88:	fffeff8f 	.word	0xfffeff8f
 8003e8c:	fffffdff 	.word	0xfffffdff
 8003e90:	40012c00 	.word	0x40012c00
 8003e94:	fffff7ff 	.word	0xfffff7ff
 8003e98:	fffffbff 	.word	0xfffffbff
 8003e9c:	40014000 	.word	0x40014000
 8003ea0:	40014400 	.word	0x40014400
 8003ea4:	40014800 	.word	0x40014800
 8003ea8:	ffffefff 	.word	0xffffefff
 8003eac:	ffffdfff 	.word	0xffffdfff

08003eb0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b086      	sub	sp, #24
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	6078      	str	r0, [r7, #4]
 8003eb8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	6a1b      	ldr	r3, [r3, #32]
 8003ebe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	6a1b      	ldr	r3, [r3, #32]
 8003ec4:	4a26      	ldr	r2, [pc, #152]	; (8003f60 <TIM_OC4_SetConfig+0xb0>)
 8003ec6:	401a      	ands	r2, r3
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	685b      	ldr	r3, [r3, #4]
 8003ed0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	69db      	ldr	r3, [r3, #28]
 8003ed6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	4a22      	ldr	r2, [pc, #136]	; (8003f64 <TIM_OC4_SetConfig+0xb4>)
 8003edc:	4013      	ands	r3, r2
 8003ede:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	4a21      	ldr	r2, [pc, #132]	; (8003f68 <TIM_OC4_SetConfig+0xb8>)
 8003ee4:	4013      	ands	r3, r2
 8003ee6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003ee8:	683b      	ldr	r3, [r7, #0]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	021b      	lsls	r3, r3, #8
 8003eee:	68fa      	ldr	r2, [r7, #12]
 8003ef0:	4313      	orrs	r3, r2
 8003ef2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003ef4:	693b      	ldr	r3, [r7, #16]
 8003ef6:	4a1d      	ldr	r2, [pc, #116]	; (8003f6c <TIM_OC4_SetConfig+0xbc>)
 8003ef8:	4013      	ands	r3, r2
 8003efa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	689b      	ldr	r3, [r3, #8]
 8003f00:	031b      	lsls	r3, r3, #12
 8003f02:	693a      	ldr	r2, [r7, #16]
 8003f04:	4313      	orrs	r3, r2
 8003f06:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	4a19      	ldr	r2, [pc, #100]	; (8003f70 <TIM_OC4_SetConfig+0xc0>)
 8003f0c:	4293      	cmp	r3, r2
 8003f0e:	d00b      	beq.n	8003f28 <TIM_OC4_SetConfig+0x78>
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	4a18      	ldr	r2, [pc, #96]	; (8003f74 <TIM_OC4_SetConfig+0xc4>)
 8003f14:	4293      	cmp	r3, r2
 8003f16:	d007      	beq.n	8003f28 <TIM_OC4_SetConfig+0x78>
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	4a17      	ldr	r2, [pc, #92]	; (8003f78 <TIM_OC4_SetConfig+0xc8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d003      	beq.n	8003f28 <TIM_OC4_SetConfig+0x78>
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	4a16      	ldr	r2, [pc, #88]	; (8003f7c <TIM_OC4_SetConfig+0xcc>)
 8003f24:	4293      	cmp	r3, r2
 8003f26:	d109      	bne.n	8003f3c <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003f28:	697b      	ldr	r3, [r7, #20]
 8003f2a:	4a15      	ldr	r2, [pc, #84]	; (8003f80 <TIM_OC4_SetConfig+0xd0>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	695b      	ldr	r3, [r3, #20]
 8003f34:	019b      	lsls	r3, r3, #6
 8003f36:	697a      	ldr	r2, [r7, #20]
 8003f38:	4313      	orrs	r3, r2
 8003f3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	697a      	ldr	r2, [r7, #20]
 8003f40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	68fa      	ldr	r2, [r7, #12]
 8003f46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	685a      	ldr	r2, [r3, #4]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	693a      	ldr	r2, [r7, #16]
 8003f54:	621a      	str	r2, [r3, #32]
}
 8003f56:	46c0      	nop			; (mov r8, r8)
 8003f58:	46bd      	mov	sp, r7
 8003f5a:	b006      	add	sp, #24
 8003f5c:	bd80      	pop	{r7, pc}
 8003f5e:	46c0      	nop			; (mov r8, r8)
 8003f60:	ffffefff 	.word	0xffffefff
 8003f64:	feff8fff 	.word	0xfeff8fff
 8003f68:	fffffcff 	.word	0xfffffcff
 8003f6c:	ffffdfff 	.word	0xffffdfff
 8003f70:	40012c00 	.word	0x40012c00
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40014400 	.word	0x40014400
 8003f7c:	40014800 	.word	0x40014800
 8003f80:	ffffbfff 	.word	0xffffbfff

08003f84 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
 8003f8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	6a1b      	ldr	r3, [r3, #32]
 8003f92:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	6a1b      	ldr	r3, [r3, #32]
 8003f98:	4a23      	ldr	r2, [pc, #140]	; (8004028 <TIM_OC5_SetConfig+0xa4>)
 8003f9a:	401a      	ands	r2, r3
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	685b      	ldr	r3, [r3, #4]
 8003fa4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003faa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	4a1f      	ldr	r2, [pc, #124]	; (800402c <TIM_OC5_SetConfig+0xa8>)
 8003fb0:	4013      	ands	r3, r2
 8003fb2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fb4:	683b      	ldr	r3, [r7, #0]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	68fa      	ldr	r2, [r7, #12]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003fbe:	693b      	ldr	r3, [r7, #16]
 8003fc0:	4a1b      	ldr	r2, [pc, #108]	; (8004030 <TIM_OC5_SetConfig+0xac>)
 8003fc2:	4013      	ands	r3, r2
 8003fc4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003fc6:	683b      	ldr	r3, [r7, #0]
 8003fc8:	689b      	ldr	r3, [r3, #8]
 8003fca:	041b      	lsls	r3, r3, #16
 8003fcc:	693a      	ldr	r2, [r7, #16]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	4a17      	ldr	r2, [pc, #92]	; (8004034 <TIM_OC5_SetConfig+0xb0>)
 8003fd6:	4293      	cmp	r3, r2
 8003fd8:	d00b      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x6e>
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	4a16      	ldr	r2, [pc, #88]	; (8004038 <TIM_OC5_SetConfig+0xb4>)
 8003fde:	4293      	cmp	r3, r2
 8003fe0:	d007      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x6e>
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	4a15      	ldr	r2, [pc, #84]	; (800403c <TIM_OC5_SetConfig+0xb8>)
 8003fe6:	4293      	cmp	r3, r2
 8003fe8:	d003      	beq.n	8003ff2 <TIM_OC5_SetConfig+0x6e>
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a14      	ldr	r2, [pc, #80]	; (8004040 <TIM_OC5_SetConfig+0xbc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d109      	bne.n	8004006 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ff2:	697b      	ldr	r3, [r7, #20]
 8003ff4:	4a0c      	ldr	r2, [pc, #48]	; (8004028 <TIM_OC5_SetConfig+0xa4>)
 8003ff6:	4013      	ands	r3, r2
 8003ff8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ffa:	683b      	ldr	r3, [r7, #0]
 8003ffc:	695b      	ldr	r3, [r3, #20]
 8003ffe:	021b      	lsls	r3, r3, #8
 8004000:	697a      	ldr	r2, [r7, #20]
 8004002:	4313      	orrs	r3, r2
 8004004:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	68fa      	ldr	r2, [r7, #12]
 8004010:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004012:	683b      	ldr	r3, [r7, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	693a      	ldr	r2, [r7, #16]
 800401e:	621a      	str	r2, [r3, #32]
}
 8004020:	46c0      	nop			; (mov r8, r8)
 8004022:	46bd      	mov	sp, r7
 8004024:	b006      	add	sp, #24
 8004026:	bd80      	pop	{r7, pc}
 8004028:	fffeffff 	.word	0xfffeffff
 800402c:	fffeff8f 	.word	0xfffeff8f
 8004030:	fffdffff 	.word	0xfffdffff
 8004034:	40012c00 	.word	0x40012c00
 8004038:	40014000 	.word	0x40014000
 800403c:	40014400 	.word	0x40014400
 8004040:	40014800 	.word	0x40014800

08004044 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004044:	b580      	push	{r7, lr}
 8004046:	b086      	sub	sp, #24
 8004048:	af00      	add	r7, sp, #0
 800404a:	6078      	str	r0, [r7, #4]
 800404c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6a1b      	ldr	r3, [r3, #32]
 8004052:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	6a1b      	ldr	r3, [r3, #32]
 8004058:	4a24      	ldr	r2, [pc, #144]	; (80040ec <TIM_OC6_SetConfig+0xa8>)
 800405a:	401a      	ands	r2, r3
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	685b      	ldr	r3, [r3, #4]
 8004064:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 800406c:	68fb      	ldr	r3, [r7, #12]
 800406e:	4a20      	ldr	r2, [pc, #128]	; (80040f0 <TIM_OC6_SetConfig+0xac>)
 8004070:	4013      	ands	r3, r2
 8004072:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	021b      	lsls	r3, r3, #8
 800407a:	68fa      	ldr	r2, [r7, #12]
 800407c:	4313      	orrs	r3, r2
 800407e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8004080:	693b      	ldr	r3, [r7, #16]
 8004082:	4a1c      	ldr	r2, [pc, #112]	; (80040f4 <TIM_OC6_SetConfig+0xb0>)
 8004084:	4013      	ands	r3, r2
 8004086:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	051b      	lsls	r3, r3, #20
 800408e:	693a      	ldr	r2, [r7, #16]
 8004090:	4313      	orrs	r3, r2
 8004092:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	4a18      	ldr	r2, [pc, #96]	; (80040f8 <TIM_OC6_SetConfig+0xb4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d00b      	beq.n	80040b4 <TIM_OC6_SetConfig+0x70>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	4a17      	ldr	r2, [pc, #92]	; (80040fc <TIM_OC6_SetConfig+0xb8>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d007      	beq.n	80040b4 <TIM_OC6_SetConfig+0x70>
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	4a16      	ldr	r2, [pc, #88]	; (8004100 <TIM_OC6_SetConfig+0xbc>)
 80040a8:	4293      	cmp	r3, r2
 80040aa:	d003      	beq.n	80040b4 <TIM_OC6_SetConfig+0x70>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	4a15      	ldr	r2, [pc, #84]	; (8004104 <TIM_OC6_SetConfig+0xc0>)
 80040b0:	4293      	cmp	r3, r2
 80040b2:	d109      	bne.n	80040c8 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 80040b4:	697b      	ldr	r3, [r7, #20]
 80040b6:	4a14      	ldr	r2, [pc, #80]	; (8004108 <TIM_OC6_SetConfig+0xc4>)
 80040b8:	4013      	ands	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	695b      	ldr	r3, [r3, #20]
 80040c0:	029b      	lsls	r3, r3, #10
 80040c2:	697a      	ldr	r2, [r7, #20]
 80040c4:	4313      	orrs	r3, r2
 80040c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	68fa      	ldr	r2, [r7, #12]
 80040d2:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 80040d4:	683b      	ldr	r3, [r7, #0]
 80040d6:	685a      	ldr	r2, [r3, #4]
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	693a      	ldr	r2, [r7, #16]
 80040e0:	621a      	str	r2, [r3, #32]
}
 80040e2:	46c0      	nop			; (mov r8, r8)
 80040e4:	46bd      	mov	sp, r7
 80040e6:	b006      	add	sp, #24
 80040e8:	bd80      	pop	{r7, pc}
 80040ea:	46c0      	nop			; (mov r8, r8)
 80040ec:	ffefffff 	.word	0xffefffff
 80040f0:	feff8fff 	.word	0xfeff8fff
 80040f4:	ffdfffff 	.word	0xffdfffff
 80040f8:	40012c00 	.word	0x40012c00
 80040fc:	40014000 	.word	0x40014000
 8004100:	40014400 	.word	0x40014400
 8004104:	40014800 	.word	0x40014800
 8004108:	fffbffff 	.word	0xfffbffff

0800410c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800410c:	b580      	push	{r7, lr}
 800410e:	b086      	sub	sp, #24
 8004110:	af00      	add	r7, sp, #0
 8004112:	60f8      	str	r0, [r7, #12]
 8004114:	60b9      	str	r1, [r7, #8]
 8004116:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	6a1b      	ldr	r3, [r3, #32]
 800411c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	6a1b      	ldr	r3, [r3, #32]
 8004122:	2201      	movs	r2, #1
 8004124:	4393      	bics	r3, r2
 8004126:	001a      	movs	r2, r3
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	699b      	ldr	r3, [r3, #24]
 8004130:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004132:	693b      	ldr	r3, [r7, #16]
 8004134:	22f0      	movs	r2, #240	; 0xf0
 8004136:	4393      	bics	r3, r2
 8004138:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	011b      	lsls	r3, r3, #4
 800413e:	693a      	ldr	r2, [r7, #16]
 8004140:	4313      	orrs	r3, r2
 8004142:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004144:	697b      	ldr	r3, [r7, #20]
 8004146:	220a      	movs	r2, #10
 8004148:	4393      	bics	r3, r2
 800414a:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800414c:	697a      	ldr	r2, [r7, #20]
 800414e:	68bb      	ldr	r3, [r7, #8]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	693a      	ldr	r2, [r7, #16]
 8004158:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	697a      	ldr	r2, [r7, #20]
 800415e:	621a      	str	r2, [r3, #32]
}
 8004160:	46c0      	nop			; (mov r8, r8)
 8004162:	46bd      	mov	sp, r7
 8004164:	b006      	add	sp, #24
 8004166:	bd80      	pop	{r7, pc}

08004168 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004168:	b580      	push	{r7, lr}
 800416a:	b086      	sub	sp, #24
 800416c:	af00      	add	r7, sp, #0
 800416e:	60f8      	str	r0, [r7, #12]
 8004170:	60b9      	str	r1, [r7, #8]
 8004172:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	6a1b      	ldr	r3, [r3, #32]
 8004178:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	6a1b      	ldr	r3, [r3, #32]
 800417e:	2210      	movs	r2, #16
 8004180:	4393      	bics	r3, r2
 8004182:	001a      	movs	r2, r3
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	699b      	ldr	r3, [r3, #24]
 800418c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800418e:	693b      	ldr	r3, [r7, #16]
 8004190:	4a0d      	ldr	r2, [pc, #52]	; (80041c8 <TIM_TI2_ConfigInputStage+0x60>)
 8004192:	4013      	ands	r3, r2
 8004194:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	031b      	lsls	r3, r3, #12
 800419a:	693a      	ldr	r2, [r7, #16]
 800419c:	4313      	orrs	r3, r2
 800419e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80041a0:	697b      	ldr	r3, [r7, #20]
 80041a2:	22a0      	movs	r2, #160	; 0xa0
 80041a4:	4393      	bics	r3, r2
 80041a6:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80041a8:	68bb      	ldr	r3, [r7, #8]
 80041aa:	011b      	lsls	r3, r3, #4
 80041ac:	697a      	ldr	r2, [r7, #20]
 80041ae:	4313      	orrs	r3, r2
 80041b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	693a      	ldr	r2, [r7, #16]
 80041b6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	697a      	ldr	r2, [r7, #20]
 80041bc:	621a      	str	r2, [r3, #32]
}
 80041be:	46c0      	nop			; (mov r8, r8)
 80041c0:	46bd      	mov	sp, r7
 80041c2:	b006      	add	sp, #24
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	46c0      	nop			; (mov r8, r8)
 80041c8:	ffff0fff 	.word	0xffff0fff

080041cc <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b084      	sub	sp, #16
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	689b      	ldr	r3, [r3, #8]
 80041da:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	4a08      	ldr	r2, [pc, #32]	; (8004200 <TIM_ITRx_SetConfig+0x34>)
 80041e0:	4013      	ands	r3, r2
 80041e2:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80041e4:	683a      	ldr	r2, [r7, #0]
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	2207      	movs	r2, #7
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	68fa      	ldr	r2, [r7, #12]
 80041f4:	609a      	str	r2, [r3, #8]
}
 80041f6:	46c0      	nop			; (mov r8, r8)
 80041f8:	46bd      	mov	sp, r7
 80041fa:	b004      	add	sp, #16
 80041fc:	bd80      	pop	{r7, pc}
 80041fe:	46c0      	nop			; (mov r8, r8)
 8004200:	ffcfff8f 	.word	0xffcfff8f

08004204 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004204:	b580      	push	{r7, lr}
 8004206:	b086      	sub	sp, #24
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
 8004210:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	689b      	ldr	r3, [r3, #8]
 8004216:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004218:	697b      	ldr	r3, [r7, #20]
 800421a:	4a09      	ldr	r2, [pc, #36]	; (8004240 <TIM_ETR_SetConfig+0x3c>)
 800421c:	4013      	ands	r3, r2
 800421e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	021a      	lsls	r2, r3, #8
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	431a      	orrs	r2, r3
 8004228:	68bb      	ldr	r3, [r7, #8]
 800422a:	4313      	orrs	r3, r2
 800422c:	697a      	ldr	r2, [r7, #20]
 800422e:	4313      	orrs	r3, r2
 8004230:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	697a      	ldr	r2, [r7, #20]
 8004236:	609a      	str	r2, [r3, #8]
}
 8004238:	46c0      	nop			; (mov r8, r8)
 800423a:	46bd      	mov	sp, r7
 800423c:	b006      	add	sp, #24
 800423e:	bd80      	pop	{r7, pc}
 8004240:	ffff00ff 	.word	0xffff00ff

08004244 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b086      	sub	sp, #24
 8004248:	af00      	add	r7, sp, #0
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	60b9      	str	r1, [r7, #8]
 800424e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004250:	68bb      	ldr	r3, [r7, #8]
 8004252:	221f      	movs	r2, #31
 8004254:	4013      	ands	r3, r2
 8004256:	2201      	movs	r2, #1
 8004258:	409a      	lsls	r2, r3
 800425a:	0013      	movs	r3, r2
 800425c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	6a1b      	ldr	r3, [r3, #32]
 8004262:	697a      	ldr	r2, [r7, #20]
 8004264:	43d2      	mvns	r2, r2
 8004266:	401a      	ands	r2, r3
 8004268:	68fb      	ldr	r3, [r7, #12]
 800426a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	6a1a      	ldr	r2, [r3, #32]
 8004270:	68bb      	ldr	r3, [r7, #8]
 8004272:	211f      	movs	r1, #31
 8004274:	400b      	ands	r3, r1
 8004276:	6879      	ldr	r1, [r7, #4]
 8004278:	4099      	lsls	r1, r3
 800427a:	000b      	movs	r3, r1
 800427c:	431a      	orrs	r2, r3
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	621a      	str	r2, [r3, #32]
}
 8004282:	46c0      	nop			; (mov r8, r8)
 8004284:	46bd      	mov	sp, r7
 8004286:	b006      	add	sp, #24
 8004288:	bd80      	pop	{r7, pc}
	...

0800428c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800428c:	b580      	push	{r7, lr}
 800428e:	b084      	sub	sp, #16
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	223c      	movs	r2, #60	; 0x3c
 800429a:	5c9b      	ldrb	r3, [r3, r2]
 800429c:	2b01      	cmp	r3, #1
 800429e:	d101      	bne.n	80042a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80042a0:	2302      	movs	r3, #2
 80042a2:	e05a      	b.n	800435a <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	223c      	movs	r2, #60	; 0x3c
 80042a8:	2101      	movs	r1, #1
 80042aa:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	223d      	movs	r2, #61	; 0x3d
 80042b0:	2102      	movs	r1, #2
 80042b2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	685b      	ldr	r3, [r3, #4]
 80042ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	689b      	ldr	r3, [r3, #8]
 80042c2:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	4a26      	ldr	r2, [pc, #152]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d108      	bne.n	80042e0 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a25      	ldr	r2, [pc, #148]	; (8004368 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 80042d2:	4013      	ands	r3, r2
 80042d4:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80042d6:	683b      	ldr	r3, [r7, #0]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	68fa      	ldr	r2, [r7, #12]
 80042dc:	4313      	orrs	r3, r2
 80042de:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	2270      	movs	r2, #112	; 0x70
 80042e4:	4393      	bics	r3, r2
 80042e6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80042e8:	683b      	ldr	r3, [r7, #0]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68fa      	ldr	r2, [r7, #12]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	68fa      	ldr	r2, [r7, #12]
 80042f8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	4a19      	ldr	r2, [pc, #100]	; (8004364 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004300:	4293      	cmp	r3, r2
 8004302:	d014      	beq.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	2380      	movs	r3, #128	; 0x80
 800430a:	05db      	lsls	r3, r3, #23
 800430c:	429a      	cmp	r2, r3
 800430e:	d00e      	beq.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4a15      	ldr	r2, [pc, #84]	; (800436c <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d009      	beq.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	4a14      	ldr	r2, [pc, #80]	; (8004370 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004320:	4293      	cmp	r3, r2
 8004322:	d004      	beq.n	800432e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	4a12      	ldr	r2, [pc, #72]	; (8004374 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800432a:	4293      	cmp	r3, r2
 800432c:	d10c      	bne.n	8004348 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800432e:	68bb      	ldr	r3, [r7, #8]
 8004330:	2280      	movs	r2, #128	; 0x80
 8004332:	4393      	bics	r3, r2
 8004334:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	68ba      	ldr	r2, [r7, #8]
 800433c:	4313      	orrs	r3, r2
 800433e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	68ba      	ldr	r2, [r7, #8]
 8004346:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	223d      	movs	r2, #61	; 0x3d
 800434c:	2101      	movs	r1, #1
 800434e:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	223c      	movs	r2, #60	; 0x3c
 8004354:	2100      	movs	r1, #0
 8004356:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004358:	2300      	movs	r3, #0
}
 800435a:	0018      	movs	r0, r3
 800435c:	46bd      	mov	sp, r7
 800435e:	b004      	add	sp, #16
 8004360:	bd80      	pop	{r7, pc}
 8004362:	46c0      	nop			; (mov r8, r8)
 8004364:	40012c00 	.word	0x40012c00
 8004368:	ff0fffff 	.word	0xff0fffff
 800436c:	40000400 	.word	0x40000400
 8004370:	40000800 	.word	0x40000800
 8004374:	40014000 	.word	0x40014000

08004378 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004378:	b580      	push	{r7, lr}
 800437a:	b084      	sub	sp, #16
 800437c:	af00      	add	r7, sp, #0
 800437e:	6078      	str	r0, [r7, #4]
 8004380:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004382:	2300      	movs	r3, #0
 8004384:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	223c      	movs	r2, #60	; 0x3c
 800438a:	5c9b      	ldrb	r3, [r3, r2]
 800438c:	2b01      	cmp	r3, #1
 800438e:	d101      	bne.n	8004394 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004390:	2302      	movs	r3, #2
 8004392:	e06f      	b.n	8004474 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	223c      	movs	r2, #60	; 0x3c
 8004398:	2101      	movs	r1, #1
 800439a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	22ff      	movs	r2, #255	; 0xff
 80043a0:	4393      	bics	r3, r2
 80043a2:	001a      	movs	r2, r3
 80043a4:	683b      	ldr	r3, [r7, #0]
 80043a6:	68db      	ldr	r3, [r3, #12]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80043ac:	68fb      	ldr	r3, [r7, #12]
 80043ae:	4a33      	ldr	r2, [pc, #204]	; (800447c <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 80043b0:	401a      	ands	r2, r3
 80043b2:	683b      	ldr	r3, [r7, #0]
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	4313      	orrs	r3, r2
 80043b8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	4a30      	ldr	r2, [pc, #192]	; (8004480 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 80043be:	401a      	ands	r2, r3
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	4a2e      	ldr	r2, [pc, #184]	; (8004484 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 80043cc:	401a      	ands	r2, r3
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4313      	orrs	r3, r2
 80043d4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	4a2b      	ldr	r2, [pc, #172]	; (8004488 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 80043da:	401a      	ands	r2, r3
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	691b      	ldr	r3, [r3, #16]
 80043e0:	4313      	orrs	r3, r2
 80043e2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4a29      	ldr	r2, [pc, #164]	; (800448c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 80043e8:	401a      	ands	r2, r3
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	695b      	ldr	r3, [r3, #20]
 80043ee:	4313      	orrs	r3, r2
 80043f0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	4a26      	ldr	r2, [pc, #152]	; (8004490 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 80043f6:	401a      	ands	r2, r3
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043fc:	4313      	orrs	r3, r2
 80043fe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	4a24      	ldr	r2, [pc, #144]	; (8004494 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8004404:	401a      	ands	r2, r3
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	699b      	ldr	r3, [r3, #24]
 800440a:	041b      	lsls	r3, r3, #16
 800440c:	4313      	orrs	r3, r2
 800440e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	4a21      	ldr	r2, [pc, #132]	; (8004498 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8004414:	401a      	ands	r2, r3
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	69db      	ldr	r3, [r3, #28]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4a1e      	ldr	r2, [pc, #120]	; (800449c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8004424:	4293      	cmp	r3, r2
 8004426:	d11c      	bne.n	8004462 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8004428:	68fb      	ldr	r3, [r7, #12]
 800442a:	4a1d      	ldr	r2, [pc, #116]	; (80044a0 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 800442c:	401a      	ands	r2, r3
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004432:	051b      	lsls	r3, r3, #20
 8004434:	4313      	orrs	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	4a1a      	ldr	r2, [pc, #104]	; (80044a4 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 800443c:	401a      	ands	r2, r3
 800443e:	683b      	ldr	r3, [r7, #0]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	4313      	orrs	r3, r2
 8004444:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	4a17      	ldr	r2, [pc, #92]	; (80044a8 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 800444a:	401a      	ands	r2, r3
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004450:	4313      	orrs	r3, r2
 8004452:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	4a15      	ldr	r2, [pc, #84]	; (80044ac <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8004458:	401a      	ands	r2, r3
 800445a:	683b      	ldr	r3, [r7, #0]
 800445c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800445e:	4313      	orrs	r3, r2
 8004460:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	68fa      	ldr	r2, [r7, #12]
 8004468:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	223c      	movs	r2, #60	; 0x3c
 800446e:	2100      	movs	r1, #0
 8004470:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004472:	2300      	movs	r3, #0
}
 8004474:	0018      	movs	r0, r3
 8004476:	46bd      	mov	sp, r7
 8004478:	b004      	add	sp, #16
 800447a:	bd80      	pop	{r7, pc}
 800447c:	fffffcff 	.word	0xfffffcff
 8004480:	fffffbff 	.word	0xfffffbff
 8004484:	fffff7ff 	.word	0xfffff7ff
 8004488:	ffffefff 	.word	0xffffefff
 800448c:	ffffdfff 	.word	0xffffdfff
 8004490:	ffffbfff 	.word	0xffffbfff
 8004494:	fff0ffff 	.word	0xfff0ffff
 8004498:	efffffff 	.word	0xefffffff
 800449c:	40012c00 	.word	0x40012c00
 80044a0:	ff0fffff 	.word	0xff0fffff
 80044a4:	feffffff 	.word	0xfeffffff
 80044a8:	fdffffff 	.word	0xfdffffff
 80044ac:	dfffffff 	.word	0xdfffffff

080044b0 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80044b0:	b580      	push	{r7, lr}
 80044b2:	b082      	sub	sp, #8
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2b00      	cmp	r3, #0
 80044bc:	d101      	bne.n	80044c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80044be:	2301      	movs	r3, #1
 80044c0:	e046      	b.n	8004550 <HAL_UART_Init+0xa0>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	2288      	movs	r2, #136	; 0x88
 80044c6:	589b      	ldr	r3, [r3, r2]
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d107      	bne.n	80044dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2284      	movs	r2, #132	; 0x84
 80044d0:	2100      	movs	r1, #0
 80044d2:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	0018      	movs	r0, r3
 80044d8:	f7fc fcf2 	bl	8000ec0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2288      	movs	r2, #136	; 0x88
 80044e0:	2124      	movs	r1, #36	; 0x24
 80044e2:	5099      	str	r1, [r3, r2]

  __HAL_UART_DISABLE(huart);
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	681a      	ldr	r2, [r3, #0]
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	681b      	ldr	r3, [r3, #0]
 80044ee:	2101      	movs	r1, #1
 80044f0:	438a      	bics	r2, r1
 80044f2:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044f8:	2b00      	cmp	r3, #0
 80044fa:	d003      	beq.n	8004504 <HAL_UART_Init+0x54>
  {
    UART_AdvFeatureConfig(huart);
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	0018      	movs	r0, r3
 8004500:	f000 fb82 	bl	8004c08 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0018      	movs	r0, r3
 8004508:	f000 f828 	bl	800455c <UART_SetConfig>
 800450c:	0003      	movs	r3, r0
 800450e:	2b01      	cmp	r3, #1
 8004510:	d101      	bne.n	8004516 <HAL_UART_Init+0x66>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e01c      	b.n	8004550 <HAL_UART_Init+0xa0>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	685a      	ldr	r2, [r3, #4]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	490d      	ldr	r1, [pc, #52]	; (8004558 <HAL_UART_Init+0xa8>)
 8004522:	400a      	ands	r2, r1
 8004524:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	689a      	ldr	r2, [r3, #8]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	212a      	movs	r1, #42	; 0x2a
 8004532:	438a      	bics	r2, r1
 8004534:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	2101      	movs	r1, #1
 8004542:	430a      	orrs	r2, r1
 8004544:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8004546:	687b      	ldr	r3, [r7, #4]
 8004548:	0018      	movs	r0, r3
 800454a:	f000 fc11 	bl	8004d70 <UART_CheckIdleState>
 800454e:	0003      	movs	r3, r0
}
 8004550:	0018      	movs	r0, r3
 8004552:	46bd      	mov	sp, r7
 8004554:	b002      	add	sp, #8
 8004556:	bd80      	pop	{r7, pc}
 8004558:	ffffb7ff 	.word	0xffffb7ff

0800455c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800455c:	b5b0      	push	{r4, r5, r7, lr}
 800455e:	b090      	sub	sp, #64	; 0x40
 8004560:	af00      	add	r7, sp, #0
 8004562:	6278      	str	r0, [r7, #36]	; 0x24
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8004564:	231a      	movs	r3, #26
 8004566:	2220      	movs	r2, #32
 8004568:	189b      	adds	r3, r3, r2
 800456a:	19db      	adds	r3, r3, r7
 800456c:	2200      	movs	r2, #0
 800456e:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8004570:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004572:	689a      	ldr	r2, [r3, #8]
 8004574:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004576:	691b      	ldr	r3, [r3, #16]
 8004578:	431a      	orrs	r2, r3
 800457a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	431a      	orrs	r2, r3
 8004580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004582:	69db      	ldr	r3, [r3, #28]
 8004584:	4313      	orrs	r3, r2
 8004586:	63fb      	str	r3, [r7, #60]	; 0x3c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004588:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	4ac1      	ldr	r2, [pc, #772]	; (8004894 <UART_SetConfig+0x338>)
 8004590:	4013      	ands	r3, r2
 8004592:	0019      	movs	r1, r3
 8004594:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800459a:	430b      	orrs	r3, r1
 800459c:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800459e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	685b      	ldr	r3, [r3, #4]
 80045a4:	4abc      	ldr	r2, [pc, #752]	; (8004898 <UART_SetConfig+0x33c>)
 80045a6:	4013      	ands	r3, r2
 80045a8:	0018      	movs	r0, r3
 80045aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ac:	68d9      	ldr	r1, [r3, #12]
 80045ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045b0:	681a      	ldr	r2, [r3, #0]
 80045b2:	0003      	movs	r3, r0
 80045b4:	430b      	orrs	r3, r1
 80045b6:	6053      	str	r3, [r2, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80045b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ba:	699b      	ldr	r3, [r3, #24]
 80045bc:	63fb      	str	r3, [r7, #60]	; 0x3c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80045be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045c0:	681b      	ldr	r3, [r3, #0]
 80045c2:	4ab6      	ldr	r2, [pc, #728]	; (800489c <UART_SetConfig+0x340>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d009      	beq.n	80045dc <UART_SetConfig+0x80>
 80045c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	4ab4      	ldr	r2, [pc, #720]	; (80048a0 <UART_SetConfig+0x344>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d004      	beq.n	80045dc <UART_SetConfig+0x80>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80045d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045d4:	6a1b      	ldr	r3, [r3, #32]
 80045d6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80045d8:	4313      	orrs	r3, r2
 80045da:	63fb      	str	r3, [r7, #60]	; 0x3c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80045dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	689b      	ldr	r3, [r3, #8]
 80045e2:	4ab0      	ldr	r2, [pc, #704]	; (80048a4 <UART_SetConfig+0x348>)
 80045e4:	4013      	ands	r3, r2
 80045e6:	0019      	movs	r1, r3
 80045e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80045ee:	430b      	orrs	r3, r1
 80045f0:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045f8:	220f      	movs	r2, #15
 80045fa:	4393      	bics	r3, r2
 80045fc:	0018      	movs	r0, r3
 80045fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004600:	6a59      	ldr	r1, [r3, #36]	; 0x24
 8004602:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004604:	681a      	ldr	r2, [r3, #0]
 8004606:	0003      	movs	r3, r0
 8004608:	430b      	orrs	r3, r1
 800460a:	62d3      	str	r3, [r2, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800460c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800460e:	681b      	ldr	r3, [r3, #0]
 8004610:	4aa5      	ldr	r2, [pc, #660]	; (80048a8 <UART_SetConfig+0x34c>)
 8004612:	4293      	cmp	r3, r2
 8004614:	d131      	bne.n	800467a <UART_SetConfig+0x11e>
 8004616:	4ba5      	ldr	r3, [pc, #660]	; (80048ac <UART_SetConfig+0x350>)
 8004618:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800461a:	2203      	movs	r2, #3
 800461c:	4013      	ands	r3, r2
 800461e:	2b03      	cmp	r3, #3
 8004620:	d01d      	beq.n	800465e <UART_SetConfig+0x102>
 8004622:	d823      	bhi.n	800466c <UART_SetConfig+0x110>
 8004624:	2b02      	cmp	r3, #2
 8004626:	d00c      	beq.n	8004642 <UART_SetConfig+0xe6>
 8004628:	d820      	bhi.n	800466c <UART_SetConfig+0x110>
 800462a:	2b00      	cmp	r3, #0
 800462c:	d002      	beq.n	8004634 <UART_SetConfig+0xd8>
 800462e:	2b01      	cmp	r3, #1
 8004630:	d00e      	beq.n	8004650 <UART_SetConfig+0xf4>
 8004632:	e01b      	b.n	800466c <UART_SetConfig+0x110>
 8004634:	231b      	movs	r3, #27
 8004636:	2220      	movs	r2, #32
 8004638:	189b      	adds	r3, r3, r2
 800463a:	19db      	adds	r3, r3, r7
 800463c:	2200      	movs	r2, #0
 800463e:	701a      	strb	r2, [r3, #0]
 8004640:	e154      	b.n	80048ec <UART_SetConfig+0x390>
 8004642:	231b      	movs	r3, #27
 8004644:	2220      	movs	r2, #32
 8004646:	189b      	adds	r3, r3, r2
 8004648:	19db      	adds	r3, r3, r7
 800464a:	2202      	movs	r2, #2
 800464c:	701a      	strb	r2, [r3, #0]
 800464e:	e14d      	b.n	80048ec <UART_SetConfig+0x390>
 8004650:	231b      	movs	r3, #27
 8004652:	2220      	movs	r2, #32
 8004654:	189b      	adds	r3, r3, r2
 8004656:	19db      	adds	r3, r3, r7
 8004658:	2204      	movs	r2, #4
 800465a:	701a      	strb	r2, [r3, #0]
 800465c:	e146      	b.n	80048ec <UART_SetConfig+0x390>
 800465e:	231b      	movs	r3, #27
 8004660:	2220      	movs	r2, #32
 8004662:	189b      	adds	r3, r3, r2
 8004664:	19db      	adds	r3, r3, r7
 8004666:	2208      	movs	r2, #8
 8004668:	701a      	strb	r2, [r3, #0]
 800466a:	e13f      	b.n	80048ec <UART_SetConfig+0x390>
 800466c:	231b      	movs	r3, #27
 800466e:	2220      	movs	r2, #32
 8004670:	189b      	adds	r3, r3, r2
 8004672:	19db      	adds	r3, r3, r7
 8004674:	2210      	movs	r2, #16
 8004676:	701a      	strb	r2, [r3, #0]
 8004678:	e138      	b.n	80048ec <UART_SetConfig+0x390>
 800467a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800467c:	681b      	ldr	r3, [r3, #0]
 800467e:	4a8c      	ldr	r2, [pc, #560]	; (80048b0 <UART_SetConfig+0x354>)
 8004680:	4293      	cmp	r3, r2
 8004682:	d131      	bne.n	80046e8 <UART_SetConfig+0x18c>
 8004684:	4b89      	ldr	r3, [pc, #548]	; (80048ac <UART_SetConfig+0x350>)
 8004686:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004688:	220c      	movs	r2, #12
 800468a:	4013      	ands	r3, r2
 800468c:	2b0c      	cmp	r3, #12
 800468e:	d01d      	beq.n	80046cc <UART_SetConfig+0x170>
 8004690:	d823      	bhi.n	80046da <UART_SetConfig+0x17e>
 8004692:	2b08      	cmp	r3, #8
 8004694:	d00c      	beq.n	80046b0 <UART_SetConfig+0x154>
 8004696:	d820      	bhi.n	80046da <UART_SetConfig+0x17e>
 8004698:	2b00      	cmp	r3, #0
 800469a:	d002      	beq.n	80046a2 <UART_SetConfig+0x146>
 800469c:	2b04      	cmp	r3, #4
 800469e:	d00e      	beq.n	80046be <UART_SetConfig+0x162>
 80046a0:	e01b      	b.n	80046da <UART_SetConfig+0x17e>
 80046a2:	231b      	movs	r3, #27
 80046a4:	2220      	movs	r2, #32
 80046a6:	189b      	adds	r3, r3, r2
 80046a8:	19db      	adds	r3, r3, r7
 80046aa:	2200      	movs	r2, #0
 80046ac:	701a      	strb	r2, [r3, #0]
 80046ae:	e11d      	b.n	80048ec <UART_SetConfig+0x390>
 80046b0:	231b      	movs	r3, #27
 80046b2:	2220      	movs	r2, #32
 80046b4:	189b      	adds	r3, r3, r2
 80046b6:	19db      	adds	r3, r3, r7
 80046b8:	2202      	movs	r2, #2
 80046ba:	701a      	strb	r2, [r3, #0]
 80046bc:	e116      	b.n	80048ec <UART_SetConfig+0x390>
 80046be:	231b      	movs	r3, #27
 80046c0:	2220      	movs	r2, #32
 80046c2:	189b      	adds	r3, r3, r2
 80046c4:	19db      	adds	r3, r3, r7
 80046c6:	2204      	movs	r2, #4
 80046c8:	701a      	strb	r2, [r3, #0]
 80046ca:	e10f      	b.n	80048ec <UART_SetConfig+0x390>
 80046cc:	231b      	movs	r3, #27
 80046ce:	2220      	movs	r2, #32
 80046d0:	189b      	adds	r3, r3, r2
 80046d2:	19db      	adds	r3, r3, r7
 80046d4:	2208      	movs	r2, #8
 80046d6:	701a      	strb	r2, [r3, #0]
 80046d8:	e108      	b.n	80048ec <UART_SetConfig+0x390>
 80046da:	231b      	movs	r3, #27
 80046dc:	2220      	movs	r2, #32
 80046de:	189b      	adds	r3, r3, r2
 80046e0:	19db      	adds	r3, r3, r7
 80046e2:	2210      	movs	r2, #16
 80046e4:	701a      	strb	r2, [r3, #0]
 80046e6:	e101      	b.n	80048ec <UART_SetConfig+0x390>
 80046e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a71      	ldr	r2, [pc, #452]	; (80048b4 <UART_SetConfig+0x358>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d131      	bne.n	8004756 <UART_SetConfig+0x1fa>
 80046f2:	4b6e      	ldr	r3, [pc, #440]	; (80048ac <UART_SetConfig+0x350>)
 80046f4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046f6:	2230      	movs	r2, #48	; 0x30
 80046f8:	4013      	ands	r3, r2
 80046fa:	2b30      	cmp	r3, #48	; 0x30
 80046fc:	d01d      	beq.n	800473a <UART_SetConfig+0x1de>
 80046fe:	d823      	bhi.n	8004748 <UART_SetConfig+0x1ec>
 8004700:	2b20      	cmp	r3, #32
 8004702:	d00c      	beq.n	800471e <UART_SetConfig+0x1c2>
 8004704:	d820      	bhi.n	8004748 <UART_SetConfig+0x1ec>
 8004706:	2b00      	cmp	r3, #0
 8004708:	d002      	beq.n	8004710 <UART_SetConfig+0x1b4>
 800470a:	2b10      	cmp	r3, #16
 800470c:	d00e      	beq.n	800472c <UART_SetConfig+0x1d0>
 800470e:	e01b      	b.n	8004748 <UART_SetConfig+0x1ec>
 8004710:	231b      	movs	r3, #27
 8004712:	2220      	movs	r2, #32
 8004714:	189b      	adds	r3, r3, r2
 8004716:	19db      	adds	r3, r3, r7
 8004718:	2200      	movs	r2, #0
 800471a:	701a      	strb	r2, [r3, #0]
 800471c:	e0e6      	b.n	80048ec <UART_SetConfig+0x390>
 800471e:	231b      	movs	r3, #27
 8004720:	2220      	movs	r2, #32
 8004722:	189b      	adds	r3, r3, r2
 8004724:	19db      	adds	r3, r3, r7
 8004726:	2202      	movs	r2, #2
 8004728:	701a      	strb	r2, [r3, #0]
 800472a:	e0df      	b.n	80048ec <UART_SetConfig+0x390>
 800472c:	231b      	movs	r3, #27
 800472e:	2220      	movs	r2, #32
 8004730:	189b      	adds	r3, r3, r2
 8004732:	19db      	adds	r3, r3, r7
 8004734:	2204      	movs	r2, #4
 8004736:	701a      	strb	r2, [r3, #0]
 8004738:	e0d8      	b.n	80048ec <UART_SetConfig+0x390>
 800473a:	231b      	movs	r3, #27
 800473c:	2220      	movs	r2, #32
 800473e:	189b      	adds	r3, r3, r2
 8004740:	19db      	adds	r3, r3, r7
 8004742:	2208      	movs	r2, #8
 8004744:	701a      	strb	r2, [r3, #0]
 8004746:	e0d1      	b.n	80048ec <UART_SetConfig+0x390>
 8004748:	231b      	movs	r3, #27
 800474a:	2220      	movs	r2, #32
 800474c:	189b      	adds	r3, r3, r2
 800474e:	19db      	adds	r3, r3, r7
 8004750:	2210      	movs	r2, #16
 8004752:	701a      	strb	r2, [r3, #0]
 8004754:	e0ca      	b.n	80048ec <UART_SetConfig+0x390>
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a57      	ldr	r2, [pc, #348]	; (80048b8 <UART_SetConfig+0x35c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d106      	bne.n	800476e <UART_SetConfig+0x212>
 8004760:	231b      	movs	r3, #27
 8004762:	2220      	movs	r2, #32
 8004764:	189b      	adds	r3, r3, r2
 8004766:	19db      	adds	r3, r3, r7
 8004768:	2200      	movs	r2, #0
 800476a:	701a      	strb	r2, [r3, #0]
 800476c:	e0be      	b.n	80048ec <UART_SetConfig+0x390>
 800476e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	4a52      	ldr	r2, [pc, #328]	; (80048bc <UART_SetConfig+0x360>)
 8004774:	4293      	cmp	r3, r2
 8004776:	d106      	bne.n	8004786 <UART_SetConfig+0x22a>
 8004778:	231b      	movs	r3, #27
 800477a:	2220      	movs	r2, #32
 800477c:	189b      	adds	r3, r3, r2
 800477e:	19db      	adds	r3, r3, r7
 8004780:	2200      	movs	r2, #0
 8004782:	701a      	strb	r2, [r3, #0]
 8004784:	e0b2      	b.n	80048ec <UART_SetConfig+0x390>
 8004786:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	4a4d      	ldr	r2, [pc, #308]	; (80048c0 <UART_SetConfig+0x364>)
 800478c:	4293      	cmp	r3, r2
 800478e:	d106      	bne.n	800479e <UART_SetConfig+0x242>
 8004790:	231b      	movs	r3, #27
 8004792:	2220      	movs	r2, #32
 8004794:	189b      	adds	r3, r3, r2
 8004796:	19db      	adds	r3, r3, r7
 8004798:	2200      	movs	r2, #0
 800479a:	701a      	strb	r2, [r3, #0]
 800479c:	e0a6      	b.n	80048ec <UART_SetConfig+0x390>
 800479e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4a3e      	ldr	r2, [pc, #248]	; (800489c <UART_SetConfig+0x340>)
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d13e      	bne.n	8004826 <UART_SetConfig+0x2ca>
 80047a8:	4b40      	ldr	r3, [pc, #256]	; (80048ac <UART_SetConfig+0x350>)
 80047aa:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80047ac:	23c0      	movs	r3, #192	; 0xc0
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	4013      	ands	r3, r2
 80047b2:	22c0      	movs	r2, #192	; 0xc0
 80047b4:	0112      	lsls	r2, r2, #4
 80047b6:	4293      	cmp	r3, r2
 80047b8:	d027      	beq.n	800480a <UART_SetConfig+0x2ae>
 80047ba:	22c0      	movs	r2, #192	; 0xc0
 80047bc:	0112      	lsls	r2, r2, #4
 80047be:	4293      	cmp	r3, r2
 80047c0:	d82a      	bhi.n	8004818 <UART_SetConfig+0x2bc>
 80047c2:	2280      	movs	r2, #128	; 0x80
 80047c4:	0112      	lsls	r2, r2, #4
 80047c6:	4293      	cmp	r3, r2
 80047c8:	d011      	beq.n	80047ee <UART_SetConfig+0x292>
 80047ca:	2280      	movs	r2, #128	; 0x80
 80047cc:	0112      	lsls	r2, r2, #4
 80047ce:	4293      	cmp	r3, r2
 80047d0:	d822      	bhi.n	8004818 <UART_SetConfig+0x2bc>
 80047d2:	2b00      	cmp	r3, #0
 80047d4:	d004      	beq.n	80047e0 <UART_SetConfig+0x284>
 80047d6:	2280      	movs	r2, #128	; 0x80
 80047d8:	00d2      	lsls	r2, r2, #3
 80047da:	4293      	cmp	r3, r2
 80047dc:	d00e      	beq.n	80047fc <UART_SetConfig+0x2a0>
 80047de:	e01b      	b.n	8004818 <UART_SetConfig+0x2bc>
 80047e0:	231b      	movs	r3, #27
 80047e2:	2220      	movs	r2, #32
 80047e4:	189b      	adds	r3, r3, r2
 80047e6:	19db      	adds	r3, r3, r7
 80047e8:	2200      	movs	r2, #0
 80047ea:	701a      	strb	r2, [r3, #0]
 80047ec:	e07e      	b.n	80048ec <UART_SetConfig+0x390>
 80047ee:	231b      	movs	r3, #27
 80047f0:	2220      	movs	r2, #32
 80047f2:	189b      	adds	r3, r3, r2
 80047f4:	19db      	adds	r3, r3, r7
 80047f6:	2202      	movs	r2, #2
 80047f8:	701a      	strb	r2, [r3, #0]
 80047fa:	e077      	b.n	80048ec <UART_SetConfig+0x390>
 80047fc:	231b      	movs	r3, #27
 80047fe:	2220      	movs	r2, #32
 8004800:	189b      	adds	r3, r3, r2
 8004802:	19db      	adds	r3, r3, r7
 8004804:	2204      	movs	r2, #4
 8004806:	701a      	strb	r2, [r3, #0]
 8004808:	e070      	b.n	80048ec <UART_SetConfig+0x390>
 800480a:	231b      	movs	r3, #27
 800480c:	2220      	movs	r2, #32
 800480e:	189b      	adds	r3, r3, r2
 8004810:	19db      	adds	r3, r3, r7
 8004812:	2208      	movs	r2, #8
 8004814:	701a      	strb	r2, [r3, #0]
 8004816:	e069      	b.n	80048ec <UART_SetConfig+0x390>
 8004818:	231b      	movs	r3, #27
 800481a:	2220      	movs	r2, #32
 800481c:	189b      	adds	r3, r3, r2
 800481e:	19db      	adds	r3, r3, r7
 8004820:	2210      	movs	r2, #16
 8004822:	701a      	strb	r2, [r3, #0]
 8004824:	e062      	b.n	80048ec <UART_SetConfig+0x390>
 8004826:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004828:	681b      	ldr	r3, [r3, #0]
 800482a:	4a1d      	ldr	r2, [pc, #116]	; (80048a0 <UART_SetConfig+0x344>)
 800482c:	4293      	cmp	r3, r2
 800482e:	d157      	bne.n	80048e0 <UART_SetConfig+0x384>
 8004830:	4b1e      	ldr	r3, [pc, #120]	; (80048ac <UART_SetConfig+0x350>)
 8004832:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8004834:	23c0      	movs	r3, #192	; 0xc0
 8004836:	009b      	lsls	r3, r3, #2
 8004838:	4013      	ands	r3, r2
 800483a:	22c0      	movs	r2, #192	; 0xc0
 800483c:	0092      	lsls	r2, r2, #2
 800483e:	4293      	cmp	r3, r2
 8004840:	d040      	beq.n	80048c4 <UART_SetConfig+0x368>
 8004842:	22c0      	movs	r2, #192	; 0xc0
 8004844:	0092      	lsls	r2, r2, #2
 8004846:	4293      	cmp	r3, r2
 8004848:	d843      	bhi.n	80048d2 <UART_SetConfig+0x376>
 800484a:	2280      	movs	r2, #128	; 0x80
 800484c:	0092      	lsls	r2, r2, #2
 800484e:	4293      	cmp	r3, r2
 8004850:	d011      	beq.n	8004876 <UART_SetConfig+0x31a>
 8004852:	2280      	movs	r2, #128	; 0x80
 8004854:	0092      	lsls	r2, r2, #2
 8004856:	4293      	cmp	r3, r2
 8004858:	d83b      	bhi.n	80048d2 <UART_SetConfig+0x376>
 800485a:	2b00      	cmp	r3, #0
 800485c:	d004      	beq.n	8004868 <UART_SetConfig+0x30c>
 800485e:	2280      	movs	r2, #128	; 0x80
 8004860:	0052      	lsls	r2, r2, #1
 8004862:	4293      	cmp	r3, r2
 8004864:	d00e      	beq.n	8004884 <UART_SetConfig+0x328>
 8004866:	e034      	b.n	80048d2 <UART_SetConfig+0x376>
 8004868:	231b      	movs	r3, #27
 800486a:	2220      	movs	r2, #32
 800486c:	189b      	adds	r3, r3, r2
 800486e:	19db      	adds	r3, r3, r7
 8004870:	2200      	movs	r2, #0
 8004872:	701a      	strb	r2, [r3, #0]
 8004874:	e03a      	b.n	80048ec <UART_SetConfig+0x390>
 8004876:	231b      	movs	r3, #27
 8004878:	2220      	movs	r2, #32
 800487a:	189b      	adds	r3, r3, r2
 800487c:	19db      	adds	r3, r3, r7
 800487e:	2202      	movs	r2, #2
 8004880:	701a      	strb	r2, [r3, #0]
 8004882:	e033      	b.n	80048ec <UART_SetConfig+0x390>
 8004884:	231b      	movs	r3, #27
 8004886:	2220      	movs	r2, #32
 8004888:	189b      	adds	r3, r3, r2
 800488a:	19db      	adds	r3, r3, r7
 800488c:	2204      	movs	r2, #4
 800488e:	701a      	strb	r2, [r3, #0]
 8004890:	e02c      	b.n	80048ec <UART_SetConfig+0x390>
 8004892:	46c0      	nop			; (mov r8, r8)
 8004894:	cfff69f3 	.word	0xcfff69f3
 8004898:	ffffcfff 	.word	0xffffcfff
 800489c:	40008000 	.word	0x40008000
 80048a0:	40008400 	.word	0x40008400
 80048a4:	11fff4ff 	.word	0x11fff4ff
 80048a8:	40013800 	.word	0x40013800
 80048ac:	40021000 	.word	0x40021000
 80048b0:	40004400 	.word	0x40004400
 80048b4:	40004800 	.word	0x40004800
 80048b8:	40004c00 	.word	0x40004c00
 80048bc:	40005000 	.word	0x40005000
 80048c0:	40013c00 	.word	0x40013c00
 80048c4:	231b      	movs	r3, #27
 80048c6:	2220      	movs	r2, #32
 80048c8:	189b      	adds	r3, r3, r2
 80048ca:	19db      	adds	r3, r3, r7
 80048cc:	2208      	movs	r2, #8
 80048ce:	701a      	strb	r2, [r3, #0]
 80048d0:	e00c      	b.n	80048ec <UART_SetConfig+0x390>
 80048d2:	231b      	movs	r3, #27
 80048d4:	2220      	movs	r2, #32
 80048d6:	189b      	adds	r3, r3, r2
 80048d8:	19db      	adds	r3, r3, r7
 80048da:	2210      	movs	r2, #16
 80048dc:	701a      	strb	r2, [r3, #0]
 80048de:	e005      	b.n	80048ec <UART_SetConfig+0x390>
 80048e0:	231b      	movs	r3, #27
 80048e2:	2220      	movs	r2, #32
 80048e4:	189b      	adds	r3, r3, r2
 80048e6:	19db      	adds	r3, r3, r7
 80048e8:	2210      	movs	r2, #16
 80048ea:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80048ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	4ac1      	ldr	r2, [pc, #772]	; (8004bf8 <UART_SetConfig+0x69c>)
 80048f2:	4293      	cmp	r3, r2
 80048f4:	d005      	beq.n	8004902 <UART_SetConfig+0x3a6>
 80048f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80048f8:	681b      	ldr	r3, [r3, #0]
 80048fa:	4ac0      	ldr	r2, [pc, #768]	; (8004bfc <UART_SetConfig+0x6a0>)
 80048fc:	4293      	cmp	r3, r2
 80048fe:	d000      	beq.n	8004902 <UART_SetConfig+0x3a6>
 8004900:	e093      	b.n	8004a2a <UART_SetConfig+0x4ce>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8004902:	231b      	movs	r3, #27
 8004904:	2220      	movs	r2, #32
 8004906:	189b      	adds	r3, r3, r2
 8004908:	19db      	adds	r3, r3, r7
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	2b08      	cmp	r3, #8
 800490e:	d015      	beq.n	800493c <UART_SetConfig+0x3e0>
 8004910:	dc18      	bgt.n	8004944 <UART_SetConfig+0x3e8>
 8004912:	2b04      	cmp	r3, #4
 8004914:	d00d      	beq.n	8004932 <UART_SetConfig+0x3d6>
 8004916:	dc15      	bgt.n	8004944 <UART_SetConfig+0x3e8>
 8004918:	2b00      	cmp	r3, #0
 800491a:	d002      	beq.n	8004922 <UART_SetConfig+0x3c6>
 800491c:	2b02      	cmp	r3, #2
 800491e:	d005      	beq.n	800492c <UART_SetConfig+0x3d0>
 8004920:	e010      	b.n	8004944 <UART_SetConfig+0x3e8>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004922:	f7fe fac7 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8004926:	0003      	movs	r3, r0
 8004928:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800492a:	e014      	b.n	8004956 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800492c:	4bb4      	ldr	r3, [pc, #720]	; (8004c00 <UART_SetConfig+0x6a4>)
 800492e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004930:	e011      	b.n	8004956 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004932:	f7fe fa33 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8004936:	0003      	movs	r3, r0
 8004938:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 800493a:	e00c      	b.n	8004956 <UART_SetConfig+0x3fa>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800493c:	2380      	movs	r3, #128	; 0x80
 800493e:	021b      	lsls	r3, r3, #8
 8004940:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004942:	e008      	b.n	8004956 <UART_SetConfig+0x3fa>
      default:
        pclk = 0U;
 8004944:	2300      	movs	r3, #0
 8004946:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004948:	231a      	movs	r3, #26
 800494a:	2220      	movs	r2, #32
 800494c:	189b      	adds	r3, r3, r2
 800494e:	19db      	adds	r3, r3, r7
 8004950:	2201      	movs	r2, #1
 8004952:	701a      	strb	r2, [r3, #0]
        break;
 8004954:	46c0      	nop			; (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8004956:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004958:	2b00      	cmp	r3, #0
 800495a:	d100      	bne.n	800495e <UART_SetConfig+0x402>
 800495c:	e135      	b.n	8004bca <UART_SetConfig+0x66e>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800495e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004960:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004962:	4ba8      	ldr	r3, [pc, #672]	; (8004c04 <UART_SetConfig+0x6a8>)
 8004964:	0052      	lsls	r2, r2, #1
 8004966:	5ad3      	ldrh	r3, [r2, r3]
 8004968:	0019      	movs	r1, r3
 800496a:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800496c:	f7fb fbca 	bl	8000104 <__udivsi3>
 8004970:	0003      	movs	r3, r0
 8004972:	62bb      	str	r3, [r7, #40]	; 0x28

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8004974:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004976:	685a      	ldr	r2, [r3, #4]
 8004978:	0013      	movs	r3, r2
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	189b      	adds	r3, r3, r2
 800497e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004980:	429a      	cmp	r2, r3
 8004982:	d305      	bcc.n	8004990 <UART_SetConfig+0x434>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8004984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004986:	685b      	ldr	r3, [r3, #4]
 8004988:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800498a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800498c:	429a      	cmp	r2, r3
 800498e:	d906      	bls.n	800499e <UART_SetConfig+0x442>
      {
        ret = HAL_ERROR;
 8004990:	231a      	movs	r3, #26
 8004992:	2220      	movs	r2, #32
 8004994:	189b      	adds	r3, r3, r2
 8004996:	19db      	adds	r3, r3, r7
 8004998:	2201      	movs	r2, #1
 800499a:	701a      	strb	r2, [r3, #0]
 800499c:	e044      	b.n	8004a28 <UART_SetConfig+0x4cc>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	61bb      	str	r3, [r7, #24]
 80049a2:	2300      	movs	r3, #0
 80049a4:	61fb      	str	r3, [r7, #28]
 80049a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049a8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80049aa:	4b96      	ldr	r3, [pc, #600]	; (8004c04 <UART_SetConfig+0x6a8>)
 80049ac:	0052      	lsls	r2, r2, #1
 80049ae:	5ad3      	ldrh	r3, [r2, r3]
 80049b0:	613b      	str	r3, [r7, #16]
 80049b2:	2300      	movs	r3, #0
 80049b4:	617b      	str	r3, [r7, #20]
 80049b6:	693a      	ldr	r2, [r7, #16]
 80049b8:	697b      	ldr	r3, [r7, #20]
 80049ba:	69b8      	ldr	r0, [r7, #24]
 80049bc:	69f9      	ldr	r1, [r7, #28]
 80049be:	f7fb fd17 	bl	80003f0 <__aeabi_uldivmod>
 80049c2:	0002      	movs	r2, r0
 80049c4:	000b      	movs	r3, r1
 80049c6:	0e11      	lsrs	r1, r2, #24
 80049c8:	021d      	lsls	r5, r3, #8
 80049ca:	430d      	orrs	r5, r1
 80049cc:	0214      	lsls	r4, r2, #8
 80049ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	085b      	lsrs	r3, r3, #1
 80049d4:	60bb      	str	r3, [r7, #8]
 80049d6:	2300      	movs	r3, #0
 80049d8:	60fb      	str	r3, [r7, #12]
 80049da:	68b8      	ldr	r0, [r7, #8]
 80049dc:	68f9      	ldr	r1, [r7, #12]
 80049de:	1900      	adds	r0, r0, r4
 80049e0:	4169      	adcs	r1, r5
 80049e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	603b      	str	r3, [r7, #0]
 80049e8:	2300      	movs	r3, #0
 80049ea:	607b      	str	r3, [r7, #4]
 80049ec:	683a      	ldr	r2, [r7, #0]
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	f7fb fcfe 	bl	80003f0 <__aeabi_uldivmod>
 80049f4:	0002      	movs	r2, r0
 80049f6:	000b      	movs	r3, r1
 80049f8:	0013      	movs	r3, r2
 80049fa:	633b      	str	r3, [r7, #48]	; 0x30
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80049fc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049fe:	23c0      	movs	r3, #192	; 0xc0
 8004a00:	009b      	lsls	r3, r3, #2
 8004a02:	429a      	cmp	r2, r3
 8004a04:	d309      	bcc.n	8004a1a <UART_SetConfig+0x4be>
 8004a06:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a08:	2380      	movs	r3, #128	; 0x80
 8004a0a:	035b      	lsls	r3, r3, #13
 8004a0c:	429a      	cmp	r2, r3
 8004a0e:	d204      	bcs.n	8004a1a <UART_SetConfig+0x4be>
        {
          huart->Instance->BRR = usartdiv;
 8004a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004a16:	60da      	str	r2, [r3, #12]
 8004a18:	e006      	b.n	8004a28 <UART_SetConfig+0x4cc>
        }
        else
        {
          ret = HAL_ERROR;
 8004a1a:	231a      	movs	r3, #26
 8004a1c:	2220      	movs	r2, #32
 8004a1e:	189b      	adds	r3, r3, r2
 8004a20:	19db      	adds	r3, r3, r7
 8004a22:	2201      	movs	r2, #1
 8004a24:	701a      	strb	r2, [r3, #0]
    if (pclk != 0U)
 8004a26:	e0d0      	b.n	8004bca <UART_SetConfig+0x66e>
 8004a28:	e0cf      	b.n	8004bca <UART_SetConfig+0x66e>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004a2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a2c:	69da      	ldr	r2, [r3, #28]
 8004a2e:	2380      	movs	r3, #128	; 0x80
 8004a30:	021b      	lsls	r3, r3, #8
 8004a32:	429a      	cmp	r2, r3
 8004a34:	d000      	beq.n	8004a38 <UART_SetConfig+0x4dc>
 8004a36:	e070      	b.n	8004b1a <UART_SetConfig+0x5be>
  {
    switch (clocksource)
 8004a38:	231b      	movs	r3, #27
 8004a3a:	2220      	movs	r2, #32
 8004a3c:	189b      	adds	r3, r3, r2
 8004a3e:	19db      	adds	r3, r3, r7
 8004a40:	781b      	ldrb	r3, [r3, #0]
 8004a42:	2b08      	cmp	r3, #8
 8004a44:	d015      	beq.n	8004a72 <UART_SetConfig+0x516>
 8004a46:	dc18      	bgt.n	8004a7a <UART_SetConfig+0x51e>
 8004a48:	2b04      	cmp	r3, #4
 8004a4a:	d00d      	beq.n	8004a68 <UART_SetConfig+0x50c>
 8004a4c:	dc15      	bgt.n	8004a7a <UART_SetConfig+0x51e>
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d002      	beq.n	8004a58 <UART_SetConfig+0x4fc>
 8004a52:	2b02      	cmp	r3, #2
 8004a54:	d005      	beq.n	8004a62 <UART_SetConfig+0x506>
 8004a56:	e010      	b.n	8004a7a <UART_SetConfig+0x51e>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004a58:	f7fe fa2c 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8004a5c:	0003      	movs	r3, r0
 8004a5e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a60:	e014      	b.n	8004a8c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004a62:	4b67      	ldr	r3, [pc, #412]	; (8004c00 <UART_SetConfig+0x6a4>)
 8004a64:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a66:	e011      	b.n	8004a8c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004a68:	f7fe f998 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8004a6c:	0003      	movs	r3, r0
 8004a6e:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a70:	e00c      	b.n	8004a8c <UART_SetConfig+0x530>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004a72:	2380      	movs	r3, #128	; 0x80
 8004a74:	021b      	lsls	r3, r3, #8
 8004a76:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004a78:	e008      	b.n	8004a8c <UART_SetConfig+0x530>
      default:
        pclk = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004a7e:	231a      	movs	r3, #26
 8004a80:	2220      	movs	r2, #32
 8004a82:	189b      	adds	r3, r3, r2
 8004a84:	19db      	adds	r3, r3, r7
 8004a86:	2201      	movs	r2, #1
 8004a88:	701a      	strb	r2, [r3, #0]
        break;
 8004a8a:	46c0      	nop			; (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8004a8c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d100      	bne.n	8004a94 <UART_SetConfig+0x538>
 8004a92:	e09a      	b.n	8004bca <UART_SetConfig+0x66e>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004a94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a96:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004a98:	4b5a      	ldr	r3, [pc, #360]	; (8004c04 <UART_SetConfig+0x6a8>)
 8004a9a:	0052      	lsls	r2, r2, #1
 8004a9c:	5ad3      	ldrh	r3, [r2, r3]
 8004a9e:	0019      	movs	r1, r3
 8004aa0:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004aa2:	f7fb fb2f 	bl	8000104 <__udivsi3>
 8004aa6:	0003      	movs	r3, r0
 8004aa8:	005a      	lsls	r2, r3, #1
 8004aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	085b      	lsrs	r3, r3, #1
 8004ab0:	18d2      	adds	r2, r2, r3
 8004ab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	0019      	movs	r1, r3
 8004ab8:	0010      	movs	r0, r2
 8004aba:	f7fb fb23 	bl	8000104 <__udivsi3>
 8004abe:	0003      	movs	r3, r0
 8004ac0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ac2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac4:	2b0f      	cmp	r3, #15
 8004ac6:	d921      	bls.n	8004b0c <UART_SetConfig+0x5b0>
 8004ac8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004aca:	2380      	movs	r3, #128	; 0x80
 8004acc:	025b      	lsls	r3, r3, #9
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d21c      	bcs.n	8004b0c <UART_SetConfig+0x5b0>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8004ad2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ad4:	b29a      	uxth	r2, r3
 8004ad6:	200e      	movs	r0, #14
 8004ad8:	2420      	movs	r4, #32
 8004ada:	1903      	adds	r3, r0, r4
 8004adc:	19db      	adds	r3, r3, r7
 8004ade:	210f      	movs	r1, #15
 8004ae0:	438a      	bics	r2, r1
 8004ae2:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	085b      	lsrs	r3, r3, #1
 8004ae8:	b29b      	uxth	r3, r3
 8004aea:	2207      	movs	r2, #7
 8004aec:	4013      	ands	r3, r2
 8004aee:	b299      	uxth	r1, r3
 8004af0:	1903      	adds	r3, r0, r4
 8004af2:	19db      	adds	r3, r3, r7
 8004af4:	1902      	adds	r2, r0, r4
 8004af6:	19d2      	adds	r2, r2, r7
 8004af8:	8812      	ldrh	r2, [r2, #0]
 8004afa:	430a      	orrs	r2, r1
 8004afc:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8004afe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	1902      	adds	r2, r0, r4
 8004b04:	19d2      	adds	r2, r2, r7
 8004b06:	8812      	ldrh	r2, [r2, #0]
 8004b08:	60da      	str	r2, [r3, #12]
 8004b0a:	e05e      	b.n	8004bca <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004b0c:	231a      	movs	r3, #26
 8004b0e:	2220      	movs	r2, #32
 8004b10:	189b      	adds	r3, r3, r2
 8004b12:	19db      	adds	r3, r3, r7
 8004b14:	2201      	movs	r2, #1
 8004b16:	701a      	strb	r2, [r3, #0]
 8004b18:	e057      	b.n	8004bca <UART_SetConfig+0x66e>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004b1a:	231b      	movs	r3, #27
 8004b1c:	2220      	movs	r2, #32
 8004b1e:	189b      	adds	r3, r3, r2
 8004b20:	19db      	adds	r3, r3, r7
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b08      	cmp	r3, #8
 8004b26:	d015      	beq.n	8004b54 <UART_SetConfig+0x5f8>
 8004b28:	dc18      	bgt.n	8004b5c <UART_SetConfig+0x600>
 8004b2a:	2b04      	cmp	r3, #4
 8004b2c:	d00d      	beq.n	8004b4a <UART_SetConfig+0x5ee>
 8004b2e:	dc15      	bgt.n	8004b5c <UART_SetConfig+0x600>
 8004b30:	2b00      	cmp	r3, #0
 8004b32:	d002      	beq.n	8004b3a <UART_SetConfig+0x5de>
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d005      	beq.n	8004b44 <UART_SetConfig+0x5e8>
 8004b38:	e010      	b.n	8004b5c <UART_SetConfig+0x600>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004b3a:	f7fe f9bb 	bl	8002eb4 <HAL_RCC_GetPCLK1Freq>
 8004b3e:	0003      	movs	r3, r0
 8004b40:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b42:	e014      	b.n	8004b6e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004b44:	4b2e      	ldr	r3, [pc, #184]	; (8004c00 <UART_SetConfig+0x6a4>)
 8004b46:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b48:	e011      	b.n	8004b6e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004b4a:	f7fe f927 	bl	8002d9c <HAL_RCC_GetSysClockFreq>
 8004b4e:	0003      	movs	r3, r0
 8004b50:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b52:	e00c      	b.n	8004b6e <UART_SetConfig+0x612>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004b54:	2380      	movs	r3, #128	; 0x80
 8004b56:	021b      	lsls	r3, r3, #8
 8004b58:	637b      	str	r3, [r7, #52]	; 0x34
        break;
 8004b5a:	e008      	b.n	8004b6e <UART_SetConfig+0x612>
      default:
        pclk = 0U;
 8004b5c:	2300      	movs	r3, #0
 8004b5e:	637b      	str	r3, [r7, #52]	; 0x34
        ret = HAL_ERROR;
 8004b60:	231a      	movs	r3, #26
 8004b62:	2220      	movs	r2, #32
 8004b64:	189b      	adds	r3, r3, r2
 8004b66:	19db      	adds	r3, r3, r7
 8004b68:	2201      	movs	r2, #1
 8004b6a:	701a      	strb	r2, [r3, #0]
        break;
 8004b6c:	46c0      	nop			; (mov r8, r8)
    }

    if (pclk != 0U)
 8004b6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d02a      	beq.n	8004bca <UART_SetConfig+0x66e>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8004b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b76:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8004b78:	4b22      	ldr	r3, [pc, #136]	; (8004c04 <UART_SetConfig+0x6a8>)
 8004b7a:	0052      	lsls	r2, r2, #1
 8004b7c:	5ad3      	ldrh	r3, [r2, r3]
 8004b7e:	0019      	movs	r1, r3
 8004b80:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8004b82:	f7fb fabf 	bl	8000104 <__udivsi3>
 8004b86:	0003      	movs	r3, r0
 8004b88:	001a      	movs	r2, r3
 8004b8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b8c:	685b      	ldr	r3, [r3, #4]
 8004b8e:	085b      	lsrs	r3, r3, #1
 8004b90:	18d2      	adds	r2, r2, r3
 8004b92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b94:	685b      	ldr	r3, [r3, #4]
 8004b96:	0019      	movs	r1, r3
 8004b98:	0010      	movs	r0, r2
 8004b9a:	f7fb fab3 	bl	8000104 <__udivsi3>
 8004b9e:	0003      	movs	r3, r0
 8004ba0:	633b      	str	r3, [r7, #48]	; 0x30
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004ba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ba4:	2b0f      	cmp	r3, #15
 8004ba6:	d90a      	bls.n	8004bbe <UART_SetConfig+0x662>
 8004ba8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004baa:	2380      	movs	r3, #128	; 0x80
 8004bac:	025b      	lsls	r3, r3, #9
 8004bae:	429a      	cmp	r2, r3
 8004bb0:	d205      	bcs.n	8004bbe <UART_SetConfig+0x662>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8004bb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bb4:	b29a      	uxth	r2, r3
 8004bb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	60da      	str	r2, [r3, #12]
 8004bbc:	e005      	b.n	8004bca <UART_SetConfig+0x66e>
      }
      else
      {
        ret = HAL_ERROR;
 8004bbe:	231a      	movs	r3, #26
 8004bc0:	2220      	movs	r2, #32
 8004bc2:	189b      	adds	r3, r3, r2
 8004bc4:	19db      	adds	r3, r3, r7
 8004bc6:	2201      	movs	r2, #1
 8004bc8:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8004bca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bcc:	226a      	movs	r2, #106	; 0x6a
 8004bce:	2101      	movs	r1, #1
 8004bd0:	5299      	strh	r1, [r3, r2]
  huart->NbRxDataToProcess = 1;
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bd4:	2268      	movs	r2, #104	; 0x68
 8004bd6:	2101      	movs	r1, #1
 8004bd8:	5299      	strh	r1, [r3, r2]

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	2200      	movs	r2, #0
 8004bde:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8004be0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004be2:	2200      	movs	r2, #0
 8004be4:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8004be6:	231a      	movs	r3, #26
 8004be8:	2220      	movs	r2, #32
 8004bea:	189b      	adds	r3, r3, r2
 8004bec:	19db      	adds	r3, r3, r7
 8004bee:	781b      	ldrb	r3, [r3, #0]
}
 8004bf0:	0018      	movs	r0, r3
 8004bf2:	46bd      	mov	sp, r7
 8004bf4:	b010      	add	sp, #64	; 0x40
 8004bf6:	bdb0      	pop	{r4, r5, r7, pc}
 8004bf8:	40008000 	.word	0x40008000
 8004bfc:	40008400 	.word	0x40008400
 8004c00:	00f42400 	.word	0x00f42400
 8004c04:	080053c8 	.word	0x080053c8

08004c08 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
 8004c0e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c14:	2208      	movs	r2, #8
 8004c16:	4013      	ands	r3, r2
 8004c18:	d00b      	beq.n	8004c32 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	4a4a      	ldr	r2, [pc, #296]	; (8004d4c <UART_AdvFeatureConfig+0x144>)
 8004c22:	4013      	ands	r3, r2
 8004c24:	0019      	movs	r1, r3
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	430a      	orrs	r2, r1
 8004c30:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c36:	2201      	movs	r2, #1
 8004c38:	4013      	ands	r3, r2
 8004c3a:	d00b      	beq.n	8004c54 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	685b      	ldr	r3, [r3, #4]
 8004c42:	4a43      	ldr	r2, [pc, #268]	; (8004d50 <UART_AdvFeatureConfig+0x148>)
 8004c44:	4013      	ands	r3, r2
 8004c46:	0019      	movs	r1, r3
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	681b      	ldr	r3, [r3, #0]
 8004c50:	430a      	orrs	r2, r1
 8004c52:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c58:	2202      	movs	r2, #2
 8004c5a:	4013      	ands	r3, r2
 8004c5c:	d00b      	beq.n	8004c76 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	685b      	ldr	r3, [r3, #4]
 8004c64:	4a3b      	ldr	r2, [pc, #236]	; (8004d54 <UART_AdvFeatureConfig+0x14c>)
 8004c66:	4013      	ands	r3, r2
 8004c68:	0019      	movs	r1, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	430a      	orrs	r2, r1
 8004c74:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c7a:	2204      	movs	r2, #4
 8004c7c:	4013      	ands	r3, r2
 8004c7e:	d00b      	beq.n	8004c98 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	4a34      	ldr	r2, [pc, #208]	; (8004d58 <UART_AdvFeatureConfig+0x150>)
 8004c88:	4013      	ands	r3, r2
 8004c8a:	0019      	movs	r1, r3
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	430a      	orrs	r2, r1
 8004c96:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c9c:	2210      	movs	r2, #16
 8004c9e:	4013      	ands	r3, r2
 8004ca0:	d00b      	beq.n	8004cba <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4a2c      	ldr	r2, [pc, #176]	; (8004d5c <UART_AdvFeatureConfig+0x154>)
 8004caa:	4013      	ands	r3, r2
 8004cac:	0019      	movs	r1, r3
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	681b      	ldr	r3, [r3, #0]
 8004cb6:	430a      	orrs	r2, r1
 8004cb8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cbe:	2220      	movs	r2, #32
 8004cc0:	4013      	ands	r3, r2
 8004cc2:	d00b      	beq.n	8004cdc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	689b      	ldr	r3, [r3, #8]
 8004cca:	4a25      	ldr	r2, [pc, #148]	; (8004d60 <UART_AdvFeatureConfig+0x158>)
 8004ccc:	4013      	ands	r3, r2
 8004cce:	0019      	movs	r1, r3
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	430a      	orrs	r2, r1
 8004cda:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ce0:	2240      	movs	r2, #64	; 0x40
 8004ce2:	4013      	ands	r3, r2
 8004ce4:	d01d      	beq.n	8004d22 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	685b      	ldr	r3, [r3, #4]
 8004cec:	4a1d      	ldr	r2, [pc, #116]	; (8004d64 <UART_AdvFeatureConfig+0x15c>)
 8004cee:	4013      	ands	r3, r2
 8004cf0:	0019      	movs	r1, r3
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	430a      	orrs	r2, r1
 8004cfc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d02:	2380      	movs	r3, #128	; 0x80
 8004d04:	035b      	lsls	r3, r3, #13
 8004d06:	429a      	cmp	r2, r3
 8004d08:	d10b      	bne.n	8004d22 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	4a15      	ldr	r2, [pc, #84]	; (8004d68 <UART_AdvFeatureConfig+0x160>)
 8004d12:	4013      	ands	r3, r2
 8004d14:	0019      	movs	r1, r3
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	430a      	orrs	r2, r1
 8004d20:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d26:	2280      	movs	r2, #128	; 0x80
 8004d28:	4013      	ands	r3, r2
 8004d2a:	d00b      	beq.n	8004d44 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	4a0e      	ldr	r2, [pc, #56]	; (8004d6c <UART_AdvFeatureConfig+0x164>)
 8004d34:	4013      	ands	r3, r2
 8004d36:	0019      	movs	r1, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	681b      	ldr	r3, [r3, #0]
 8004d40:	430a      	orrs	r2, r1
 8004d42:	605a      	str	r2, [r3, #4]
  }
}
 8004d44:	46c0      	nop			; (mov r8, r8)
 8004d46:	46bd      	mov	sp, r7
 8004d48:	b002      	add	sp, #8
 8004d4a:	bd80      	pop	{r7, pc}
 8004d4c:	ffff7fff 	.word	0xffff7fff
 8004d50:	fffdffff 	.word	0xfffdffff
 8004d54:	fffeffff 	.word	0xfffeffff
 8004d58:	fffbffff 	.word	0xfffbffff
 8004d5c:	ffffefff 	.word	0xffffefff
 8004d60:	ffffdfff 	.word	0xffffdfff
 8004d64:	ffefffff 	.word	0xffefffff
 8004d68:	ff9fffff 	.word	0xff9fffff
 8004d6c:	fff7ffff 	.word	0xfff7ffff

08004d70 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b092      	sub	sp, #72	; 0x48
 8004d74:	af02      	add	r7, sp, #8
 8004d76:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2290      	movs	r2, #144	; 0x90
 8004d7c:	2100      	movs	r1, #0
 8004d7e:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004d80:	f7fc f9c0 	bl	8001104 <HAL_GetTick>
 8004d84:	0003      	movs	r3, r0
 8004d86:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	2208      	movs	r2, #8
 8004d90:	4013      	ands	r3, r2
 8004d92:	2b08      	cmp	r3, #8
 8004d94:	d12d      	bne.n	8004df2 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004d96:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004d98:	2280      	movs	r2, #128	; 0x80
 8004d9a:	0391      	lsls	r1, r2, #14
 8004d9c:	6878      	ldr	r0, [r7, #4]
 8004d9e:	4a47      	ldr	r2, [pc, #284]	; (8004ebc <UART_CheckIdleState+0x14c>)
 8004da0:	9200      	str	r2, [sp, #0]
 8004da2:	2200      	movs	r2, #0
 8004da4:	f000 f88e 	bl	8004ec4 <UART_WaitOnFlagUntilTimeout>
 8004da8:	1e03      	subs	r3, r0, #0
 8004daa:	d022      	beq.n	8004df2 <UART_CheckIdleState+0x82>
 */
__STATIC_FORCEINLINE uint32_t __get_PRIMASK(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004dac:	f3ef 8310 	mrs	r3, PRIMASK
 8004db0:	627b      	str	r3, [r7, #36]	; 0x24
  return(result);
 8004db2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 8004db4:	63bb      	str	r3, [r7, #56]	; 0x38
 8004db6:	2301      	movs	r3, #1
 8004db8:	62bb      	str	r3, [r7, #40]	; 0x28
  \details Assigns the given value to the Priority Mask Register.
  \param [in]    priMask  Priority Mask
 */
__STATIC_FORCEINLINE void __set_PRIMASK(uint32_t priMask)
{
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004dbc:	f383 8810 	msr	PRIMASK, r3
}
 8004dc0:	46c0      	nop			; (mov r8, r8)
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	681a      	ldr	r2, [r3, #0]
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	2180      	movs	r1, #128	; 0x80
 8004dce:	438a      	bics	r2, r1
 8004dd0:	601a      	str	r2, [r3, #0]
 8004dd2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004dd4:	62fb      	str	r3, [r7, #44]	; 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dd8:	f383 8810 	msr	PRIMASK, r3
}
 8004ddc:	46c0      	nop			; (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2288      	movs	r2, #136	; 0x88
 8004de2:	2120      	movs	r1, #32
 8004de4:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	2284      	movs	r2, #132	; 0x84
 8004dea:	2100      	movs	r1, #0
 8004dec:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004dee:	2303      	movs	r3, #3
 8004df0:	e060      	b.n	8004eb4 <UART_CheckIdleState+0x144>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	2204      	movs	r2, #4
 8004dfa:	4013      	ands	r3, r2
 8004dfc:	2b04      	cmp	r3, #4
 8004dfe:	d146      	bne.n	8004e8e <UART_CheckIdleState+0x11e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004e00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004e02:	2280      	movs	r2, #128	; 0x80
 8004e04:	03d1      	lsls	r1, r2, #15
 8004e06:	6878      	ldr	r0, [r7, #4]
 8004e08:	4a2c      	ldr	r2, [pc, #176]	; (8004ebc <UART_CheckIdleState+0x14c>)
 8004e0a:	9200      	str	r2, [sp, #0]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	f000 f859 	bl	8004ec4 <UART_WaitOnFlagUntilTimeout>
 8004e12:	1e03      	subs	r3, r0, #0
 8004e14:	d03b      	beq.n	8004e8e <UART_CheckIdleState+0x11e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e16:	f3ef 8310 	mrs	r3, PRIMASK
 8004e1a:	60fb      	str	r3, [r7, #12]
  return(result);
 8004e1c:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004e1e:	637b      	str	r3, [r7, #52]	; 0x34
 8004e20:	2301      	movs	r3, #1
 8004e22:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e24:	693b      	ldr	r3, [r7, #16]
 8004e26:	f383 8810 	msr	PRIMASK, r3
}
 8004e2a:	46c0      	nop			; (mov r8, r8)
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	681b      	ldr	r3, [r3, #0]
 8004e36:	4922      	ldr	r1, [pc, #136]	; (8004ec0 <UART_CheckIdleState+0x150>)
 8004e38:	400a      	ands	r2, r1
 8004e3a:	601a      	str	r2, [r3, #0]
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e40:	697b      	ldr	r3, [r7, #20]
 8004e42:	f383 8810 	msr	PRIMASK, r3
}
 8004e46:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004e48:	f3ef 8310 	mrs	r3, PRIMASK
 8004e4c:	61bb      	str	r3, [r7, #24]
  return(result);
 8004e4e:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e50:	633b      	str	r3, [r7, #48]	; 0x30
 8004e52:	2301      	movs	r3, #1
 8004e54:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e56:	69fb      	ldr	r3, [r7, #28]
 8004e58:	f383 8810 	msr	PRIMASK, r3
}
 8004e5c:	46c0      	nop			; (mov r8, r8)
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	681b      	ldr	r3, [r3, #0]
 8004e62:	689a      	ldr	r2, [r3, #8]
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	681b      	ldr	r3, [r3, #0]
 8004e68:	2101      	movs	r1, #1
 8004e6a:	438a      	bics	r2, r1
 8004e6c:	609a      	str	r2, [r3, #8]
 8004e6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e70:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004e72:	6a3b      	ldr	r3, [r7, #32]
 8004e74:	f383 8810 	msr	PRIMASK, r3
}
 8004e78:	46c0      	nop			; (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	228c      	movs	r2, #140	; 0x8c
 8004e7e:	2120      	movs	r1, #32
 8004e80:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2284      	movs	r2, #132	; 0x84
 8004e86:	2100      	movs	r1, #0
 8004e88:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004e8a:	2303      	movs	r3, #3
 8004e8c:	e012      	b.n	8004eb4 <UART_CheckIdleState+0x144>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	2288      	movs	r2, #136	; 0x88
 8004e92:	2120      	movs	r1, #32
 8004e94:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_READY;
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	228c      	movs	r2, #140	; 0x8c
 8004e9a:	2120      	movs	r1, #32
 8004e9c:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	2284      	movs	r2, #132	; 0x84
 8004eae:	2100      	movs	r1, #0
 8004eb0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8004eb2:	2300      	movs	r3, #0
}
 8004eb4:	0018      	movs	r0, r3
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	b010      	add	sp, #64	; 0x40
 8004eba:	bd80      	pop	{r7, pc}
 8004ebc:	01ffffff 	.word	0x01ffffff
 8004ec0:	fffffedf 	.word	0xfffffedf

08004ec4 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004ec4:	b580      	push	{r7, lr}
 8004ec6:	b084      	sub	sp, #16
 8004ec8:	af00      	add	r7, sp, #0
 8004eca:	60f8      	str	r0, [r7, #12]
 8004ecc:	60b9      	str	r1, [r7, #8]
 8004ece:	603b      	str	r3, [r7, #0]
 8004ed0:	1dfb      	adds	r3, r7, #7
 8004ed2:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ed4:	e051      	b.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	3301      	adds	r3, #1
 8004eda:	d04e      	beq.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004edc:	f7fc f912 	bl	8001104 <HAL_GetTick>
 8004ee0:	0002      	movs	r2, r0
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	1ad3      	subs	r3, r2, r3
 8004ee6:	69ba      	ldr	r2, [r7, #24]
 8004ee8:	429a      	cmp	r2, r3
 8004eea:	d302      	bcc.n	8004ef2 <UART_WaitOnFlagUntilTimeout+0x2e>
 8004eec:	69bb      	ldr	r3, [r7, #24]
 8004eee:	2b00      	cmp	r3, #0
 8004ef0:	d101      	bne.n	8004ef6 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8004ef2:	2303      	movs	r3, #3
 8004ef4:	e051      	b.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xd6>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	681b      	ldr	r3, [r3, #0]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2204      	movs	r2, #4
 8004efe:	4013      	ands	r3, r2
 8004f00:	d03b      	beq.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f02:	68bb      	ldr	r3, [r7, #8]
 8004f04:	2b80      	cmp	r3, #128	; 0x80
 8004f06:	d038      	beq.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
 8004f08:	68bb      	ldr	r3, [r7, #8]
 8004f0a:	2b40      	cmp	r3, #64	; 0x40
 8004f0c:	d035      	beq.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	69db      	ldr	r3, [r3, #28]
 8004f14:	2208      	movs	r2, #8
 8004f16:	4013      	ands	r3, r2
 8004f18:	2b08      	cmp	r3, #8
 8004f1a:	d111      	bne.n	8004f40 <UART_WaitOnFlagUntilTimeout+0x7c>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	2208      	movs	r2, #8
 8004f22:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	0018      	movs	r0, r3
 8004f28:	f000 f83c 	bl	8004fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	2290      	movs	r2, #144	; 0x90
 8004f30:	2108      	movs	r1, #8
 8004f32:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	2284      	movs	r2, #132	; 0x84
 8004f38:	2100      	movs	r1, #0
 8004f3a:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8004f3c:	2301      	movs	r3, #1
 8004f3e:	e02c      	b.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xd6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	69da      	ldr	r2, [r3, #28]
 8004f46:	2380      	movs	r3, #128	; 0x80
 8004f48:	011b      	lsls	r3, r3, #4
 8004f4a:	401a      	ands	r2, r3
 8004f4c:	2380      	movs	r3, #128	; 0x80
 8004f4e:	011b      	lsls	r3, r3, #4
 8004f50:	429a      	cmp	r2, r3
 8004f52:	d112      	bne.n	8004f7a <UART_WaitOnFlagUntilTimeout+0xb6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	681b      	ldr	r3, [r3, #0]
 8004f58:	2280      	movs	r2, #128	; 0x80
 8004f5a:	0112      	lsls	r2, r2, #4
 8004f5c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	0018      	movs	r0, r3
 8004f62:	f000 f81f 	bl	8004fa4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2290      	movs	r2, #144	; 0x90
 8004f6a:	2120      	movs	r1, #32
 8004f6c:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	2284      	movs	r2, #132	; 0x84
 8004f72:	2100      	movs	r1, #0
 8004f74:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e00f      	b.n	8004f9a <UART_WaitOnFlagUntilTimeout+0xd6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	69db      	ldr	r3, [r3, #28]
 8004f80:	68ba      	ldr	r2, [r7, #8]
 8004f82:	4013      	ands	r3, r2
 8004f84:	68ba      	ldr	r2, [r7, #8]
 8004f86:	1ad3      	subs	r3, r2, r3
 8004f88:	425a      	negs	r2, r3
 8004f8a:	4153      	adcs	r3, r2
 8004f8c:	b2db      	uxtb	r3, r3
 8004f8e:	001a      	movs	r2, r3
 8004f90:	1dfb      	adds	r3, r7, #7
 8004f92:	781b      	ldrb	r3, [r3, #0]
 8004f94:	429a      	cmp	r2, r3
 8004f96:	d09e      	beq.n	8004ed6 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004f98:	2300      	movs	r3, #0
}
 8004f9a:	0018      	movs	r0, r3
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	b004      	add	sp, #16
 8004fa0:	bd80      	pop	{r7, pc}
	...

08004fa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004fa4:	b580      	push	{r7, lr}
 8004fa6:	b08e      	sub	sp, #56	; 0x38
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fac:	f3ef 8310 	mrs	r3, PRIMASK
 8004fb0:	617b      	str	r3, [r7, #20]
  return(result);
 8004fb2:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8004fb4:	637b      	str	r3, [r7, #52]	; 0x34
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fba:	69bb      	ldr	r3, [r7, #24]
 8004fbc:	f383 8810 	msr	PRIMASK, r3
}
 8004fc0:	46c0      	nop			; (mov r8, r8)
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	681a      	ldr	r2, [r3, #0]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	4926      	ldr	r1, [pc, #152]	; (8005068 <UART_EndRxTransfer+0xc4>)
 8004fce:	400a      	ands	r2, r1
 8004fd0:	601a      	str	r2, [r3, #0]
 8004fd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004fd4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fd6:	69fb      	ldr	r3, [r7, #28]
 8004fd8:	f383 8810 	msr	PRIMASK, r3
}
 8004fdc:	46c0      	nop			; (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8004fde:	f3ef 8310 	mrs	r3, PRIMASK
 8004fe2:	623b      	str	r3, [r7, #32]
  return(result);
 8004fe4:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8004fe6:	633b      	str	r3, [r7, #48]	; 0x30
 8004fe8:	2301      	movs	r3, #1
 8004fea:	627b      	str	r3, [r7, #36]	; 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8004fec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fee:	f383 8810 	msr	PRIMASK, r3
}
 8004ff2:	46c0      	nop			; (mov r8, r8)
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	689a      	ldr	r2, [r3, #8]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	491b      	ldr	r1, [pc, #108]	; (800506c <UART_EndRxTransfer+0xc8>)
 8005000:	400a      	ands	r2, r1
 8005002:	609a      	str	r2, [r3, #8]
 8005004:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005006:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005008:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800500a:	f383 8810 	msr	PRIMASK, r3
}
 800500e:	46c0      	nop			; (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005014:	2b01      	cmp	r3, #1
 8005016:	d118      	bne.n	800504a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8005018:	f3ef 8310 	mrs	r3, PRIMASK
 800501c:	60bb      	str	r3, [r7, #8]
  return(result);
 800501e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005020:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005022:	2301      	movs	r3, #1
 8005024:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005026:	68fb      	ldr	r3, [r7, #12]
 8005028:	f383 8810 	msr	PRIMASK, r3
}
 800502c:	46c0      	nop			; (mov r8, r8)
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	681b      	ldr	r3, [r3, #0]
 8005032:	681a      	ldr	r2, [r3, #0]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681b      	ldr	r3, [r3, #0]
 8005038:	2110      	movs	r1, #16
 800503a:	438a      	bics	r2, r1
 800503c:	601a      	str	r2, [r3, #0]
 800503e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005040:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	f383 8810 	msr	PRIMASK, r3
}
 8005048:	46c0      	nop			; (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	228c      	movs	r2, #140	; 0x8c
 800504e:	2120      	movs	r1, #32
 8005050:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005052:	687b      	ldr	r3, [r7, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2200      	movs	r2, #0
 800505c:	675a      	str	r2, [r3, #116]	; 0x74
}
 800505e:	46c0      	nop			; (mov r8, r8)
 8005060:	46bd      	mov	sp, r7
 8005062:	b00e      	add	sp, #56	; 0x38
 8005064:	bd80      	pop	{r7, pc}
 8005066:	46c0      	nop			; (mov r8, r8)
 8005068:	fffffedf 	.word	0xfffffedf
 800506c:	effffffe 	.word	0xeffffffe

08005070 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8005070:	b580      	push	{r7, lr}
 8005072:	b084      	sub	sp, #16
 8005074:	af00      	add	r7, sp, #0
 8005076:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2284      	movs	r2, #132	; 0x84
 800507c:	5c9b      	ldrb	r3, [r3, r2]
 800507e:	2b01      	cmp	r3, #1
 8005080:	d101      	bne.n	8005086 <HAL_UARTEx_DisableFifoMode+0x16>
 8005082:	2302      	movs	r3, #2
 8005084:	e027      	b.n	80050d6 <HAL_UARTEx_DisableFifoMode+0x66>
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	2284      	movs	r2, #132	; 0x84
 800508a:	2101      	movs	r1, #1
 800508c:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	2288      	movs	r2, #136	; 0x88
 8005092:	2124      	movs	r1, #36	; 0x24
 8005094:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	687b      	ldr	r3, [r7, #4]
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	2101      	movs	r1, #1
 80050aa:	438a      	bics	r2, r1
 80050ac:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 80050ae:	68fb      	ldr	r3, [r7, #12]
 80050b0:	4a0b      	ldr	r2, [pc, #44]	; (80050e0 <HAL_UARTEx_DisableFifoMode+0x70>)
 80050b2:	4013      	ands	r3, r2
 80050b4:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	2200      	movs	r2, #0
 80050ba:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	68fa      	ldr	r2, [r7, #12]
 80050c2:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	2288      	movs	r2, #136	; 0x88
 80050c8:	2120      	movs	r1, #32
 80050ca:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2284      	movs	r2, #132	; 0x84
 80050d0:	2100      	movs	r1, #0
 80050d2:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80050d4:	2300      	movs	r3, #0
}
 80050d6:	0018      	movs	r0, r3
 80050d8:	46bd      	mov	sp, r7
 80050da:	b004      	add	sp, #16
 80050dc:	bd80      	pop	{r7, pc}
 80050de:	46c0      	nop			; (mov r8, r8)
 80050e0:	dfffffff 	.word	0xdfffffff

080050e4 <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b084      	sub	sp, #16
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
 80050ec:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2284      	movs	r2, #132	; 0x84
 80050f2:	5c9b      	ldrb	r3, [r3, r2]
 80050f4:	2b01      	cmp	r3, #1
 80050f6:	d101      	bne.n	80050fc <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80050f8:	2302      	movs	r3, #2
 80050fa:	e02e      	b.n	800515a <HAL_UARTEx_SetTxFifoThreshold+0x76>
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	2284      	movs	r2, #132	; 0x84
 8005100:	2101      	movs	r1, #1
 8005102:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005104:	687b      	ldr	r3, [r7, #4]
 8005106:	2288      	movs	r2, #136	; 0x88
 8005108:	2124      	movs	r1, #36	; 0x24
 800510a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	681a      	ldr	r2, [r3, #0]
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	681b      	ldr	r3, [r3, #0]
 800511e:	2101      	movs	r1, #1
 8005120:	438a      	bics	r2, r1
 8005122:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	689b      	ldr	r3, [r3, #8]
 800512a:	00db      	lsls	r3, r3, #3
 800512c:	08d9      	lsrs	r1, r3, #3
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	683a      	ldr	r2, [r7, #0]
 8005134:	430a      	orrs	r2, r1
 8005136:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8005138:	687b      	ldr	r3, [r7, #4]
 800513a:	0018      	movs	r0, r3
 800513c:	f000 f854 	bl	80051e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	68fa      	ldr	r2, [r7, #12]
 8005146:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2288      	movs	r2, #136	; 0x88
 800514c:	2120      	movs	r1, #32
 800514e:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	2284      	movs	r2, #132	; 0x84
 8005154:	2100      	movs	r1, #0
 8005156:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8005158:	2300      	movs	r3, #0
}
 800515a:	0018      	movs	r0, r3
 800515c:	46bd      	mov	sp, r7
 800515e:	b004      	add	sp, #16
 8005160:	bd80      	pop	{r7, pc}
	...

08005164 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8005164:	b580      	push	{r7, lr}
 8005166:	b084      	sub	sp, #16
 8005168:	af00      	add	r7, sp, #0
 800516a:	6078      	str	r0, [r7, #4]
 800516c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	2284      	movs	r2, #132	; 0x84
 8005172:	5c9b      	ldrb	r3, [r3, r2]
 8005174:	2b01      	cmp	r3, #1
 8005176:	d101      	bne.n	800517c <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8005178:	2302      	movs	r3, #2
 800517a:	e02f      	b.n	80051dc <HAL_UARTEx_SetRxFifoThreshold+0x78>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2284      	movs	r2, #132	; 0x84
 8005180:	2101      	movs	r1, #1
 8005182:	5499      	strb	r1, [r3, r2]

  huart->gState = HAL_UART_STATE_BUSY;
 8005184:	687b      	ldr	r3, [r7, #4]
 8005186:	2288      	movs	r2, #136	; 0x88
 8005188:	2124      	movs	r1, #36	; 0x24
 800518a:	5099      	str	r1, [r3, r2]

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8005194:	687b      	ldr	r3, [r7, #4]
 8005196:	681b      	ldr	r3, [r3, #0]
 8005198:	681a      	ldr	r2, [r3, #0]
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	2101      	movs	r1, #1
 80051a0:	438a      	bics	r2, r1
 80051a2:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	681b      	ldr	r3, [r3, #0]
 80051a8:	689b      	ldr	r3, [r3, #8]
 80051aa:	4a0e      	ldr	r2, [pc, #56]	; (80051e4 <HAL_UARTEx_SetRxFifoThreshold+0x80>)
 80051ac:	4013      	ands	r3, r2
 80051ae:	0019      	movs	r1, r3
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	683a      	ldr	r2, [r7, #0]
 80051b6:	430a      	orrs	r2, r1
 80051b8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	0018      	movs	r0, r3
 80051be:	f000 f813 	bl	80051e8 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	681b      	ldr	r3, [r3, #0]
 80051c6:	68fa      	ldr	r2, [r7, #12]
 80051c8:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	2288      	movs	r2, #136	; 0x88
 80051ce:	2120      	movs	r1, #32
 80051d0:	5099      	str	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	2284      	movs	r2, #132	; 0x84
 80051d6:	2100      	movs	r1, #0
 80051d8:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80051da:	2300      	movs	r3, #0
}
 80051dc:	0018      	movs	r0, r3
 80051de:	46bd      	mov	sp, r7
 80051e0:	b004      	add	sp, #16
 80051e2:	bd80      	pop	{r7, pc}
 80051e4:	f1ffffff 	.word	0xf1ffffff

080051e8 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 80051e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80051ea:	b085      	sub	sp, #20
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80051f4:	2b00      	cmp	r3, #0
 80051f6:	d108      	bne.n	800520a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	226a      	movs	r2, #106	; 0x6a
 80051fc:	2101      	movs	r1, #1
 80051fe:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = 1U;
 8005200:	687b      	ldr	r3, [r7, #4]
 8005202:	2268      	movs	r2, #104	; 0x68
 8005204:	2101      	movs	r1, #1
 8005206:	5299      	strh	r1, [r3, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8005208:	e043      	b.n	8005292 <UARTEx_SetNbDataToProcess+0xaa>
    rx_fifo_depth = RX_FIFO_DEPTH;
 800520a:	260f      	movs	r6, #15
 800520c:	19bb      	adds	r3, r7, r6
 800520e:	2208      	movs	r2, #8
 8005210:	701a      	strb	r2, [r3, #0]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8005212:	200e      	movs	r0, #14
 8005214:	183b      	adds	r3, r7, r0
 8005216:	2208      	movs	r2, #8
 8005218:	701a      	strb	r2, [r3, #0]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	0e5b      	lsrs	r3, r3, #25
 8005222:	b2da      	uxtb	r2, r3
 8005224:	240d      	movs	r4, #13
 8005226:	193b      	adds	r3, r7, r4
 8005228:	2107      	movs	r1, #7
 800522a:	400a      	ands	r2, r1
 800522c:	701a      	strb	r2, [r3, #0]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	689b      	ldr	r3, [r3, #8]
 8005234:	0f5b      	lsrs	r3, r3, #29
 8005236:	b2da      	uxtb	r2, r3
 8005238:	250c      	movs	r5, #12
 800523a:	197b      	adds	r3, r7, r5
 800523c:	2107      	movs	r1, #7
 800523e:	400a      	ands	r2, r1
 8005240:	701a      	strb	r2, [r3, #0]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8005242:	183b      	adds	r3, r7, r0
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	197a      	adds	r2, r7, r5
 8005248:	7812      	ldrb	r2, [r2, #0]
 800524a:	4914      	ldr	r1, [pc, #80]	; (800529c <UARTEx_SetNbDataToProcess+0xb4>)
 800524c:	5c8a      	ldrb	r2, [r1, r2]
 800524e:	435a      	muls	r2, r3
 8005250:	0010      	movs	r0, r2
                               (uint16_t)denominator[tx_fifo_threshold];
 8005252:	197b      	adds	r3, r7, r5
 8005254:	781b      	ldrb	r3, [r3, #0]
 8005256:	4a12      	ldr	r2, [pc, #72]	; (80052a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005258:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 800525a:	0019      	movs	r1, r3
 800525c:	f7fa ffdc 	bl	8000218 <__divsi3>
 8005260:	0003      	movs	r3, r0
 8005262:	b299      	uxth	r1, r3
 8005264:	687b      	ldr	r3, [r7, #4]
 8005266:	226a      	movs	r2, #106	; 0x6a
 8005268:	5299      	strh	r1, [r3, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800526a:	19bb      	adds	r3, r7, r6
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	193a      	adds	r2, r7, r4
 8005270:	7812      	ldrb	r2, [r2, #0]
 8005272:	490a      	ldr	r1, [pc, #40]	; (800529c <UARTEx_SetNbDataToProcess+0xb4>)
 8005274:	5c8a      	ldrb	r2, [r1, r2]
 8005276:	435a      	muls	r2, r3
 8005278:	0010      	movs	r0, r2
                               (uint16_t)denominator[rx_fifo_threshold];
 800527a:	193b      	adds	r3, r7, r4
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	4a08      	ldr	r2, [pc, #32]	; (80052a0 <UARTEx_SetNbDataToProcess+0xb8>)
 8005280:	5cd3      	ldrb	r3, [r2, r3]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8005282:	0019      	movs	r1, r3
 8005284:	f7fa ffc8 	bl	8000218 <__divsi3>
 8005288:	0003      	movs	r3, r0
 800528a:	b299      	uxth	r1, r3
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	2268      	movs	r2, #104	; 0x68
 8005290:	5299      	strh	r1, [r3, r2]
}
 8005292:	46c0      	nop			; (mov r8, r8)
 8005294:	46bd      	mov	sp, r7
 8005296:	b005      	add	sp, #20
 8005298:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800529a:	46c0      	nop			; (mov r8, r8)
 800529c:	080053e0 	.word	0x080053e0
 80052a0:	080053e8 	.word	0x080053e8

080052a4 <memset>:
 80052a4:	0003      	movs	r3, r0
 80052a6:	1882      	adds	r2, r0, r2
 80052a8:	4293      	cmp	r3, r2
 80052aa:	d100      	bne.n	80052ae <memset+0xa>
 80052ac:	4770      	bx	lr
 80052ae:	7019      	strb	r1, [r3, #0]
 80052b0:	3301      	adds	r3, #1
 80052b2:	e7f9      	b.n	80052a8 <memset+0x4>

080052b4 <__libc_init_array>:
 80052b4:	b570      	push	{r4, r5, r6, lr}
 80052b6:	2600      	movs	r6, #0
 80052b8:	4c0c      	ldr	r4, [pc, #48]	; (80052ec <__libc_init_array+0x38>)
 80052ba:	4d0d      	ldr	r5, [pc, #52]	; (80052f0 <__libc_init_array+0x3c>)
 80052bc:	1b64      	subs	r4, r4, r5
 80052be:	10a4      	asrs	r4, r4, #2
 80052c0:	42a6      	cmp	r6, r4
 80052c2:	d109      	bne.n	80052d8 <__libc_init_array+0x24>
 80052c4:	2600      	movs	r6, #0
 80052c6:	f000 f819 	bl	80052fc <_init>
 80052ca:	4c0a      	ldr	r4, [pc, #40]	; (80052f4 <__libc_init_array+0x40>)
 80052cc:	4d0a      	ldr	r5, [pc, #40]	; (80052f8 <__libc_init_array+0x44>)
 80052ce:	1b64      	subs	r4, r4, r5
 80052d0:	10a4      	asrs	r4, r4, #2
 80052d2:	42a6      	cmp	r6, r4
 80052d4:	d105      	bne.n	80052e2 <__libc_init_array+0x2e>
 80052d6:	bd70      	pop	{r4, r5, r6, pc}
 80052d8:	00b3      	lsls	r3, r6, #2
 80052da:	58eb      	ldr	r3, [r5, r3]
 80052dc:	4798      	blx	r3
 80052de:	3601      	adds	r6, #1
 80052e0:	e7ee      	b.n	80052c0 <__libc_init_array+0xc>
 80052e2:	00b3      	lsls	r3, r6, #2
 80052e4:	58eb      	ldr	r3, [r5, r3]
 80052e6:	4798      	blx	r3
 80052e8:	3601      	adds	r6, #1
 80052ea:	e7f2      	b.n	80052d2 <__libc_init_array+0x1e>
 80052ec:	080053f8 	.word	0x080053f8
 80052f0:	080053f8 	.word	0x080053f8
 80052f4:	080053fc 	.word	0x080053fc
 80052f8:	080053f8 	.word	0x080053f8

080052fc <_init>:
 80052fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80052fe:	46c0      	nop			; (mov r8, r8)
 8005300:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005302:	bc08      	pop	{r3}
 8005304:	469e      	mov	lr, r3
 8005306:	4770      	bx	lr

08005308 <_fini>:
 8005308:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800530a:	46c0      	nop			; (mov r8, r8)
 800530c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800530e:	bc08      	pop	{r3}
 8005310:	469e      	mov	lr, r3
 8005312:	4770      	bx	lr
