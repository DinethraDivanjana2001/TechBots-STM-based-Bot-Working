
SLRC ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007188  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08007318  08007318  00017318  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007468  08007468  00020168  2**0
                  CONTENTS
  4 .ARM          00000008  08007468  08007468  00017468  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007470  08007470  00020168  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007470  08007470  00017470  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007474  08007474  00017474  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000168  20000000  08007478  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020168  2**0
                  CONTENTS
 10 .bss          000005e4  20000168  20000168  00020168  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  2000074c  2000074c  00020168  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020168  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020198  2**0
                  CONTENTS, READONLY
 14 .debug_info   00013cdc  00000000  00000000  000201db  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 000027fe  00000000  00000000  00033eb7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000012e8  00000000  00000000  000366b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000eef  00000000  00000000  000379a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  00022671  00000000  00000000  0003888f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00016bf2  00000000  00000000  0005af00  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000d3b31  00000000  00000000  00071af2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  000059a0  00000000  00000000  00145624  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000005d  00000000  00000000  0014afc4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000168 	.word	0x20000168
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007300 	.word	0x08007300

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	2000016c 	.word	0x2000016c
 80001cc:	08007300 	.word	0x08007300

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	; 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	; 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2iz>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000844:	d215      	bcs.n	8000872 <__aeabi_d2iz+0x36>
 8000846:	d511      	bpl.n	800086c <__aeabi_d2iz+0x30>
 8000848:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d912      	bls.n	8000878 <__aeabi_d2iz+0x3c>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000862:	fa23 f002 	lsr.w	r0, r3, r2
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d105      	bne.n	8000884 <__aeabi_d2iz+0x48>
 8000878:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800087c:	bf08      	it	eq
 800087e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b970 	b.w	8000b84 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9e08      	ldr	r6, [sp, #32]
 80008c2:	460d      	mov	r5, r1
 80008c4:	4604      	mov	r4, r0
 80008c6:	460f      	mov	r7, r1
 80008c8:	2b00      	cmp	r3, #0
 80008ca:	d14a      	bne.n	8000962 <__udivmoddi4+0xa6>
 80008cc:	428a      	cmp	r2, r1
 80008ce:	4694      	mov	ip, r2
 80008d0:	d965      	bls.n	800099e <__udivmoddi4+0xe2>
 80008d2:	fab2 f382 	clz	r3, r2
 80008d6:	b143      	cbz	r3, 80008ea <__udivmoddi4+0x2e>
 80008d8:	fa02 fc03 	lsl.w	ip, r2, r3
 80008dc:	f1c3 0220 	rsb	r2, r3, #32
 80008e0:	409f      	lsls	r7, r3
 80008e2:	fa20 f202 	lsr.w	r2, r0, r2
 80008e6:	4317      	orrs	r7, r2
 80008e8:	409c      	lsls	r4, r3
 80008ea:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008ee:	fa1f f58c 	uxth.w	r5, ip
 80008f2:	fbb7 f1fe 	udiv	r1, r7, lr
 80008f6:	0c22      	lsrs	r2, r4, #16
 80008f8:	fb0e 7711 	mls	r7, lr, r1, r7
 80008fc:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000900:	fb01 f005 	mul.w	r0, r1, r5
 8000904:	4290      	cmp	r0, r2
 8000906:	d90a      	bls.n	800091e <__udivmoddi4+0x62>
 8000908:	eb1c 0202 	adds.w	r2, ip, r2
 800090c:	f101 37ff 	add.w	r7, r1, #4294967295
 8000910:	f080 811c 	bcs.w	8000b4c <__udivmoddi4+0x290>
 8000914:	4290      	cmp	r0, r2
 8000916:	f240 8119 	bls.w	8000b4c <__udivmoddi4+0x290>
 800091a:	3902      	subs	r1, #2
 800091c:	4462      	add	r2, ip
 800091e:	1a12      	subs	r2, r2, r0
 8000920:	b2a4      	uxth	r4, r4
 8000922:	fbb2 f0fe 	udiv	r0, r2, lr
 8000926:	fb0e 2210 	mls	r2, lr, r0, r2
 800092a:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 800092e:	fb00 f505 	mul.w	r5, r0, r5
 8000932:	42a5      	cmp	r5, r4
 8000934:	d90a      	bls.n	800094c <__udivmoddi4+0x90>
 8000936:	eb1c 0404 	adds.w	r4, ip, r4
 800093a:	f100 32ff 	add.w	r2, r0, #4294967295
 800093e:	f080 8107 	bcs.w	8000b50 <__udivmoddi4+0x294>
 8000942:	42a5      	cmp	r5, r4
 8000944:	f240 8104 	bls.w	8000b50 <__udivmoddi4+0x294>
 8000948:	4464      	add	r4, ip
 800094a:	3802      	subs	r0, #2
 800094c:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000950:	1b64      	subs	r4, r4, r5
 8000952:	2100      	movs	r1, #0
 8000954:	b11e      	cbz	r6, 800095e <__udivmoddi4+0xa2>
 8000956:	40dc      	lsrs	r4, r3
 8000958:	2300      	movs	r3, #0
 800095a:	e9c6 4300 	strd	r4, r3, [r6]
 800095e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000962:	428b      	cmp	r3, r1
 8000964:	d908      	bls.n	8000978 <__udivmoddi4+0xbc>
 8000966:	2e00      	cmp	r6, #0
 8000968:	f000 80ed 	beq.w	8000b46 <__udivmoddi4+0x28a>
 800096c:	2100      	movs	r1, #0
 800096e:	e9c6 0500 	strd	r0, r5, [r6]
 8000972:	4608      	mov	r0, r1
 8000974:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000978:	fab3 f183 	clz	r1, r3
 800097c:	2900      	cmp	r1, #0
 800097e:	d149      	bne.n	8000a14 <__udivmoddi4+0x158>
 8000980:	42ab      	cmp	r3, r5
 8000982:	d302      	bcc.n	800098a <__udivmoddi4+0xce>
 8000984:	4282      	cmp	r2, r0
 8000986:	f200 80f8 	bhi.w	8000b7a <__udivmoddi4+0x2be>
 800098a:	1a84      	subs	r4, r0, r2
 800098c:	eb65 0203 	sbc.w	r2, r5, r3
 8000990:	2001      	movs	r0, #1
 8000992:	4617      	mov	r7, r2
 8000994:	2e00      	cmp	r6, #0
 8000996:	d0e2      	beq.n	800095e <__udivmoddi4+0xa2>
 8000998:	e9c6 4700 	strd	r4, r7, [r6]
 800099c:	e7df      	b.n	800095e <__udivmoddi4+0xa2>
 800099e:	b902      	cbnz	r2, 80009a2 <__udivmoddi4+0xe6>
 80009a0:	deff      	udf	#255	; 0xff
 80009a2:	fab2 f382 	clz	r3, r2
 80009a6:	2b00      	cmp	r3, #0
 80009a8:	f040 8090 	bne.w	8000acc <__udivmoddi4+0x210>
 80009ac:	1a8a      	subs	r2, r1, r2
 80009ae:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009b2:	fa1f fe8c 	uxth.w	lr, ip
 80009b6:	2101      	movs	r1, #1
 80009b8:	fbb2 f5f7 	udiv	r5, r2, r7
 80009bc:	fb07 2015 	mls	r0, r7, r5, r2
 80009c0:	0c22      	lsrs	r2, r4, #16
 80009c2:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009c6:	fb0e f005 	mul.w	r0, lr, r5
 80009ca:	4290      	cmp	r0, r2
 80009cc:	d908      	bls.n	80009e0 <__udivmoddi4+0x124>
 80009ce:	eb1c 0202 	adds.w	r2, ip, r2
 80009d2:	f105 38ff 	add.w	r8, r5, #4294967295
 80009d6:	d202      	bcs.n	80009de <__udivmoddi4+0x122>
 80009d8:	4290      	cmp	r0, r2
 80009da:	f200 80cb 	bhi.w	8000b74 <__udivmoddi4+0x2b8>
 80009de:	4645      	mov	r5, r8
 80009e0:	1a12      	subs	r2, r2, r0
 80009e2:	b2a4      	uxth	r4, r4
 80009e4:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e8:	fb07 2210 	mls	r2, r7, r0, r2
 80009ec:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009f0:	fb0e fe00 	mul.w	lr, lr, r0
 80009f4:	45a6      	cmp	lr, r4
 80009f6:	d908      	bls.n	8000a0a <__udivmoddi4+0x14e>
 80009f8:	eb1c 0404 	adds.w	r4, ip, r4
 80009fc:	f100 32ff 	add.w	r2, r0, #4294967295
 8000a00:	d202      	bcs.n	8000a08 <__udivmoddi4+0x14c>
 8000a02:	45a6      	cmp	lr, r4
 8000a04:	f200 80bb 	bhi.w	8000b7e <__udivmoddi4+0x2c2>
 8000a08:	4610      	mov	r0, r2
 8000a0a:	eba4 040e 	sub.w	r4, r4, lr
 8000a0e:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a12:	e79f      	b.n	8000954 <__udivmoddi4+0x98>
 8000a14:	f1c1 0720 	rsb	r7, r1, #32
 8000a18:	408b      	lsls	r3, r1
 8000a1a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a1e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a22:	fa05 f401 	lsl.w	r4, r5, r1
 8000a26:	fa20 f307 	lsr.w	r3, r0, r7
 8000a2a:	40fd      	lsrs	r5, r7
 8000a2c:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a30:	4323      	orrs	r3, r4
 8000a32:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a36:	fa1f fe8c 	uxth.w	lr, ip
 8000a3a:	fb09 5518 	mls	r5, r9, r8, r5
 8000a3e:	0c1c      	lsrs	r4, r3, #16
 8000a40:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a44:	fb08 f50e 	mul.w	r5, r8, lr
 8000a48:	42a5      	cmp	r5, r4
 8000a4a:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4e:	fa00 f001 	lsl.w	r0, r0, r1
 8000a52:	d90b      	bls.n	8000a6c <__udivmoddi4+0x1b0>
 8000a54:	eb1c 0404 	adds.w	r4, ip, r4
 8000a58:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a5c:	f080 8088 	bcs.w	8000b70 <__udivmoddi4+0x2b4>
 8000a60:	42a5      	cmp	r5, r4
 8000a62:	f240 8085 	bls.w	8000b70 <__udivmoddi4+0x2b4>
 8000a66:	f1a8 0802 	sub.w	r8, r8, #2
 8000a6a:	4464      	add	r4, ip
 8000a6c:	1b64      	subs	r4, r4, r5
 8000a6e:	b29d      	uxth	r5, r3
 8000a70:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a74:	fb09 4413 	mls	r4, r9, r3, r4
 8000a78:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a7c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a80:	45a6      	cmp	lr, r4
 8000a82:	d908      	bls.n	8000a96 <__udivmoddi4+0x1da>
 8000a84:	eb1c 0404 	adds.w	r4, ip, r4
 8000a88:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a8c:	d26c      	bcs.n	8000b68 <__udivmoddi4+0x2ac>
 8000a8e:	45a6      	cmp	lr, r4
 8000a90:	d96a      	bls.n	8000b68 <__udivmoddi4+0x2ac>
 8000a92:	3b02      	subs	r3, #2
 8000a94:	4464      	add	r4, ip
 8000a96:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a9a:	fba3 9502 	umull	r9, r5, r3, r2
 8000a9e:	eba4 040e 	sub.w	r4, r4, lr
 8000aa2:	42ac      	cmp	r4, r5
 8000aa4:	46c8      	mov	r8, r9
 8000aa6:	46ae      	mov	lr, r5
 8000aa8:	d356      	bcc.n	8000b58 <__udivmoddi4+0x29c>
 8000aaa:	d053      	beq.n	8000b54 <__udivmoddi4+0x298>
 8000aac:	b156      	cbz	r6, 8000ac4 <__udivmoddi4+0x208>
 8000aae:	ebb0 0208 	subs.w	r2, r0, r8
 8000ab2:	eb64 040e 	sbc.w	r4, r4, lr
 8000ab6:	fa04 f707 	lsl.w	r7, r4, r7
 8000aba:	40ca      	lsrs	r2, r1
 8000abc:	40cc      	lsrs	r4, r1
 8000abe:	4317      	orrs	r7, r2
 8000ac0:	e9c6 7400 	strd	r7, r4, [r6]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	2100      	movs	r1, #0
 8000ac8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000acc:	f1c3 0120 	rsb	r1, r3, #32
 8000ad0:	fa02 fc03 	lsl.w	ip, r2, r3
 8000ad4:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad8:	fa25 f101 	lsr.w	r1, r5, r1
 8000adc:	409d      	lsls	r5, r3
 8000ade:	432a      	orrs	r2, r5
 8000ae0:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ae4:	fa1f fe8c 	uxth.w	lr, ip
 8000ae8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000aec:	fb07 1510 	mls	r5, r7, r0, r1
 8000af0:	0c11      	lsrs	r1, r2, #16
 8000af2:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000af6:	fb00 f50e 	mul.w	r5, r0, lr
 8000afa:	428d      	cmp	r5, r1
 8000afc:	fa04 f403 	lsl.w	r4, r4, r3
 8000b00:	d908      	bls.n	8000b14 <__udivmoddi4+0x258>
 8000b02:	eb1c 0101 	adds.w	r1, ip, r1
 8000b06:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b0a:	d22f      	bcs.n	8000b6c <__udivmoddi4+0x2b0>
 8000b0c:	428d      	cmp	r5, r1
 8000b0e:	d92d      	bls.n	8000b6c <__udivmoddi4+0x2b0>
 8000b10:	3802      	subs	r0, #2
 8000b12:	4461      	add	r1, ip
 8000b14:	1b49      	subs	r1, r1, r5
 8000b16:	b292      	uxth	r2, r2
 8000b18:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b1c:	fb07 1115 	mls	r1, r7, r5, r1
 8000b20:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b24:	fb05 f10e 	mul.w	r1, r5, lr
 8000b28:	4291      	cmp	r1, r2
 8000b2a:	d908      	bls.n	8000b3e <__udivmoddi4+0x282>
 8000b2c:	eb1c 0202 	adds.w	r2, ip, r2
 8000b30:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b34:	d216      	bcs.n	8000b64 <__udivmoddi4+0x2a8>
 8000b36:	4291      	cmp	r1, r2
 8000b38:	d914      	bls.n	8000b64 <__udivmoddi4+0x2a8>
 8000b3a:	3d02      	subs	r5, #2
 8000b3c:	4462      	add	r2, ip
 8000b3e:	1a52      	subs	r2, r2, r1
 8000b40:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b44:	e738      	b.n	80009b8 <__udivmoddi4+0xfc>
 8000b46:	4631      	mov	r1, r6
 8000b48:	4630      	mov	r0, r6
 8000b4a:	e708      	b.n	800095e <__udivmoddi4+0xa2>
 8000b4c:	4639      	mov	r1, r7
 8000b4e:	e6e6      	b.n	800091e <__udivmoddi4+0x62>
 8000b50:	4610      	mov	r0, r2
 8000b52:	e6fb      	b.n	800094c <__udivmoddi4+0x90>
 8000b54:	4548      	cmp	r0, r9
 8000b56:	d2a9      	bcs.n	8000aac <__udivmoddi4+0x1f0>
 8000b58:	ebb9 0802 	subs.w	r8, r9, r2
 8000b5c:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b60:	3b01      	subs	r3, #1
 8000b62:	e7a3      	b.n	8000aac <__udivmoddi4+0x1f0>
 8000b64:	4645      	mov	r5, r8
 8000b66:	e7ea      	b.n	8000b3e <__udivmoddi4+0x282>
 8000b68:	462b      	mov	r3, r5
 8000b6a:	e794      	b.n	8000a96 <__udivmoddi4+0x1da>
 8000b6c:	4640      	mov	r0, r8
 8000b6e:	e7d1      	b.n	8000b14 <__udivmoddi4+0x258>
 8000b70:	46d0      	mov	r8, sl
 8000b72:	e77b      	b.n	8000a6c <__udivmoddi4+0x1b0>
 8000b74:	3d02      	subs	r5, #2
 8000b76:	4462      	add	r2, ip
 8000b78:	e732      	b.n	80009e0 <__udivmoddi4+0x124>
 8000b7a:	4608      	mov	r0, r1
 8000b7c:	e70a      	b.n	8000994 <__udivmoddi4+0xd8>
 8000b7e:	4464      	add	r4, ip
 8000b80:	3802      	subs	r0, #2
 8000b82:	e742      	b.n	8000a0a <__udivmoddi4+0x14e>

08000b84 <__aeabi_idiv0>:
 8000b84:	4770      	bx	lr
 8000b86:	bf00      	nop

08000b88 <speed>:
#include "stm32f4xx_hal.h"
#include "MotorControl.h"

extern TIM_HandleTypeDef htim1;

void speed(int Left, int Right){
 8000b88:	b480      	push	{r7}
 8000b8a:	b083      	sub	sp, #12
 8000b8c:	af00      	add	r7, sp, #0
 8000b8e:	6078      	str	r0, [r7, #4]
 8000b90:	6039      	str	r1, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim1,FR_MOTOR_PWM,Right);
 8000b92:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <speed+0x28>)
 8000b94:	681b      	ldr	r3, [r3, #0]
 8000b96:	683a      	ldr	r2, [r7, #0]
 8000b98:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,RR_MOTOR_PWM,Left);
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <speed+0x28>)
 8000b9c:	681b      	ldr	r3, [r3, #0]
 8000b9e:	687a      	ldr	r2, [r7, #4]
 8000ba0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ba2:	bf00      	nop
 8000ba4:	370c      	adds	r7, #12
 8000ba6:	46bd      	mov	sp, r7
 8000ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bac:	4770      	bx	lr
 8000bae:	bf00      	nop
 8000bb0:	200003b4 	.word	0x200003b4

08000bb4 <motor>:

void motor(int motor,int direction){
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b082      	sub	sp, #8
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	6039      	str	r1, [r7, #0]
	if (motor == 0){
 8000bbe:	687b      	ldr	r3, [r7, #4]
 8000bc0:	2b00      	cmp	r3, #0
 8000bc2:	d11c      	bne.n	8000bfe <motor+0x4a>
		if (direction == 1){
 8000bc4:	683b      	ldr	r3, [r7, #0]
 8000bc6:	2b01      	cmp	r3, #1
 8000bc8:	d10c      	bne.n	8000be4 <motor+0x30>
			HAL_GPIO_WritePin(RR_INB_GPIO_Port, RR_INB_Pin, 0);
 8000bca:	2200      	movs	r2, #0
 8000bcc:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bd0:	481b      	ldr	r0, [pc, #108]	; (8000c40 <motor+0x8c>)
 8000bd2:	f002 fdb1 	bl	8003738 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RR_INA_GPIO_Port, RR_INA_Pin, 1);
 8000bd6:	2201      	movs	r2, #1
 8000bd8:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bdc:	4818      	ldr	r0, [pc, #96]	; (8000c40 <motor+0x8c>)
 8000bde:	f002 fdab 	bl	8003738 <HAL_GPIO_WritePin>
		}else{
			HAL_GPIO_WritePin(FR_INB_GPIO_Port, FR_INB_Pin, 1);
			HAL_GPIO_WritePin(FR_INA_GPIO_Port, FR_INA_Pin, 0);
		}
	}
}
 8000be2:	e028      	b.n	8000c36 <motor+0x82>
			HAL_GPIO_WritePin(RR_INB_GPIO_Port, RR_INB_Pin, 1);
 8000be4:	2201      	movs	r2, #1
 8000be6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8000bea:	4815      	ldr	r0, [pc, #84]	; (8000c40 <motor+0x8c>)
 8000bec:	f002 fda4 	bl	8003738 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RR_INA_GPIO_Port, RR_INA_Pin, 0);
 8000bf0:	2200      	movs	r2, #0
 8000bf2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000bf6:	4812      	ldr	r0, [pc, #72]	; (8000c40 <motor+0x8c>)
 8000bf8:	f002 fd9e 	bl	8003738 <HAL_GPIO_WritePin>
}
 8000bfc:	e01b      	b.n	8000c36 <motor+0x82>
		if (direction == 1){
 8000bfe:	683b      	ldr	r3, [r7, #0]
 8000c00:	2b01      	cmp	r3, #1
 8000c02:	d10c      	bne.n	8000c1e <motor+0x6a>
			HAL_GPIO_WritePin(FR_INB_GPIO_Port, FR_INB_Pin, 0);
 8000c04:	2200      	movs	r2, #0
 8000c06:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c0a:	480d      	ldr	r0, [pc, #52]	; (8000c40 <motor+0x8c>)
 8000c0c:	f002 fd94 	bl	8003738 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FR_INA_GPIO_Port, FR_INA_Pin, 1);
 8000c10:	2201      	movs	r2, #1
 8000c12:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c16:	480a      	ldr	r0, [pc, #40]	; (8000c40 <motor+0x8c>)
 8000c18:	f002 fd8e 	bl	8003738 <HAL_GPIO_WritePin>
}
 8000c1c:	e00b      	b.n	8000c36 <motor+0x82>
			HAL_GPIO_WritePin(FR_INB_GPIO_Port, FR_INB_Pin, 1);
 8000c1e:	2201      	movs	r2, #1
 8000c20:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000c24:	4806      	ldr	r0, [pc, #24]	; (8000c40 <motor+0x8c>)
 8000c26:	f002 fd87 	bl	8003738 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FR_INA_GPIO_Port, FR_INA_Pin, 0);
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8000c30:	4803      	ldr	r0, [pc, #12]	; (8000c40 <motor+0x8c>)
 8000c32:	f002 fd81 	bl	8003738 <HAL_GPIO_WritePin>
}
 8000c36:	bf00      	nop
 8000c38:	3708      	adds	r7, #8
 8000c3a:	46bd      	mov	sp, r7
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	40020400 	.word	0x40020400

08000c44 <PID_control>:
// Private variables for PID control
static double prevError = 0;
static int Drive_constant = 500;

// Function to calculate PID control values
struct DriveValues PID_control(double Kp, double Kd, double Ki, int digital_IR[IR_ARRAY_LENGTH]) {
 8000c44:	b5b0      	push	{r4, r5, r7, lr}
 8000c46:	b09a      	sub	sp, #104	; 0x68
 8000c48:	af00      	add	r7, sp, #0
 8000c4a:	61f8      	str	r0, [r7, #28]
 8000c4c:	ed87 0b04 	vstr	d0, [r7, #16]
 8000c50:	ed87 1b02 	vstr	d1, [r7, #8]
 8000c54:	ed87 2b00 	vstr	d2, [r7]
 8000c58:	61b9      	str	r1, [r7, #24]
	//Calculate the amount of IRs turned on
	  int array_lit_amount = 0;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	667b      	str	r3, [r7, #100]	; 0x64
	  for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8000c5e:	2300      	movs	r3, #0
 8000c60:	663b      	str	r3, [r7, #96]	; 0x60
 8000c62:	e00a      	b.n	8000c7a <PID_control+0x36>
	  {
		  array_lit_amount += digital_IR[i];
 8000c64:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c66:	009b      	lsls	r3, r3, #2
 8000c68:	69ba      	ldr	r2, [r7, #24]
 8000c6a:	4413      	add	r3, r2
 8000c6c:	681b      	ldr	r3, [r3, #0]
 8000c6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8000c70:	4413      	add	r3, r2
 8000c72:	667b      	str	r3, [r7, #100]	; 0x64
	  for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8000c74:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c76:	3301      	adds	r3, #1
 8000c78:	663b      	str	r3, [r7, #96]	; 0x60
 8000c7a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8000c7c:	2b18      	cmp	r3, #24
 8000c7e:	ddf1      	ble.n	8000c64 <PID_control+0x20>
	  }

	  int IR_MID_VAL = ((IR_ARRAY_LENGTH+1)/2-1);
 8000c80:	230c      	movs	r3, #12
 8000c82:	647b      	str	r3, [r7, #68]	; 0x44

	  //Calculate the sum of Left side IRs with given weight
	  float left_sum = 0;
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	65fb      	str	r3, [r7, #92]	; 0x5c
	  for (int i=-IR_MID_VAL; i<0;i++) left_sum += i*digital_IR[i+IR_MID_VAL];
 8000c8a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c8c:	425b      	negs	r3, r3
 8000c8e:	65bb      	str	r3, [r7, #88]	; 0x58
 8000c90:	e016      	b.n	8000cc0 <PID_control+0x7c>
 8000c92:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000c94:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000c96:	4413      	add	r3, r2
 8000c98:	009b      	lsls	r3, r3, #2
 8000c9a:	69ba      	ldr	r2, [r7, #24]
 8000c9c:	4413      	add	r3, r2
 8000c9e:	681b      	ldr	r3, [r3, #0]
 8000ca0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8000ca2:	fb02 f303 	mul.w	r3, r2, r3
 8000ca6:	ee07 3a90 	vmov	s15, r3
 8000caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cae:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000cb2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cb6:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
 8000cba:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cbc:	3301      	adds	r3, #1
 8000cbe:	65bb      	str	r3, [r7, #88]	; 0x58
 8000cc0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	dbe5      	blt.n	8000c92 <PID_control+0x4e>

	  //Calculate the sum of Right side IRs with given weight
	  float right_sum = 0;
 8000cc6:	f04f 0300 	mov.w	r3, #0
 8000cca:	657b      	str	r3, [r7, #84]	; 0x54
	  for (int i=1; i<IR_MID_VAL;i++) right_sum += i*digital_IR[i+IR_MID_VAL];
 8000ccc:	2301      	movs	r3, #1
 8000cce:	653b      	str	r3, [r7, #80]	; 0x50
 8000cd0:	e016      	b.n	8000d00 <PID_control+0xbc>
 8000cd2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000cd4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000cd6:	4413      	add	r3, r2
 8000cd8:	009b      	lsls	r3, r3, #2
 8000cda:	69ba      	ldr	r2, [r7, #24]
 8000cdc:	4413      	add	r3, r2
 8000cde:	681b      	ldr	r3, [r3, #0]
 8000ce0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000ce2:	fb02 f303 	mul.w	r3, r2, r3
 8000ce6:	ee07 3a90 	vmov	s15, r3
 8000cea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000cee:	ed97 7a15 	vldr	s14, [r7, #84]	; 0x54
 8000cf2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000cf6:	edc7 7a15 	vstr	s15, [r7, #84]	; 0x54
 8000cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	653b      	str	r3, [r7, #80]	; 0x50
 8000d00:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8000d02:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8000d04:	429a      	cmp	r2, r3
 8000d06:	dbe4      	blt.n	8000cd2 <PID_control+0x8e>

	  //Calculate the current Error
	  int position = left_sum + right_sum;
 8000d08:	ed97 7a17 	vldr	s14, [r7, #92]	; 0x5c
 8000d0c:	edd7 7a15 	vldr	s15, [r7, #84]	; 0x54
 8000d10:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000d14:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000d18:	ee17 3a90 	vmov	r3, s15
 8000d1c:	643b      	str	r3, [r7, #64]	; 0x40

	  int derivative = position - prevError;
 8000d1e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d20:	f7ff fd22 	bl	8000768 <__aeabi_i2d>
 8000d24:	4b3b      	ldr	r3, [pc, #236]	; (8000e14 <PID_control+0x1d0>)
 8000d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d2a:	f7ff fbcf 	bl	80004cc <__aeabi_dsub>
 8000d2e:	4602      	mov	r2, r0
 8000d30:	460b      	mov	r3, r1
 8000d32:	4610      	mov	r0, r2
 8000d34:	4619      	mov	r1, r3
 8000d36:	f7ff fd81 	bl	800083c <__aeabi_d2iz>
 8000d3a:	4603      	mov	r3, r0
 8000d3c:	63fb      	str	r3, [r7, #60]	; 0x3c

	  int PID_constant = Kp * position + Kd * derivative;
 8000d3e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d40:	f7ff fd12 	bl	8000768 <__aeabi_i2d>
 8000d44:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000d48:	f7ff fa92 	bl	8000270 <__aeabi_dmul>
 8000d4c:	4602      	mov	r2, r0
 8000d4e:	460b      	mov	r3, r1
 8000d50:	4614      	mov	r4, r2
 8000d52:	461d      	mov	r5, r3
 8000d54:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8000d56:	f7ff fd07 	bl	8000768 <__aeabi_i2d>
 8000d5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000d5e:	f7ff fa87 	bl	8000270 <__aeabi_dmul>
 8000d62:	4602      	mov	r2, r0
 8000d64:	460b      	mov	r3, r1
 8000d66:	4620      	mov	r0, r4
 8000d68:	4629      	mov	r1, r5
 8000d6a:	f7ff fbb1 	bl	80004d0 <__adddf3>
 8000d6e:	4602      	mov	r2, r0
 8000d70:	460b      	mov	r3, r1
 8000d72:	4610      	mov	r0, r2
 8000d74:	4619      	mov	r1, r3
 8000d76:	f7ff fd61 	bl	800083c <__aeabi_d2iz>
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	63bb      	str	r3, [r7, #56]	; 0x38

	  prevError = position;
 8000d7e:	6c38      	ldr	r0, [r7, #64]	; 0x40
 8000d80:	f7ff fcf2 	bl	8000768 <__aeabi_i2d>
 8000d84:	4602      	mov	r2, r0
 8000d86:	460b      	mov	r3, r1
 8000d88:	4922      	ldr	r1, [pc, #136]	; (8000e14 <PID_control+0x1d0>)
 8000d8a:	e9c1 2300 	strd	r2, r3, [r1]

	  Drive_constant = 500;
 8000d8e:	4b22      	ldr	r3, [pc, #136]	; (8000e18 <PID_control+0x1d4>)
 8000d90:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8000d94:	601a      	str	r2, [r3, #0]

	  int offset = 0; // For correcting motor speeds
 8000d96:	2300      	movs	r3, #0
 8000d98:	637b      	str	r3, [r7, #52]	; 0x34
	  int Left_drive = Drive_constant + offset - PID_constant;
 8000d9a:	4b1f      	ldr	r3, [pc, #124]	; (8000e18 <PID_control+0x1d4>)
 8000d9c:	681a      	ldr	r2, [r3, #0]
 8000d9e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000da0:	441a      	add	r2, r3
 8000da2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8000da4:	1ad3      	subs	r3, r2, r3
 8000da6:	64fb      	str	r3, [r7, #76]	; 0x4c
	  int Right_drive = Drive_constant - offset + PID_constant;
 8000da8:	4b1b      	ldr	r3, [pc, #108]	; (8000e18 <PID_control+0x1d4>)
 8000daa:	681a      	ldr	r2, [r3, #0]
 8000dac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8000db2:	4413      	add	r3, r2
 8000db4:	64bb      	str	r3, [r7, #72]	; 0x48

	  const int MIN_VALUE = -1024;
 8000db6:	4b19      	ldr	r3, [pc, #100]	; (8000e1c <PID_control+0x1d8>)
 8000db8:	633b      	str	r3, [r7, #48]	; 0x30
	  const int MAX_VALUE = 1024;
 8000dba:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000dbe:	62fb      	str	r3, [r7, #44]	; 0x2c

	  if (Left_drive < MIN_VALUE) {
 8000dc0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dc4:	429a      	cmp	r2, r3
 8000dc6:	da02      	bge.n	8000dce <PID_control+0x18a>
		  Left_drive = MIN_VALUE;
 8000dc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8000dcc:	e005      	b.n	8000dda <PID_control+0x196>
	  } else if (Left_drive > MAX_VALUE) {
 8000dce:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8000dd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd2:	429a      	cmp	r2, r3
 8000dd4:	dd01      	ble.n	8000dda <PID_control+0x196>
		  Left_drive = MAX_VALUE;
 8000dd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dd8:	64fb      	str	r3, [r7, #76]	; 0x4c
	  }

	  if (Right_drive < MIN_VALUE) {
 8000dda:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000ddc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000dde:	429a      	cmp	r2, r3
 8000de0:	da02      	bge.n	8000de8 <PID_control+0x1a4>
		  Right_drive = MIN_VALUE;
 8000de2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000de4:	64bb      	str	r3, [r7, #72]	; 0x48
 8000de6:	e005      	b.n	8000df4 <PID_control+0x1b0>
	  } else if (Right_drive > MAX_VALUE) {
 8000de8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8000dea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000dec:	429a      	cmp	r2, r3
 8000dee:	dd01      	ble.n	8000df4 <PID_control+0x1b0>
		  Right_drive = MAX_VALUE;
 8000df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000df2:	64bb      	str	r3, [r7, #72]	; 0x48
	  }

	  // Example return statement, replace with actual calculated values
	  struct DriveValues result;
	  result.LEFT = Left_drive; // Example value
 8000df4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8000df6:	627b      	str	r3, [r7, #36]	; 0x24
	  result.RIGHT = Right_drive; // Example value
 8000df8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8000dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	  return result;
 8000dfc:	69fb      	ldr	r3, [r7, #28]
 8000dfe:	461a      	mov	r2, r3
 8000e00:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000e04:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000e08:	e882 0003 	stmia.w	r2, {r0, r1}

}
 8000e0c:	69f8      	ldr	r0, [r7, #28]
 8000e0e:	3768      	adds	r7, #104	; 0x68
 8000e10:	46bd      	mov	sp, r7
 8000e12:	bdb0      	pop	{r4, r5, r7, pc}
 8000e14:	20000188 	.word	0x20000188
 8000e18:	20000000 	.word	0x20000000
 8000e1c:	fffffc00 	.word	0xfffffc00

08000e20 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e20:	b590      	push	{r4, r7, lr}
 8000e22:	b085      	sub	sp, #20
 8000e24:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e26:	f001 fd9b 	bl	8002960 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e2a:	f000 f885 	bl	8000f38 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e2e:	f000 fd45 	bl	80018bc <MX_GPIO_Init>
  MX_ADC1_Init();
 8000e32:	f000 f8eb 	bl	800100c <MX_ADC1_Init>
  MX_I2C2_Init();
 8000e36:	f000 f98d 	bl	8001154 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000e3a:	f000 f9ef 	bl	800121c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000e3e:	f000 faed 	bl	800141c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000e42:	f000 fb3f 	bl	80014c4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000e46:	f000 fbe9 	bl	800161c <MX_TIM8_Init>
  MX_TIM9_Init();
 8000e4a:	f000 fcab 	bl	80017a4 <MX_TIM9_Init>
  MX_UART4_Init();
 8000e4e:	f000 fd0b 	bl	8001868 <MX_UART4_Init>
  MX_SPI1_Init();
 8000e52:	f000 f9ad 	bl	80011b0 <MX_SPI1_Init>
  MX_ADC2_Init();
 8000e56:	f000 f92b 	bl	80010b0 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000e5a:	f000 fa8b 	bl	8001374 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000e5e:	f000 fba7 	bl	80015b0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

//  #define ADDRESS_TO 0x40

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000e62:	2100      	movs	r1, #0
 8000e64:	482e      	ldr	r0, [pc, #184]	; (8000f20 <main+0x100>)
 8000e66:	f003 ffe7 	bl	8004e38 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000e6a:	2104      	movs	r1, #4
 8000e6c:	482c      	ldr	r0, [pc, #176]	; (8000f20 <main+0x100>)
 8000e6e:	f003 ffe3 	bl	8004e38 <HAL_TIM_PWM_Start>

  //Initialize MPU6050 module
  mpu6050_init();
 8000e72:	f001 f889 	bl	8001f88 <mpu6050_init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  calibrate();
 8000e76:	f000 ff97 	bl	8001da8 <calibrate>
  printf("Caliberation Done!");
 8000e7a:	482a      	ldr	r0, [pc, #168]	; (8000f24 <main+0x104>)
 8000e7c:	f005 fb70 	bl	8006560 <iprintf>
  while (1)
  {

	  //Start motors at full speed
	  motor(left, Forward);motor(right, Forward);
 8000e80:	2101      	movs	r1, #1
 8000e82:	2000      	movs	r0, #0
 8000e84:	f7ff fe96 	bl	8000bb4 <motor>
 8000e88:	2101      	movs	r1, #1
 8000e8a:	2001      	movs	r0, #1
 8000e8c:	f7ff fe92 	bl	8000bb4 <motor>

	  //update the IR array with current data
	  updateIR();
 8000e90:	f000 fe3a 	bl	8001b08 <updateIR>

	  int Left_drive, Right_drive; // Variables to store the returned drive values

	  // Call the PID_control function and store the returned values
	  struct DriveValues driveValues = PID_control(Kp, Kd, Ki, digital_IR);
 8000e94:	4b24      	ldr	r3, [pc, #144]	; (8000f28 <main+0x108>)
 8000e96:	ed93 7b00 	vldr	d7, [r3]
 8000e9a:	4b24      	ldr	r3, [pc, #144]	; (8000f2c <main+0x10c>)
 8000e9c:	ed93 6b00 	vldr	d6, [r3]
 8000ea0:	4b23      	ldr	r3, [pc, #140]	; (8000f30 <main+0x110>)
 8000ea2:	ed93 5b00 	vldr	d5, [r3]
 8000ea6:	463b      	mov	r3, r7
 8000ea8:	4922      	ldr	r1, [pc, #136]	; (8000f34 <main+0x114>)
 8000eaa:	eeb0 2a45 	vmov.f32	s4, s10
 8000eae:	eef0 2a65 	vmov.f32	s5, s11
 8000eb2:	eeb0 1a46 	vmov.f32	s2, s12
 8000eb6:	eef0 1a66 	vmov.f32	s3, s13
 8000eba:	eeb0 0a47 	vmov.f32	s0, s14
 8000ebe:	eef0 0a67 	vmov.f32	s1, s15
 8000ec2:	4618      	mov	r0, r3
 8000ec4:	f7ff febe 	bl	8000c44 <PID_control>

	  // Extract the returned values from the structure
	  Left_drive = driveValues.LEFT;
 8000ec8:	683b      	ldr	r3, [r7, #0]
 8000eca:	60fb      	str	r3, [r7, #12]
	  Right_drive = driveValues.RIGHT;
 8000ecc:	687b      	ldr	r3, [r7, #4]
 8000ece:	60bb      	str	r3, [r7, #8]

	  if(Right_drive < 0){
 8000ed0:	68bb      	ldr	r3, [r7, #8]
 8000ed2:	2b00      	cmp	r3, #0
 8000ed4:	da05      	bge.n	8000ee2 <main+0xc2>
		  motor(right, Backward);
 8000ed6:	f04f 31ff 	mov.w	r1, #4294967295
 8000eda:	2001      	movs	r0, #1
 8000edc:	f7ff fe6a 	bl	8000bb4 <motor>
 8000ee0:	e003      	b.n	8000eea <main+0xca>
	  } else {
		  motor(right, Forward);
 8000ee2:	2101      	movs	r1, #1
 8000ee4:	2001      	movs	r0, #1
 8000ee6:	f7ff fe65 	bl	8000bb4 <motor>
	  }


	  if(Left_drive < 0){
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	da05      	bge.n	8000efc <main+0xdc>
		  motor(left, Backward);
 8000ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f7ff fe5d 	bl	8000bb4 <motor>
 8000efa:	e003      	b.n	8000f04 <main+0xe4>
	  } else {
		  motor(left, Forward);
 8000efc:	2101      	movs	r1, #1
 8000efe:	2000      	movs	r0, #0
 8000f00:	f7ff fe58 	bl	8000bb4 <motor>
	  }


	  speed(Get_abs(Left_drive), Get_abs(Right_drive));
 8000f04:	68f8      	ldr	r0, [r7, #12]
 8000f06:	f001 f829 	bl	8001f5c <Get_abs>
 8000f0a:	4604      	mov	r4, r0
 8000f0c:	68b8      	ldr	r0, [r7, #8]
 8000f0e:	f001 f825 	bl	8001f5c <Get_abs>
 8000f12:	4603      	mov	r3, r0
 8000f14:	4619      	mov	r1, r3
 8000f16:	4620      	mov	r0, r4
 8000f18:	f7ff fe36 	bl	8000b88 <speed>
  {
 8000f1c:	e7b0      	b.n	8000e80 <main+0x60>
 8000f1e:	bf00      	nop
 8000f20:	200003b4 	.word	0x200003b4
 8000f24:	08007318 	.word	0x08007318
 8000f28:	20000068 	.word	0x20000068
 8000f2c:	20000078 	.word	0x20000078
 8000f30:	20000070 	.word	0x20000070
 8000f34:	200001f4 	.word	0x200001f4

08000f38 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	b094      	sub	sp, #80	; 0x50
 8000f3c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f3e:	f107 0320 	add.w	r3, r7, #32
 8000f42:	2230      	movs	r2, #48	; 0x30
 8000f44:	2100      	movs	r1, #0
 8000f46:	4618      	mov	r0, r3
 8000f48:	f005 fc50 	bl	80067ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f4c:	f107 030c 	add.w	r3, r7, #12
 8000f50:	2200      	movs	r2, #0
 8000f52:	601a      	str	r2, [r3, #0]
 8000f54:	605a      	str	r2, [r3, #4]
 8000f56:	609a      	str	r2, [r3, #8]
 8000f58:	60da      	str	r2, [r3, #12]
 8000f5a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	60bb      	str	r3, [r7, #8]
 8000f60:	4b28      	ldr	r3, [pc, #160]	; (8001004 <SystemClock_Config+0xcc>)
 8000f62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f64:	4a27      	ldr	r2, [pc, #156]	; (8001004 <SystemClock_Config+0xcc>)
 8000f66:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f6a:	6413      	str	r3, [r2, #64]	; 0x40
 8000f6c:	4b25      	ldr	r3, [pc, #148]	; (8001004 <SystemClock_Config+0xcc>)
 8000f6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f74:	60bb      	str	r3, [r7, #8]
 8000f76:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f78:	2300      	movs	r3, #0
 8000f7a:	607b      	str	r3, [r7, #4]
 8000f7c:	4b22      	ldr	r3, [pc, #136]	; (8001008 <SystemClock_Config+0xd0>)
 8000f7e:	681b      	ldr	r3, [r3, #0]
 8000f80:	4a21      	ldr	r2, [pc, #132]	; (8001008 <SystemClock_Config+0xd0>)
 8000f82:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f86:	6013      	str	r3, [r2, #0]
 8000f88:	4b1f      	ldr	r3, [pc, #124]	; (8001008 <SystemClock_Config+0xd0>)
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f90:	607b      	str	r3, [r7, #4]
 8000f92:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000f94:	2302      	movs	r3, #2
 8000f96:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000f98:	2301      	movs	r3, #1
 8000f9a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000f9c:	2310      	movs	r3, #16
 8000f9e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fa0:	2302      	movs	r3, #2
 8000fa2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000fa4:	2300      	movs	r3, #0
 8000fa6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000fa8:	2308      	movs	r3, #8
 8000faa:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000fac:	23a8      	movs	r3, #168	; 0xa8
 8000fae:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fb0:	2302      	movs	r3, #2
 8000fb2:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000fb4:	2304      	movs	r3, #4
 8000fb6:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fb8:	f107 0320 	add.w	r3, r7, #32
 8000fbc:	4618      	mov	r0, r3
 8000fbe:	f003 f9b1 	bl	8004324 <HAL_RCC_OscConfig>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000fc8:	f000 ffd9 	bl	8001f7e <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000fcc:	230f      	movs	r3, #15
 8000fce:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000fd0:	2302      	movs	r3, #2
 8000fd2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000fd4:	2300      	movs	r3, #0
 8000fd6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000fd8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000fdc:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000fde:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fe2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000fe4:	f107 030c 	add.w	r3, r7, #12
 8000fe8:	2105      	movs	r1, #5
 8000fea:	4618      	mov	r0, r3
 8000fec:	f003 fc12 	bl	8004814 <HAL_RCC_ClockConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000ff6:	f000 ffc2 	bl	8001f7e <Error_Handler>
  }
}
 8000ffa:	bf00      	nop
 8000ffc:	3750      	adds	r7, #80	; 0x50
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	40023800 	.word	0x40023800
 8001008:	40007000 	.word	0x40007000

0800100c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001012:	463b      	mov	r3, r7
 8001014:	2200      	movs	r2, #0
 8001016:	601a      	str	r2, [r3, #0]
 8001018:	605a      	str	r2, [r3, #4]
 800101a:	609a      	str	r2, [r3, #8]
 800101c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800101e:	4b21      	ldr	r3, [pc, #132]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001020:	4a21      	ldr	r2, [pc, #132]	; (80010a8 <MX_ADC1_Init+0x9c>)
 8001022:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001024:	4b1f      	ldr	r3, [pc, #124]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001026:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800102a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800102c:	4b1d      	ldr	r3, [pc, #116]	; (80010a4 <MX_ADC1_Init+0x98>)
 800102e:	2200      	movs	r2, #0
 8001030:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001032:	4b1c      	ldr	r3, [pc, #112]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001034:	2200      	movs	r2, #0
 8001036:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001038:	4b1a      	ldr	r3, [pc, #104]	; (80010a4 <MX_ADC1_Init+0x98>)
 800103a:	2200      	movs	r2, #0
 800103c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800103e:	4b19      	ldr	r3, [pc, #100]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001040:	2200      	movs	r2, #0
 8001042:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001046:	4b17      	ldr	r3, [pc, #92]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001048:	2200      	movs	r2, #0
 800104a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800104c:	4b15      	ldr	r3, [pc, #84]	; (80010a4 <MX_ADC1_Init+0x98>)
 800104e:	4a17      	ldr	r2, [pc, #92]	; (80010ac <MX_ADC1_Init+0xa0>)
 8001050:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001052:	4b14      	ldr	r3, [pc, #80]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001054:	2200      	movs	r2, #0
 8001056:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001058:	4b12      	ldr	r3, [pc, #72]	; (80010a4 <MX_ADC1_Init+0x98>)
 800105a:	2201      	movs	r2, #1
 800105c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800105e:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001066:	4b0f      	ldr	r3, [pc, #60]	; (80010a4 <MX_ADC1_Init+0x98>)
 8001068:	2201      	movs	r2, #1
 800106a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800106c:	480d      	ldr	r0, [pc, #52]	; (80010a4 <MX_ADC1_Init+0x98>)
 800106e:	f001 fce9 	bl	8002a44 <HAL_ADC_Init>
 8001072:	4603      	mov	r3, r0
 8001074:	2b00      	cmp	r3, #0
 8001076:	d001      	beq.n	800107c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001078:	f000 ff81 	bl	8001f7e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 800107c:	230a      	movs	r3, #10
 800107e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001080:	2301      	movs	r3, #1
 8001082:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001084:	2305      	movs	r3, #5
 8001086:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001088:	463b      	mov	r3, r7
 800108a:	4619      	mov	r1, r3
 800108c:	4805      	ldr	r0, [pc, #20]	; (80010a4 <MX_ADC1_Init+0x98>)
 800108e:	f001 fe87 	bl	8002da0 <HAL_ADC_ConfigChannel>
 8001092:	4603      	mov	r3, r0
 8001094:	2b00      	cmp	r3, #0
 8001096:	d001      	beq.n	800109c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001098:	f000 ff71 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800109c:	bf00      	nop
 800109e:	3710      	adds	r7, #16
 80010a0:	46bd      	mov	sp, r7
 80010a2:	bd80      	pop	{r7, pc}
 80010a4:	20000278 	.word	0x20000278
 80010a8:	40012000 	.word	0x40012000
 80010ac:	0f000001 	.word	0x0f000001

080010b0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80010b0:	b580      	push	{r7, lr}
 80010b2:	b084      	sub	sp, #16
 80010b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010b6:	463b      	mov	r3, r7
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80010c2:	4b21      	ldr	r3, [pc, #132]	; (8001148 <MX_ADC2_Init+0x98>)
 80010c4:	4a21      	ldr	r2, [pc, #132]	; (800114c <MX_ADC2_Init+0x9c>)
 80010c6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <MX_ADC2_Init+0x98>)
 80010ca:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80010ce:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010d0:	4b1d      	ldr	r3, [pc, #116]	; (8001148 <MX_ADC2_Init+0x98>)
 80010d2:	2200      	movs	r2, #0
 80010d4:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 80010d6:	4b1c      	ldr	r3, [pc, #112]	; (8001148 <MX_ADC2_Init+0x98>)
 80010d8:	2200      	movs	r2, #0
 80010da:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010dc:	4b1a      	ldr	r3, [pc, #104]	; (8001148 <MX_ADC2_Init+0x98>)
 80010de:	2200      	movs	r2, #0
 80010e0:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010e2:	4b19      	ldr	r3, [pc, #100]	; (8001148 <MX_ADC2_Init+0x98>)
 80010e4:	2200      	movs	r2, #0
 80010e6:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80010ea:	4b17      	ldr	r3, [pc, #92]	; (8001148 <MX_ADC2_Init+0x98>)
 80010ec:	2200      	movs	r2, #0
 80010ee:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80010f0:	4b15      	ldr	r3, [pc, #84]	; (8001148 <MX_ADC2_Init+0x98>)
 80010f2:	4a17      	ldr	r2, [pc, #92]	; (8001150 <MX_ADC2_Init+0xa0>)
 80010f4:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010f6:	4b14      	ldr	r3, [pc, #80]	; (8001148 <MX_ADC2_Init+0x98>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 80010fc:	4b12      	ldr	r3, [pc, #72]	; (8001148 <MX_ADC2_Init+0x98>)
 80010fe:	2201      	movs	r2, #1
 8001100:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001102:	4b11      	ldr	r3, [pc, #68]	; (8001148 <MX_ADC2_Init+0x98>)
 8001104:	2200      	movs	r2, #0
 8001106:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800110a:	4b0f      	ldr	r3, [pc, #60]	; (8001148 <MX_ADC2_Init+0x98>)
 800110c:	2201      	movs	r2, #1
 800110e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001110:	480d      	ldr	r0, [pc, #52]	; (8001148 <MX_ADC2_Init+0x98>)
 8001112:	f001 fc97 	bl	8002a44 <HAL_ADC_Init>
 8001116:	4603      	mov	r3, r0
 8001118:	2b00      	cmp	r3, #0
 800111a:	d001      	beq.n	8001120 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800111c:	f000 ff2f 	bl	8001f7e <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001120:	230b      	movs	r3, #11
 8001122:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001124:	2301      	movs	r3, #1
 8001126:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001128:	2305      	movs	r3, #5
 800112a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800112c:	463b      	mov	r3, r7
 800112e:	4619      	mov	r1, r3
 8001130:	4805      	ldr	r0, [pc, #20]	; (8001148 <MX_ADC2_Init+0x98>)
 8001132:	f001 fe35 	bl	8002da0 <HAL_ADC_ConfigChannel>
 8001136:	4603      	mov	r3, r0
 8001138:	2b00      	cmp	r3, #0
 800113a:	d001      	beq.n	8001140 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800113c:	f000 ff1f 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001140:	bf00      	nop
 8001142:	3710      	adds	r7, #16
 8001144:	46bd      	mov	sp, r7
 8001146:	bd80      	pop	{r7, pc}
 8001148:	200002c0 	.word	0x200002c0
 800114c:	40012100 	.word	0x40012100
 8001150:	0f000001 	.word	0x0f000001

08001154 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001158:	4b12      	ldr	r3, [pc, #72]	; (80011a4 <MX_I2C2_Init+0x50>)
 800115a:	4a13      	ldr	r2, [pc, #76]	; (80011a8 <MX_I2C2_Init+0x54>)
 800115c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800115e:	4b11      	ldr	r3, [pc, #68]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001160:	4a12      	ldr	r2, [pc, #72]	; (80011ac <MX_I2C2_Init+0x58>)
 8001162:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001164:	4b0f      	ldr	r3, [pc, #60]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800116a:	4b0e      	ldr	r3, [pc, #56]	; (80011a4 <MX_I2C2_Init+0x50>)
 800116c:	2200      	movs	r2, #0
 800116e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001170:	4b0c      	ldr	r3, [pc, #48]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001172:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001176:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001178:	4b0a      	ldr	r3, [pc, #40]	; (80011a4 <MX_I2C2_Init+0x50>)
 800117a:	2200      	movs	r2, #0
 800117c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001180:	2200      	movs	r2, #0
 8001182:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001184:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001186:	2200      	movs	r2, #0
 8001188:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <MX_I2C2_Init+0x50>)
 800118c:	2200      	movs	r2, #0
 800118e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001190:	4804      	ldr	r0, [pc, #16]	; (80011a4 <MX_I2C2_Init+0x50>)
 8001192:	f002 faeb 	bl	800376c <HAL_I2C_Init>
 8001196:	4603      	mov	r3, r0
 8001198:	2b00      	cmp	r3, #0
 800119a:	d001      	beq.n	80011a0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 800119c:	f000 feef 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80011a0:	bf00      	nop
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000308 	.word	0x20000308
 80011a8:	40005800 	.word	0x40005800
 80011ac:	000186a0 	.word	0x000186a0

080011b0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80011b0:	b580      	push	{r7, lr}
 80011b2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80011b4:	4b17      	ldr	r3, [pc, #92]	; (8001214 <MX_SPI1_Init+0x64>)
 80011b6:	4a18      	ldr	r2, [pc, #96]	; (8001218 <MX_SPI1_Init+0x68>)
 80011b8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80011ba:	4b16      	ldr	r3, [pc, #88]	; (8001214 <MX_SPI1_Init+0x64>)
 80011bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80011c0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80011c2:	4b14      	ldr	r3, [pc, #80]	; (8001214 <MX_SPI1_Init+0x64>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80011c8:	4b12      	ldr	r3, [pc, #72]	; (8001214 <MX_SPI1_Init+0x64>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80011ce:	4b11      	ldr	r3, [pc, #68]	; (8001214 <MX_SPI1_Init+0x64>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80011d4:	4b0f      	ldr	r3, [pc, #60]	; (8001214 <MX_SPI1_Init+0x64>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80011da:	4b0e      	ldr	r3, [pc, #56]	; (8001214 <MX_SPI1_Init+0x64>)
 80011dc:	f44f 7200 	mov.w	r2, #512	; 0x200
 80011e0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80011e2:	4b0c      	ldr	r3, [pc, #48]	; (8001214 <MX_SPI1_Init+0x64>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80011e8:	4b0a      	ldr	r3, [pc, #40]	; (8001214 <MX_SPI1_Init+0x64>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80011ee:	4b09      	ldr	r3, [pc, #36]	; (8001214 <MX_SPI1_Init+0x64>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80011f4:	4b07      	ldr	r3, [pc, #28]	; (8001214 <MX_SPI1_Init+0x64>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 80011fa:	4b06      	ldr	r3, [pc, #24]	; (8001214 <MX_SPI1_Init+0x64>)
 80011fc:	220a      	movs	r2, #10
 80011fe:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001200:	4804      	ldr	r0, [pc, #16]	; (8001214 <MX_SPI1_Init+0x64>)
 8001202:	f003 fce7 	bl	8004bd4 <HAL_SPI_Init>
 8001206:	4603      	mov	r3, r0
 8001208:	2b00      	cmp	r3, #0
 800120a:	d001      	beq.n	8001210 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800120c:	f000 feb7 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001210:	bf00      	nop
 8001212:	bd80      	pop	{r7, pc}
 8001214:	2000035c 	.word	0x2000035c
 8001218:	40013000 	.word	0x40013000

0800121c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b096      	sub	sp, #88	; 0x58
 8001220:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001222:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001230:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800123a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800123e:	2200      	movs	r2, #0
 8001240:	601a      	str	r2, [r3, #0]
 8001242:	605a      	str	r2, [r3, #4]
 8001244:	609a      	str	r2, [r3, #8]
 8001246:	60da      	str	r2, [r3, #12]
 8001248:	611a      	str	r2, [r3, #16]
 800124a:	615a      	str	r2, [r3, #20]
 800124c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800124e:	1d3b      	adds	r3, r7, #4
 8001250:	2220      	movs	r2, #32
 8001252:	2100      	movs	r1, #0
 8001254:	4618      	mov	r0, r3
 8001256:	f005 fac9 	bl	80067ec <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800125a:	4b44      	ldr	r3, [pc, #272]	; (800136c <MX_TIM1_Init+0x150>)
 800125c:	4a44      	ldr	r2, [pc, #272]	; (8001370 <MX_TIM1_Init+0x154>)
 800125e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001260:	4b42      	ldr	r3, [pc, #264]	; (800136c <MX_TIM1_Init+0x150>)
 8001262:	220f      	movs	r2, #15
 8001264:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001266:	4b41      	ldr	r3, [pc, #260]	; (800136c <MX_TIM1_Init+0x150>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800126c:	4b3f      	ldr	r3, [pc, #252]	; (800136c <MX_TIM1_Init+0x150>)
 800126e:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8001272:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001274:	4b3d      	ldr	r3, [pc, #244]	; (800136c <MX_TIM1_Init+0x150>)
 8001276:	2200      	movs	r2, #0
 8001278:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800127a:	4b3c      	ldr	r3, [pc, #240]	; (800136c <MX_TIM1_Init+0x150>)
 800127c:	2200      	movs	r2, #0
 800127e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001280:	4b3a      	ldr	r3, [pc, #232]	; (800136c <MX_TIM1_Init+0x150>)
 8001282:	2200      	movs	r2, #0
 8001284:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001286:	4839      	ldr	r0, [pc, #228]	; (800136c <MX_TIM1_Init+0x150>)
 8001288:	f003 fd2d 	bl	8004ce6 <HAL_TIM_Base_Init>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 8001292:	f000 fe74 	bl	8001f7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001296:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800129a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800129c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80012a0:	4619      	mov	r1, r3
 80012a2:	4832      	ldr	r0, [pc, #200]	; (800136c <MX_TIM1_Init+0x150>)
 80012a4:	f004 f8e8 	bl	8005478 <HAL_TIM_ConfigClockSource>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80012ae:	f000 fe66 	bl	8001f7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80012b2:	482e      	ldr	r0, [pc, #184]	; (800136c <MX_TIM1_Init+0x150>)
 80012b4:	f003 fd66 	bl	8004d84 <HAL_TIM_PWM_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80012be:	f000 fe5e 	bl	8001f7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80012ce:	4619      	mov	r1, r3
 80012d0:	4826      	ldr	r0, [pc, #152]	; (800136c <MX_TIM1_Init+0x150>)
 80012d2:	f004 fcdd 	bl	8005c90 <HAL_TIMEx_MasterConfigSynchronization>
 80012d6:	4603      	mov	r3, r0
 80012d8:	2b00      	cmp	r3, #0
 80012da:	d001      	beq.n	80012e0 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 80012dc:	f000 fe4f 	bl	8001f7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012e0:	2360      	movs	r3, #96	; 0x60
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012e8:	2300      	movs	r3, #0
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80012ec:	2300      	movs	r3, #0
 80012ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012f0:	2300      	movs	r3, #0
 80012f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80012f4:	2300      	movs	r3, #0
 80012f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80012f8:	2300      	movs	r3, #0
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001300:	2200      	movs	r2, #0
 8001302:	4619      	mov	r1, r3
 8001304:	4819      	ldr	r0, [pc, #100]	; (800136c <MX_TIM1_Init+0x150>)
 8001306:	f003 fff5 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 800130a:	4603      	mov	r3, r0
 800130c:	2b00      	cmp	r3, #0
 800130e:	d001      	beq.n	8001314 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001310:	f000 fe35 	bl	8001f7e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001314:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001318:	2204      	movs	r2, #4
 800131a:	4619      	mov	r1, r3
 800131c:	4813      	ldr	r0, [pc, #76]	; (800136c <MX_TIM1_Init+0x150>)
 800131e:	f003 ffe9 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 8001322:	4603      	mov	r3, r0
 8001324:	2b00      	cmp	r3, #0
 8001326:	d001      	beq.n	800132c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001328:	f000 fe29 	bl	8001f7e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800132c:	2300      	movs	r3, #0
 800132e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001330:	2300      	movs	r3, #0
 8001332:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001334:	2300      	movs	r3, #0
 8001336:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001338:	2300      	movs	r3, #0
 800133a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800133c:	2300      	movs	r3, #0
 800133e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001340:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001344:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4807      	ldr	r0, [pc, #28]	; (800136c <MX_TIM1_Init+0x150>)
 8001350:	f004 fd1a 	bl	8005d88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800135a:	f000 fe10 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800135e:	4803      	ldr	r0, [pc, #12]	; (800136c <MX_TIM1_Init+0x150>)
 8001360:	f001 f8ee 	bl	8002540 <HAL_TIM_MspPostInit>

}
 8001364:	bf00      	nop
 8001366:	3758      	adds	r7, #88	; 0x58
 8001368:	46bd      	mov	sp, r7
 800136a:	bd80      	pop	{r7, pc}
 800136c:	200003b4 	.word	0x200003b4
 8001370:	40010000 	.word	0x40010000

08001374 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001374:	b580      	push	{r7, lr}
 8001376:	b08c      	sub	sp, #48	; 0x30
 8001378:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800137a:	f107 030c 	add.w	r3, r7, #12
 800137e:	2224      	movs	r2, #36	; 0x24
 8001380:	2100      	movs	r1, #0
 8001382:	4618      	mov	r0, r3
 8001384:	f005 fa32 	bl	80067ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001388:	1d3b      	adds	r3, r7, #4
 800138a:	2200      	movs	r2, #0
 800138c:	601a      	str	r2, [r3, #0]
 800138e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001390:	4b21      	ldr	r3, [pc, #132]	; (8001418 <MX_TIM2_Init+0xa4>)
 8001392:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001396:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001398:	4b1f      	ldr	r3, [pc, #124]	; (8001418 <MX_TIM2_Init+0xa4>)
 800139a:	2200      	movs	r2, #0
 800139c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139e:	4b1e      	ldr	r3, [pc, #120]	; (8001418 <MX_TIM2_Init+0xa4>)
 80013a0:	2200      	movs	r2, #0
 80013a2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013a4:	4b1c      	ldr	r3, [pc, #112]	; (8001418 <MX_TIM2_Init+0xa4>)
 80013a6:	f04f 32ff 	mov.w	r2, #4294967295
 80013aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ac:	4b1a      	ldr	r3, [pc, #104]	; (8001418 <MX_TIM2_Init+0xa4>)
 80013ae:	2200      	movs	r2, #0
 80013b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b2:	4b19      	ldr	r3, [pc, #100]	; (8001418 <MX_TIM2_Init+0xa4>)
 80013b4:	2200      	movs	r2, #0
 80013b6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013b8:	2303      	movs	r3, #3
 80013ba:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80013bc:	2302      	movs	r3, #2
 80013be:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013c0:	2301      	movs	r3, #1
 80013c2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013c4:	2300      	movs	r3, #0
 80013c6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013c8:	2300      	movs	r3, #0
 80013ca:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80013cc:	2302      	movs	r3, #2
 80013ce:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013d0:	2301      	movs	r3, #1
 80013d2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80013d4:	2300      	movs	r3, #0
 80013d6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80013d8:	2300      	movs	r3, #0
 80013da:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80013dc:	f107 030c 	add.w	r3, r7, #12
 80013e0:	4619      	mov	r1, r3
 80013e2:	480d      	ldr	r0, [pc, #52]	; (8001418 <MX_TIM2_Init+0xa4>)
 80013e4:	f003 fdf0 	bl	8004fc8 <HAL_TIM_Encoder_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80013ee:	f000 fdc6 	bl	8001f7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013fa:	1d3b      	adds	r3, r7, #4
 80013fc:	4619      	mov	r1, r3
 80013fe:	4806      	ldr	r0, [pc, #24]	; (8001418 <MX_TIM2_Init+0xa4>)
 8001400:	f004 fc46 	bl	8005c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001404:	4603      	mov	r3, r0
 8001406:	2b00      	cmp	r3, #0
 8001408:	d001      	beq.n	800140e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800140a:	f000 fdb8 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800140e:	bf00      	nop
 8001410:	3730      	adds	r7, #48	; 0x30
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	200003fc 	.word	0x200003fc

0800141c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08c      	sub	sp, #48	; 0x30
 8001420:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001422:	f107 030c 	add.w	r3, r7, #12
 8001426:	2224      	movs	r2, #36	; 0x24
 8001428:	2100      	movs	r1, #0
 800142a:	4618      	mov	r0, r3
 800142c:	f005 f9de 	bl	80067ec <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001430:	1d3b      	adds	r3, r7, #4
 8001432:	2200      	movs	r2, #0
 8001434:	601a      	str	r2, [r3, #0]
 8001436:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001438:	4b20      	ldr	r3, [pc, #128]	; (80014bc <MX_TIM3_Init+0xa0>)
 800143a:	4a21      	ldr	r2, [pc, #132]	; (80014c0 <MX_TIM3_Init+0xa4>)
 800143c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800143e:	4b1f      	ldr	r3, [pc, #124]	; (80014bc <MX_TIM3_Init+0xa0>)
 8001440:	2200      	movs	r2, #0
 8001442:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b1d      	ldr	r3, [pc, #116]	; (80014bc <MX_TIM3_Init+0xa0>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800144a:	4b1c      	ldr	r3, [pc, #112]	; (80014bc <MX_TIM3_Init+0xa0>)
 800144c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001450:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b1a      	ldr	r3, [pc, #104]	; (80014bc <MX_TIM3_Init+0xa0>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b18      	ldr	r3, [pc, #96]	; (80014bc <MX_TIM3_Init+0xa0>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800145e:	2303      	movs	r3, #3
 8001460:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001462:	2302      	movs	r3, #2
 8001464:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001466:	2301      	movs	r3, #1
 8001468:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800146a:	2300      	movs	r3, #0
 800146c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800146e:	2300      	movs	r3, #0
 8001470:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 8001472:	2302      	movs	r3, #2
 8001474:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001476:	2301      	movs	r3, #1
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800147a:	2300      	movs	r3, #0
 800147c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800147e:	2300      	movs	r3, #0
 8001480:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4619      	mov	r1, r3
 8001488:	480c      	ldr	r0, [pc, #48]	; (80014bc <MX_TIM3_Init+0xa0>)
 800148a:	f003 fd9d 	bl	8004fc8 <HAL_TIM_Encoder_Init>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 8001494:	f000 fd73 	bl	8001f7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001498:	2300      	movs	r3, #0
 800149a:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	4619      	mov	r1, r3
 80014a4:	4805      	ldr	r0, [pc, #20]	; (80014bc <MX_TIM3_Init+0xa0>)
 80014a6:	f004 fbf3 	bl	8005c90 <HAL_TIMEx_MasterConfigSynchronization>
 80014aa:	4603      	mov	r3, r0
 80014ac:	2b00      	cmp	r3, #0
 80014ae:	d001      	beq.n	80014b4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80014b0:	f000 fd65 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80014b4:	bf00      	nop
 80014b6:	3730      	adds	r7, #48	; 0x30
 80014b8:	46bd      	mov	sp, r7
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	20000444 	.word	0x20000444
 80014c0:	40000400 	.word	0x40000400

080014c4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08e      	sub	sp, #56	; 0x38
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	f107 0320 	add.w	r3, r7, #32
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <MX_TIM4_Init+0xe4>)
 80014f6:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <MX_TIM4_Init+0xe8>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <MX_TIM4_Init+0xe4>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <MX_TIM4_Init+0xe4>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <MX_TIM4_Init+0xe4>)
 8001508:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800150c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150e:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <MX_TIM4_Init+0xe4>)
 8001510:	2200      	movs	r2, #0
 8001512:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001514:	4b24      	ldr	r3, [pc, #144]	; (80015a8 <MX_TIM4_Init+0xe4>)
 8001516:	2200      	movs	r2, #0
 8001518:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800151a:	4823      	ldr	r0, [pc, #140]	; (80015a8 <MX_TIM4_Init+0xe4>)
 800151c:	f003 fbe3 	bl	8004ce6 <HAL_TIM_Base_Init>
 8001520:	4603      	mov	r3, r0
 8001522:	2b00      	cmp	r3, #0
 8001524:	d001      	beq.n	800152a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001526:	f000 fd2a 	bl	8001f7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800152a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001530:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001534:	4619      	mov	r1, r3
 8001536:	481c      	ldr	r0, [pc, #112]	; (80015a8 <MX_TIM4_Init+0xe4>)
 8001538:	f003 ff9e 	bl	8005478 <HAL_TIM_ConfigClockSource>
 800153c:	4603      	mov	r3, r0
 800153e:	2b00      	cmp	r3, #0
 8001540:	d001      	beq.n	8001546 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001542:	f000 fd1c 	bl	8001f7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001546:	4818      	ldr	r0, [pc, #96]	; (80015a8 <MX_TIM4_Init+0xe4>)
 8001548:	f003 fc1c 	bl	8004d84 <HAL_TIM_PWM_Init>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d001      	beq.n	8001556 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001552:	f000 fd14 	bl	8001f7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001556:	2300      	movs	r3, #0
 8001558:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800155e:	f107 0320 	add.w	r3, r7, #32
 8001562:	4619      	mov	r1, r3
 8001564:	4810      	ldr	r0, [pc, #64]	; (80015a8 <MX_TIM4_Init+0xe4>)
 8001566:	f004 fb93 	bl	8005c90 <HAL_TIMEx_MasterConfigSynchronization>
 800156a:	4603      	mov	r3, r0
 800156c:	2b00      	cmp	r3, #0
 800156e:	d001      	beq.n	8001574 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 8001570:	f000 fd05 	bl	8001f7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001574:	2360      	movs	r3, #96	; 0x60
 8001576:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001578:	2300      	movs	r3, #0
 800157a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001580:	2300      	movs	r3, #0
 8001582:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001584:	1d3b      	adds	r3, r7, #4
 8001586:	2204      	movs	r2, #4
 8001588:	4619      	mov	r1, r3
 800158a:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM4_Init+0xe4>)
 800158c:	f003 feb2 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 8001596:	f000 fcf2 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800159a:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM4_Init+0xe4>)
 800159c:	f000 ffd0 	bl	8002540 <HAL_TIM_MspPostInit>

}
 80015a0:	bf00      	nop
 80015a2:	3738      	adds	r7, #56	; 0x38
 80015a4:	46bd      	mov	sp, r7
 80015a6:	bd80      	pop	{r7, pc}
 80015a8:	2000048c 	.word	0x2000048c
 80015ac:	40000800 	.word	0x40000800

080015b0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	463b      	mov	r3, r7
 80015b8:	2200      	movs	r2, #0
 80015ba:	601a      	str	r2, [r3, #0]
 80015bc:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c0:	4a15      	ldr	r2, [pc, #84]	; (8001618 <MX_TIM6_Init+0x68>)
 80015c2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16800-1;
 80015c4:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_TIM6_Init+0x64>)
 80015c6:	f244 129f 	movw	r2, #16799	; 0x419f
 80015ca:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_TIM6_Init+0x64>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_TIM6_Init+0x64>)
 80015d4:	f242 720f 	movw	r2, #9999	; 0x270f
 80015d8:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_TIM6_Init+0x64>)
 80015dc:	2200      	movs	r2, #0
 80015de:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 80015e0:	480c      	ldr	r0, [pc, #48]	; (8001614 <MX_TIM6_Init+0x64>)
 80015e2:	f003 fb80 	bl	8004ce6 <HAL_TIM_Base_Init>
 80015e6:	4603      	mov	r3, r0
 80015e8:	2b00      	cmp	r3, #0
 80015ea:	d001      	beq.n	80015f0 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 80015ec:	f000 fcc7 	bl	8001f7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015f0:	2300      	movs	r3, #0
 80015f2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015f4:	2300      	movs	r3, #0
 80015f6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 80015f8:	463b      	mov	r3, r7
 80015fa:	4619      	mov	r1, r3
 80015fc:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_TIM6_Init+0x64>)
 80015fe:	f004 fb47 	bl	8005c90 <HAL_TIMEx_MasterConfigSynchronization>
 8001602:	4603      	mov	r3, r0
 8001604:	2b00      	cmp	r3, #0
 8001606:	d001      	beq.n	800160c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001608:	f000 fcb9 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800160c:	bf00      	nop
 800160e:	3708      	adds	r7, #8
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	200004d4 	.word	0x200004d4
 8001618:	40001000 	.word	0x40001000

0800161c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	b096      	sub	sp, #88	; 0x58
 8001620:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001622:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001630:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001634:	2200      	movs	r2, #0
 8001636:	601a      	str	r2, [r3, #0]
 8001638:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800163a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800163e:	2200      	movs	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
 8001642:	605a      	str	r2, [r3, #4]
 8001644:	609a      	str	r2, [r3, #8]
 8001646:	60da      	str	r2, [r3, #12]
 8001648:	611a      	str	r2, [r3, #16]
 800164a:	615a      	str	r2, [r3, #20]
 800164c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800164e:	1d3b      	adds	r3, r7, #4
 8001650:	2220      	movs	r2, #32
 8001652:	2100      	movs	r1, #0
 8001654:	4618      	mov	r0, r3
 8001656:	f005 f8c9 	bl	80067ec <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800165a:	4b50      	ldr	r3, [pc, #320]	; (800179c <MX_TIM8_Init+0x180>)
 800165c:	4a50      	ldr	r2, [pc, #320]	; (80017a0 <MX_TIM8_Init+0x184>)
 800165e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 59;
 8001660:	4b4e      	ldr	r3, [pc, #312]	; (800179c <MX_TIM8_Init+0x180>)
 8001662:	223b      	movs	r2, #59	; 0x3b
 8001664:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001666:	4b4d      	ldr	r3, [pc, #308]	; (800179c <MX_TIM8_Init+0x180>)
 8001668:	2200      	movs	r2, #0
 800166a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 55999;
 800166c:	4b4b      	ldr	r3, [pc, #300]	; (800179c <MX_TIM8_Init+0x180>)
 800166e:	f64d 22bf 	movw	r2, #55999	; 0xdabf
 8001672:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001674:	4b49      	ldr	r3, [pc, #292]	; (800179c <MX_TIM8_Init+0x180>)
 8001676:	2200      	movs	r2, #0
 8001678:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 800167a:	4b48      	ldr	r3, [pc, #288]	; (800179c <MX_TIM8_Init+0x180>)
 800167c:	2200      	movs	r2, #0
 800167e:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001680:	4b46      	ldr	r3, [pc, #280]	; (800179c <MX_TIM8_Init+0x180>)
 8001682:	2200      	movs	r2, #0
 8001684:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 8001686:	4845      	ldr	r0, [pc, #276]	; (800179c <MX_TIM8_Init+0x180>)
 8001688:	f003 fb2d 	bl	8004ce6 <HAL_TIM_Base_Init>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 8001692:	f000 fc74 	bl	8001f7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001696:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800169a:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 800169c:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80016a0:	4619      	mov	r1, r3
 80016a2:	483e      	ldr	r0, [pc, #248]	; (800179c <MX_TIM8_Init+0x180>)
 80016a4:	f003 fee8 	bl	8005478 <HAL_TIM_ConfigClockSource>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80016ae:	f000 fc66 	bl	8001f7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80016b2:	483a      	ldr	r0, [pc, #232]	; (800179c <MX_TIM8_Init+0x180>)
 80016b4:	f003 fb66 	bl	8004d84 <HAL_TIM_PWM_Init>
 80016b8:	4603      	mov	r3, r0
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d001      	beq.n	80016c2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80016be:	f000 fc5e 	bl	8001f7e <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016c2:	2300      	movs	r3, #0
 80016c4:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016c6:	2300      	movs	r3, #0
 80016c8:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80016ca:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80016ce:	4619      	mov	r1, r3
 80016d0:	4832      	ldr	r0, [pc, #200]	; (800179c <MX_TIM8_Init+0x180>)
 80016d2:	f004 fadd 	bl	8005c90 <HAL_TIMEx_MasterConfigSynchronization>
 80016d6:	4603      	mov	r3, r0
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d001      	beq.n	80016e0 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 80016dc:	f000 fc4f 	bl	8001f7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016e0:	2360      	movs	r3, #96	; 0x60
 80016e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016e8:	2300      	movs	r3, #0
 80016ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016ec:	2300      	movs	r3, #0
 80016ee:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016f0:	2300      	movs	r3, #0
 80016f2:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016f4:	2300      	movs	r3, #0
 80016f6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016f8:	2300      	movs	r3, #0
 80016fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016fc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001700:	2200      	movs	r2, #0
 8001702:	4619      	mov	r1, r3
 8001704:	4825      	ldr	r0, [pc, #148]	; (800179c <MX_TIM8_Init+0x180>)
 8001706:	f003 fdf5 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 800170a:	4603      	mov	r3, r0
 800170c:	2b00      	cmp	r3, #0
 800170e:	d001      	beq.n	8001714 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001710:	f000 fc35 	bl	8001f7e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001714:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001718:	2204      	movs	r2, #4
 800171a:	4619      	mov	r1, r3
 800171c:	481f      	ldr	r0, [pc, #124]	; (800179c <MX_TIM8_Init+0x180>)
 800171e:	f003 fde9 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 8001722:	4603      	mov	r3, r0
 8001724:	2b00      	cmp	r3, #0
 8001726:	d001      	beq.n	800172c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001728:	f000 fc29 	bl	8001f7e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800172c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001730:	2208      	movs	r2, #8
 8001732:	4619      	mov	r1, r3
 8001734:	4819      	ldr	r0, [pc, #100]	; (800179c <MX_TIM8_Init+0x180>)
 8001736:	f003 fddd 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 800173a:	4603      	mov	r3, r0
 800173c:	2b00      	cmp	r3, #0
 800173e:	d001      	beq.n	8001744 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001740:	f000 fc1d 	bl	8001f7e <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001744:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001748:	220c      	movs	r2, #12
 800174a:	4619      	mov	r1, r3
 800174c:	4813      	ldr	r0, [pc, #76]	; (800179c <MX_TIM8_Init+0x180>)
 800174e:	f003 fdd1 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 8001752:	4603      	mov	r3, r0
 8001754:	2b00      	cmp	r3, #0
 8001756:	d001      	beq.n	800175c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001758:	f000 fc11 	bl	8001f7e <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800175c:	2300      	movs	r3, #0
 800175e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001760:	2300      	movs	r3, #0
 8001762:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001764:	2300      	movs	r3, #0
 8001766:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001768:	2300      	movs	r3, #0
 800176a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800176c:	2300      	movs	r3, #0
 800176e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001770:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001774:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001776:	2300      	movs	r3, #0
 8001778:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 800177a:	1d3b      	adds	r3, r7, #4
 800177c:	4619      	mov	r1, r3
 800177e:	4807      	ldr	r0, [pc, #28]	; (800179c <MX_TIM8_Init+0x180>)
 8001780:	f004 fb02 	bl	8005d88 <HAL_TIMEx_ConfigBreakDeadTime>
 8001784:	4603      	mov	r3, r0
 8001786:	2b00      	cmp	r3, #0
 8001788:	d001      	beq.n	800178e <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 800178a:	f000 fbf8 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 800178e:	4803      	ldr	r0, [pc, #12]	; (800179c <MX_TIM8_Init+0x180>)
 8001790:	f000 fed6 	bl	8002540 <HAL_TIM_MspPostInit>

}
 8001794:	bf00      	nop
 8001796:	3758      	adds	r7, #88	; 0x58
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	2000051c 	.word	0x2000051c
 80017a0:	40010400 	.word	0x40010400

080017a4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b08c      	sub	sp, #48	; 0x30
 80017a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017aa:	f107 0320 	add.w	r3, r7, #32
 80017ae:	2200      	movs	r2, #0
 80017b0:	601a      	str	r2, [r3, #0]
 80017b2:	605a      	str	r2, [r3, #4]
 80017b4:	609a      	str	r2, [r3, #8]
 80017b6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017b8:	1d3b      	adds	r3, r7, #4
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
 80017c4:	611a      	str	r2, [r3, #16]
 80017c6:	615a      	str	r2, [r3, #20]
 80017c8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80017ca:	4b25      	ldr	r3, [pc, #148]	; (8001860 <MX_TIM9_Init+0xbc>)
 80017cc:	4a25      	ldr	r2, [pc, #148]	; (8001864 <MX_TIM9_Init+0xc0>)
 80017ce:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 80017d0:	4b23      	ldr	r3, [pc, #140]	; (8001860 <MX_TIM9_Init+0xbc>)
 80017d2:	2200      	movs	r2, #0
 80017d4:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017d6:	4b22      	ldr	r3, [pc, #136]	; (8001860 <MX_TIM9_Init+0xbc>)
 80017d8:	2200      	movs	r2, #0
 80017da:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 80017dc:	4b20      	ldr	r3, [pc, #128]	; (8001860 <MX_TIM9_Init+0xbc>)
 80017de:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80017e2:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017e4:	4b1e      	ldr	r3, [pc, #120]	; (8001860 <MX_TIM9_Init+0xbc>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017ea:	4b1d      	ldr	r3, [pc, #116]	; (8001860 <MX_TIM9_Init+0xbc>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 80017f0:	481b      	ldr	r0, [pc, #108]	; (8001860 <MX_TIM9_Init+0xbc>)
 80017f2:	f003 fa78 	bl	8004ce6 <HAL_TIM_Base_Init>
 80017f6:	4603      	mov	r3, r0
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d001      	beq.n	8001800 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 80017fc:	f000 fbbf 	bl	8001f7e <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001800:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001804:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001806:	f107 0320 	add.w	r3, r7, #32
 800180a:	4619      	mov	r1, r3
 800180c:	4814      	ldr	r0, [pc, #80]	; (8001860 <MX_TIM9_Init+0xbc>)
 800180e:	f003 fe33 	bl	8005478 <HAL_TIM_ConfigClockSource>
 8001812:	4603      	mov	r3, r0
 8001814:	2b00      	cmp	r3, #0
 8001816:	d001      	beq.n	800181c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001818:	f000 fbb1 	bl	8001f7e <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800181c:	4810      	ldr	r0, [pc, #64]	; (8001860 <MX_TIM9_Init+0xbc>)
 800181e:	f003 fab1 	bl	8004d84 <HAL_TIM_PWM_Init>
 8001822:	4603      	mov	r3, r0
 8001824:	2b00      	cmp	r3, #0
 8001826:	d001      	beq.n	800182c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001828:	f000 fba9 	bl	8001f7e <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800182c:	2360      	movs	r3, #96	; 0x60
 800182e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001830:	2300      	movs	r3, #0
 8001832:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001834:	2300      	movs	r3, #0
 8001836:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001838:	2300      	movs	r3, #0
 800183a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800183c:	1d3b      	adds	r3, r7, #4
 800183e:	2200      	movs	r2, #0
 8001840:	4619      	mov	r1, r3
 8001842:	4807      	ldr	r0, [pc, #28]	; (8001860 <MX_TIM9_Init+0xbc>)
 8001844:	f003 fd56 	bl	80052f4 <HAL_TIM_PWM_ConfigChannel>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d001      	beq.n	8001852 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800184e:	f000 fb96 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001852:	4803      	ldr	r0, [pc, #12]	; (8001860 <MX_TIM9_Init+0xbc>)
 8001854:	f000 fe74 	bl	8002540 <HAL_TIM_MspPostInit>

}
 8001858:	bf00      	nop
 800185a:	3730      	adds	r7, #48	; 0x30
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	20000564 	.word	0x20000564
 8001864:	40014000 	.word	0x40014000

08001868 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800186c:	4b11      	ldr	r3, [pc, #68]	; (80018b4 <MX_UART4_Init+0x4c>)
 800186e:	4a12      	ldr	r2, [pc, #72]	; (80018b8 <MX_UART4_Init+0x50>)
 8001870:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 8001872:	4b10      	ldr	r3, [pc, #64]	; (80018b4 <MX_UART4_Init+0x4c>)
 8001874:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001878:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800187a:	4b0e      	ldr	r3, [pc, #56]	; (80018b4 <MX_UART4_Init+0x4c>)
 800187c:	2200      	movs	r2, #0
 800187e:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001880:	4b0c      	ldr	r3, [pc, #48]	; (80018b4 <MX_UART4_Init+0x4c>)
 8001882:	2200      	movs	r2, #0
 8001884:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8001886:	4b0b      	ldr	r3, [pc, #44]	; (80018b4 <MX_UART4_Init+0x4c>)
 8001888:	2200      	movs	r2, #0
 800188a:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800188c:	4b09      	ldr	r3, [pc, #36]	; (80018b4 <MX_UART4_Init+0x4c>)
 800188e:	220c      	movs	r2, #12
 8001890:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001892:	4b08      	ldr	r3, [pc, #32]	; (80018b4 <MX_UART4_Init+0x4c>)
 8001894:	2200      	movs	r2, #0
 8001896:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001898:	4b06      	ldr	r3, [pc, #24]	; (80018b4 <MX_UART4_Init+0x4c>)
 800189a:	2200      	movs	r2, #0
 800189c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800189e:	4805      	ldr	r0, [pc, #20]	; (80018b4 <MX_UART4_Init+0x4c>)
 80018a0:	f004 fad8 	bl	8005e54 <HAL_UART_Init>
 80018a4:	4603      	mov	r3, r0
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d001      	beq.n	80018ae <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80018aa:	f000 fb68 	bl	8001f7e <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80018ae:	bf00      	nop
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	200005ac 	.word	0x200005ac
 80018b8:	40004c00 	.word	0x40004c00

080018bc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b08c      	sub	sp, #48	; 0x30
 80018c0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018c2:	f107 031c 	add.w	r3, r7, #28
 80018c6:	2200      	movs	r2, #0
 80018c8:	601a      	str	r2, [r3, #0]
 80018ca:	605a      	str	r2, [r3, #4]
 80018cc:	609a      	str	r2, [r3, #8]
 80018ce:	60da      	str	r2, [r3, #12]
 80018d0:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	61bb      	str	r3, [r7, #24]
 80018d6:	4b74      	ldr	r3, [pc, #464]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 80018d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018da:	4a73      	ldr	r2, [pc, #460]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 80018dc:	f043 0310 	orr.w	r3, r3, #16
 80018e0:	6313      	str	r3, [r2, #48]	; 0x30
 80018e2:	4b71      	ldr	r3, [pc, #452]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 80018e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018e6:	f003 0310 	and.w	r3, r3, #16
 80018ea:	61bb      	str	r3, [r7, #24]
 80018ec:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80018ee:	2300      	movs	r3, #0
 80018f0:	617b      	str	r3, [r7, #20]
 80018f2:	4b6d      	ldr	r3, [pc, #436]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 80018f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018f6:	4a6c      	ldr	r2, [pc, #432]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 80018f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80018fc:	6313      	str	r3, [r2, #48]	; 0x30
 80018fe:	4b6a      	ldr	r3, [pc, #424]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 8001900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001902:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001906:	617b      	str	r3, [r7, #20]
 8001908:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800190a:	2300      	movs	r3, #0
 800190c:	613b      	str	r3, [r7, #16]
 800190e:	4b66      	ldr	r3, [pc, #408]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	4a65      	ldr	r2, [pc, #404]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 8001914:	f043 0304 	orr.w	r3, r3, #4
 8001918:	6313      	str	r3, [r2, #48]	; 0x30
 800191a:	4b63      	ldr	r3, [pc, #396]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 800191c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800191e:	f003 0304 	and.w	r3, r3, #4
 8001922:	613b      	str	r3, [r7, #16]
 8001924:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001926:	2300      	movs	r3, #0
 8001928:	60fb      	str	r3, [r7, #12]
 800192a:	4b5f      	ldr	r3, [pc, #380]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 800192c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800192e:	4a5e      	ldr	r2, [pc, #376]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 8001930:	f043 0301 	orr.w	r3, r3, #1
 8001934:	6313      	str	r3, [r2, #48]	; 0x30
 8001936:	4b5c      	ldr	r3, [pc, #368]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 8001938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193a:	f003 0301 	and.w	r3, r3, #1
 800193e:	60fb      	str	r3, [r7, #12]
 8001940:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001942:	2300      	movs	r3, #0
 8001944:	60bb      	str	r3, [r7, #8]
 8001946:	4b58      	ldr	r3, [pc, #352]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 8001948:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194a:	4a57      	ldr	r2, [pc, #348]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 800194c:	f043 0302 	orr.w	r3, r3, #2
 8001950:	6313      	str	r3, [r2, #48]	; 0x30
 8001952:	4b55      	ldr	r3, [pc, #340]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 8001954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001956:	f003 0302 	and.w	r3, r3, #2
 800195a:	60bb      	str	r3, [r7, #8]
 800195c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800195e:	2300      	movs	r3, #0
 8001960:	607b      	str	r3, [r7, #4]
 8001962:	4b51      	ldr	r3, [pc, #324]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	4a50      	ldr	r2, [pc, #320]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 8001968:	f043 0308 	orr.w	r3, r3, #8
 800196c:	6313      	str	r3, [r2, #48]	; 0x30
 800196e:	4b4e      	ldr	r3, [pc, #312]	; (8001aa8 <MX_GPIO_Init+0x1ec>)
 8001970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001972:	f003 0308 	and.w	r3, r3, #8
 8001976:	607b      	str	r3, [r7, #4]
 8001978:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CLR_LED_4_Pin|CLR_INT_3_Pin|CLR_LED_3_Pin|RR_ARRAY_MUX_3_Pin
 800197a:	2200      	movs	r2, #0
 800197c:	f249 11ba 	movw	r1, #37306	; 0x91ba
 8001980:	484a      	ldr	r0, [pc, #296]	; (8001aac <MX_GPIO_Init+0x1f0>)
 8001982:	f001 fed9 	bl	8003738 <HAL_GPIO_WritePin>
                          |RR_ARRAY_MUX_4_Pin|TOF_LPIN_1_Pin|TOF_INT_6_Pin|CLR_LED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RR_ARRAY_ODD_Pin|RR_ARRAY_EVEN_Pin|FR_ARRAY_EVEN_Pin, GPIO_PIN_RESET);
 8001986:	2200      	movs	r2, #0
 8001988:	f241 0130 	movw	r1, #4144	; 0x1030
 800198c:	4848      	ldr	r0, [pc, #288]	; (8001ab0 <MX_GPIO_Init+0x1f4>)
 800198e:	f001 fed3 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RR_ARRAY_MUX_1_Pin|RR_ARRAY_MUX_2_Pin|FR_INA_Pin|FR_INB_Pin
 8001992:	2200      	movs	r2, #0
 8001994:	f24f 11c6 	movw	r1, #61894	; 0xf1c6
 8001998:	4846      	ldr	r0, [pc, #280]	; (8001ab4 <MX_GPIO_Init+0x1f8>)
 800199a:	f001 fecd 	bl	8003738 <HAL_GPIO_WritePin>
                          |RR_INA_Pin|RR_INB_Pin|LCD_DS_Pin|LCD_RESET_Pin
                          |LCD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TOF_LPIN_5_Pin|TOF_LPIN_4_Pin|TOF_LPIN_3_Pin|FR_ARRAY_SB2_Pin
 800199e:	2200      	movs	r2, #0
 80019a0:	f644 21ff 	movw	r1, #19199	; 0x4aff
 80019a4:	4844      	ldr	r0, [pc, #272]	; (8001ab8 <MX_GPIO_Init+0x1fc>)
 80019a6:	f001 fec7 	bl	8003738 <HAL_GPIO_WritePin>
                          |FR_ARRAY_SB3_Pin|FR_ARRAY_SB0_Pin|FR_ARRAY_SB1_Pin|FR_ARRAY_SA0_Pin
                          |FR_ARRAY_SA1_Pin|FR_ARRAY_SA2_Pin|FR_ARRAY_SA3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TOF_LPIN_2_Pin|CLR_LED_1_Pin|FR_ARRAY_ODD_Pin, GPIO_PIN_RESET);
 80019aa:	2200      	movs	r2, #0
 80019ac:	f44f 4111 	mov.w	r1, #37120	; 0x9100
 80019b0:	4842      	ldr	r0, [pc, #264]	; (8001abc <MX_GPIO_Init+0x200>)
 80019b2:	f001 fec1 	bl	8003738 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLR_INT_4_Pin IMU_INT_Pin TOF_INT_1_Pin TOF_LPIN_6_Pin
                           CLR_INT_2_Pin */
  GPIO_InitStruct.Pin = CLR_INT_4_Pin|IMU_INT_Pin|TOF_INT_1_Pin|TOF_LPIN_6_Pin
 80019b6:	f246 0345 	movw	r3, #24645	; 0x6045
 80019ba:	61fb      	str	r3, [r7, #28]
                          |CLR_INT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019bc:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c2:	2300      	movs	r3, #0
 80019c4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019c6:	f107 031c 	add.w	r3, r7, #28
 80019ca:	4619      	mov	r1, r3
 80019cc:	4837      	ldr	r0, [pc, #220]	; (8001aac <MX_GPIO_Init+0x1f0>)
 80019ce:	f001 fd17 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : CLR_LED_4_Pin CLR_INT_3_Pin CLR_LED_3_Pin RR_ARRAY_MUX_3_Pin
                           RR_ARRAY_MUX_4_Pin TOF_LPIN_1_Pin TOF_INT_6_Pin CLR_LED_2_Pin */
  GPIO_InitStruct.Pin = CLR_LED_4_Pin|CLR_INT_3_Pin|CLR_LED_3_Pin|RR_ARRAY_MUX_3_Pin
 80019d2:	f249 13ba 	movw	r3, #37306	; 0x91ba
 80019d6:	61fb      	str	r3, [r7, #28]
                          |RR_ARRAY_MUX_4_Pin|TOF_LPIN_1_Pin|TOF_INT_6_Pin|CLR_LED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d8:	2301      	movs	r3, #1
 80019da:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019dc:	2300      	movs	r3, #0
 80019de:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e0:	2300      	movs	r3, #0
 80019e2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80019e4:	f107 031c 	add.w	r3, r7, #28
 80019e8:	4619      	mov	r1, r3
 80019ea:	4830      	ldr	r0, [pc, #192]	; (8001aac <MX_GPIO_Init+0x1f0>)
 80019ec:	f001 fd08 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PROX_IN_Pin TOF_INT_2_Pin CLR_INT_1_Pin */
  GPIO_InitStruct.Pin = PROX_IN_Pin|TOF_INT_2_Pin|CLR_INT_1_Pin;
 80019f0:	f640 2308 	movw	r3, #2568	; 0xa08
 80019f4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fc:	2300      	movs	r3, #0
 80019fe:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	4619      	mov	r1, r3
 8001a06:	482d      	ldr	r0, [pc, #180]	; (8001abc <MX_GPIO_Init+0x200>)
 8001a08:	f001 fcfa 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_ARRAY_ODD_Pin RR_ARRAY_EVEN_Pin FR_ARRAY_EVEN_Pin */
  GPIO_InitStruct.Pin = RR_ARRAY_ODD_Pin|RR_ARRAY_EVEN_Pin|FR_ARRAY_EVEN_Pin;
 8001a0c:	f241 0330 	movw	r3, #4144	; 0x1030
 8001a10:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a12:	2301      	movs	r3, #1
 8001a14:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a16:	2300      	movs	r3, #0
 8001a18:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a1e:	f107 031c 	add.w	r3, r7, #28
 8001a22:	4619      	mov	r1, r3
 8001a24:	4822      	ldr	r0, [pc, #136]	; (8001ab0 <MX_GPIO_Init+0x1f4>)
 8001a26:	f001 fceb 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_ARRAY_MUX_1_Pin RR_ARRAY_MUX_2_Pin FR_INA_Pin FR_INB_Pin
                           RR_INA_Pin RR_INB_Pin LCD_DS_Pin LCD_RESET_Pin
                           LCD_CS_Pin */
  GPIO_InitStruct.Pin = RR_ARRAY_MUX_1_Pin|RR_ARRAY_MUX_2_Pin|FR_INA_Pin|FR_INB_Pin
 8001a2a:	f24f 13c6 	movw	r3, #61894	; 0xf1c6
 8001a2e:	61fb      	str	r3, [r7, #28]
                          |RR_INA_Pin|RR_INB_Pin|LCD_DS_Pin|LCD_RESET_Pin
                          |LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a30:	2301      	movs	r3, #1
 8001a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a38:	2300      	movs	r3, #0
 8001a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a3c:	f107 031c 	add.w	r3, r7, #28
 8001a40:	4619      	mov	r1, r3
 8001a42:	481c      	ldr	r0, [pc, #112]	; (8001ab4 <MX_GPIO_Init+0x1f8>)
 8001a44:	f001 fcdc 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_LPIN_5_Pin TOF_LPIN_4_Pin TOF_LPIN_3_Pin FR_ARRAY_SB2_Pin
                           FR_ARRAY_SB3_Pin FR_ARRAY_SB0_Pin FR_ARRAY_SB1_Pin FR_ARRAY_SA0_Pin
                           FR_ARRAY_SA1_Pin FR_ARRAY_SA2_Pin FR_ARRAY_SA3_Pin */
  GPIO_InitStruct.Pin = TOF_LPIN_5_Pin|TOF_LPIN_4_Pin|TOF_LPIN_3_Pin|FR_ARRAY_SB2_Pin
 8001a48:	f644 23ff 	movw	r3, #19199	; 0x4aff
 8001a4c:	61fb      	str	r3, [r7, #28]
                          |FR_ARRAY_SB3_Pin|FR_ARRAY_SB0_Pin|FR_ARRAY_SB1_Pin|FR_ARRAY_SA0_Pin
                          |FR_ARRAY_SA1_Pin|FR_ARRAY_SA2_Pin|FR_ARRAY_SA3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a52:	2300      	movs	r3, #0
 8001a54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a56:	2300      	movs	r3, #0
 8001a58:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a5a:	f107 031c 	add.w	r3, r7, #28
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4815      	ldr	r0, [pc, #84]	; (8001ab8 <MX_GPIO_Init+0x1fc>)
 8001a62:	f001 fccd 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_INT_5_Pin TOF_INT_4_Pin TOF_INT_3_Pin */
  GPIO_InitStruct.Pin = TOF_INT_5_Pin|TOF_INT_4_Pin|TOF_INT_3_Pin;
 8001a66:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 8001a6a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a6c:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001a70:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a72:	2300      	movs	r3, #0
 8001a74:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a76:	f107 031c 	add.w	r3, r7, #28
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	480e      	ldr	r0, [pc, #56]	; (8001ab8 <MX_GPIO_Init+0x1fc>)
 8001a7e:	f001 fcbf 	bl	8003400 <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_LPIN_2_Pin CLR_LED_1_Pin FR_ARRAY_ODD_Pin */
  GPIO_InitStruct.Pin = TOF_LPIN_2_Pin|CLR_LED_1_Pin|FR_ARRAY_ODD_Pin;
 8001a82:	f44f 4311 	mov.w	r3, #37120	; 0x9100
 8001a86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a88:	2301      	movs	r3, #1
 8001a8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8c:	2300      	movs	r3, #0
 8001a8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a90:	2300      	movs	r3, #0
 8001a92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a94:	f107 031c 	add.w	r3, r7, #28
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4808      	ldr	r0, [pc, #32]	; (8001abc <MX_GPIO_Init+0x200>)
 8001a9c:	f001 fcb0 	bl	8003400 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001aa0:	bf00      	nop
 8001aa2:	3730      	adds	r7, #48	; 0x30
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}
 8001aa8:	40023800 	.word	0x40023800
 8001aac:	40021000 	.word	0x40021000
 8001ab0:	40020800 	.word	0x40020800
 8001ab4:	40020400 	.word	0x40020400
 8001ab8:	40020c00 	.word	0x40020c00
 8001abc:	40020000 	.word	0x40020000

08001ac0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001ac0:	b480      	push	{r7}
 8001ac2:	b083      	sub	sp, #12
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	681b      	ldr	r3, [r3, #0]
 8001acc:	4a06      	ldr	r2, [pc, #24]	; (8001ae8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001ace:	4293      	cmp	r3, r2
 8001ad0:	d104      	bne.n	8001adc <HAL_TIM_PeriodElapsedCallback+0x1c>
    millis_counter++;
 8001ad2:	4b06      	ldr	r3, [pc, #24]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	3301      	adds	r3, #1
 8001ad8:	4a04      	ldr	r2, [pc, #16]	; (8001aec <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001ada:	6013      	str	r3, [r2, #0]
  }
}
 8001adc:	bf00      	nop
 8001ade:	370c      	adds	r7, #12
 8001ae0:	46bd      	mov	sp, r7
 8001ae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae6:	4770      	bx	lr
 8001ae8:	40001000 	.word	0x40001000
 8001aec:	200005f4 	.word	0x200005f4

08001af0 <millis>:

uint32_t millis() {
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  return millis_counter;
 8001af4:	4b03      	ldr	r3, [pc, #12]	; (8001b04 <millis+0x14>)
 8001af6:	681b      	ldr	r3, [r3, #0]
}
 8001af8:	4618      	mov	r0, r3
 8001afa:	46bd      	mov	sp, r7
 8001afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b00:	4770      	bx	lr
 8001b02:	bf00      	nop
 8001b04:	200005f4 	.word	0x200005f4

08001b08 <updateIR>:


void updateIR(){
 8001b08:	b580      	push	{r7, lr}
 8001b0a:	b082      	sub	sp, #8
 8001b0c:	af00      	add	r7, sp, #0
	  // loop through amount of leds. ARRAY STARTS FROM 1
	   HAL_GPIO_WritePin(FR_ARRAY_EVEN_GPIO_Port, FR_ARRAY_EVEN_Pin, GPIO_PIN_SET);
 8001b0e:	2201      	movs	r2, #1
 8001b10:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b14:	485a      	ldr	r0, [pc, #360]	; (8001c80 <updateIR+0x178>)
 8001b16:	f001 fe0f 	bl	8003738 <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(FR_ARRAY_ODD_GPIO_Port, FR_ARRAY_ODD_Pin, GPIO_PIN_SET);
 8001b1a:	2201      	movs	r2, #1
 8001b1c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b20:	4858      	ldr	r0, [pc, #352]	; (8001c84 <updateIR+0x17c>)
 8001b22:	f001 fe09 	bl	8003738 <HAL_GPIO_WritePin>
	  for (int i = 0; i < 25; i=i+2) {
 8001b26:	2300      	movs	r3, #0
 8001b28:	607b      	str	r3, [r7, #4]
 8001b2a:	e04d      	b.n	8001bc8 <updateIR+0xc0>
//		  array_no = i;
			FR_Array_Mux_In_Select(i+1);
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	3301      	adds	r3, #1
 8001b30:	4618      	mov	r0, r3
 8001b32:	f000 f8b7 	bl	8001ca4 <FR_Array_Mux_In_Select>
		  if(i <= 15){
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	2b0f      	cmp	r3, #15
 8001b3a:	dc18      	bgt.n	8001b6e <updateIR+0x66>
	  		  	adc1ConfigPrivate.Channel = ADC_CHANNEL_10;
 8001b3c:	4b52      	ldr	r3, [pc, #328]	; (8001c88 <updateIR+0x180>)
 8001b3e:	220a      	movs	r2, #10
 8001b40:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc1, &adc1ConfigPrivate);
 8001b42:	4951      	ldr	r1, [pc, #324]	; (8001c88 <updateIR+0x180>)
 8001b44:	4851      	ldr	r0, [pc, #324]	; (8001c8c <updateIR+0x184>)
 8001b46:	f001 f92b 	bl	8002da0 <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc1);
 8001b4a:	4850      	ldr	r0, [pc, #320]	; (8001c8c <updateIR+0x184>)
 8001b4c:	f000 ffbe 	bl	8002acc <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001b50:	f04f 31ff 	mov.w	r1, #4294967295
 8001b54:	484d      	ldr	r0, [pc, #308]	; (8001c8c <updateIR+0x184>)
 8001b56:	f001 f88b 	bl	8002c70 <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc1);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc1);
 8001b5a:	484c      	ldr	r0, [pc, #304]	; (8001c8c <updateIR+0x184>)
 8001b5c:	f001 f913 	bl	8002d86 <HAL_ADC_GetValue>
 8001b60:	4603      	mov	r3, r0
 8001b62:	4619      	mov	r1, r3
 8001b64:	4a4a      	ldr	r2, [pc, #296]	; (8001c90 <updateIR+0x188>)
 8001b66:	687b      	ldr	r3, [r7, #4]
 8001b68:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001b6c:	e017      	b.n	8001b9e <updateIR+0x96>
//		  			delay_us(2);

		  }else{
			adc2ConfigPrivate.Channel = ADC_CHANNEL_11;
 8001b6e:	4b49      	ldr	r3, [pc, #292]	; (8001c94 <updateIR+0x18c>)
 8001b70:	220b      	movs	r2, #11
 8001b72:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc2, &adc2ConfigPrivate);
 8001b74:	4947      	ldr	r1, [pc, #284]	; (8001c94 <updateIR+0x18c>)
 8001b76:	4848      	ldr	r0, [pc, #288]	; (8001c98 <updateIR+0x190>)
 8001b78:	f001 f912 	bl	8002da0 <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc2);
 8001b7c:	4846      	ldr	r0, [pc, #280]	; (8001c98 <updateIR+0x190>)
 8001b7e:	f000 ffa5 	bl	8002acc <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001b82:	f04f 31ff 	mov.w	r1, #4294967295
 8001b86:	4844      	ldr	r0, [pc, #272]	; (8001c98 <updateIR+0x190>)
 8001b88:	f001 f872 	bl	8002c70 <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc2);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc2);
 8001b8c:	4842      	ldr	r0, [pc, #264]	; (8001c98 <updateIR+0x190>)
 8001b8e:	f001 f8fa 	bl	8002d86 <HAL_ADC_GetValue>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4619      	mov	r1, r3
 8001b96:	4a3e      	ldr	r2, [pc, #248]	; (8001c90 <updateIR+0x188>)
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//		  			delay_us(2);
		  }
		  digital_IR[i] = IR_array[i] < Ir_thresholds[i];
 8001b9e:	4a3c      	ldr	r2, [pc, #240]	; (8001c90 <updateIR+0x188>)
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ba6:	493d      	ldr	r1, [pc, #244]	; (8001c9c <updateIR+0x194>)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bae:	429a      	cmp	r2, r3
 8001bb0:	bfb4      	ite	lt
 8001bb2:	2301      	movlt	r3, #1
 8001bb4:	2300      	movge	r3, #0
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	4619      	mov	r1, r3
 8001bba:	4a39      	ldr	r2, [pc, #228]	; (8001ca0 <updateIR+0x198>)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (int i = 0; i < 25; i=i+2) {
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	3302      	adds	r3, #2
 8001bc6:	607b      	str	r3, [r7, #4]
 8001bc8:	687b      	ldr	r3, [r7, #4]
 8001bca:	2b18      	cmp	r3, #24
 8001bcc:	ddae      	ble.n	8001b2c <updateIR+0x24>
	  }
	  for (int i = 1; i < 25; i=i+2) {
 8001bce:	2301      	movs	r3, #1
 8001bd0:	603b      	str	r3, [r7, #0]
 8001bd2:	e04d      	b.n	8001c70 <updateIR+0x168>
//		  array_no = i;
			FR_Array_Mux_In_Select(i+1);
 8001bd4:	683b      	ldr	r3, [r7, #0]
 8001bd6:	3301      	adds	r3, #1
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 f863 	bl	8001ca4 <FR_Array_Mux_In_Select>
		  if(i <= 15){
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	2b0f      	cmp	r3, #15
 8001be2:	dc18      	bgt.n	8001c16 <updateIR+0x10e>
	  		  	adc1ConfigPrivate.Channel = ADC_CHANNEL_10;
 8001be4:	4b28      	ldr	r3, [pc, #160]	; (8001c88 <updateIR+0x180>)
 8001be6:	220a      	movs	r2, #10
 8001be8:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc1, &adc1ConfigPrivate);
 8001bea:	4927      	ldr	r1, [pc, #156]	; (8001c88 <updateIR+0x180>)
 8001bec:	4827      	ldr	r0, [pc, #156]	; (8001c8c <updateIR+0x184>)
 8001bee:	f001 f8d7 	bl	8002da0 <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc1);
 8001bf2:	4826      	ldr	r0, [pc, #152]	; (8001c8c <updateIR+0x184>)
 8001bf4:	f000 ff6a 	bl	8002acc <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8001bfc:	4823      	ldr	r0, [pc, #140]	; (8001c8c <updateIR+0x184>)
 8001bfe:	f001 f837 	bl	8002c70 <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc1);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc1);
 8001c02:	4822      	ldr	r0, [pc, #136]	; (8001c8c <updateIR+0x184>)
 8001c04:	f001 f8bf 	bl	8002d86 <HAL_ADC_GetValue>
 8001c08:	4603      	mov	r3, r0
 8001c0a:	4619      	mov	r1, r3
 8001c0c:	4a20      	ldr	r2, [pc, #128]	; (8001c90 <updateIR+0x188>)
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001c14:	e017      	b.n	8001c46 <updateIR+0x13e>
//		  			delay_us(2);
		  }else{
			adc2ConfigPrivate.Channel = ADC_CHANNEL_11;
 8001c16:	4b1f      	ldr	r3, [pc, #124]	; (8001c94 <updateIR+0x18c>)
 8001c18:	220b      	movs	r2, #11
 8001c1a:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc2, &adc2ConfigPrivate);
 8001c1c:	491d      	ldr	r1, [pc, #116]	; (8001c94 <updateIR+0x18c>)
 8001c1e:	481e      	ldr	r0, [pc, #120]	; (8001c98 <updateIR+0x190>)
 8001c20:	f001 f8be 	bl	8002da0 <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc2);
 8001c24:	481c      	ldr	r0, [pc, #112]	; (8001c98 <updateIR+0x190>)
 8001c26:	f000 ff51 	bl	8002acc <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001c2a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c2e:	481a      	ldr	r0, [pc, #104]	; (8001c98 <updateIR+0x190>)
 8001c30:	f001 f81e 	bl	8002c70 <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc2);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc2);
 8001c34:	4818      	ldr	r0, [pc, #96]	; (8001c98 <updateIR+0x190>)
 8001c36:	f001 f8a6 	bl	8002d86 <HAL_ADC_GetValue>
 8001c3a:	4603      	mov	r3, r0
 8001c3c:	4619      	mov	r1, r3
 8001c3e:	4a14      	ldr	r2, [pc, #80]	; (8001c90 <updateIR+0x188>)
 8001c40:	683b      	ldr	r3, [r7, #0]
 8001c42:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//		  			delay_us(2);

		  }
		  digital_IR[i] = IR_array[i] < Ir_thresholds[i];
 8001c46:	4a12      	ldr	r2, [pc, #72]	; (8001c90 <updateIR+0x188>)
 8001c48:	683b      	ldr	r3, [r7, #0]
 8001c4a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c4e:	4913      	ldr	r1, [pc, #76]	; (8001c9c <updateIR+0x194>)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c56:	429a      	cmp	r2, r3
 8001c58:	bfb4      	ite	lt
 8001c5a:	2301      	movlt	r3, #1
 8001c5c:	2300      	movge	r3, #0
 8001c5e:	b2db      	uxtb	r3, r3
 8001c60:	4619      	mov	r1, r3
 8001c62:	4a0f      	ldr	r2, [pc, #60]	; (8001ca0 <updateIR+0x198>)
 8001c64:	683b      	ldr	r3, [r7, #0]
 8001c66:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
	  for (int i = 1; i < 25; i=i+2) {
 8001c6a:	683b      	ldr	r3, [r7, #0]
 8001c6c:	3302      	adds	r3, #2
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	2b18      	cmp	r3, #24
 8001c74:	ddae      	ble.n	8001bd4 <updateIR+0xcc>
	  }
}
 8001c76:	bf00      	nop
 8001c78:	bf00      	nop
 8001c7a:	3708      	adds	r7, #8
 8001c7c:	46bd      	mov	sp, r7
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40020800 	.word	0x40020800
 8001c84:	40020000 	.word	0x40020000
 8001c88:	20000258 	.word	0x20000258
 8001c8c:	20000278 	.word	0x20000278
 8001c90:	20000190 	.word	0x20000190
 8001c94:	20000268 	.word	0x20000268
 8001c98:	200002c0 	.word	0x200002c0
 8001c9c:	20000004 	.word	0x20000004
 8001ca0:	200001f4 	.word	0x200001f4

08001ca4 <FR_Array_Mux_In_Select>:

void FR_Array_Mux_In_Select(int IR_LED_Num){
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
	if(IR_LED_Num <= 16){
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	2b10      	cmp	r3, #16
 8001cb0:	dc37      	bgt.n	8001d22 <FR_Array_Mux_In_Select+0x7e>
	    HAL_GPIO_WritePin(FR_ARRAY_SA0_GPIO_Port, FR_ARRAY_SA0_Pin, FR_IR_LED_ARR[IR_LED_Num-1][4]);
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	1e5a      	subs	r2, r3, #1
 8001cb6:	493a      	ldr	r1, [pc, #232]	; (8001da0 <FR_Array_Mux_In_Select+0xfc>)
 8001cb8:	4613      	mov	r3, r2
 8001cba:	009b      	lsls	r3, r3, #2
 8001cbc:	4413      	add	r3, r2
 8001cbe:	440b      	add	r3, r1
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	781b      	ldrb	r3, [r3, #0]
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	2110      	movs	r1, #16
 8001cc8:	4836      	ldr	r0, [pc, #216]	; (8001da4 <FR_Array_Mux_In_Select+0x100>)
 8001cca:	f001 fd35 	bl	8003738 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SA1_GPIO_Port, FR_ARRAY_SA1_Pin, FR_IR_LED_ARR[IR_LED_Num-1][3]);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	4933      	ldr	r1, [pc, #204]	; (8001da0 <FR_Array_Mux_In_Select+0xfc>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3303      	adds	r3, #3
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2120      	movs	r1, #32
 8001ce4:	482f      	ldr	r0, [pc, #188]	; (8001da4 <FR_Array_Mux_In_Select+0x100>)
 8001ce6:	f001 fd27 	bl	8003738 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SA2_GPIO_Port, FR_ARRAY_SA2_Pin, FR_IR_LED_ARR[IR_LED_Num-1][2]);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	492c      	ldr	r1, [pc, #176]	; (8001da0 <FR_Array_Mux_In_Select+0xfc>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3302      	adds	r3, #2
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2140      	movs	r1, #64	; 0x40
 8001d00:	4828      	ldr	r0, [pc, #160]	; (8001da4 <FR_Array_Mux_In_Select+0x100>)
 8001d02:	f001 fd19 	bl	8003738 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SA3_GPIO_Port, FR_ARRAY_SA3_Pin, FR_IR_LED_ARR[IR_LED_Num-1][1]);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	1e5a      	subs	r2, r3, #1
 8001d0a:	4925      	ldr	r1, [pc, #148]	; (8001da0 <FR_Array_Mux_In_Select+0xfc>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	3301      	adds	r3, #1
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2180      	movs	r1, #128	; 0x80
 8001d1c:	4821      	ldr	r0, [pc, #132]	; (8001da4 <FR_Array_Mux_In_Select+0x100>)
 8001d1e:	f001 fd0b 	bl	8003738 <HAL_GPIO_WritePin>
	}	if(IR_LED_Num > 16){
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	2b10      	cmp	r3, #16
 8001d26:	dd37      	ble.n	8001d98 <FR_Array_Mux_In_Select+0xf4>
	    HAL_GPIO_WritePin(FR_ARRAY_SB0_GPIO_Port, FR_ARRAY_SB0_Pin, FR_IR_LED_ARR[IR_LED_Num-1][4]);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	1e5a      	subs	r2, r3, #1
 8001d2c:	491c      	ldr	r1, [pc, #112]	; (8001da0 <FR_Array_Mux_In_Select+0xfc>)
 8001d2e:	4613      	mov	r3, r2
 8001d30:	009b      	lsls	r3, r3, #2
 8001d32:	4413      	add	r3, r2
 8001d34:	440b      	add	r3, r1
 8001d36:	3304      	adds	r3, #4
 8001d38:	781b      	ldrb	r3, [r3, #0]
 8001d3a:	461a      	mov	r2, r3
 8001d3c:	2104      	movs	r1, #4
 8001d3e:	4819      	ldr	r0, [pc, #100]	; (8001da4 <FR_Array_Mux_In_Select+0x100>)
 8001d40:	f001 fcfa 	bl	8003738 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SB1_GPIO_Port, FR_ARRAY_SB1_Pin, FR_IR_LED_ARR[IR_LED_Num-1][3]);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1e5a      	subs	r2, r3, #1
 8001d48:	4915      	ldr	r1, [pc, #84]	; (8001da0 <FR_Array_Mux_In_Select+0xfc>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	3303      	adds	r3, #3
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	2108      	movs	r1, #8
 8001d5a:	4812      	ldr	r0, [pc, #72]	; (8001da4 <FR_Array_Mux_In_Select+0x100>)
 8001d5c:	f001 fcec 	bl	8003738 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SB2_GPIO_Port, FR_ARRAY_SB2_Pin, FR_IR_LED_ARR[IR_LED_Num-1][2]);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1e5a      	subs	r2, r3, #1
 8001d64:	490e      	ldr	r1, [pc, #56]	; (8001da0 <FR_Array_Mux_In_Select+0xfc>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3302      	adds	r3, #2
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	2101      	movs	r1, #1
 8001d76:	480b      	ldr	r0, [pc, #44]	; (8001da4 <FR_Array_Mux_In_Select+0x100>)
 8001d78:	f001 fcde 	bl	8003738 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SB3_GPIO_Port, FR_ARRAY_SB3_Pin, FR_IR_LED_ARR[IR_LED_Num-1][1]);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	4907      	ldr	r1, [pc, #28]	; (8001da0 <FR_Array_Mux_In_Select+0xfc>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2102      	movs	r1, #2
 8001d92:	4804      	ldr	r0, [pc, #16]	; (8001da4 <FR_Array_Mux_In_Select+0x100>)
 8001d94:	f001 fcd0 	bl	8003738 <HAL_GPIO_WritePin>
	}

}
 8001d98:	bf00      	nop
 8001d9a:	3708      	adds	r7, #8
 8001d9c:	46bd      	mov	sp, r7
 8001d9e:	bd80      	pop	{r7, pc}
 8001da0:	20000080 	.word	0x20000080
 8001da4:	40020c00 	.word	0x40020c00

08001da8 <calibrate>:


void calibrate()
{
 8001da8:	b580      	push	{r7, lr}
 8001daa:	b0b8      	sub	sp, #224	; 0xe0
 8001dac:	af00      	add	r7, sp, #0
//
//  // Stop motors when calibrating
//  speed(255, 255);

  // make sensor_max_values array of length IR_ARRAY_LENGTH equal to sensor calibration array
  int sensor_max_values[IR_ARRAY_LENGTH] = {0};
 8001dae:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001db2:	2264      	movs	r2, #100	; 0x64
 8001db4:	2100      	movs	r1, #0
 8001db6:	4618      	mov	r0, r3
 8001db8:	f004 fd18 	bl	80067ec <memset>

  // sensor min values array
  int sensor_min_values[IR_ARRAY_LENGTH] = {0};
 8001dbc:	463b      	mov	r3, r7
 8001dbe:	2264      	movs	r2, #100	; 0x64
 8001dc0:	2100      	movs	r1, #0
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	f004 fd12 	bl	80067ec <memset>

  int now_time_for_calibration = millis();
 8001dc8:	f7ff fe92 	bl	8001af0 <millis>
 8001dcc:	4603      	mov	r3, r0
 8001dce:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

  while (millis() - now_time_for_calibration < 5)
 8001dd2:	e088      	b.n	8001ee6 <calibrate+0x13e>
  {

    updateIR();
 8001dd4:	f7ff fe98 	bl	8001b08 <updateIR>
    uint8_t allZeros = 1;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
    for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8001dde:	2300      	movs	r3, #0
 8001de0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001de4:	e011      	b.n	8001e0a <calibrate+0x62>
    {
      if (sensor_max_values[i] != 0)
 8001de6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	33e0      	adds	r3, #224	; 0xe0
 8001dee:	443b      	add	r3, r7
 8001df0:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001df4:	2b00      	cmp	r3, #0
 8001df6:	d003      	beq.n	8001e00 <calibrate+0x58>
      {
        allZeros = 0;
 8001df8:	2300      	movs	r3, #0
 8001dfa:	f887 30df 	strb.w	r3, [r7, #223]	; 0xdf
        break; // No need to continue checking if we find a non-zero value
 8001dfe:	e008      	b.n	8001e12 <calibrate+0x6a>
    for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8001e00:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e04:	3301      	adds	r3, #1
 8001e06:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001e0a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8001e0e:	2b18      	cmp	r3, #24
 8001e10:	dde9      	ble.n	8001de6 <calibrate+0x3e>
      }
    }

    if (allZeros)
 8001e12:	f897 30df 	ldrb.w	r3, [r7, #223]	; 0xdf
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d024      	beq.n	8001e64 <calibrate+0xbc>
    {
      for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e20:	e01c      	b.n	8001e5c <calibrate+0xb4>
      {
        sensor_max_values[i] = IR_array[i];
 8001e22:	4a4c      	ldr	r2, [pc, #304]	; (8001f54 <calibrate+0x1ac>)
 8001e24:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e28:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e2c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e30:	009b      	lsls	r3, r3, #2
 8001e32:	33e0      	adds	r3, #224	; 0xe0
 8001e34:	443b      	add	r3, r7
 8001e36:	f843 2c7c 	str.w	r2, [r3, #-124]
        sensor_min_values[i] = IR_array[i];
 8001e3a:	4a46      	ldr	r2, [pc, #280]	; (8001f54 <calibrate+0x1ac>)
 8001e3c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e40:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e44:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e48:	009b      	lsls	r3, r3, #2
 8001e4a:	33e0      	adds	r3, #224	; 0xe0
 8001e4c:	443b      	add	r3, r7
 8001e4e:	f843 2ce0 	str.w	r2, [r3, #-224]
      for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8001e52:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e56:	3301      	adds	r3, #1
 8001e58:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8001e5c:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8001e60:	2b18      	cmp	r3, #24
 8001e62:	ddde      	ble.n	8001e22 <calibrate+0x7a>
      }
    }

    for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8001e64:	2300      	movs	r3, #0
 8001e66:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001e6a:	e038      	b.n	8001ede <calibrate+0x136>
    {
      if (IR_array[i] > sensor_max_values[i])
 8001e6c:	4a39      	ldr	r2, [pc, #228]	; (8001f54 <calibrate+0x1ac>)
 8001e6e:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e72:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e76:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e7a:	009b      	lsls	r3, r3, #2
 8001e7c:	33e0      	adds	r3, #224	; 0xe0
 8001e7e:	443b      	add	r3, r7
 8001e80:	f853 3c7c 	ldr.w	r3, [r3, #-124]
 8001e84:	429a      	cmp	r2, r3
 8001e86:	dd0b      	ble.n	8001ea0 <calibrate+0xf8>
      {
        sensor_max_values[i] = IR_array[i];
 8001e88:	4a32      	ldr	r2, [pc, #200]	; (8001f54 <calibrate+0x1ac>)
 8001e8a:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e8e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001e92:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001e96:	009b      	lsls	r3, r3, #2
 8001e98:	33e0      	adds	r3, #224	; 0xe0
 8001e9a:	443b      	add	r3, r7
 8001e9c:	f843 2c7c 	str.w	r2, [r3, #-124]
      }
      if (IR_array[i] < sensor_min_values[i])
 8001ea0:	4a2c      	ldr	r2, [pc, #176]	; (8001f54 <calibrate+0x1ac>)
 8001ea2:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ea6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001eaa:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eae:	009b      	lsls	r3, r3, #2
 8001eb0:	33e0      	adds	r3, #224	; 0xe0
 8001eb2:	443b      	add	r3, r7
 8001eb4:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8001eb8:	429a      	cmp	r2, r3
 8001eba:	da0b      	bge.n	8001ed4 <calibrate+0x12c>
      {
        sensor_min_values[i] = IR_array[i];
 8001ebc:	4a25      	ldr	r2, [pc, #148]	; (8001f54 <calibrate+0x1ac>)
 8001ebe:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ec2:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001ec6:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001eca:	009b      	lsls	r3, r3, #2
 8001ecc:	33e0      	adds	r3, #224	; 0xe0
 8001ece:	443b      	add	r3, r7
 8001ed0:	f843 2ce0 	str.w	r2, [r3, #-224]
    for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8001ed4:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ed8:	3301      	adds	r3, #1
 8001eda:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001ede:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8001ee2:	2b18      	cmp	r3, #24
 8001ee4:	ddc2      	ble.n	8001e6c <calibrate+0xc4>
  while (millis() - now_time_for_calibration < 5)
 8001ee6:	f7ff fe03 	bl	8001af0 <millis>
 8001eea:	4602      	mov	r2, r0
 8001eec:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8001ef0:	1ad3      	subs	r3, r2, r3
 8001ef2:	2b04      	cmp	r3, #4
 8001ef4:	f67f af6e 	bls.w	8001dd4 <calibrate+0x2c>
      }
    }
  }

  speed(0, 0);
 8001ef8:	2100      	movs	r1, #0
 8001efa:	2000      	movs	r0, #0
 8001efc:	f7fe fe44 	bl	8000b88 <speed>

  for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8001f00:	2300      	movs	r3, #0
 8001f02:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f06:	e01c      	b.n	8001f42 <calibrate+0x19a>
  {
    Ir_thresholds[i] = (sensor_max_values[i] + sensor_min_values[i]) / 2;
 8001f08:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f0c:	009b      	lsls	r3, r3, #2
 8001f0e:	33e0      	adds	r3, #224	; 0xe0
 8001f10:	443b      	add	r3, r7
 8001f12:	f853 2c7c 	ldr.w	r2, [r3, #-124]
 8001f16:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f1a:	009b      	lsls	r3, r3, #2
 8001f1c:	33e0      	adds	r3, #224	; 0xe0
 8001f1e:	443b      	add	r3, r7
 8001f20:	f853 3ce0 	ldr.w	r3, [r3, #-224]
 8001f24:	4413      	add	r3, r2
 8001f26:	0fda      	lsrs	r2, r3, #31
 8001f28:	4413      	add	r3, r2
 8001f2a:	105b      	asrs	r3, r3, #1
 8001f2c:	4619      	mov	r1, r3
 8001f2e:	4a0a      	ldr	r2, [pc, #40]	; (8001f58 <calibrate+0x1b0>)
 8001f30:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f34:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
  for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8001f38:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8001f42:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8001f46:	2b18      	cmp	r3, #24
 8001f48:	ddde      	ble.n	8001f08 <calibrate+0x160>
  }

}
 8001f4a:	bf00      	nop
 8001f4c:	bf00      	nop
 8001f4e:	37e0      	adds	r7, #224	; 0xe0
 8001f50:	46bd      	mov	sp, r7
 8001f52:	bd80      	pop	{r7, pc}
 8001f54:	20000190 	.word	0x20000190
 8001f58:	20000004 	.word	0x20000004

08001f5c <Get_abs>:
		HAL_Delay(3);
	  }
}

int Get_abs(int num)
{
 8001f5c:	b480      	push	{r7}
 8001f5e:	b083      	sub	sp, #12
 8001f60:	af00      	add	r7, sp, #0
 8001f62:	6078      	str	r0, [r7, #4]
	if (num>=0)
 8001f64:	687b      	ldr	r3, [r7, #4]
 8001f66:	2b00      	cmp	r3, #0
 8001f68:	db01      	blt.n	8001f6e <Get_abs+0x12>
	{
		return num;
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	e001      	b.n	8001f72 <Get_abs+0x16>
	}
	else
	{
		return -num;
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	425b      	negs	r3, r3
	}
}
 8001f72:	4618      	mov	r0, r3
 8001f74:	370c      	adds	r7, #12
 8001f76:	46bd      	mov	sp, r7
 8001f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f7c:	4770      	bx	lr

08001f7e <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001f82:	b672      	cpsid	i
}
 8001f84:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001f86:	e7fe      	b.n	8001f86 <Error_Handler+0x8>

08001f88 <mpu6050_init>:

extern I2C_HandleTypeDef hi2c2;


void mpu6050_init()
{
 8001f88:	b580      	push	{r7, lr}
 8001f8a:	b086      	sub	sp, #24
 8001f8c:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c2, (DEVICE_ADDRESS << 1) + 0, 1, 100);
 8001f8e:	2364      	movs	r3, #100	; 0x64
 8001f90:	2201      	movs	r2, #1
 8001f92:	21d0      	movs	r1, #208	; 0xd0
 8001f94:	4830      	ldr	r0, [pc, #192]	; (8002058 <mpu6050_init+0xd0>)
 8001f96:	f001 fe27 	bl	8003be8 <HAL_I2C_IsDeviceReady>
 8001f9a:	4603      	mov	r3, r0
 8001f9c:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 8001f9e:	79fb      	ldrb	r3, [r7, #7]
 8001fa0:	2b00      	cmp	r3, #0
 8001fa2:	d103      	bne.n	8001fac <mpu6050_init+0x24>
    {
        printf("The device is ready \n");
 8001fa4:	482d      	ldr	r0, [pc, #180]	; (800205c <mpu6050_init+0xd4>)
 8001fa6:	f004 fb41 	bl	800662c <puts>
 8001faa:	e002      	b.n	8001fb2 <mpu6050_init+0x2a>
    }
    else
    {
        printf("The device is not ready. Check cables \n ");
 8001fac:	482c      	ldr	r0, [pc, #176]	; (8002060 <mpu6050_init+0xd8>)
 8001fae:	f004 fad7 	bl	8006560 <iprintf>
    }

    uint8_t temp_data = FS_GYRO_500;
 8001fb2:	2308      	movs	r3, #8
 8001fb4:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 8001fb6:	2364      	movs	r3, #100	; 0x64
 8001fb8:	9302      	str	r3, [sp, #8]
 8001fba:	2301      	movs	r3, #1
 8001fbc:	9301      	str	r3, [sp, #4]
 8001fbe:	1dbb      	adds	r3, r7, #6
 8001fc0:	9300      	str	r3, [sp, #0]
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	221b      	movs	r2, #27
 8001fc6:	21d0      	movs	r1, #208	; 0xd0
 8001fc8:	4823      	ldr	r0, [pc, #140]	; (8002058 <mpu6050_init+0xd0>)
 8001fca:	f001 fd13 	bl	80039f4 <HAL_I2C_Mem_Write>
 8001fce:	4603      	mov	r3, r0
 8001fd0:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 8001fd2:	79fb      	ldrb	r3, [r7, #7]
 8001fd4:	2b00      	cmp	r3, #0
 8001fd6:	d103      	bne.n	8001fe0 <mpu6050_init+0x58>
    {
        printf("Configuring gyro \n");
 8001fd8:	4822      	ldr	r0, [pc, #136]	; (8002064 <mpu6050_init+0xdc>)
 8001fda:	f004 fb27 	bl	800662c <puts>
 8001fde:	e002      	b.n	8001fe6 <mpu6050_init+0x5e>
    }
    else
    {
        printf("Failed to configure gyro \n");
 8001fe0:	4821      	ldr	r0, [pc, #132]	; (8002068 <mpu6050_init+0xe0>)
 8001fe2:	f004 fb23 	bl	800662c <puts>
    }

    temp_data = FS_ACC_4G;
 8001fe6:	2308      	movs	r3, #8
 8001fe8:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, 100);
 8001fea:	2364      	movs	r3, #100	; 0x64
 8001fec:	9302      	str	r3, [sp, #8]
 8001fee:	2301      	movs	r3, #1
 8001ff0:	9301      	str	r3, [sp, #4]
 8001ff2:	1dbb      	adds	r3, r7, #6
 8001ff4:	9300      	str	r3, [sp, #0]
 8001ff6:	2301      	movs	r3, #1
 8001ff8:	221c      	movs	r2, #28
 8001ffa:	21d0      	movs	r1, #208	; 0xd0
 8001ffc:	4816      	ldr	r0, [pc, #88]	; (8002058 <mpu6050_init+0xd0>)
 8001ffe:	f001 fcf9 	bl	80039f4 <HAL_I2C_Mem_Write>
 8002002:	4603      	mov	r3, r0
 8002004:	71fb      	strb	r3, [r7, #7]
	if (ret == HAL_OK)
 8002006:	79fb      	ldrb	r3, [r7, #7]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d103      	bne.n	8002014 <mpu6050_init+0x8c>
	{
		printf("Configuring Acc \n");
 800200c:	4817      	ldr	r0, [pc, #92]	; (800206c <mpu6050_init+0xe4>)
 800200e:	f004 fb0d 	bl	800662c <puts>
 8002012:	e002      	b.n	800201a <mpu6050_init+0x92>
	}
	else
	{
		printf("Failed to configure acc \n");
 8002014:	4816      	ldr	r0, [pc, #88]	; (8002070 <mpu6050_init+0xe8>)
 8002016:	f004 fb09 	bl	800662c <puts>
	}

	temp_data = 0;
 800201a:	2300      	movs	r3, #0
 800201c:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, REG_USR_CTRL, 1, &temp_data, 1, 100);
 800201e:	2364      	movs	r3, #100	; 0x64
 8002020:	9302      	str	r3, [sp, #8]
 8002022:	2301      	movs	r3, #1
 8002024:	9301      	str	r3, [sp, #4]
 8002026:	1dbb      	adds	r3, r7, #6
 8002028:	9300      	str	r3, [sp, #0]
 800202a:	2301      	movs	r3, #1
 800202c:	226b      	movs	r2, #107	; 0x6b
 800202e:	21d0      	movs	r1, #208	; 0xd0
 8002030:	4809      	ldr	r0, [pc, #36]	; (8002058 <mpu6050_init+0xd0>)
 8002032:	f001 fcdf 	bl	80039f4 <HAL_I2C_Mem_Write>
 8002036:	4603      	mov	r3, r0
 8002038:	71fb      	strb	r3, [r7, #7]
	if (ret == HAL_OK)
 800203a:	79fb      	ldrb	r3, [r7, #7]
 800203c:	2b00      	cmp	r3, #0
 800203e:	d103      	bne.n	8002048 <mpu6050_init+0xc0>
	{
		printf("Exiting from sleep mode \n");
 8002040:	480c      	ldr	r0, [pc, #48]	; (8002074 <mpu6050_init+0xec>)
 8002042:	f004 faf3 	bl	800662c <puts>
	}
	else
	{
		printf("Failed to exit from sleep mode \n");
	}
}
 8002046:	e002      	b.n	800204e <mpu6050_init+0xc6>
		printf("Failed to exit from sleep mode \n");
 8002048:	480b      	ldr	r0, [pc, #44]	; (8002078 <mpu6050_init+0xf0>)
 800204a:	f004 faef 	bl	800662c <puts>
}
 800204e:	bf00      	nop
 8002050:	3708      	adds	r7, #8
 8002052:	46bd      	mov	sp, r7
 8002054:	bd80      	pop	{r7, pc}
 8002056:	bf00      	nop
 8002058:	20000308 	.word	0x20000308
 800205c:	0800732c 	.word	0x0800732c
 8002060:	08007344 	.word	0x08007344
 8002064:	08007370 	.word	0x08007370
 8002068:	08007384 	.word	0x08007384
 800206c:	080073a0 	.word	0x080073a0
 8002070:	080073b4 	.word	0x080073b4
 8002074:	080073d0 	.word	0x080073d0
 8002078:	080073ec 	.word	0x080073ec

0800207c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002082:	2300      	movs	r3, #0
 8002084:	607b      	str	r3, [r7, #4]
 8002086:	4b10      	ldr	r3, [pc, #64]	; (80020c8 <HAL_MspInit+0x4c>)
 8002088:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800208a:	4a0f      	ldr	r2, [pc, #60]	; (80020c8 <HAL_MspInit+0x4c>)
 800208c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002090:	6453      	str	r3, [r2, #68]	; 0x44
 8002092:	4b0d      	ldr	r3, [pc, #52]	; (80020c8 <HAL_MspInit+0x4c>)
 8002094:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002096:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800209a:	607b      	str	r3, [r7, #4]
 800209c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800209e:	2300      	movs	r3, #0
 80020a0:	603b      	str	r3, [r7, #0]
 80020a2:	4b09      	ldr	r3, [pc, #36]	; (80020c8 <HAL_MspInit+0x4c>)
 80020a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a6:	4a08      	ldr	r2, [pc, #32]	; (80020c8 <HAL_MspInit+0x4c>)
 80020a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020ac:	6413      	str	r3, [r2, #64]	; 0x40
 80020ae:	4b06      	ldr	r3, [pc, #24]	; (80020c8 <HAL_MspInit+0x4c>)
 80020b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b6:	603b      	str	r3, [r7, #0]
 80020b8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020ba:	bf00      	nop
 80020bc:	370c      	adds	r7, #12
 80020be:	46bd      	mov	sp, r7
 80020c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c4:	4770      	bx	lr
 80020c6:	bf00      	nop
 80020c8:	40023800 	.word	0x40023800

080020cc <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80020cc:	b580      	push	{r7, lr}
 80020ce:	b08c      	sub	sp, #48	; 0x30
 80020d0:	af00      	add	r7, sp, #0
 80020d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020d4:	f107 031c 	add.w	r3, r7, #28
 80020d8:	2200      	movs	r2, #0
 80020da:	601a      	str	r2, [r3, #0]
 80020dc:	605a      	str	r2, [r3, #4]
 80020de:	609a      	str	r2, [r3, #8]
 80020e0:	60da      	str	r2, [r3, #12]
 80020e2:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a3b      	ldr	r2, [pc, #236]	; (80021d8 <HAL_ADC_MspInit+0x10c>)
 80020ea:	4293      	cmp	r3, r2
 80020ec:	d142      	bne.n	8002174 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80020ee:	2300      	movs	r3, #0
 80020f0:	61bb      	str	r3, [r7, #24]
 80020f2:	4b3a      	ldr	r3, [pc, #232]	; (80021dc <HAL_ADC_MspInit+0x110>)
 80020f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020f6:	4a39      	ldr	r2, [pc, #228]	; (80021dc <HAL_ADC_MspInit+0x110>)
 80020f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020fc:	6453      	str	r3, [r2, #68]	; 0x44
 80020fe:	4b37      	ldr	r3, [pc, #220]	; (80021dc <HAL_ADC_MspInit+0x110>)
 8002100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002102:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002106:	61bb      	str	r3, [r7, #24]
 8002108:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210a:	2300      	movs	r3, #0
 800210c:	617b      	str	r3, [r7, #20]
 800210e:	4b33      	ldr	r3, [pc, #204]	; (80021dc <HAL_ADC_MspInit+0x110>)
 8002110:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002112:	4a32      	ldr	r2, [pc, #200]	; (80021dc <HAL_ADC_MspInit+0x110>)
 8002114:	f043 0304 	orr.w	r3, r3, #4
 8002118:	6313      	str	r3, [r2, #48]	; 0x30
 800211a:	4b30      	ldr	r3, [pc, #192]	; (80021dc <HAL_ADC_MspInit+0x110>)
 800211c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800211e:	f003 0304 	and.w	r3, r3, #4
 8002122:	617b      	str	r3, [r7, #20]
 8002124:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002126:	2300      	movs	r3, #0
 8002128:	613b      	str	r3, [r7, #16]
 800212a:	4b2c      	ldr	r3, [pc, #176]	; (80021dc <HAL_ADC_MspInit+0x110>)
 800212c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800212e:	4a2b      	ldr	r2, [pc, #172]	; (80021dc <HAL_ADC_MspInit+0x110>)
 8002130:	f043 0302 	orr.w	r3, r3, #2
 8002134:	6313      	str	r3, [r2, #48]	; 0x30
 8002136:	4b29      	ldr	r3, [pc, #164]	; (80021dc <HAL_ADC_MspInit+0x110>)
 8002138:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800213a:	f003 0302 	and.w	r3, r3, #2
 800213e:	613b      	str	r3, [r7, #16]
 8002140:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = FR_ARRAY_OUTA_Pin|BAT_MEASURE_Pin;
 8002142:	2305      	movs	r3, #5
 8002144:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002146:	2303      	movs	r3, #3
 8002148:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800214a:	2300      	movs	r3, #0
 800214c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800214e:	f107 031c 	add.w	r3, r7, #28
 8002152:	4619      	mov	r1, r3
 8002154:	4822      	ldr	r0, [pc, #136]	; (80021e0 <HAL_ADC_MspInit+0x114>)
 8002156:	f001 f953 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_ARR_OUT_Pin;
 800215a:	2301      	movs	r3, #1
 800215c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800215e:	2303      	movs	r3, #3
 8002160:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002162:	2300      	movs	r3, #0
 8002164:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RR_ARR_OUT_GPIO_Port, &GPIO_InitStruct);
 8002166:	f107 031c 	add.w	r3, r7, #28
 800216a:	4619      	mov	r1, r3
 800216c:	481d      	ldr	r0, [pc, #116]	; (80021e4 <HAL_ADC_MspInit+0x118>)
 800216e:	f001 f947 	bl	8003400 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8002172:	e02c      	b.n	80021ce <HAL_ADC_MspInit+0x102>
  else if(hadc->Instance==ADC2)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	4a1b      	ldr	r2, [pc, #108]	; (80021e8 <HAL_ADC_MspInit+0x11c>)
 800217a:	4293      	cmp	r3, r2
 800217c:	d127      	bne.n	80021ce <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800217e:	2300      	movs	r3, #0
 8002180:	60fb      	str	r3, [r7, #12]
 8002182:	4b16      	ldr	r3, [pc, #88]	; (80021dc <HAL_ADC_MspInit+0x110>)
 8002184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002186:	4a15      	ldr	r2, [pc, #84]	; (80021dc <HAL_ADC_MspInit+0x110>)
 8002188:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800218c:	6453      	str	r3, [r2, #68]	; 0x44
 800218e:	4b13      	ldr	r3, [pc, #76]	; (80021dc <HAL_ADC_MspInit+0x110>)
 8002190:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002192:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002196:	60fb      	str	r3, [r7, #12]
 8002198:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800219a:	2300      	movs	r3, #0
 800219c:	60bb      	str	r3, [r7, #8]
 800219e:	4b0f      	ldr	r3, [pc, #60]	; (80021dc <HAL_ADC_MspInit+0x110>)
 80021a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a2:	4a0e      	ldr	r2, [pc, #56]	; (80021dc <HAL_ADC_MspInit+0x110>)
 80021a4:	f043 0304 	orr.w	r3, r3, #4
 80021a8:	6313      	str	r3, [r2, #48]	; 0x30
 80021aa:	4b0c      	ldr	r3, [pc, #48]	; (80021dc <HAL_ADC_MspInit+0x110>)
 80021ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ae:	f003 0304 	and.w	r3, r3, #4
 80021b2:	60bb      	str	r3, [r7, #8]
 80021b4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FR_ARRAY_OUTB_Pin;
 80021b6:	2302      	movs	r3, #2
 80021b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021ba:	2303      	movs	r3, #3
 80021bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021be:	2300      	movs	r3, #0
 80021c0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FR_ARRAY_OUTB_GPIO_Port, &GPIO_InitStruct);
 80021c2:	f107 031c 	add.w	r3, r7, #28
 80021c6:	4619      	mov	r1, r3
 80021c8:	4805      	ldr	r0, [pc, #20]	; (80021e0 <HAL_ADC_MspInit+0x114>)
 80021ca:	f001 f919 	bl	8003400 <HAL_GPIO_Init>
}
 80021ce:	bf00      	nop
 80021d0:	3730      	adds	r7, #48	; 0x30
 80021d2:	46bd      	mov	sp, r7
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	40012000 	.word	0x40012000
 80021dc:	40023800 	.word	0x40023800
 80021e0:	40020800 	.word	0x40020800
 80021e4:	40020400 	.word	0x40020400
 80021e8:	40012100 	.word	0x40012100

080021ec <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021ec:	b580      	push	{r7, lr}
 80021ee:	b08a      	sub	sp, #40	; 0x28
 80021f0:	af00      	add	r7, sp, #0
 80021f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f4:	f107 0314 	add.w	r3, r7, #20
 80021f8:	2200      	movs	r2, #0
 80021fa:	601a      	str	r2, [r3, #0]
 80021fc:	605a      	str	r2, [r3, #4]
 80021fe:	609a      	str	r2, [r3, #8]
 8002200:	60da      	str	r2, [r3, #12]
 8002202:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	4a19      	ldr	r2, [pc, #100]	; (8002270 <HAL_I2C_MspInit+0x84>)
 800220a:	4293      	cmp	r3, r2
 800220c:	d12c      	bne.n	8002268 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800220e:	2300      	movs	r3, #0
 8002210:	613b      	str	r3, [r7, #16]
 8002212:	4b18      	ldr	r3, [pc, #96]	; (8002274 <HAL_I2C_MspInit+0x88>)
 8002214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002216:	4a17      	ldr	r2, [pc, #92]	; (8002274 <HAL_I2C_MspInit+0x88>)
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	6313      	str	r3, [r2, #48]	; 0x30
 800221e:	4b15      	ldr	r3, [pc, #84]	; (8002274 <HAL_I2C_MspInit+0x88>)
 8002220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002222:	f003 0302 	and.w	r3, r3, #2
 8002226:	613b      	str	r3, [r7, #16]
 8002228:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800222a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800222e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002230:	2312      	movs	r3, #18
 8002232:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002234:	2301      	movs	r3, #1
 8002236:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002238:	2303      	movs	r3, #3
 800223a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800223c:	2304      	movs	r3, #4
 800223e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002240:	f107 0314 	add.w	r3, r7, #20
 8002244:	4619      	mov	r1, r3
 8002246:	480c      	ldr	r0, [pc, #48]	; (8002278 <HAL_I2C_MspInit+0x8c>)
 8002248:	f001 f8da 	bl	8003400 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 800224c:	2300      	movs	r3, #0
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	4b08      	ldr	r3, [pc, #32]	; (8002274 <HAL_I2C_MspInit+0x88>)
 8002252:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002254:	4a07      	ldr	r2, [pc, #28]	; (8002274 <HAL_I2C_MspInit+0x88>)
 8002256:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800225a:	6413      	str	r3, [r2, #64]	; 0x40
 800225c:	4b05      	ldr	r3, [pc, #20]	; (8002274 <HAL_I2C_MspInit+0x88>)
 800225e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002260:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002264:	60fb      	str	r3, [r7, #12]
 8002266:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8002268:	bf00      	nop
 800226a:	3728      	adds	r7, #40	; 0x28
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}
 8002270:	40005800 	.word	0x40005800
 8002274:	40023800 	.word	0x40023800
 8002278:	40020400 	.word	0x40020400

0800227c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a28      	ldr	r2, [pc, #160]	; (800233c <HAL_SPI_MspInit+0xc0>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d149      	bne.n	8002332 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b27      	ldr	r3, [pc, #156]	; (8002340 <HAL_SPI_MspInit+0xc4>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a26      	ldr	r2, [pc, #152]	; (8002340 <HAL_SPI_MspInit+0xc4>)
 80022a8:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b24      	ldr	r3, [pc, #144]	; (8002340 <HAL_SPI_MspInit+0xc4>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b20      	ldr	r3, [pc, #128]	; (8002340 <HAL_SPI_MspInit+0xc4>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a1f      	ldr	r2, [pc, #124]	; (8002340 <HAL_SPI_MspInit+0xc4>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b1d      	ldr	r3, [pc, #116]	; (8002340 <HAL_SPI_MspInit+0xc4>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022d6:	2300      	movs	r3, #0
 80022d8:	60bb      	str	r3, [r7, #8]
 80022da:	4b19      	ldr	r3, [pc, #100]	; (8002340 <HAL_SPI_MspInit+0xc4>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	4a18      	ldr	r2, [pc, #96]	; (8002340 <HAL_SPI_MspInit+0xc4>)
 80022e0:	f043 0302 	orr.w	r3, r3, #2
 80022e4:	6313      	str	r3, [r2, #48]	; 0x30
 80022e6:	4b16      	ldr	r3, [pc, #88]	; (8002340 <HAL_SPI_MspInit+0xc4>)
 80022e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ea:	f003 0302 	and.w	r3, r3, #2
 80022ee:	60bb      	str	r3, [r7, #8]
 80022f0:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 80022f2:	2320      	movs	r3, #32
 80022f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022f6:	2302      	movs	r3, #2
 80022f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022fa:	2300      	movs	r3, #0
 80022fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022fe:	2303      	movs	r3, #3
 8002300:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002302:	2305      	movs	r3, #5
 8002304:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002306:	f107 0314 	add.w	r3, r7, #20
 800230a:	4619      	mov	r1, r3
 800230c:	480d      	ldr	r0, [pc, #52]	; (8002344 <HAL_SPI_MspInit+0xc8>)
 800230e:	f001 f877 	bl	8003400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002312:	2330      	movs	r3, #48	; 0x30
 8002314:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800231e:	2303      	movs	r3, #3
 8002320:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002322:	2305      	movs	r3, #5
 8002324:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002326:	f107 0314 	add.w	r3, r7, #20
 800232a:	4619      	mov	r1, r3
 800232c:	4806      	ldr	r0, [pc, #24]	; (8002348 <HAL_SPI_MspInit+0xcc>)
 800232e:	f001 f867 	bl	8003400 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002332:	bf00      	nop
 8002334:	3728      	adds	r7, #40	; 0x28
 8002336:	46bd      	mov	sp, r7
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	40013000 	.word	0x40013000
 8002340:	40023800 	.word	0x40023800
 8002344:	40020000 	.word	0x40020000
 8002348:	40020400 	.word	0x40020400

0800234c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800234c:	b580      	push	{r7, lr}
 800234e:	b088      	sub	sp, #32
 8002350:	af00      	add	r7, sp, #0
 8002352:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 8002354:	687b      	ldr	r3, [r7, #4]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a36      	ldr	r2, [pc, #216]	; (8002434 <HAL_TIM_Base_MspInit+0xe8>)
 800235a:	4293      	cmp	r3, r2
 800235c:	d10e      	bne.n	800237c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800235e:	2300      	movs	r3, #0
 8002360:	61fb      	str	r3, [r7, #28]
 8002362:	4b35      	ldr	r3, [pc, #212]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 8002364:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002366:	4a34      	ldr	r2, [pc, #208]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 8002368:	f043 0301 	orr.w	r3, r3, #1
 800236c:	6453      	str	r3, [r2, #68]	; 0x44
 800236e:	4b32      	ldr	r3, [pc, #200]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 8002370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002372:	f003 0301 	and.w	r3, r3, #1
 8002376:	61fb      	str	r3, [r7, #28]
 8002378:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 800237a:	e056      	b.n	800242a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 800237c:	687b      	ldr	r3, [r7, #4]
 800237e:	681b      	ldr	r3, [r3, #0]
 8002380:	4a2e      	ldr	r2, [pc, #184]	; (800243c <HAL_TIM_Base_MspInit+0xf0>)
 8002382:	4293      	cmp	r3, r2
 8002384:	d10e      	bne.n	80023a4 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002386:	2300      	movs	r3, #0
 8002388:	61bb      	str	r3, [r7, #24]
 800238a:	4b2b      	ldr	r3, [pc, #172]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 800238c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800238e:	4a2a      	ldr	r2, [pc, #168]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 8002390:	f043 0304 	orr.w	r3, r3, #4
 8002394:	6413      	str	r3, [r2, #64]	; 0x40
 8002396:	4b28      	ldr	r3, [pc, #160]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 8002398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800239a:	f003 0304 	and.w	r3, r3, #4
 800239e:	61bb      	str	r3, [r7, #24]
 80023a0:	69bb      	ldr	r3, [r7, #24]
}
 80023a2:	e042      	b.n	800242a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM6)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	4a25      	ldr	r2, [pc, #148]	; (8002440 <HAL_TIM_Base_MspInit+0xf4>)
 80023aa:	4293      	cmp	r3, r2
 80023ac:	d116      	bne.n	80023dc <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 80023ae:	2300      	movs	r3, #0
 80023b0:	617b      	str	r3, [r7, #20]
 80023b2:	4b21      	ldr	r3, [pc, #132]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 80023b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023b6:	4a20      	ldr	r2, [pc, #128]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 80023b8:	f043 0310 	orr.w	r3, r3, #16
 80023bc:	6413      	str	r3, [r2, #64]	; 0x40
 80023be:	4b1e      	ldr	r3, [pc, #120]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 80023c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023c2:	f003 0310 	and.w	r3, r3, #16
 80023c6:	617b      	str	r3, [r7, #20]
 80023c8:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 80023ca:	2200      	movs	r2, #0
 80023cc:	2100      	movs	r1, #0
 80023ce:	2036      	movs	r0, #54	; 0x36
 80023d0:	f000 ffdf 	bl	8003392 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 80023d4:	2036      	movs	r0, #54	; 0x36
 80023d6:	f000 fff8 	bl	80033ca <HAL_NVIC_EnableIRQ>
}
 80023da:	e026      	b.n	800242a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 80023dc:	687b      	ldr	r3, [r7, #4]
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4a18      	ldr	r2, [pc, #96]	; (8002444 <HAL_TIM_Base_MspInit+0xf8>)
 80023e2:	4293      	cmp	r3, r2
 80023e4:	d10e      	bne.n	8002404 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 80023e6:	2300      	movs	r3, #0
 80023e8:	613b      	str	r3, [r7, #16]
 80023ea:	4b13      	ldr	r3, [pc, #76]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 80023ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ee:	4a12      	ldr	r2, [pc, #72]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 80023f0:	f043 0302 	orr.w	r3, r3, #2
 80023f4:	6453      	str	r3, [r2, #68]	; 0x44
 80023f6:	4b10      	ldr	r3, [pc, #64]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 80023f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	613b      	str	r3, [r7, #16]
 8002400:	693b      	ldr	r3, [r7, #16]
}
 8002402:	e012      	b.n	800242a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM9)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a0f      	ldr	r2, [pc, #60]	; (8002448 <HAL_TIM_Base_MspInit+0xfc>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d10d      	bne.n	800242a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM9_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	60fb      	str	r3, [r7, #12]
 8002412:	4b09      	ldr	r3, [pc, #36]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002416:	4a08      	ldr	r2, [pc, #32]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 8002418:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800241c:	6453      	str	r3, [r2, #68]	; 0x44
 800241e:	4b06      	ldr	r3, [pc, #24]	; (8002438 <HAL_TIM_Base_MspInit+0xec>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002422:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002426:	60fb      	str	r3, [r7, #12]
 8002428:	68fb      	ldr	r3, [r7, #12]
}
 800242a:	bf00      	nop
 800242c:	3720      	adds	r7, #32
 800242e:	46bd      	mov	sp, r7
 8002430:	bd80      	pop	{r7, pc}
 8002432:	bf00      	nop
 8002434:	40010000 	.word	0x40010000
 8002438:	40023800 	.word	0x40023800
 800243c:	40000800 	.word	0x40000800
 8002440:	40001000 	.word	0x40001000
 8002444:	40010400 	.word	0x40010400
 8002448:	40014000 	.word	0x40014000

0800244c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800244c:	b580      	push	{r7, lr}
 800244e:	b08c      	sub	sp, #48	; 0x30
 8002450:	af00      	add	r7, sp, #0
 8002452:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002454:	f107 031c 	add.w	r3, r7, #28
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
 800245c:	605a      	str	r2, [r3, #4]
 800245e:	609a      	str	r2, [r3, #8]
 8002460:	60da      	str	r2, [r3, #12]
 8002462:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800246c:	d12c      	bne.n	80024c8 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800246e:	2300      	movs	r3, #0
 8002470:	61bb      	str	r3, [r7, #24]
 8002472:	4b30      	ldr	r3, [pc, #192]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	4a2f      	ldr	r2, [pc, #188]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002478:	f043 0301 	orr.w	r3, r3, #1
 800247c:	6413      	str	r3, [r2, #64]	; 0x40
 800247e:	4b2d      	ldr	r3, [pc, #180]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	f003 0301 	and.w	r3, r3, #1
 8002486:	61bb      	str	r3, [r7, #24]
 8002488:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	4b29      	ldr	r3, [pc, #164]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002490:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002492:	4a28      	ldr	r2, [pc, #160]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002494:	f043 0301 	orr.w	r3, r3, #1
 8002498:	6313      	str	r3, [r2, #48]	; 0x30
 800249a:	4b26      	ldr	r3, [pc, #152]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	f003 0301 	and.w	r3, r3, #1
 80024a2:	617b      	str	r3, [r7, #20]
 80024a4:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = RR_ENCODER_A_Pin|RR_ENCODER_B_Pin;
 80024a6:	2303      	movs	r3, #3
 80024a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024aa:	2302      	movs	r3, #2
 80024ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024ae:	2300      	movs	r3, #0
 80024b0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80024b2:	2300      	movs	r3, #0
 80024b4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80024b6:	2301      	movs	r3, #1
 80024b8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ba:	f107 031c 	add.w	r3, r7, #28
 80024be:	4619      	mov	r1, r3
 80024c0:	481d      	ldr	r0, [pc, #116]	; (8002538 <HAL_TIM_Encoder_MspInit+0xec>)
 80024c2:	f000 ff9d 	bl	8003400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80024c6:	e030      	b.n	800252a <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	4a1b      	ldr	r2, [pc, #108]	; (800253c <HAL_TIM_Encoder_MspInit+0xf0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d12b      	bne.n	800252a <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80024d2:	2300      	movs	r3, #0
 80024d4:	613b      	str	r3, [r7, #16]
 80024d6:	4b17      	ldr	r3, [pc, #92]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	4a16      	ldr	r2, [pc, #88]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024dc:	f043 0302 	orr.w	r3, r3, #2
 80024e0:	6413      	str	r3, [r2, #64]	; 0x40
 80024e2:	4b14      	ldr	r3, [pc, #80]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e6:	f003 0302 	and.w	r3, r3, #2
 80024ea:	613b      	str	r3, [r7, #16]
 80024ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ee:	2300      	movs	r3, #0
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	4b10      	ldr	r3, [pc, #64]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024f6:	4a0f      	ldr	r2, [pc, #60]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 80024f8:	f043 0301 	orr.w	r3, r3, #1
 80024fc:	6313      	str	r3, [r2, #48]	; 0x30
 80024fe:	4b0d      	ldr	r3, [pc, #52]	; (8002534 <HAL_TIM_Encoder_MspInit+0xe8>)
 8002500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002502:	f003 0301 	and.w	r3, r3, #1
 8002506:	60fb      	str	r3, [r7, #12]
 8002508:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FR_ENCODER_A_Pin|FR_ENCODER_B_Pin;
 800250a:	23c0      	movs	r3, #192	; 0xc0
 800250c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800250e:	2302      	movs	r3, #2
 8002510:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002512:	2300      	movs	r3, #0
 8002514:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002516:	2300      	movs	r3, #0
 8002518:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800251a:	2302      	movs	r3, #2
 800251c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800251e:	f107 031c 	add.w	r3, r7, #28
 8002522:	4619      	mov	r1, r3
 8002524:	4804      	ldr	r0, [pc, #16]	; (8002538 <HAL_TIM_Encoder_MspInit+0xec>)
 8002526:	f000 ff6b 	bl	8003400 <HAL_GPIO_Init>
}
 800252a:	bf00      	nop
 800252c:	3730      	adds	r7, #48	; 0x30
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	40023800 	.word	0x40023800
 8002538:	40020000 	.word	0x40020000
 800253c:	40000400 	.word	0x40000400

08002540 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002540:	b580      	push	{r7, lr}
 8002542:	b08c      	sub	sp, #48	; 0x30
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002548:	f107 031c 	add.w	r3, r7, #28
 800254c:	2200      	movs	r2, #0
 800254e:	601a      	str	r2, [r3, #0]
 8002550:	605a      	str	r2, [r3, #4]
 8002552:	609a      	str	r2, [r3, #8]
 8002554:	60da      	str	r2, [r3, #12]
 8002556:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	681b      	ldr	r3, [r3, #0]
 800255c:	4a49      	ldr	r2, [pc, #292]	; (8002684 <HAL_TIM_MspPostInit+0x144>)
 800255e:	4293      	cmp	r3, r2
 8002560:	d11f      	bne.n	80025a2 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	61bb      	str	r3, [r7, #24]
 8002566:	4b48      	ldr	r3, [pc, #288]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 8002568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800256a:	4a47      	ldr	r2, [pc, #284]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 800256c:	f043 0310 	orr.w	r3, r3, #16
 8002570:	6313      	str	r3, [r2, #48]	; 0x30
 8002572:	4b45      	ldr	r3, [pc, #276]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 8002574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002576:	f003 0310 	and.w	r3, r3, #16
 800257a:	61bb      	str	r3, [r7, #24]
 800257c:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FR_MOTOR_PWM_Pin|RR_MOTOR_PWM_Pin;
 800257e:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8002582:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002584:	2302      	movs	r3, #2
 8002586:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002588:	2300      	movs	r3, #0
 800258a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800258c:	2300      	movs	r3, #0
 800258e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002590:	2301      	movs	r3, #1
 8002592:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002594:	f107 031c 	add.w	r3, r7, #28
 8002598:	4619      	mov	r1, r3
 800259a:	483c      	ldr	r0, [pc, #240]	; (800268c <HAL_TIM_MspPostInit+0x14c>)
 800259c:	f000 ff30 	bl	8003400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80025a0:	e06c      	b.n	800267c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	4a3a      	ldr	r2, [pc, #232]	; (8002690 <HAL_TIM_MspPostInit+0x150>)
 80025a8:	4293      	cmp	r3, r2
 80025aa:	d11f      	bne.n	80025ec <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80025ac:	2300      	movs	r3, #0
 80025ae:	617b      	str	r3, [r7, #20]
 80025b0:	4b35      	ldr	r3, [pc, #212]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 80025b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b4:	4a34      	ldr	r2, [pc, #208]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 80025b6:	f043 0308 	orr.w	r3, r3, #8
 80025ba:	6313      	str	r3, [r2, #48]	; 0x30
 80025bc:	4b32      	ldr	r3, [pc, #200]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 80025be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025c0:	f003 0308 	and.w	r3, r3, #8
 80025c4:	617b      	str	r3, [r7, #20]
 80025c6:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO_5_Pin;
 80025c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80025cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025ce:	2302      	movs	r3, #2
 80025d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025d2:	2300      	movs	r3, #0
 80025d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025d6:	2300      	movs	r3, #0
 80025d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80025da:	2302      	movs	r3, #2
 80025dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_5_GPIO_Port, &GPIO_InitStruct);
 80025de:	f107 031c 	add.w	r3, r7, #28
 80025e2:	4619      	mov	r1, r3
 80025e4:	482b      	ldr	r0, [pc, #172]	; (8002694 <HAL_TIM_MspPostInit+0x154>)
 80025e6:	f000 ff0b 	bl	8003400 <HAL_GPIO_Init>
}
 80025ea:	e047      	b.n	800267c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	681b      	ldr	r3, [r3, #0]
 80025f0:	4a29      	ldr	r2, [pc, #164]	; (8002698 <HAL_TIM_MspPostInit+0x158>)
 80025f2:	4293      	cmp	r3, r2
 80025f4:	d11f      	bne.n	8002636 <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025f6:	2300      	movs	r3, #0
 80025f8:	613b      	str	r3, [r7, #16]
 80025fa:	4b23      	ldr	r3, [pc, #140]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 80025fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025fe:	4a22      	ldr	r2, [pc, #136]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 8002600:	f043 0304 	orr.w	r3, r3, #4
 8002604:	6313      	str	r3, [r2, #48]	; 0x30
 8002606:	4b20      	ldr	r3, [pc, #128]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 8002608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800260a:	f003 0304 	and.w	r3, r3, #4
 800260e:	613b      	str	r3, [r7, #16]
 8002610:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_4_Pin|SERVO_3_Pin|SERVO_2_Pin|SERVO_1_Pin;
 8002612:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 8002616:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002618:	2302      	movs	r3, #2
 800261a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800261c:	2300      	movs	r3, #0
 800261e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002620:	2300      	movs	r3, #0
 8002622:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 8002624:	2303      	movs	r3, #3
 8002626:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002628:	f107 031c 	add.w	r3, r7, #28
 800262c:	4619      	mov	r1, r3
 800262e:	481b      	ldr	r0, [pc, #108]	; (800269c <HAL_TIM_MspPostInit+0x15c>)
 8002630:	f000 fee6 	bl	8003400 <HAL_GPIO_Init>
}
 8002634:	e022      	b.n	800267c <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM9)
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	4a19      	ldr	r2, [pc, #100]	; (80026a0 <HAL_TIM_MspPostInit+0x160>)
 800263c:	4293      	cmp	r3, r2
 800263e:	d11d      	bne.n	800267c <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002640:	2300      	movs	r3, #0
 8002642:	60fb      	str	r3, [r7, #12]
 8002644:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 8002646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002648:	4a0f      	ldr	r2, [pc, #60]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 800264a:	f043 0301 	orr.w	r3, r3, #1
 800264e:	6313      	str	r3, [r2, #48]	; 0x30
 8002650:	4b0d      	ldr	r3, [pc, #52]	; (8002688 <HAL_TIM_MspPostInit+0x148>)
 8002652:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002654:	f003 0301 	and.w	r3, r3, #1
 8002658:	60fb      	str	r3, [r7, #12]
 800265a:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHOOTER_PWM_Pin;
 800265c:	2304      	movs	r3, #4
 800265e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002660:	2302      	movs	r3, #2
 8002662:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002664:	2300      	movs	r3, #0
 8002666:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002668:	2300      	movs	r3, #0
 800266a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 800266c:	2303      	movs	r3, #3
 800266e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SHOOTER_PWM_GPIO_Port, &GPIO_InitStruct);
 8002670:	f107 031c 	add.w	r3, r7, #28
 8002674:	4619      	mov	r1, r3
 8002676:	480b      	ldr	r0, [pc, #44]	; (80026a4 <HAL_TIM_MspPostInit+0x164>)
 8002678:	f000 fec2 	bl	8003400 <HAL_GPIO_Init>
}
 800267c:	bf00      	nop
 800267e:	3730      	adds	r7, #48	; 0x30
 8002680:	46bd      	mov	sp, r7
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40010000 	.word	0x40010000
 8002688:	40023800 	.word	0x40023800
 800268c:	40021000 	.word	0x40021000
 8002690:	40000800 	.word	0x40000800
 8002694:	40020c00 	.word	0x40020c00
 8002698:	40010400 	.word	0x40010400
 800269c:	40020800 	.word	0x40020800
 80026a0:	40014000 	.word	0x40014000
 80026a4:	40020000 	.word	0x40020000

080026a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b08a      	sub	sp, #40	; 0x28
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026b0:	f107 0314 	add.w	r3, r7, #20
 80026b4:	2200      	movs	r2, #0
 80026b6:	601a      	str	r2, [r3, #0]
 80026b8:	605a      	str	r2, [r3, #4]
 80026ba:	609a      	str	r2, [r3, #8]
 80026bc:	60da      	str	r2, [r3, #12]
 80026be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4a19      	ldr	r2, [pc, #100]	; (800272c <HAL_UART_MspInit+0x84>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d12c      	bne.n	8002724 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 80026ca:	2300      	movs	r3, #0
 80026cc:	613b      	str	r3, [r7, #16]
 80026ce:	4b18      	ldr	r3, [pc, #96]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026d2:	4a17      	ldr	r2, [pc, #92]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026d4:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 80026d8:	6413      	str	r3, [r2, #64]	; 0x40
 80026da:	4b15      	ldr	r3, [pc, #84]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026de:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80026e2:	613b      	str	r3, [r7, #16]
 80026e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026e6:	2300      	movs	r3, #0
 80026e8:	60fb      	str	r3, [r7, #12]
 80026ea:	4b11      	ldr	r3, [pc, #68]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026ee:	4a10      	ldr	r2, [pc, #64]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026f0:	f043 0304 	orr.w	r3, r3, #4
 80026f4:	6313      	str	r3, [r2, #48]	; 0x30
 80026f6:	4b0e      	ldr	r3, [pc, #56]	; (8002730 <HAL_UART_MspInit+0x88>)
 80026f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026fa:	f003 0304 	and.w	r3, r3, #4
 80026fe:	60fb      	str	r3, [r7, #12]
 8002700:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = BLUTOOTH_TX_Pin|BLUTOOTH_RX_Pin;
 8002702:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8002706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002708:	2302      	movs	r3, #2
 800270a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800270c:	2300      	movs	r3, #0
 800270e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002710:	2303      	movs	r3, #3
 8002712:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002714:	2308      	movs	r3, #8
 8002716:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002718:	f107 0314 	add.w	r3, r7, #20
 800271c:	4619      	mov	r1, r3
 800271e:	4805      	ldr	r0, [pc, #20]	; (8002734 <HAL_UART_MspInit+0x8c>)
 8002720:	f000 fe6e 	bl	8003400 <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 8002724:	bf00      	nop
 8002726:	3728      	adds	r7, #40	; 0x28
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	40004c00 	.word	0x40004c00
 8002730:	40023800 	.word	0x40023800
 8002734:	40020800 	.word	0x40020800

08002738 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002738:	b480      	push	{r7}
 800273a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800273c:	e7fe      	b.n	800273c <NMI_Handler+0x4>

0800273e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800273e:	b480      	push	{r7}
 8002740:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002742:	e7fe      	b.n	8002742 <HardFault_Handler+0x4>

08002744 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002744:	b480      	push	{r7}
 8002746:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002748:	e7fe      	b.n	8002748 <MemManage_Handler+0x4>

0800274a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800274a:	b480      	push	{r7}
 800274c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800274e:	e7fe      	b.n	800274e <BusFault_Handler+0x4>

08002750 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002750:	b480      	push	{r7}
 8002752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002754:	e7fe      	b.n	8002754 <UsageFault_Handler+0x4>

08002756 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002756:	b480      	push	{r7}
 8002758:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800275a:	bf00      	nop
 800275c:	46bd      	mov	sp, r7
 800275e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002762:	4770      	bx	lr

08002764 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002768:	bf00      	nop
 800276a:	46bd      	mov	sp, r7
 800276c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002770:	4770      	bx	lr

08002772 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002772:	b480      	push	{r7}
 8002774:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002776:	bf00      	nop
 8002778:	46bd      	mov	sp, r7
 800277a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800277e:	4770      	bx	lr

08002780 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002784:	f000 f93e 	bl	8002a04 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002788:	bf00      	nop
 800278a:	bd80      	pop	{r7, pc}

0800278c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002790:	4802      	ldr	r0, [pc, #8]	; (800279c <TIM6_DAC_IRQHandler+0x10>)
 8002792:	f002 fcbf 	bl	8005114 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8002796:	bf00      	nop
 8002798:	bd80      	pop	{r7, pc}
 800279a:	bf00      	nop
 800279c:	200004d4 	.word	0x200004d4

080027a0 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027ac:	2300      	movs	r3, #0
 80027ae:	617b      	str	r3, [r7, #20]
 80027b0:	e00a      	b.n	80027c8 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80027b2:	f3af 8000 	nop.w
 80027b6:	4601      	mov	r1, r0
 80027b8:	68bb      	ldr	r3, [r7, #8]
 80027ba:	1c5a      	adds	r2, r3, #1
 80027bc:	60ba      	str	r2, [r7, #8]
 80027be:	b2ca      	uxtb	r2, r1
 80027c0:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027c2:	697b      	ldr	r3, [r7, #20]
 80027c4:	3301      	adds	r3, #1
 80027c6:	617b      	str	r3, [r7, #20]
 80027c8:	697a      	ldr	r2, [r7, #20]
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	429a      	cmp	r2, r3
 80027ce:	dbf0      	blt.n	80027b2 <_read+0x12>
  }

  return len;
 80027d0:	687b      	ldr	r3, [r7, #4]
}
 80027d2:	4618      	mov	r0, r3
 80027d4:	3718      	adds	r7, #24
 80027d6:	46bd      	mov	sp, r7
 80027d8:	bd80      	pop	{r7, pc}

080027da <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80027da:	b580      	push	{r7, lr}
 80027dc:	b086      	sub	sp, #24
 80027de:	af00      	add	r7, sp, #0
 80027e0:	60f8      	str	r0, [r7, #12]
 80027e2:	60b9      	str	r1, [r7, #8]
 80027e4:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027e6:	2300      	movs	r3, #0
 80027e8:	617b      	str	r3, [r7, #20]
 80027ea:	e009      	b.n	8002800 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80027ec:	68bb      	ldr	r3, [r7, #8]
 80027ee:	1c5a      	adds	r2, r3, #1
 80027f0:	60ba      	str	r2, [r7, #8]
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	4618      	mov	r0, r3
 80027f6:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80027fa:	697b      	ldr	r3, [r7, #20]
 80027fc:	3301      	adds	r3, #1
 80027fe:	617b      	str	r3, [r7, #20]
 8002800:	697a      	ldr	r2, [r7, #20]
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	429a      	cmp	r2, r3
 8002806:	dbf1      	blt.n	80027ec <_write+0x12>
  }
  return len;
 8002808:	687b      	ldr	r3, [r7, #4]
}
 800280a:	4618      	mov	r0, r3
 800280c:	3718      	adds	r7, #24
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}

08002812 <_close>:

int _close(int file)
{
 8002812:	b480      	push	{r7}
 8002814:	b083      	sub	sp, #12
 8002816:	af00      	add	r7, sp, #0
 8002818:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800281a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800281e:	4618      	mov	r0, r3
 8002820:	370c      	adds	r7, #12
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800282a:	b480      	push	{r7}
 800282c:	b083      	sub	sp, #12
 800282e:	af00      	add	r7, sp, #0
 8002830:	6078      	str	r0, [r7, #4]
 8002832:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002834:	683b      	ldr	r3, [r7, #0]
 8002836:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800283a:	605a      	str	r2, [r3, #4]
  return 0;
 800283c:	2300      	movs	r3, #0
}
 800283e:	4618      	mov	r0, r3
 8002840:	370c      	adds	r7, #12
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <_isatty>:

int _isatty(int file)
{
 800284a:	b480      	push	{r7}
 800284c:	b083      	sub	sp, #12
 800284e:	af00      	add	r7, sp, #0
 8002850:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002852:	2301      	movs	r3, #1
}
 8002854:	4618      	mov	r0, r3
 8002856:	370c      	adds	r7, #12
 8002858:	46bd      	mov	sp, r7
 800285a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800285e:	4770      	bx	lr

08002860 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002860:	b480      	push	{r7}
 8002862:	b085      	sub	sp, #20
 8002864:	af00      	add	r7, sp, #0
 8002866:	60f8      	str	r0, [r7, #12]
 8002868:	60b9      	str	r1, [r7, #8]
 800286a:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800286c:	2300      	movs	r3, #0
}
 800286e:	4618      	mov	r0, r3
 8002870:	3714      	adds	r7, #20
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr
	...

0800287c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800287c:	b580      	push	{r7, lr}
 800287e:	b086      	sub	sp, #24
 8002880:	af00      	add	r7, sp, #0
 8002882:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002884:	4a14      	ldr	r2, [pc, #80]	; (80028d8 <_sbrk+0x5c>)
 8002886:	4b15      	ldr	r3, [pc, #84]	; (80028dc <_sbrk+0x60>)
 8002888:	1ad3      	subs	r3, r2, r3
 800288a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800288c:	697b      	ldr	r3, [r7, #20]
 800288e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002890:	4b13      	ldr	r3, [pc, #76]	; (80028e0 <_sbrk+0x64>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	2b00      	cmp	r3, #0
 8002896:	d102      	bne.n	800289e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002898:	4b11      	ldr	r3, [pc, #68]	; (80028e0 <_sbrk+0x64>)
 800289a:	4a12      	ldr	r2, [pc, #72]	; (80028e4 <_sbrk+0x68>)
 800289c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800289e:	4b10      	ldr	r3, [pc, #64]	; (80028e0 <_sbrk+0x64>)
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	4413      	add	r3, r2
 80028a6:	693a      	ldr	r2, [r7, #16]
 80028a8:	429a      	cmp	r2, r3
 80028aa:	d207      	bcs.n	80028bc <_sbrk+0x40>
  {
    errno = ENOMEM;
 80028ac:	f003 ffec 	bl	8006888 <__errno>
 80028b0:	4603      	mov	r3, r0
 80028b2:	220c      	movs	r2, #12
 80028b4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80028b6:	f04f 33ff 	mov.w	r3, #4294967295
 80028ba:	e009      	b.n	80028d0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80028bc:	4b08      	ldr	r3, [pc, #32]	; (80028e0 <_sbrk+0x64>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80028c2:	4b07      	ldr	r3, [pc, #28]	; (80028e0 <_sbrk+0x64>)
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	4413      	add	r3, r2
 80028ca:	4a05      	ldr	r2, [pc, #20]	; (80028e0 <_sbrk+0x64>)
 80028cc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80028ce:	68fb      	ldr	r3, [r7, #12]
}
 80028d0:	4618      	mov	r0, r3
 80028d2:	3718      	adds	r7, #24
 80028d4:	46bd      	mov	sp, r7
 80028d6:	bd80      	pop	{r7, pc}
 80028d8:	20020000 	.word	0x20020000
 80028dc:	00000400 	.word	0x00000400
 80028e0:	200005f8 	.word	0x200005f8
 80028e4:	20000750 	.word	0x20000750

080028e8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028ec:	4b06      	ldr	r3, [pc, #24]	; (8002908 <SystemInit+0x20>)
 80028ee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f2:	4a05      	ldr	r2, [pc, #20]	; (8002908 <SystemInit+0x20>)
 80028f4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028f8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002904:	4770      	bx	lr
 8002906:	bf00      	nop
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800290c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002944 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002910:	f7ff ffea 	bl	80028e8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002914:	480c      	ldr	r0, [pc, #48]	; (8002948 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002916:	490d      	ldr	r1, [pc, #52]	; (800294c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002918:	4a0d      	ldr	r2, [pc, #52]	; (8002950 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800291a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800291c:	e002      	b.n	8002924 <LoopCopyDataInit>

0800291e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800291e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002920:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002922:	3304      	adds	r3, #4

08002924 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002924:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002926:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002928:	d3f9      	bcc.n	800291e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800292a:	4a0a      	ldr	r2, [pc, #40]	; (8002954 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800292c:	4c0a      	ldr	r4, [pc, #40]	; (8002958 <LoopFillZerobss+0x22>)
  movs r3, #0
 800292e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002930:	e001      	b.n	8002936 <LoopFillZerobss>

08002932 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002932:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002934:	3204      	adds	r2, #4

08002936 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002936:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002938:	d3fb      	bcc.n	8002932 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 800293a:	f003 ffab 	bl	8006894 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800293e:	f7fe fa6f 	bl	8000e20 <main>
  bx  lr    
 8002942:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002944:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002948:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800294c:	20000168 	.word	0x20000168
  ldr r2, =_sidata
 8002950:	08007478 	.word	0x08007478
  ldr r2, =_sbss
 8002954:	20000168 	.word	0x20000168
  ldr r4, =_ebss
 8002958:	2000074c 	.word	0x2000074c

0800295c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800295c:	e7fe      	b.n	800295c <ADC_IRQHandler>
	...

08002960 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002960:	b580      	push	{r7, lr}
 8002962:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002964:	4b0e      	ldr	r3, [pc, #56]	; (80029a0 <HAL_Init+0x40>)
 8002966:	681b      	ldr	r3, [r3, #0]
 8002968:	4a0d      	ldr	r2, [pc, #52]	; (80029a0 <HAL_Init+0x40>)
 800296a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800296e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002970:	4b0b      	ldr	r3, [pc, #44]	; (80029a0 <HAL_Init+0x40>)
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	4a0a      	ldr	r2, [pc, #40]	; (80029a0 <HAL_Init+0x40>)
 8002976:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800297a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800297c:	4b08      	ldr	r3, [pc, #32]	; (80029a0 <HAL_Init+0x40>)
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a07      	ldr	r2, [pc, #28]	; (80029a0 <HAL_Init+0x40>)
 8002982:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002986:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002988:	2003      	movs	r0, #3
 800298a:	f000 fcf7 	bl	800337c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800298e:	200f      	movs	r0, #15
 8002990:	f000 f808 	bl	80029a4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002994:	f7ff fb72 	bl	800207c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002998:	2300      	movs	r3, #0
}
 800299a:	4618      	mov	r0, r3
 800299c:	bd80      	pop	{r7, pc}
 800299e:	bf00      	nop
 80029a0:	40023c00 	.word	0x40023c00

080029a4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a4:	b580      	push	{r7, lr}
 80029a6:	b082      	sub	sp, #8
 80029a8:	af00      	add	r7, sp, #0
 80029aa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ac:	4b12      	ldr	r3, [pc, #72]	; (80029f8 <HAL_InitTick+0x54>)
 80029ae:	681a      	ldr	r2, [r3, #0]
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_InitTick+0x58>)
 80029b2:	781b      	ldrb	r3, [r3, #0]
 80029b4:	4619      	mov	r1, r3
 80029b6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029ba:	fbb3 f3f1 	udiv	r3, r3, r1
 80029be:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c2:	4618      	mov	r0, r3
 80029c4:	f000 fd0f 	bl	80033e6 <HAL_SYSTICK_Config>
 80029c8:	4603      	mov	r3, r0
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d001      	beq.n	80029d2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e00e      	b.n	80029f0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b0f      	cmp	r3, #15
 80029d6:	d80a      	bhi.n	80029ee <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029d8:	2200      	movs	r2, #0
 80029da:	6879      	ldr	r1, [r7, #4]
 80029dc:	f04f 30ff 	mov.w	r0, #4294967295
 80029e0:	f000 fcd7 	bl	8003392 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e4:	4a06      	ldr	r2, [pc, #24]	; (8002a00 <HAL_InitTick+0x5c>)
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ea:	2300      	movs	r3, #0
 80029ec:	e000      	b.n	80029f0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
}
 80029f0:	4618      	mov	r0, r3
 80029f2:	3708      	adds	r7, #8
 80029f4:	46bd      	mov	sp, r7
 80029f6:	bd80      	pop	{r7, pc}
 80029f8:	20000100 	.word	0x20000100
 80029fc:	20000108 	.word	0x20000108
 8002a00:	20000104 	.word	0x20000104

08002a04 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a08:	4b06      	ldr	r3, [pc, #24]	; (8002a24 <HAL_IncTick+0x20>)
 8002a0a:	781b      	ldrb	r3, [r3, #0]
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_IncTick+0x24>)
 8002a10:	681b      	ldr	r3, [r3, #0]
 8002a12:	4413      	add	r3, r2
 8002a14:	4a04      	ldr	r2, [pc, #16]	; (8002a28 <HAL_IncTick+0x24>)
 8002a16:	6013      	str	r3, [r2, #0]
}
 8002a18:	bf00      	nop
 8002a1a:	46bd      	mov	sp, r7
 8002a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a20:	4770      	bx	lr
 8002a22:	bf00      	nop
 8002a24:	20000108 	.word	0x20000108
 8002a28:	200005fc 	.word	0x200005fc

08002a2c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a2c:	b480      	push	{r7}
 8002a2e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a30:	4b03      	ldr	r3, [pc, #12]	; (8002a40 <HAL_GetTick+0x14>)
 8002a32:	681b      	ldr	r3, [r3, #0]
}
 8002a34:	4618      	mov	r0, r3
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	200005fc 	.word	0x200005fc

08002a44 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b084      	sub	sp, #16
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a4c:	2300      	movs	r3, #0
 8002a4e:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d101      	bne.n	8002a5a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e033      	b.n	8002ac2 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d109      	bne.n	8002a76 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a62:	6878      	ldr	r0, [r7, #4]
 8002a64:	f7ff fb32 	bl	80020cc <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2200      	movs	r2, #0
 8002a6c:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	2200      	movs	r2, #0
 8002a72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a7a:	f003 0310 	and.w	r3, r3, #16
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d118      	bne.n	8002ab4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a86:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002a8a:	f023 0302 	bic.w	r3, r3, #2
 8002a8e:	f043 0202 	orr.w	r2, r3, #2
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a96:	6878      	ldr	r0, [r7, #4]
 8002a98:	f000 faa4 	bl	8002fe4 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa6:	f023 0303 	bic.w	r3, r3, #3
 8002aaa:	f043 0201 	orr.w	r2, r3, #1
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	641a      	str	r2, [r3, #64]	; 0x40
 8002ab2:	e001      	b.n	8002ab8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002ab4:	2301      	movs	r3, #1
 8002ab6:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	2200      	movs	r2, #0
 8002abc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002ac0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3710      	adds	r7, #16
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	bd80      	pop	{r7, pc}
	...

08002acc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002acc:	b480      	push	{r7}
 8002ace:	b085      	sub	sp, #20
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ad4:	2300      	movs	r3, #0
 8002ad6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ade:	2b01      	cmp	r3, #1
 8002ae0:	d101      	bne.n	8002ae6 <HAL_ADC_Start+0x1a>
 8002ae2:	2302      	movs	r3, #2
 8002ae4:	e0b2      	b.n	8002c4c <HAL_ADC_Start+0x180>
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	2201      	movs	r2, #1
 8002aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	689b      	ldr	r3, [r3, #8]
 8002af4:	f003 0301 	and.w	r3, r3, #1
 8002af8:	2b01      	cmp	r3, #1
 8002afa:	d018      	beq.n	8002b2e <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	689a      	ldr	r2, [r3, #8]
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	681b      	ldr	r3, [r3, #0]
 8002b06:	f042 0201 	orr.w	r2, r2, #1
 8002b0a:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b0c:	4b52      	ldr	r3, [pc, #328]	; (8002c58 <HAL_ADC_Start+0x18c>)
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4a52      	ldr	r2, [pc, #328]	; (8002c5c <HAL_ADC_Start+0x190>)
 8002b12:	fba2 2303 	umull	r2, r3, r2, r3
 8002b16:	0c9a      	lsrs	r2, r3, #18
 8002b18:	4613      	mov	r3, r2
 8002b1a:	005b      	lsls	r3, r3, #1
 8002b1c:	4413      	add	r3, r2
 8002b1e:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b20:	e002      	b.n	8002b28 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b22:	68bb      	ldr	r3, [r7, #8]
 8002b24:	3b01      	subs	r3, #1
 8002b26:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d1f9      	bne.n	8002b22 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	f003 0301 	and.w	r3, r3, #1
 8002b38:	2b01      	cmp	r3, #1
 8002b3a:	d17a      	bne.n	8002c32 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b40:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b44:	f023 0301 	bic.w	r3, r3, #1
 8002b48:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d007      	beq.n	8002b6e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002b66:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b72:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002b76:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002b7a:	d106      	bne.n	8002b8a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b80:	f023 0206 	bic.w	r2, r3, #6
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	645a      	str	r2, [r3, #68]	; 0x44
 8002b88:	e002      	b.n	8002b90 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	2200      	movs	r2, #0
 8002b94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b98:	4b31      	ldr	r3, [pc, #196]	; (8002c60 <HAL_ADC_Start+0x194>)
 8002b9a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002ba4:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	685b      	ldr	r3, [r3, #4]
 8002baa:	f003 031f 	and.w	r3, r3, #31
 8002bae:	2b00      	cmp	r3, #0
 8002bb0:	d12a      	bne.n	8002c08 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	4a2b      	ldr	r2, [pc, #172]	; (8002c64 <HAL_ADC_Start+0x198>)
 8002bb8:	4293      	cmp	r3, r2
 8002bba:	d015      	beq.n	8002be8 <HAL_ADC_Start+0x11c>
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	4a29      	ldr	r2, [pc, #164]	; (8002c68 <HAL_ADC_Start+0x19c>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d105      	bne.n	8002bd2 <HAL_ADC_Start+0x106>
 8002bc6:	4b26      	ldr	r3, [pc, #152]	; (8002c60 <HAL_ADC_Start+0x194>)
 8002bc8:	685b      	ldr	r3, [r3, #4]
 8002bca:	f003 031f 	and.w	r3, r3, #31
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d00a      	beq.n	8002be8 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	4a25      	ldr	r2, [pc, #148]	; (8002c6c <HAL_ADC_Start+0x1a0>)
 8002bd8:	4293      	cmp	r3, r2
 8002bda:	d136      	bne.n	8002c4a <HAL_ADC_Start+0x17e>
 8002bdc:	4b20      	ldr	r3, [pc, #128]	; (8002c60 <HAL_ADC_Start+0x194>)
 8002bde:	685b      	ldr	r3, [r3, #4]
 8002be0:	f003 0310 	and.w	r3, r3, #16
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d130      	bne.n	8002c4a <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	689b      	ldr	r3, [r3, #8]
 8002bee:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d129      	bne.n	8002c4a <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	689a      	ldr	r2, [r3, #8]
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c04:	609a      	str	r2, [r3, #8]
 8002c06:	e020      	b.n	8002c4a <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c08:	687b      	ldr	r3, [r7, #4]
 8002c0a:	681b      	ldr	r3, [r3, #0]
 8002c0c:	4a15      	ldr	r2, [pc, #84]	; (8002c64 <HAL_ADC_Start+0x198>)
 8002c0e:	4293      	cmp	r3, r2
 8002c10:	d11b      	bne.n	8002c4a <HAL_ADC_Start+0x17e>
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	689b      	ldr	r3, [r3, #8]
 8002c18:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c1c:	2b00      	cmp	r3, #0
 8002c1e:	d114      	bne.n	8002c4a <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	689a      	ldr	r2, [r3, #8]
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c2e:	609a      	str	r2, [r3, #8]
 8002c30:	e00b      	b.n	8002c4a <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c36:	f043 0210 	orr.w	r2, r3, #16
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c42:	f043 0201 	orr.w	r2, r3, #1
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	20000100 	.word	0x20000100
 8002c5c:	431bde83 	.word	0x431bde83
 8002c60:	40012300 	.word	0x40012300
 8002c64:	40012000 	.word	0x40012000
 8002c68:	40012100 	.word	0x40012100
 8002c6c:	40012200 	.word	0x40012200

08002c70 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	b084      	sub	sp, #16
 8002c74:	af00      	add	r7, sp, #0
 8002c76:	6078      	str	r0, [r7, #4]
 8002c78:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c88:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c8c:	d113      	bne.n	8002cb6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002c9c:	d10b      	bne.n	8002cb6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ca2:	f043 0220 	orr.w	r2, r3, #32
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	2200      	movs	r2, #0
 8002cae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cb2:	2301      	movs	r3, #1
 8002cb4:	e063      	b.n	8002d7e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002cb6:	f7ff feb9 	bl	8002a2c <HAL_GetTick>
 8002cba:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cbc:	e021      	b.n	8002d02 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002cbe:	683b      	ldr	r3, [r7, #0]
 8002cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cc4:	d01d      	beq.n	8002d02 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d007      	beq.n	8002cdc <HAL_ADC_PollForConversion+0x6c>
 8002ccc:	f7ff feae 	bl	8002a2c <HAL_GetTick>
 8002cd0:	4602      	mov	r2, r0
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	1ad3      	subs	r3, r2, r3
 8002cd6:	683a      	ldr	r2, [r7, #0]
 8002cd8:	429a      	cmp	r2, r3
 8002cda:	d212      	bcs.n	8002d02 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	f003 0302 	and.w	r3, r3, #2
 8002ce6:	2b02      	cmp	r3, #2
 8002ce8:	d00b      	beq.n	8002d02 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cee:	f043 0204 	orr.w	r2, r3, #4
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002cfe:	2303      	movs	r3, #3
 8002d00:	e03d      	b.n	8002d7e <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b02      	cmp	r3, #2
 8002d0e:	d1d6      	bne.n	8002cbe <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f06f 0212 	mvn.w	r2, #18
 8002d18:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d123      	bne.n	8002d7c <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d11f      	bne.n	8002d7c <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d42:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d006      	beq.n	8002d58 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	689b      	ldr	r3, [r3, #8]
 8002d50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d111      	bne.n	8002d7c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d5c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d68:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d6c:	2b00      	cmp	r3, #0
 8002d6e:	d105      	bne.n	8002d7c <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d74:	f043 0201 	orr.w	r2, r3, #1
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002d7c:	2300      	movs	r3, #0
}
 8002d7e:	4618      	mov	r0, r3
 8002d80:	3710      	adds	r7, #16
 8002d82:	46bd      	mov	sp, r7
 8002d84:	bd80      	pop	{r7, pc}

08002d86 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d86:	b480      	push	{r7}
 8002d88:	b083      	sub	sp, #12
 8002d8a:	af00      	add	r7, sp, #0
 8002d8c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002d94:	4618      	mov	r0, r3
 8002d96:	370c      	adds	r7, #12
 8002d98:	46bd      	mov	sp, r7
 8002d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d9e:	4770      	bx	lr

08002da0 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b085      	sub	sp, #20
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	6078      	str	r0, [r7, #4]
 8002da8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002daa:	2300      	movs	r3, #0
 8002dac:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d101      	bne.n	8002dbc <HAL_ADC_ConfigChannel+0x1c>
 8002db8:	2302      	movs	r3, #2
 8002dba:	e105      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x228>
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dc4:	683b      	ldr	r3, [r7, #0]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	2b09      	cmp	r3, #9
 8002dca:	d925      	bls.n	8002e18 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	68d9      	ldr	r1, [r3, #12]
 8002dd2:	683b      	ldr	r3, [r7, #0]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	461a      	mov	r2, r3
 8002dda:	4613      	mov	r3, r2
 8002ddc:	005b      	lsls	r3, r3, #1
 8002dde:	4413      	add	r3, r2
 8002de0:	3b1e      	subs	r3, #30
 8002de2:	2207      	movs	r2, #7
 8002de4:	fa02 f303 	lsl.w	r3, r2, r3
 8002de8:	43da      	mvns	r2, r3
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	400a      	ands	r2, r1
 8002df0:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	68d9      	ldr	r1, [r3, #12]
 8002df8:	683b      	ldr	r3, [r7, #0]
 8002dfa:	689a      	ldr	r2, [r3, #8]
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	b29b      	uxth	r3, r3
 8002e02:	4618      	mov	r0, r3
 8002e04:	4603      	mov	r3, r0
 8002e06:	005b      	lsls	r3, r3, #1
 8002e08:	4403      	add	r3, r0
 8002e0a:	3b1e      	subs	r3, #30
 8002e0c:	409a      	lsls	r2, r3
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	430a      	orrs	r2, r1
 8002e14:	60da      	str	r2, [r3, #12]
 8002e16:	e022      	b.n	8002e5e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	6919      	ldr	r1, [r3, #16]
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	b29b      	uxth	r3, r3
 8002e24:	461a      	mov	r2, r3
 8002e26:	4613      	mov	r3, r2
 8002e28:	005b      	lsls	r3, r3, #1
 8002e2a:	4413      	add	r3, r2
 8002e2c:	2207      	movs	r2, #7
 8002e2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e32:	43da      	mvns	r2, r3
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	400a      	ands	r2, r1
 8002e3a:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e3c:	687b      	ldr	r3, [r7, #4]
 8002e3e:	681b      	ldr	r3, [r3, #0]
 8002e40:	6919      	ldr	r1, [r3, #16]
 8002e42:	683b      	ldr	r3, [r7, #0]
 8002e44:	689a      	ldr	r2, [r3, #8]
 8002e46:	683b      	ldr	r3, [r7, #0]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	b29b      	uxth	r3, r3
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	4603      	mov	r3, r0
 8002e50:	005b      	lsls	r3, r3, #1
 8002e52:	4403      	add	r3, r0
 8002e54:	409a      	lsls	r2, r3
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	430a      	orrs	r2, r1
 8002e5c:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e5e:	683b      	ldr	r3, [r7, #0]
 8002e60:	685b      	ldr	r3, [r3, #4]
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d824      	bhi.n	8002eb0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e6c:	683b      	ldr	r3, [r7, #0]
 8002e6e:	685a      	ldr	r2, [r3, #4]
 8002e70:	4613      	mov	r3, r2
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	4413      	add	r3, r2
 8002e76:	3b05      	subs	r3, #5
 8002e78:	221f      	movs	r2, #31
 8002e7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7e:	43da      	mvns	r2, r3
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	400a      	ands	r2, r1
 8002e86:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	b29b      	uxth	r3, r3
 8002e94:	4618      	mov	r0, r3
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	685a      	ldr	r2, [r3, #4]
 8002e9a:	4613      	mov	r3, r2
 8002e9c:	009b      	lsls	r3, r3, #2
 8002e9e:	4413      	add	r3, r2
 8002ea0:	3b05      	subs	r3, #5
 8002ea2:	fa00 f203 	lsl.w	r2, r0, r3
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	430a      	orrs	r2, r1
 8002eac:	635a      	str	r2, [r3, #52]	; 0x34
 8002eae:	e04c      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	685b      	ldr	r3, [r3, #4]
 8002eb4:	2b0c      	cmp	r3, #12
 8002eb6:	d824      	bhi.n	8002f02 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ebe:	683b      	ldr	r3, [r7, #0]
 8002ec0:	685a      	ldr	r2, [r3, #4]
 8002ec2:	4613      	mov	r3, r2
 8002ec4:	009b      	lsls	r3, r3, #2
 8002ec6:	4413      	add	r3, r2
 8002ec8:	3b23      	subs	r3, #35	; 0x23
 8002eca:	221f      	movs	r2, #31
 8002ecc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed0:	43da      	mvns	r2, r3
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	400a      	ands	r2, r1
 8002ed8:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ee0:	683b      	ldr	r3, [r7, #0]
 8002ee2:	681b      	ldr	r3, [r3, #0]
 8002ee4:	b29b      	uxth	r3, r3
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	683b      	ldr	r3, [r7, #0]
 8002eea:	685a      	ldr	r2, [r3, #4]
 8002eec:	4613      	mov	r3, r2
 8002eee:	009b      	lsls	r3, r3, #2
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3b23      	subs	r3, #35	; 0x23
 8002ef4:	fa00 f203 	lsl.w	r2, r0, r3
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	681b      	ldr	r3, [r3, #0]
 8002efc:	430a      	orrs	r2, r1
 8002efe:	631a      	str	r2, [r3, #48]	; 0x30
 8002f00:	e023      	b.n	8002f4a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f08:	683b      	ldr	r3, [r7, #0]
 8002f0a:	685a      	ldr	r2, [r3, #4]
 8002f0c:	4613      	mov	r3, r2
 8002f0e:	009b      	lsls	r3, r3, #2
 8002f10:	4413      	add	r3, r2
 8002f12:	3b41      	subs	r3, #65	; 0x41
 8002f14:	221f      	movs	r2, #31
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43da      	mvns	r2, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	400a      	ands	r2, r1
 8002f22:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f24:	687b      	ldr	r3, [r7, #4]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f2a:	683b      	ldr	r3, [r7, #0]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	b29b      	uxth	r3, r3
 8002f30:	4618      	mov	r0, r3
 8002f32:	683b      	ldr	r3, [r7, #0]
 8002f34:	685a      	ldr	r2, [r3, #4]
 8002f36:	4613      	mov	r3, r2
 8002f38:	009b      	lsls	r3, r3, #2
 8002f3a:	4413      	add	r3, r2
 8002f3c:	3b41      	subs	r3, #65	; 0x41
 8002f3e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	430a      	orrs	r2, r1
 8002f48:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f4a:	4b22      	ldr	r3, [pc, #136]	; (8002fd4 <HAL_ADC_ConfigChannel+0x234>)
 8002f4c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a21      	ldr	r2, [pc, #132]	; (8002fd8 <HAL_ADC_ConfigChannel+0x238>)
 8002f54:	4293      	cmp	r3, r2
 8002f56:	d109      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x1cc>
 8002f58:	683b      	ldr	r3, [r7, #0]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	2b12      	cmp	r3, #18
 8002f5e:	d105      	bne.n	8002f6c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	685b      	ldr	r3, [r3, #4]
 8002f64:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a19      	ldr	r2, [pc, #100]	; (8002fd8 <HAL_ADC_ConfigChannel+0x238>)
 8002f72:	4293      	cmp	r3, r2
 8002f74:	d123      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x21e>
 8002f76:	683b      	ldr	r3, [r7, #0]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	2b10      	cmp	r3, #16
 8002f7c:	d003      	beq.n	8002f86 <HAL_ADC_ConfigChannel+0x1e6>
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b11      	cmp	r3, #17
 8002f84:	d11b      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f92:	683b      	ldr	r3, [r7, #0]
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	2b10      	cmp	r3, #16
 8002f98:	d111      	bne.n	8002fbe <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f9a:	4b10      	ldr	r3, [pc, #64]	; (8002fdc <HAL_ADC_ConfigChannel+0x23c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	4a10      	ldr	r2, [pc, #64]	; (8002fe0 <HAL_ADC_ConfigChannel+0x240>)
 8002fa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fa4:	0c9a      	lsrs	r2, r3, #18
 8002fa6:	4613      	mov	r3, r2
 8002fa8:	009b      	lsls	r3, r3, #2
 8002faa:	4413      	add	r3, r2
 8002fac:	005b      	lsls	r3, r3, #1
 8002fae:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fb0:	e002      	b.n	8002fb8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fb2:	68bb      	ldr	r3, [r7, #8]
 8002fb4:	3b01      	subs	r3, #1
 8002fb6:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d1f9      	bne.n	8002fb2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fbe:	687b      	ldr	r3, [r7, #4]
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002fc6:	2300      	movs	r3, #0
}
 8002fc8:	4618      	mov	r0, r3
 8002fca:	3714      	adds	r7, #20
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr
 8002fd4:	40012300 	.word	0x40012300
 8002fd8:	40012000 	.word	0x40012000
 8002fdc:	20000100 	.word	0x20000100
 8002fe0:	431bde83 	.word	0x431bde83

08002fe4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fe4:	b480      	push	{r7}
 8002fe6:	b085      	sub	sp, #20
 8002fe8:	af00      	add	r7, sp, #0
 8002fea:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fec:	4b79      	ldr	r3, [pc, #484]	; (80031d4 <ADC_Init+0x1f0>)
 8002fee:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	685b      	ldr	r3, [r3, #4]
 8002ff4:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	685a      	ldr	r2, [r3, #4]
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	431a      	orrs	r2, r3
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003018:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	6859      	ldr	r1, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	691b      	ldr	r3, [r3, #16]
 8003024:	021a      	lsls	r2, r3, #8
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	430a      	orrs	r2, r1
 800302c:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	681b      	ldr	r3, [r3, #0]
 8003032:	685a      	ldr	r2, [r3, #4]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800303c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	6859      	ldr	r1, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	689a      	ldr	r2, [r3, #8]
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	430a      	orrs	r2, r1
 800304e:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	689a      	ldr	r2, [r3, #8]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800305e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	6899      	ldr	r1, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	68da      	ldr	r2, [r3, #12]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	430a      	orrs	r2, r1
 8003070:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003076:	4a58      	ldr	r2, [pc, #352]	; (80031d8 <ADC_Init+0x1f4>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d022      	beq.n	80030c2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	689a      	ldr	r2, [r3, #8]
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800308a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	6899      	ldr	r1, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	430a      	orrs	r2, r1
 800309c:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	689a      	ldr	r2, [r3, #8]
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030ac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	6899      	ldr	r1, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	430a      	orrs	r2, r1
 80030be:	609a      	str	r2, [r3, #8]
 80030c0:	e00f      	b.n	80030e2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	689a      	ldr	r2, [r3, #8]
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030d0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030e0:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 0202 	bic.w	r2, r2, #2
 80030f0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	6899      	ldr	r1, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	7e1b      	ldrb	r3, [r3, #24]
 80030fc:	005a      	lsls	r2, r3, #1
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	430a      	orrs	r2, r1
 8003104:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	f893 3020 	ldrb.w	r3, [r3, #32]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d01b      	beq.n	8003148 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	681b      	ldr	r3, [r3, #0]
 8003114:	685a      	ldr	r2, [r3, #4]
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800311e:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800312e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	6859      	ldr	r1, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800313a:	3b01      	subs	r3, #1
 800313c:	035a      	lsls	r2, r3, #13
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	430a      	orrs	r2, r1
 8003144:	605a      	str	r2, [r3, #4]
 8003146:	e007      	b.n	8003158 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	685a      	ldr	r2, [r3, #4]
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003156:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003166:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	3b01      	subs	r3, #1
 8003174:	051a      	lsls	r2, r3, #20
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	430a      	orrs	r2, r1
 800317c:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800318c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6899      	ldr	r1, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800319a:	025a      	lsls	r2, r3, #9
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	430a      	orrs	r2, r1
 80031a2:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	681b      	ldr	r3, [r3, #0]
 80031a8:	689a      	ldr	r2, [r3, #8]
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	6899      	ldr	r1, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	029a      	lsls	r2, r3, #10
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	430a      	orrs	r2, r1
 80031c6:	609a      	str	r2, [r3, #8]
}
 80031c8:	bf00      	nop
 80031ca:	3714      	adds	r7, #20
 80031cc:	46bd      	mov	sp, r7
 80031ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031d2:	4770      	bx	lr
 80031d4:	40012300 	.word	0x40012300
 80031d8:	0f000001 	.word	0x0f000001

080031dc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031dc:	b480      	push	{r7}
 80031de:	b085      	sub	sp, #20
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	f003 0307 	and.w	r3, r3, #7
 80031ea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031ec:	4b0c      	ldr	r3, [pc, #48]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031f2:	68ba      	ldr	r2, [r7, #8]
 80031f4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80031f8:	4013      	ands	r3, r2
 80031fa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003200:	68bb      	ldr	r3, [r7, #8]
 8003202:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003204:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003208:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800320c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800320e:	4a04      	ldr	r2, [pc, #16]	; (8003220 <__NVIC_SetPriorityGrouping+0x44>)
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	60d3      	str	r3, [r2, #12]
}
 8003214:	bf00      	nop
 8003216:	3714      	adds	r7, #20
 8003218:	46bd      	mov	sp, r7
 800321a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321e:	4770      	bx	lr
 8003220:	e000ed00 	.word	0xe000ed00

08003224 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003224:	b480      	push	{r7}
 8003226:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003228:	4b04      	ldr	r3, [pc, #16]	; (800323c <__NVIC_GetPriorityGrouping+0x18>)
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	0a1b      	lsrs	r3, r3, #8
 800322e:	f003 0307 	and.w	r3, r3, #7
}
 8003232:	4618      	mov	r0, r3
 8003234:	46bd      	mov	sp, r7
 8003236:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323a:	4770      	bx	lr
 800323c:	e000ed00 	.word	0xe000ed00

08003240 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003240:	b480      	push	{r7}
 8003242:	b083      	sub	sp, #12
 8003244:	af00      	add	r7, sp, #0
 8003246:	4603      	mov	r3, r0
 8003248:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800324a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324e:	2b00      	cmp	r3, #0
 8003250:	db0b      	blt.n	800326a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003252:	79fb      	ldrb	r3, [r7, #7]
 8003254:	f003 021f 	and.w	r2, r3, #31
 8003258:	4907      	ldr	r1, [pc, #28]	; (8003278 <__NVIC_EnableIRQ+0x38>)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	095b      	lsrs	r3, r3, #5
 8003260:	2001      	movs	r0, #1
 8003262:	fa00 f202 	lsl.w	r2, r0, r2
 8003266:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800326a:	bf00      	nop
 800326c:	370c      	adds	r7, #12
 800326e:	46bd      	mov	sp, r7
 8003270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003274:	4770      	bx	lr
 8003276:	bf00      	nop
 8003278:	e000e100 	.word	0xe000e100

0800327c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800327c:	b480      	push	{r7}
 800327e:	b083      	sub	sp, #12
 8003280:	af00      	add	r7, sp, #0
 8003282:	4603      	mov	r3, r0
 8003284:	6039      	str	r1, [r7, #0]
 8003286:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003288:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800328c:	2b00      	cmp	r3, #0
 800328e:	db0a      	blt.n	80032a6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	b2da      	uxtb	r2, r3
 8003294:	490c      	ldr	r1, [pc, #48]	; (80032c8 <__NVIC_SetPriority+0x4c>)
 8003296:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329a:	0112      	lsls	r2, r2, #4
 800329c:	b2d2      	uxtb	r2, r2
 800329e:	440b      	add	r3, r1
 80032a0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032a4:	e00a      	b.n	80032bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a6:	683b      	ldr	r3, [r7, #0]
 80032a8:	b2da      	uxtb	r2, r3
 80032aa:	4908      	ldr	r1, [pc, #32]	; (80032cc <__NVIC_SetPriority+0x50>)
 80032ac:	79fb      	ldrb	r3, [r7, #7]
 80032ae:	f003 030f 	and.w	r3, r3, #15
 80032b2:	3b04      	subs	r3, #4
 80032b4:	0112      	lsls	r2, r2, #4
 80032b6:	b2d2      	uxtb	r2, r2
 80032b8:	440b      	add	r3, r1
 80032ba:	761a      	strb	r2, [r3, #24]
}
 80032bc:	bf00      	nop
 80032be:	370c      	adds	r7, #12
 80032c0:	46bd      	mov	sp, r7
 80032c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032c6:	4770      	bx	lr
 80032c8:	e000e100 	.word	0xe000e100
 80032cc:	e000ed00 	.word	0xe000ed00

080032d0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b089      	sub	sp, #36	; 0x24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	60f8      	str	r0, [r7, #12]
 80032d8:	60b9      	str	r1, [r7, #8]
 80032da:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032dc:	68fb      	ldr	r3, [r7, #12]
 80032de:	f003 0307 	and.w	r3, r3, #7
 80032e2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032e4:	69fb      	ldr	r3, [r7, #28]
 80032e6:	f1c3 0307 	rsb	r3, r3, #7
 80032ea:	2b04      	cmp	r3, #4
 80032ec:	bf28      	it	cs
 80032ee:	2304      	movcs	r3, #4
 80032f0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032f2:	69fb      	ldr	r3, [r7, #28]
 80032f4:	3304      	adds	r3, #4
 80032f6:	2b06      	cmp	r3, #6
 80032f8:	d902      	bls.n	8003300 <NVIC_EncodePriority+0x30>
 80032fa:	69fb      	ldr	r3, [r7, #28]
 80032fc:	3b03      	subs	r3, #3
 80032fe:	e000      	b.n	8003302 <NVIC_EncodePriority+0x32>
 8003300:	2300      	movs	r3, #0
 8003302:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003304:	f04f 32ff 	mov.w	r2, #4294967295
 8003308:	69bb      	ldr	r3, [r7, #24]
 800330a:	fa02 f303 	lsl.w	r3, r2, r3
 800330e:	43da      	mvns	r2, r3
 8003310:	68bb      	ldr	r3, [r7, #8]
 8003312:	401a      	ands	r2, r3
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003318:	f04f 31ff 	mov.w	r1, #4294967295
 800331c:	697b      	ldr	r3, [r7, #20]
 800331e:	fa01 f303 	lsl.w	r3, r1, r3
 8003322:	43d9      	mvns	r1, r3
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003328:	4313      	orrs	r3, r2
         );
}
 800332a:	4618      	mov	r0, r3
 800332c:	3724      	adds	r7, #36	; 0x24
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
	...

08003338 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003338:	b580      	push	{r7, lr}
 800333a:	b082      	sub	sp, #8
 800333c:	af00      	add	r7, sp, #0
 800333e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	3b01      	subs	r3, #1
 8003344:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003348:	d301      	bcc.n	800334e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800334a:	2301      	movs	r3, #1
 800334c:	e00f      	b.n	800336e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800334e:	4a0a      	ldr	r2, [pc, #40]	; (8003378 <SysTick_Config+0x40>)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003356:	210f      	movs	r1, #15
 8003358:	f04f 30ff 	mov.w	r0, #4294967295
 800335c:	f7ff ff8e 	bl	800327c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003360:	4b05      	ldr	r3, [pc, #20]	; (8003378 <SysTick_Config+0x40>)
 8003362:	2200      	movs	r2, #0
 8003364:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003366:	4b04      	ldr	r3, [pc, #16]	; (8003378 <SysTick_Config+0x40>)
 8003368:	2207      	movs	r2, #7
 800336a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	3708      	adds	r7, #8
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}
 8003376:	bf00      	nop
 8003378:	e000e010 	.word	0xe000e010

0800337c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800337c:	b580      	push	{r7, lr}
 800337e:	b082      	sub	sp, #8
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003384:	6878      	ldr	r0, [r7, #4]
 8003386:	f7ff ff29 	bl	80031dc <__NVIC_SetPriorityGrouping>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003392:	b580      	push	{r7, lr}
 8003394:	b086      	sub	sp, #24
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	60b9      	str	r1, [r7, #8]
 800339c:	607a      	str	r2, [r7, #4]
 800339e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033a0:	2300      	movs	r3, #0
 80033a2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033a4:	f7ff ff3e 	bl	8003224 <__NVIC_GetPriorityGrouping>
 80033a8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033aa:	687a      	ldr	r2, [r7, #4]
 80033ac:	68b9      	ldr	r1, [r7, #8]
 80033ae:	6978      	ldr	r0, [r7, #20]
 80033b0:	f7ff ff8e 	bl	80032d0 <NVIC_EncodePriority>
 80033b4:	4602      	mov	r2, r0
 80033b6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ba:	4611      	mov	r1, r2
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff5d 	bl	800327c <__NVIC_SetPriority>
}
 80033c2:	bf00      	nop
 80033c4:	3718      	adds	r7, #24
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	4603      	mov	r3, r0
 80033d2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033d8:	4618      	mov	r0, r3
 80033da:	f7ff ff31 	bl	8003240 <__NVIC_EnableIRQ>
}
 80033de:	bf00      	nop
 80033e0:	3708      	adds	r7, #8
 80033e2:	46bd      	mov	sp, r7
 80033e4:	bd80      	pop	{r7, pc}

080033e6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033e6:	b580      	push	{r7, lr}
 80033e8:	b082      	sub	sp, #8
 80033ea:	af00      	add	r7, sp, #0
 80033ec:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7ff ffa2 	bl	8003338 <SysTick_Config>
 80033f4:	4603      	mov	r3, r0
}
 80033f6:	4618      	mov	r0, r3
 80033f8:	3708      	adds	r7, #8
 80033fa:	46bd      	mov	sp, r7
 80033fc:	bd80      	pop	{r7, pc}
	...

08003400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003400:	b480      	push	{r7}
 8003402:	b089      	sub	sp, #36	; 0x24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
 8003408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800340a:	2300      	movs	r3, #0
 800340c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800340e:	2300      	movs	r3, #0
 8003410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003412:	2300      	movs	r3, #0
 8003414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003416:	2300      	movs	r3, #0
 8003418:	61fb      	str	r3, [r7, #28]
 800341a:	e16b      	b.n	80036f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800341c:	2201      	movs	r2, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	697a      	ldr	r2, [r7, #20]
 800342c:	4013      	ands	r3, r2
 800342e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003430:	693a      	ldr	r2, [r7, #16]
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	429a      	cmp	r2, r3
 8003436:	f040 815a 	bne.w	80036ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800343a:	683b      	ldr	r3, [r7, #0]
 800343c:	685b      	ldr	r3, [r3, #4]
 800343e:	f003 0303 	and.w	r3, r3, #3
 8003442:	2b01      	cmp	r3, #1
 8003444:	d005      	beq.n	8003452 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003446:	683b      	ldr	r3, [r7, #0]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344e:	2b02      	cmp	r3, #2
 8003450:	d130      	bne.n	80034b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003452:	687b      	ldr	r3, [r7, #4]
 8003454:	689b      	ldr	r3, [r3, #8]
 8003456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	2203      	movs	r2, #3
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	43db      	mvns	r3, r3
 8003464:	69ba      	ldr	r2, [r7, #24]
 8003466:	4013      	ands	r3, r2
 8003468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	68da      	ldr	r2, [r3, #12]
 800346e:	69fb      	ldr	r3, [r7, #28]
 8003470:	005b      	lsls	r3, r3, #1
 8003472:	fa02 f303 	lsl.w	r3, r2, r3
 8003476:	69ba      	ldr	r2, [r7, #24]
 8003478:	4313      	orrs	r3, r2
 800347a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003488:	2201      	movs	r2, #1
 800348a:	69fb      	ldr	r3, [r7, #28]
 800348c:	fa02 f303 	lsl.w	r3, r2, r3
 8003490:	43db      	mvns	r3, r3
 8003492:	69ba      	ldr	r2, [r7, #24]
 8003494:	4013      	ands	r3, r2
 8003496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685b      	ldr	r3, [r3, #4]
 800349c:	091b      	lsrs	r3, r3, #4
 800349e:	f003 0201 	and.w	r2, r3, #1
 80034a2:	69fb      	ldr	r3, [r7, #28]
 80034a4:	fa02 f303 	lsl.w	r3, r2, r3
 80034a8:	69ba      	ldr	r2, [r7, #24]
 80034aa:	4313      	orrs	r3, r2
 80034ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	69ba      	ldr	r2, [r7, #24]
 80034b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034b4:	683b      	ldr	r3, [r7, #0]
 80034b6:	685b      	ldr	r3, [r3, #4]
 80034b8:	f003 0303 	and.w	r3, r3, #3
 80034bc:	2b03      	cmp	r3, #3
 80034be:	d017      	beq.n	80034f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	68db      	ldr	r3, [r3, #12]
 80034c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	689a      	ldr	r2, [r3, #8]
 80034dc:	69fb      	ldr	r3, [r7, #28]
 80034de:	005b      	lsls	r3, r3, #1
 80034e0:	fa02 f303 	lsl.w	r3, r2, r3
 80034e4:	69ba      	ldr	r2, [r7, #24]
 80034e6:	4313      	orrs	r3, r2
 80034e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	69ba      	ldr	r2, [r7, #24]
 80034ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034f0:	683b      	ldr	r3, [r7, #0]
 80034f2:	685b      	ldr	r3, [r3, #4]
 80034f4:	f003 0303 	and.w	r3, r3, #3
 80034f8:	2b02      	cmp	r3, #2
 80034fa:	d123      	bne.n	8003544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034fc:	69fb      	ldr	r3, [r7, #28]
 80034fe:	08da      	lsrs	r2, r3, #3
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	3208      	adds	r2, #8
 8003504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800350a:	69fb      	ldr	r3, [r7, #28]
 800350c:	f003 0307 	and.w	r3, r3, #7
 8003510:	009b      	lsls	r3, r3, #2
 8003512:	220f      	movs	r2, #15
 8003514:	fa02 f303 	lsl.w	r3, r2, r3
 8003518:	43db      	mvns	r3, r3
 800351a:	69ba      	ldr	r2, [r7, #24]
 800351c:	4013      	ands	r3, r2
 800351e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	691a      	ldr	r2, [r3, #16]
 8003524:	69fb      	ldr	r3, [r7, #28]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	009b      	lsls	r3, r3, #2
 800352c:	fa02 f303 	lsl.w	r3, r2, r3
 8003530:	69ba      	ldr	r2, [r7, #24]
 8003532:	4313      	orrs	r3, r2
 8003534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	08da      	lsrs	r2, r3, #3
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	3208      	adds	r2, #8
 800353e:	69b9      	ldr	r1, [r7, #24]
 8003540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800354a:	69fb      	ldr	r3, [r7, #28]
 800354c:	005b      	lsls	r3, r3, #1
 800354e:	2203      	movs	r2, #3
 8003550:	fa02 f303 	lsl.w	r3, r2, r3
 8003554:	43db      	mvns	r3, r3
 8003556:	69ba      	ldr	r2, [r7, #24]
 8003558:	4013      	ands	r3, r2
 800355a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800355c:	683b      	ldr	r3, [r7, #0]
 800355e:	685b      	ldr	r3, [r3, #4]
 8003560:	f003 0203 	and.w	r2, r3, #3
 8003564:	69fb      	ldr	r3, [r7, #28]
 8003566:	005b      	lsls	r3, r3, #1
 8003568:	fa02 f303 	lsl.w	r3, r2, r3
 800356c:	69ba      	ldr	r2, [r7, #24]
 800356e:	4313      	orrs	r3, r2
 8003570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	69ba      	ldr	r2, [r7, #24]
 8003576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003580:	2b00      	cmp	r3, #0
 8003582:	f000 80b4 	beq.w	80036ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003586:	2300      	movs	r3, #0
 8003588:	60fb      	str	r3, [r7, #12]
 800358a:	4b60      	ldr	r3, [pc, #384]	; (800370c <HAL_GPIO_Init+0x30c>)
 800358c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800358e:	4a5f      	ldr	r2, [pc, #380]	; (800370c <HAL_GPIO_Init+0x30c>)
 8003590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003594:	6453      	str	r3, [r2, #68]	; 0x44
 8003596:	4b5d      	ldr	r3, [pc, #372]	; (800370c <HAL_GPIO_Init+0x30c>)
 8003598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800359e:	60fb      	str	r3, [r7, #12]
 80035a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035a2:	4a5b      	ldr	r2, [pc, #364]	; (8003710 <HAL_GPIO_Init+0x310>)
 80035a4:	69fb      	ldr	r3, [r7, #28]
 80035a6:	089b      	lsrs	r3, r3, #2
 80035a8:	3302      	adds	r3, #2
 80035aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035b0:	69fb      	ldr	r3, [r7, #28]
 80035b2:	f003 0303 	and.w	r3, r3, #3
 80035b6:	009b      	lsls	r3, r3, #2
 80035b8:	220f      	movs	r2, #15
 80035ba:	fa02 f303 	lsl.w	r3, r2, r3
 80035be:	43db      	mvns	r3, r3
 80035c0:	69ba      	ldr	r2, [r7, #24]
 80035c2:	4013      	ands	r3, r2
 80035c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	4a52      	ldr	r2, [pc, #328]	; (8003714 <HAL_GPIO_Init+0x314>)
 80035ca:	4293      	cmp	r3, r2
 80035cc:	d02b      	beq.n	8003626 <HAL_GPIO_Init+0x226>
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	4a51      	ldr	r2, [pc, #324]	; (8003718 <HAL_GPIO_Init+0x318>)
 80035d2:	4293      	cmp	r3, r2
 80035d4:	d025      	beq.n	8003622 <HAL_GPIO_Init+0x222>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a50      	ldr	r2, [pc, #320]	; (800371c <HAL_GPIO_Init+0x31c>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d01f      	beq.n	800361e <HAL_GPIO_Init+0x21e>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a4f      	ldr	r2, [pc, #316]	; (8003720 <HAL_GPIO_Init+0x320>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d019      	beq.n	800361a <HAL_GPIO_Init+0x21a>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a4e      	ldr	r2, [pc, #312]	; (8003724 <HAL_GPIO_Init+0x324>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d013      	beq.n	8003616 <HAL_GPIO_Init+0x216>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a4d      	ldr	r2, [pc, #308]	; (8003728 <HAL_GPIO_Init+0x328>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00d      	beq.n	8003612 <HAL_GPIO_Init+0x212>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a4c      	ldr	r2, [pc, #304]	; (800372c <HAL_GPIO_Init+0x32c>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <HAL_GPIO_Init+0x20e>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a4b      	ldr	r2, [pc, #300]	; (8003730 <HAL_GPIO_Init+0x330>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d101      	bne.n	800360a <HAL_GPIO_Init+0x20a>
 8003606:	2307      	movs	r3, #7
 8003608:	e00e      	b.n	8003628 <HAL_GPIO_Init+0x228>
 800360a:	2308      	movs	r3, #8
 800360c:	e00c      	b.n	8003628 <HAL_GPIO_Init+0x228>
 800360e:	2306      	movs	r3, #6
 8003610:	e00a      	b.n	8003628 <HAL_GPIO_Init+0x228>
 8003612:	2305      	movs	r3, #5
 8003614:	e008      	b.n	8003628 <HAL_GPIO_Init+0x228>
 8003616:	2304      	movs	r3, #4
 8003618:	e006      	b.n	8003628 <HAL_GPIO_Init+0x228>
 800361a:	2303      	movs	r3, #3
 800361c:	e004      	b.n	8003628 <HAL_GPIO_Init+0x228>
 800361e:	2302      	movs	r3, #2
 8003620:	e002      	b.n	8003628 <HAL_GPIO_Init+0x228>
 8003622:	2301      	movs	r3, #1
 8003624:	e000      	b.n	8003628 <HAL_GPIO_Init+0x228>
 8003626:	2300      	movs	r3, #0
 8003628:	69fa      	ldr	r2, [r7, #28]
 800362a:	f002 0203 	and.w	r2, r2, #3
 800362e:	0092      	lsls	r2, r2, #2
 8003630:	4093      	lsls	r3, r2
 8003632:	69ba      	ldr	r2, [r7, #24]
 8003634:	4313      	orrs	r3, r2
 8003636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003638:	4935      	ldr	r1, [pc, #212]	; (8003710 <HAL_GPIO_Init+0x310>)
 800363a:	69fb      	ldr	r3, [r7, #28]
 800363c:	089b      	lsrs	r3, r3, #2
 800363e:	3302      	adds	r3, #2
 8003640:	69ba      	ldr	r2, [r7, #24]
 8003642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003646:	4b3b      	ldr	r3, [pc, #236]	; (8003734 <HAL_GPIO_Init+0x334>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800364c:	693b      	ldr	r3, [r7, #16]
 800364e:	43db      	mvns	r3, r3
 8003650:	69ba      	ldr	r2, [r7, #24]
 8003652:	4013      	ands	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003656:	683b      	ldr	r3, [r7, #0]
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365e:	2b00      	cmp	r3, #0
 8003660:	d003      	beq.n	800366a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8003662:	69ba      	ldr	r2, [r7, #24]
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	4313      	orrs	r3, r2
 8003668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800366a:	4a32      	ldr	r2, [pc, #200]	; (8003734 <HAL_GPIO_Init+0x334>)
 800366c:	69bb      	ldr	r3, [r7, #24]
 800366e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003670:	4b30      	ldr	r3, [pc, #192]	; (8003734 <HAL_GPIO_Init+0x334>)
 8003672:	68db      	ldr	r3, [r3, #12]
 8003674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003676:	693b      	ldr	r3, [r7, #16]
 8003678:	43db      	mvns	r3, r3
 800367a:	69ba      	ldr	r2, [r7, #24]
 800367c:	4013      	ands	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003680:	683b      	ldr	r3, [r7, #0]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d003      	beq.n	8003694 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800368c:	69ba      	ldr	r2, [r7, #24]
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	4313      	orrs	r3, r2
 8003692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003694:	4a27      	ldr	r2, [pc, #156]	; (8003734 <HAL_GPIO_Init+0x334>)
 8003696:	69bb      	ldr	r3, [r7, #24]
 8003698:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800369a:	4b26      	ldr	r3, [pc, #152]	; (8003734 <HAL_GPIO_Init+0x334>)
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036a0:	693b      	ldr	r3, [r7, #16]
 80036a2:	43db      	mvns	r3, r3
 80036a4:	69ba      	ldr	r2, [r7, #24]
 80036a6:	4013      	ands	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80036aa:	683b      	ldr	r3, [r7, #0]
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036b6:	69ba      	ldr	r2, [r7, #24]
 80036b8:	693b      	ldr	r3, [r7, #16]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036be:	4a1d      	ldr	r2, [pc, #116]	; (8003734 <HAL_GPIO_Init+0x334>)
 80036c0:	69bb      	ldr	r3, [r7, #24]
 80036c2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036c4:	4b1b      	ldr	r3, [pc, #108]	; (8003734 <HAL_GPIO_Init+0x334>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036ca:	693b      	ldr	r3, [r7, #16]
 80036cc:	43db      	mvns	r3, r3
 80036ce:	69ba      	ldr	r2, [r7, #24]
 80036d0:	4013      	ands	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036dc:	2b00      	cmp	r3, #0
 80036de:	d003      	beq.n	80036e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036e0:	69ba      	ldr	r2, [r7, #24]
 80036e2:	693b      	ldr	r3, [r7, #16]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036e8:	4a12      	ldr	r2, [pc, #72]	; (8003734 <HAL_GPIO_Init+0x334>)
 80036ea:	69bb      	ldr	r3, [r7, #24]
 80036ec:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036ee:	69fb      	ldr	r3, [r7, #28]
 80036f0:	3301      	adds	r3, #1
 80036f2:	61fb      	str	r3, [r7, #28]
 80036f4:	69fb      	ldr	r3, [r7, #28]
 80036f6:	2b0f      	cmp	r3, #15
 80036f8:	f67f ae90 	bls.w	800341c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036fc:	bf00      	nop
 80036fe:	bf00      	nop
 8003700:	3724      	adds	r7, #36	; 0x24
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40023800 	.word	0x40023800
 8003710:	40013800 	.word	0x40013800
 8003714:	40020000 	.word	0x40020000
 8003718:	40020400 	.word	0x40020400
 800371c:	40020800 	.word	0x40020800
 8003720:	40020c00 	.word	0x40020c00
 8003724:	40021000 	.word	0x40021000
 8003728:	40021400 	.word	0x40021400
 800372c:	40021800 	.word	0x40021800
 8003730:	40021c00 	.word	0x40021c00
 8003734:	40013c00 	.word	0x40013c00

08003738 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003738:	b480      	push	{r7}
 800373a:	b083      	sub	sp, #12
 800373c:	af00      	add	r7, sp, #0
 800373e:	6078      	str	r0, [r7, #4]
 8003740:	460b      	mov	r3, r1
 8003742:	807b      	strh	r3, [r7, #2]
 8003744:	4613      	mov	r3, r2
 8003746:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003748:	787b      	ldrb	r3, [r7, #1]
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800374e:	887a      	ldrh	r2, [r7, #2]
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003754:	e003      	b.n	800375e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003756:	887b      	ldrh	r3, [r7, #2]
 8003758:	041a      	lsls	r2, r3, #16
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	619a      	str	r2, [r3, #24]
}
 800375e:	bf00      	nop
 8003760:	370c      	adds	r7, #12
 8003762:	46bd      	mov	sp, r7
 8003764:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003768:	4770      	bx	lr
	...

0800376c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800376c:	b580      	push	{r7, lr}
 800376e:	b084      	sub	sp, #16
 8003770:	af00      	add	r7, sp, #0
 8003772:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	2b00      	cmp	r3, #0
 8003778:	d101      	bne.n	800377e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800377a:	2301      	movs	r3, #1
 800377c:	e12b      	b.n	80039d6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003784:	b2db      	uxtb	r3, r3
 8003786:	2b00      	cmp	r3, #0
 8003788:	d106      	bne.n	8003798 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003792:	6878      	ldr	r0, [r7, #4]
 8003794:	f7fe fd2a 	bl	80021ec <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	2224      	movs	r2, #36	; 0x24
 800379c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	681b      	ldr	r3, [r3, #0]
 80037a4:	681a      	ldr	r2, [r3, #0]
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f022 0201 	bic.w	r2, r2, #1
 80037ae:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037be:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037ce:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037d0:	f001 f9d8 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 80037d4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	4a81      	ldr	r2, [pc, #516]	; (80039e0 <HAL_I2C_Init+0x274>)
 80037dc:	4293      	cmp	r3, r2
 80037de:	d807      	bhi.n	80037f0 <HAL_I2C_Init+0x84>
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	4a80      	ldr	r2, [pc, #512]	; (80039e4 <HAL_I2C_Init+0x278>)
 80037e4:	4293      	cmp	r3, r2
 80037e6:	bf94      	ite	ls
 80037e8:	2301      	movls	r3, #1
 80037ea:	2300      	movhi	r3, #0
 80037ec:	b2db      	uxtb	r3, r3
 80037ee:	e006      	b.n	80037fe <HAL_I2C_Init+0x92>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a7d      	ldr	r2, [pc, #500]	; (80039e8 <HAL_I2C_Init+0x27c>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	bf94      	ite	ls
 80037f8:	2301      	movls	r3, #1
 80037fa:	2300      	movhi	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	2b00      	cmp	r3, #0
 8003800:	d001      	beq.n	8003806 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003802:	2301      	movs	r3, #1
 8003804:	e0e7      	b.n	80039d6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	4a78      	ldr	r2, [pc, #480]	; (80039ec <HAL_I2C_Init+0x280>)
 800380a:	fba2 2303 	umull	r2, r3, r2, r3
 800380e:	0c9b      	lsrs	r3, r3, #18
 8003810:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	685b      	ldr	r3, [r3, #4]
 8003818:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	68ba      	ldr	r2, [r7, #8]
 8003822:	430a      	orrs	r2, r1
 8003824:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	6a1b      	ldr	r3, [r3, #32]
 800382c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a6a      	ldr	r2, [pc, #424]	; (80039e0 <HAL_I2C_Init+0x274>)
 8003836:	4293      	cmp	r3, r2
 8003838:	d802      	bhi.n	8003840 <HAL_I2C_Init+0xd4>
 800383a:	68bb      	ldr	r3, [r7, #8]
 800383c:	3301      	adds	r3, #1
 800383e:	e009      	b.n	8003854 <HAL_I2C_Init+0xe8>
 8003840:	68bb      	ldr	r3, [r7, #8]
 8003842:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003846:	fb02 f303 	mul.w	r3, r2, r3
 800384a:	4a69      	ldr	r2, [pc, #420]	; (80039f0 <HAL_I2C_Init+0x284>)
 800384c:	fba2 2303 	umull	r2, r3, r2, r3
 8003850:	099b      	lsrs	r3, r3, #6
 8003852:	3301      	adds	r3, #1
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6812      	ldr	r2, [r2, #0]
 8003858:	430b      	orrs	r3, r1
 800385a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003866:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	685b      	ldr	r3, [r3, #4]
 800386e:	495c      	ldr	r1, [pc, #368]	; (80039e0 <HAL_I2C_Init+0x274>)
 8003870:	428b      	cmp	r3, r1
 8003872:	d819      	bhi.n	80038a8 <HAL_I2C_Init+0x13c>
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	1e59      	subs	r1, r3, #1
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	005b      	lsls	r3, r3, #1
 800387e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003882:	1c59      	adds	r1, r3, #1
 8003884:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003888:	400b      	ands	r3, r1
 800388a:	2b00      	cmp	r3, #0
 800388c:	d00a      	beq.n	80038a4 <HAL_I2C_Init+0x138>
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	1e59      	subs	r1, r3, #1
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	005b      	lsls	r3, r3, #1
 8003898:	fbb1 f3f3 	udiv	r3, r1, r3
 800389c:	3301      	adds	r3, #1
 800389e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038a2:	e051      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 80038a4:	2304      	movs	r3, #4
 80038a6:	e04f      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	689b      	ldr	r3, [r3, #8]
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d111      	bne.n	80038d4 <HAL_I2C_Init+0x168>
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	1e58      	subs	r0, r3, #1
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	6859      	ldr	r1, [r3, #4]
 80038b8:	460b      	mov	r3, r1
 80038ba:	005b      	lsls	r3, r3, #1
 80038bc:	440b      	add	r3, r1
 80038be:	fbb0 f3f3 	udiv	r3, r0, r3
 80038c2:	3301      	adds	r3, #1
 80038c4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	bf0c      	ite	eq
 80038cc:	2301      	moveq	r3, #1
 80038ce:	2300      	movne	r3, #0
 80038d0:	b2db      	uxtb	r3, r3
 80038d2:	e012      	b.n	80038fa <HAL_I2C_Init+0x18e>
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	1e58      	subs	r0, r3, #1
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	6859      	ldr	r1, [r3, #4]
 80038dc:	460b      	mov	r3, r1
 80038de:	009b      	lsls	r3, r3, #2
 80038e0:	440b      	add	r3, r1
 80038e2:	0099      	lsls	r1, r3, #2
 80038e4:	440b      	add	r3, r1
 80038e6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ea:	3301      	adds	r3, #1
 80038ec:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	bf0c      	ite	eq
 80038f4:	2301      	moveq	r3, #1
 80038f6:	2300      	movne	r3, #0
 80038f8:	b2db      	uxtb	r3, r3
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d001      	beq.n	8003902 <HAL_I2C_Init+0x196>
 80038fe:	2301      	movs	r3, #1
 8003900:	e022      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	689b      	ldr	r3, [r3, #8]
 8003906:	2b00      	cmp	r3, #0
 8003908:	d10e      	bne.n	8003928 <HAL_I2C_Init+0x1bc>
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	1e58      	subs	r0, r3, #1
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6859      	ldr	r1, [r3, #4]
 8003912:	460b      	mov	r3, r1
 8003914:	005b      	lsls	r3, r3, #1
 8003916:	440b      	add	r3, r1
 8003918:	fbb0 f3f3 	udiv	r3, r0, r3
 800391c:	3301      	adds	r3, #1
 800391e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003922:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003926:	e00f      	b.n	8003948 <HAL_I2C_Init+0x1dc>
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	1e58      	subs	r0, r3, #1
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	6859      	ldr	r1, [r3, #4]
 8003930:	460b      	mov	r3, r1
 8003932:	009b      	lsls	r3, r3, #2
 8003934:	440b      	add	r3, r1
 8003936:	0099      	lsls	r1, r3, #2
 8003938:	440b      	add	r3, r1
 800393a:	fbb0 f3f3 	udiv	r3, r0, r3
 800393e:	3301      	adds	r3, #1
 8003940:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003944:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003948:	6879      	ldr	r1, [r7, #4]
 800394a:	6809      	ldr	r1, [r1, #0]
 800394c:	4313      	orrs	r3, r2
 800394e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	69da      	ldr	r2, [r3, #28]
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	6a1b      	ldr	r3, [r3, #32]
 8003962:	431a      	orrs	r2, r3
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	430a      	orrs	r2, r1
 800396a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003976:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800397a:	687a      	ldr	r2, [r7, #4]
 800397c:	6911      	ldr	r1, [r2, #16]
 800397e:	687a      	ldr	r2, [r7, #4]
 8003980:	68d2      	ldr	r2, [r2, #12]
 8003982:	4311      	orrs	r1, r2
 8003984:	687a      	ldr	r2, [r7, #4]
 8003986:	6812      	ldr	r2, [r2, #0]
 8003988:	430b      	orrs	r3, r1
 800398a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
 8003992:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	695a      	ldr	r2, [r3, #20]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	431a      	orrs	r2, r3
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	681b      	ldr	r3, [r3, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2220      	movs	r2, #32
 80039c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2200      	movs	r2, #0
 80039ca:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2200      	movs	r2, #0
 80039d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039d4:	2300      	movs	r3, #0
}
 80039d6:	4618      	mov	r0, r3
 80039d8:	3710      	adds	r7, #16
 80039da:	46bd      	mov	sp, r7
 80039dc:	bd80      	pop	{r7, pc}
 80039de:	bf00      	nop
 80039e0:	000186a0 	.word	0x000186a0
 80039e4:	001e847f 	.word	0x001e847f
 80039e8:	003d08ff 	.word	0x003d08ff
 80039ec:	431bde83 	.word	0x431bde83
 80039f0:	10624dd3 	.word	0x10624dd3

080039f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b088      	sub	sp, #32
 80039f8:	af02      	add	r7, sp, #8
 80039fa:	60f8      	str	r0, [r7, #12]
 80039fc:	4608      	mov	r0, r1
 80039fe:	4611      	mov	r1, r2
 8003a00:	461a      	mov	r2, r3
 8003a02:	4603      	mov	r3, r0
 8003a04:	817b      	strh	r3, [r7, #10]
 8003a06:	460b      	mov	r3, r1
 8003a08:	813b      	strh	r3, [r7, #8]
 8003a0a:	4613      	mov	r3, r2
 8003a0c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a0e:	f7ff f80d 	bl	8002a2c <HAL_GetTick>
 8003a12:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a1a:	b2db      	uxtb	r3, r3
 8003a1c:	2b20      	cmp	r3, #32
 8003a1e:	f040 80d9 	bne.w	8003bd4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	9300      	str	r3, [sp, #0]
 8003a26:	2319      	movs	r3, #25
 8003a28:	2201      	movs	r2, #1
 8003a2a:	496d      	ldr	r1, [pc, #436]	; (8003be0 <HAL_I2C_Mem_Write+0x1ec>)
 8003a2c:	68f8      	ldr	r0, [r7, #12]
 8003a2e:	f000 fa9f 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003a32:	4603      	mov	r3, r0
 8003a34:	2b00      	cmp	r3, #0
 8003a36:	d001      	beq.n	8003a3c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a38:	2302      	movs	r3, #2
 8003a3a:	e0cc      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a42:	2b01      	cmp	r3, #1
 8003a44:	d101      	bne.n	8003a4a <HAL_I2C_Mem_Write+0x56>
 8003a46:	2302      	movs	r3, #2
 8003a48:	e0c5      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	2201      	movs	r2, #1
 8003a4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f003 0301 	and.w	r3, r3, #1
 8003a5c:	2b01      	cmp	r3, #1
 8003a5e:	d007      	beq.n	8003a70 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	681a      	ldr	r2, [r3, #0]
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	681b      	ldr	r3, [r3, #0]
 8003a6a:	f042 0201 	orr.w	r2, r2, #1
 8003a6e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	681a      	ldr	r2, [r3, #0]
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a7e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2221      	movs	r2, #33	; 0x21
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2240      	movs	r2, #64	; 0x40
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	2200      	movs	r2, #0
 8003a94:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	6a3a      	ldr	r2, [r7, #32]
 8003a9a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8003aa0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003aa6:	b29a      	uxth	r2, r3
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	4a4d      	ldr	r2, [pc, #308]	; (8003be4 <HAL_I2C_Mem_Write+0x1f0>)
 8003ab0:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003ab2:	88f8      	ldrh	r0, [r7, #6]
 8003ab4:	893a      	ldrh	r2, [r7, #8]
 8003ab6:	8979      	ldrh	r1, [r7, #10]
 8003ab8:	697b      	ldr	r3, [r7, #20]
 8003aba:	9301      	str	r3, [sp, #4]
 8003abc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	4603      	mov	r3, r0
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f9be 	bl	8003e44 <I2C_RequestMemoryWrite>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d052      	beq.n	8003b74 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e081      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad2:	697a      	ldr	r2, [r7, #20]
 8003ad4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003ad6:	68f8      	ldr	r0, [r7, #12]
 8003ad8:	f000 fb64 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003adc:	4603      	mov	r3, r0
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d00d      	beq.n	8003afe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ae6:	2b04      	cmp	r3, #4
 8003ae8:	d107      	bne.n	8003afa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	681a      	ldr	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003af8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e06b      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b02:	781a      	ldrb	r2, [r3, #0]
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b0e:	1c5a      	adds	r2, r3, #1
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b18:	3b01      	subs	r3, #1
 8003b1a:	b29a      	uxth	r2, r3
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b24:	b29b      	uxth	r3, r3
 8003b26:	3b01      	subs	r3, #1
 8003b28:	b29a      	uxth	r2, r3
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	695b      	ldr	r3, [r3, #20]
 8003b34:	f003 0304 	and.w	r3, r3, #4
 8003b38:	2b04      	cmp	r3, #4
 8003b3a:	d11b      	bne.n	8003b74 <HAL_I2C_Mem_Write+0x180>
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b40:	2b00      	cmp	r3, #0
 8003b42:	d017      	beq.n	8003b74 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b48:	781a      	ldrb	r2, [r3, #0]
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b5e:	3b01      	subs	r3, #1
 8003b60:	b29a      	uxth	r2, r3
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b6a:	b29b      	uxth	r3, r3
 8003b6c:	3b01      	subs	r3, #1
 8003b6e:	b29a      	uxth	r2, r3
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b78:	2b00      	cmp	r3, #0
 8003b7a:	d1aa      	bne.n	8003ad2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7c:	697a      	ldr	r2, [r7, #20]
 8003b7e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003b80:	68f8      	ldr	r0, [r7, #12]
 8003b82:	f000 fb57 	bl	8004234 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b86:	4603      	mov	r3, r0
 8003b88:	2b00      	cmp	r3, #0
 8003b8a:	d00d      	beq.n	8003ba8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8c:	68fb      	ldr	r3, [r7, #12]
 8003b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b90:	2b04      	cmp	r3, #4
 8003b92:	d107      	bne.n	8003ba4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ba2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e016      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	681a      	ldr	r2, [r3, #0]
 8003bae:	68fb      	ldr	r3, [r7, #12]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2220      	movs	r2, #32
 8003bbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	e000      	b.n	8003bd6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bd4:	2302      	movs	r3, #2
  }
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3718      	adds	r7, #24
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
 8003bde:	bf00      	nop
 8003be0:	00100002 	.word	0x00100002
 8003be4:	ffff0000 	.word	0xffff0000

08003be8 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b08a      	sub	sp, #40	; 0x28
 8003bec:	af02      	add	r7, sp, #8
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	607a      	str	r2, [r7, #4]
 8003bf2:	603b      	str	r3, [r7, #0]
 8003bf4:	460b      	mov	r3, r1
 8003bf6:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003bf8:	f7fe ff18 	bl	8002a2c <HAL_GetTick>
 8003bfc:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003bfe:	2300      	movs	r3, #0
 8003c00:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c08:	b2db      	uxtb	r3, r3
 8003c0a:	2b20      	cmp	r3, #32
 8003c0c:	f040 8111 	bne.w	8003e32 <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003c10:	69fb      	ldr	r3, [r7, #28]
 8003c12:	9300      	str	r3, [sp, #0]
 8003c14:	2319      	movs	r3, #25
 8003c16:	2201      	movs	r2, #1
 8003c18:	4988      	ldr	r1, [pc, #544]	; (8003e3c <HAL_I2C_IsDeviceReady+0x254>)
 8003c1a:	68f8      	ldr	r0, [r7, #12]
 8003c1c:	f000 f9a8 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003c20:	4603      	mov	r3, r0
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d001      	beq.n	8003c2a <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c26:	2302      	movs	r3, #2
 8003c28:	e104      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c30:	2b01      	cmp	r3, #1
 8003c32:	d101      	bne.n	8003c38 <HAL_I2C_IsDeviceReady+0x50>
 8003c34:	2302      	movs	r3, #2
 8003c36:	e0fd      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f003 0301 	and.w	r3, r3, #1
 8003c4a:	2b01      	cmp	r3, #1
 8003c4c:	d007      	beq.n	8003c5e <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	681a      	ldr	r2, [r3, #0]
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	f042 0201 	orr.w	r2, r2, #1
 8003c5c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c5e:	68fb      	ldr	r3, [r7, #12]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c6c:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	2224      	movs	r2, #36	; 0x24
 8003c72:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2200      	movs	r2, #0
 8003c7a:	641a      	str	r2, [r3, #64]	; 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	4a70      	ldr	r2, [pc, #448]	; (8003e40 <HAL_I2C_IsDeviceReady+0x258>)
 8003c80:	62da      	str	r2, [r3, #44]	; 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	681a      	ldr	r2, [r3, #0]
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c90:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c92:	69fb      	ldr	r3, [r7, #28]
 8003c94:	9300      	str	r3, [sp, #0]
 8003c96:	683b      	ldr	r3, [r7, #0]
 8003c98:	2200      	movs	r2, #0
 8003c9a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c9e:	68f8      	ldr	r0, [r7, #12]
 8003ca0:	f000 f966 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003ca4:	4603      	mov	r3, r0
 8003ca6:	2b00      	cmp	r3, #0
 8003ca8:	d00d      	beq.n	8003cc6 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003cb4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003cb8:	d103      	bne.n	8003cc2 <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40
        }
        return HAL_TIMEOUT;
 8003cc2:	2303      	movs	r3, #3
 8003cc4:	e0b6      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cc6:	897b      	ldrh	r3, [r7, #10]
 8003cc8:	b2db      	uxtb	r3, r3
 8003cca:	461a      	mov	r2, r3
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003cd4:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cd6:	f7fe fea9 	bl	8002a2c <HAL_GetTick>
 8003cda:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	695b      	ldr	r3, [r3, #20]
 8003ce2:	f003 0302 	and.w	r3, r3, #2
 8003ce6:	2b02      	cmp	r3, #2
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	695b      	ldr	r3, [r3, #20]
 8003cf8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003cfc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d00:	bf0c      	ite	eq
 8003d02:	2301      	moveq	r3, #1
 8003d04:	2300      	movne	r3, #0
 8003d06:	b2db      	uxtb	r3, r3
 8003d08:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d0a:	e025      	b.n	8003d58 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003d0c:	f7fe fe8e 	bl	8002a2c <HAL_GetTick>
 8003d10:	4602      	mov	r2, r0
 8003d12:	69fb      	ldr	r3, [r7, #28]
 8003d14:	1ad3      	subs	r3, r2, r3
 8003d16:	683a      	ldr	r2, [r7, #0]
 8003d18:	429a      	cmp	r2, r3
 8003d1a:	d302      	bcc.n	8003d22 <HAL_I2C_IsDeviceReady+0x13a>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d103      	bne.n	8003d2a <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	22a0      	movs	r2, #160	; 0xa0
 8003d26:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	695b      	ldr	r3, [r3, #20]
 8003d30:	f003 0302 	and.w	r3, r3, #2
 8003d34:	2b02      	cmp	r3, #2
 8003d36:	bf0c      	ite	eq
 8003d38:	2301      	moveq	r3, #1
 8003d3a:	2300      	movne	r3, #0
 8003d3c:	b2db      	uxtb	r3, r3
 8003d3e:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	695b      	ldr	r3, [r3, #20]
 8003d46:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d4e:	bf0c      	ite	eq
 8003d50:	2301      	moveq	r3, #1
 8003d52:	2300      	movne	r3, #0
 8003d54:	b2db      	uxtb	r3, r3
 8003d56:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d5e:	b2db      	uxtb	r3, r3
 8003d60:	2ba0      	cmp	r3, #160	; 0xa0
 8003d62:	d005      	beq.n	8003d70 <HAL_I2C_IsDeviceReady+0x188>
 8003d64:	7dfb      	ldrb	r3, [r7, #23]
 8003d66:	2b00      	cmp	r3, #0
 8003d68:	d102      	bne.n	8003d70 <HAL_I2C_IsDeviceReady+0x188>
 8003d6a:	7dbb      	ldrb	r3, [r7, #22]
 8003d6c:	2b00      	cmp	r3, #0
 8003d6e:	d0cd      	beq.n	8003d0c <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	2220      	movs	r2, #32
 8003d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	695b      	ldr	r3, [r3, #20]
 8003d7e:	f003 0302 	and.w	r3, r3, #2
 8003d82:	2b02      	cmp	r3, #2
 8003d84:	d129      	bne.n	8003dda <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	681a      	ldr	r2, [r3, #0]
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	681b      	ldr	r3, [r3, #0]
 8003d90:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d94:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d96:	2300      	movs	r3, #0
 8003d98:	613b      	str	r3, [r7, #16]
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	695b      	ldr	r3, [r3, #20]
 8003da0:	613b      	str	r3, [r7, #16]
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	699b      	ldr	r3, [r3, #24]
 8003da8:	613b      	str	r3, [r7, #16]
 8003daa:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003dac:	69fb      	ldr	r3, [r7, #28]
 8003dae:	9300      	str	r3, [sp, #0]
 8003db0:	2319      	movs	r3, #25
 8003db2:	2201      	movs	r2, #1
 8003db4:	4921      	ldr	r1, [pc, #132]	; (8003e3c <HAL_I2C_IsDeviceReady+0x254>)
 8003db6:	68f8      	ldr	r0, [r7, #12]
 8003db8:	f000 f8da 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003dbc:	4603      	mov	r3, r0
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d001      	beq.n	8003dc6 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003dc2:	2301      	movs	r3, #1
 8003dc4:	e036      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	e02c      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de8:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003df2:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003df4:	69fb      	ldr	r3, [r7, #28]
 8003df6:	9300      	str	r3, [sp, #0]
 8003df8:	2319      	movs	r3, #25
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	490f      	ldr	r1, [pc, #60]	; (8003e3c <HAL_I2C_IsDeviceReady+0x254>)
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f000 f8b6 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003e04:	4603      	mov	r3, r0
 8003e06:	2b00      	cmp	r3, #0
 8003e08:	d001      	beq.n	8003e0e <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003e0a:	2301      	movs	r3, #1
 8003e0c:	e012      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003e0e:	69bb      	ldr	r3, [r7, #24]
 8003e10:	3301      	adds	r3, #1
 8003e12:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e14:	69ba      	ldr	r2, [r7, #24]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	429a      	cmp	r2, r3
 8003e1a:	f4ff af32 	bcc.w	8003c82 <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	2220      	movs	r2, #32
 8003e22:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e26:	68fb      	ldr	r3, [r7, #12]
 8003e28:	2200      	movs	r2, #0
 8003e2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003e2e:	2301      	movs	r3, #1
 8003e30:	e000      	b.n	8003e34 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e32:	2302      	movs	r3, #2
  }
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	3720      	adds	r7, #32
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	bd80      	pop	{r7, pc}
 8003e3c:	00100002 	.word	0x00100002
 8003e40:	ffff0000 	.word	0xffff0000

08003e44 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e44:	b580      	push	{r7, lr}
 8003e46:	b088      	sub	sp, #32
 8003e48:	af02      	add	r7, sp, #8
 8003e4a:	60f8      	str	r0, [r7, #12]
 8003e4c:	4608      	mov	r0, r1
 8003e4e:	4611      	mov	r1, r2
 8003e50:	461a      	mov	r2, r3
 8003e52:	4603      	mov	r3, r0
 8003e54:	817b      	strh	r3, [r7, #10]
 8003e56:	460b      	mov	r3, r1
 8003e58:	813b      	strh	r3, [r7, #8]
 8003e5a:	4613      	mov	r3, r2
 8003e5c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	681a      	ldr	r2, [r3, #0]
 8003e64:	68fb      	ldr	r3, [r7, #12]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e6c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e70:	9300      	str	r3, [sp, #0]
 8003e72:	6a3b      	ldr	r3, [r7, #32]
 8003e74:	2200      	movs	r2, #0
 8003e76:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003e7a:	68f8      	ldr	r0, [r7, #12]
 8003e7c:	f000 f878 	bl	8003f70 <I2C_WaitOnFlagUntilTimeout>
 8003e80:	4603      	mov	r3, r0
 8003e82:	2b00      	cmp	r3, #0
 8003e84:	d00d      	beq.n	8003ea2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e90:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003e94:	d103      	bne.n	8003e9e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003e9c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003e9e:	2303      	movs	r3, #3
 8003ea0:	e05f      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003ea2:	897b      	ldrh	r3, [r7, #10]
 8003ea4:	b2db      	uxtb	r3, r3
 8003ea6:	461a      	mov	r2, r3
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003eb0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb4:	6a3a      	ldr	r2, [r7, #32]
 8003eb6:	492d      	ldr	r1, [pc, #180]	; (8003f6c <I2C_RequestMemoryWrite+0x128>)
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f8d3 	bl	8004064 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d001      	beq.n	8003ec8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003ec4:	2301      	movs	r3, #1
 8003ec6:	e04c      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ec8:	2300      	movs	r3, #0
 8003eca:	617b      	str	r3, [r7, #20]
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	695b      	ldr	r3, [r3, #20]
 8003ed2:	617b      	str	r3, [r7, #20]
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	699b      	ldr	r3, [r3, #24]
 8003eda:	617b      	str	r3, [r7, #20]
 8003edc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003ede:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003ee0:	6a39      	ldr	r1, [r7, #32]
 8003ee2:	68f8      	ldr	r0, [r7, #12]
 8003ee4:	f000 f95e 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ee8:	4603      	mov	r3, r0
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d00d      	beq.n	8003f0a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef2:	2b04      	cmp	r3, #4
 8003ef4:	d107      	bne.n	8003f06 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	681a      	ldr	r2, [r3, #0]
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f04:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003f06:	2301      	movs	r3, #1
 8003f08:	e02b      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003f0a:	88fb      	ldrh	r3, [r7, #6]
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d105      	bne.n	8003f1c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f10:	893b      	ldrh	r3, [r7, #8]
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	611a      	str	r2, [r3, #16]
 8003f1a:	e021      	b.n	8003f60 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f1c:	893b      	ldrh	r3, [r7, #8]
 8003f1e:	0a1b      	lsrs	r3, r3, #8
 8003f20:	b29b      	uxth	r3, r3
 8003f22:	b2da      	uxtb	r2, r3
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003f2c:	6a39      	ldr	r1, [r7, #32]
 8003f2e:	68f8      	ldr	r0, [r7, #12]
 8003f30:	f000 f938 	bl	80041a4 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f34:	4603      	mov	r3, r0
 8003f36:	2b00      	cmp	r3, #0
 8003f38:	d00d      	beq.n	8003f56 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3e:	2b04      	cmp	r3, #4
 8003f40:	d107      	bne.n	8003f52 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	681a      	ldr	r2, [r3, #0]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003f50:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f52:	2301      	movs	r3, #1
 8003f54:	e005      	b.n	8003f62 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f56:	893b      	ldrh	r3, [r7, #8]
 8003f58:	b2da      	uxtb	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f60:	2300      	movs	r3, #0
}
 8003f62:	4618      	mov	r0, r3
 8003f64:	3718      	adds	r7, #24
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}
 8003f6a:	bf00      	nop
 8003f6c:	00010002 	.word	0x00010002

08003f70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	60f8      	str	r0, [r7, #12]
 8003f78:	60b9      	str	r1, [r7, #8]
 8003f7a:	603b      	str	r3, [r7, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f80:	e048      	b.n	8004014 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f82:	683b      	ldr	r3, [r7, #0]
 8003f84:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f88:	d044      	beq.n	8004014 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f8a:	f7fe fd4f 	bl	8002a2c <HAL_GetTick>
 8003f8e:	4602      	mov	r2, r0
 8003f90:	69bb      	ldr	r3, [r7, #24]
 8003f92:	1ad3      	subs	r3, r2, r3
 8003f94:	683a      	ldr	r2, [r7, #0]
 8003f96:	429a      	cmp	r2, r3
 8003f98:	d302      	bcc.n	8003fa0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f9a:	683b      	ldr	r3, [r7, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d139      	bne.n	8004014 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003fa0:	68bb      	ldr	r3, [r7, #8]
 8003fa2:	0c1b      	lsrs	r3, r3, #16
 8003fa4:	b2db      	uxtb	r3, r3
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d10d      	bne.n	8003fc6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	695b      	ldr	r3, [r3, #20]
 8003fb0:	43da      	mvns	r2, r3
 8003fb2:	68bb      	ldr	r3, [r7, #8]
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	bf0c      	ite	eq
 8003fbc:	2301      	moveq	r3, #1
 8003fbe:	2300      	movne	r3, #0
 8003fc0:	b2db      	uxtb	r3, r3
 8003fc2:	461a      	mov	r2, r3
 8003fc4:	e00c      	b.n	8003fe0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fc6:	68fb      	ldr	r3, [r7, #12]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	699b      	ldr	r3, [r3, #24]
 8003fcc:	43da      	mvns	r2, r3
 8003fce:	68bb      	ldr	r3, [r7, #8]
 8003fd0:	4013      	ands	r3, r2
 8003fd2:	b29b      	uxth	r3, r3
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	bf0c      	ite	eq
 8003fd8:	2301      	moveq	r3, #1
 8003fda:	2300      	movne	r3, #0
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	461a      	mov	r2, r3
 8003fe0:	79fb      	ldrb	r3, [r7, #7]
 8003fe2:	429a      	cmp	r2, r3
 8003fe4:	d116      	bne.n	8004014 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2220      	movs	r2, #32
 8003ff0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004000:	f043 0220 	orr.w	r2, r3, #32
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004010:	2301      	movs	r3, #1
 8004012:	e023      	b.n	800405c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004014:	68bb      	ldr	r3, [r7, #8]
 8004016:	0c1b      	lsrs	r3, r3, #16
 8004018:	b2db      	uxtb	r3, r3
 800401a:	2b01      	cmp	r3, #1
 800401c:	d10d      	bne.n	800403a <I2C_WaitOnFlagUntilTimeout+0xca>
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	695b      	ldr	r3, [r3, #20]
 8004024:	43da      	mvns	r2, r3
 8004026:	68bb      	ldr	r3, [r7, #8]
 8004028:	4013      	ands	r3, r2
 800402a:	b29b      	uxth	r3, r3
 800402c:	2b00      	cmp	r3, #0
 800402e:	bf0c      	ite	eq
 8004030:	2301      	moveq	r3, #1
 8004032:	2300      	movne	r3, #0
 8004034:	b2db      	uxtb	r3, r3
 8004036:	461a      	mov	r2, r3
 8004038:	e00c      	b.n	8004054 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800403a:	68fb      	ldr	r3, [r7, #12]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	699b      	ldr	r3, [r3, #24]
 8004040:	43da      	mvns	r2, r3
 8004042:	68bb      	ldr	r3, [r7, #8]
 8004044:	4013      	ands	r3, r2
 8004046:	b29b      	uxth	r3, r3
 8004048:	2b00      	cmp	r3, #0
 800404a:	bf0c      	ite	eq
 800404c:	2301      	moveq	r3, #1
 800404e:	2300      	movne	r3, #0
 8004050:	b2db      	uxtb	r3, r3
 8004052:	461a      	mov	r2, r3
 8004054:	79fb      	ldrb	r3, [r7, #7]
 8004056:	429a      	cmp	r2, r3
 8004058:	d093      	beq.n	8003f82 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800405a:	2300      	movs	r3, #0
}
 800405c:	4618      	mov	r0, r3
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	60f8      	str	r0, [r7, #12]
 800406c:	60b9      	str	r1, [r7, #8]
 800406e:	607a      	str	r2, [r7, #4]
 8004070:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004072:	e071      	b.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	695b      	ldr	r3, [r3, #20]
 800407a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800407e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004082:	d123      	bne.n	80040cc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	681a      	ldr	r2, [r3, #0]
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004092:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800409c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	2200      	movs	r2, #0
 80040a2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80040a4:	68fb      	ldr	r3, [r7, #12]
 80040a6:	2220      	movs	r2, #32
 80040a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040b8:	f043 0204 	orr.w	r2, r3, #4
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2200      	movs	r2, #0
 80040c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80040c8:	2301      	movs	r3, #1
 80040ca:	e067      	b.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040d2:	d041      	beq.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040d4:	f7fe fcaa 	bl	8002a2c <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	683b      	ldr	r3, [r7, #0]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	687a      	ldr	r2, [r7, #4]
 80040e0:	429a      	cmp	r2, r3
 80040e2:	d302      	bcc.n	80040ea <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d136      	bne.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040ea:	68bb      	ldr	r3, [r7, #8]
 80040ec:	0c1b      	lsrs	r3, r3, #16
 80040ee:	b2db      	uxtb	r3, r3
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d10c      	bne.n	800410e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	695b      	ldr	r3, [r3, #20]
 80040fa:	43da      	mvns	r2, r3
 80040fc:	68bb      	ldr	r3, [r7, #8]
 80040fe:	4013      	ands	r3, r2
 8004100:	b29b      	uxth	r3, r3
 8004102:	2b00      	cmp	r3, #0
 8004104:	bf14      	ite	ne
 8004106:	2301      	movne	r3, #1
 8004108:	2300      	moveq	r3, #0
 800410a:	b2db      	uxtb	r3, r3
 800410c:	e00b      	b.n	8004126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	699b      	ldr	r3, [r3, #24]
 8004114:	43da      	mvns	r2, r3
 8004116:	68bb      	ldr	r3, [r7, #8]
 8004118:	4013      	ands	r3, r2
 800411a:	b29b      	uxth	r3, r3
 800411c:	2b00      	cmp	r3, #0
 800411e:	bf14      	ite	ne
 8004120:	2301      	movne	r3, #1
 8004122:	2300      	moveq	r3, #0
 8004124:	b2db      	uxtb	r3, r3
 8004126:	2b00      	cmp	r3, #0
 8004128:	d016      	beq.n	8004158 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	2200      	movs	r2, #0
 800412e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	2220      	movs	r2, #32
 8004134:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004144:	f043 0220 	orr.w	r2, r3, #32
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	2200      	movs	r2, #0
 8004150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e021      	b.n	800419c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004158:	68bb      	ldr	r3, [r7, #8]
 800415a:	0c1b      	lsrs	r3, r3, #16
 800415c:	b2db      	uxtb	r3, r3
 800415e:	2b01      	cmp	r3, #1
 8004160:	d10c      	bne.n	800417c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	695b      	ldr	r3, [r3, #20]
 8004168:	43da      	mvns	r2, r3
 800416a:	68bb      	ldr	r3, [r7, #8]
 800416c:	4013      	ands	r3, r2
 800416e:	b29b      	uxth	r3, r3
 8004170:	2b00      	cmp	r3, #0
 8004172:	bf14      	ite	ne
 8004174:	2301      	movne	r3, #1
 8004176:	2300      	moveq	r3, #0
 8004178:	b2db      	uxtb	r3, r3
 800417a:	e00b      	b.n	8004194 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699b      	ldr	r3, [r3, #24]
 8004182:	43da      	mvns	r2, r3
 8004184:	68bb      	ldr	r3, [r7, #8]
 8004186:	4013      	ands	r3, r2
 8004188:	b29b      	uxth	r3, r3
 800418a:	2b00      	cmp	r3, #0
 800418c:	bf14      	ite	ne
 800418e:	2301      	movne	r3, #1
 8004190:	2300      	moveq	r3, #0
 8004192:	b2db      	uxtb	r3, r3
 8004194:	2b00      	cmp	r3, #0
 8004196:	f47f af6d 	bne.w	8004074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800419a:	2300      	movs	r3, #0
}
 800419c:	4618      	mov	r0, r3
 800419e:	3710      	adds	r7, #16
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bd80      	pop	{r7, pc}

080041a4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80041a4:	b580      	push	{r7, lr}
 80041a6:	b084      	sub	sp, #16
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	60f8      	str	r0, [r7, #12]
 80041ac:	60b9      	str	r1, [r7, #8]
 80041ae:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80041b0:	e034      	b.n	800421c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80041b2:	68f8      	ldr	r0, [r7, #12]
 80041b4:	f000 f886 	bl	80042c4 <I2C_IsAcknowledgeFailed>
 80041b8:	4603      	mov	r3, r0
 80041ba:	2b00      	cmp	r3, #0
 80041bc:	d001      	beq.n	80041c2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041be:	2301      	movs	r3, #1
 80041c0:	e034      	b.n	800422c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041c2:	68bb      	ldr	r3, [r7, #8]
 80041c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041c8:	d028      	beq.n	800421c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041ca:	f7fe fc2f 	bl	8002a2c <HAL_GetTick>
 80041ce:	4602      	mov	r2, r0
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	1ad3      	subs	r3, r2, r3
 80041d4:	68ba      	ldr	r2, [r7, #8]
 80041d6:	429a      	cmp	r2, r3
 80041d8:	d302      	bcc.n	80041e0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041da:	68bb      	ldr	r3, [r7, #8]
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d11d      	bne.n	800421c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80041ea:	2b80      	cmp	r3, #128	; 0x80
 80041ec:	d016      	beq.n	800421c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	2200      	movs	r2, #0
 80041f2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	2220      	movs	r2, #32
 80041f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004208:	f043 0220 	orr.w	r2, r3, #32
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	2200      	movs	r2, #0
 8004214:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8004218:	2301      	movs	r3, #1
 800421a:	e007      	b.n	800422c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	695b      	ldr	r3, [r3, #20]
 8004222:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004226:	2b80      	cmp	r3, #128	; 0x80
 8004228:	d1c3      	bne.n	80041b2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800422a:	2300      	movs	r3, #0
}
 800422c:	4618      	mov	r0, r3
 800422e:	3710      	adds	r7, #16
 8004230:	46bd      	mov	sp, r7
 8004232:	bd80      	pop	{r7, pc}

08004234 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004234:	b580      	push	{r7, lr}
 8004236:	b084      	sub	sp, #16
 8004238:	af00      	add	r7, sp, #0
 800423a:	60f8      	str	r0, [r7, #12]
 800423c:	60b9      	str	r1, [r7, #8]
 800423e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004240:	e034      	b.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 f83e 	bl	80042c4 <I2C_IsAcknowledgeFailed>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d001      	beq.n	8004252 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800424e:	2301      	movs	r3, #1
 8004250:	e034      	b.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004252:	68bb      	ldr	r3, [r7, #8]
 8004254:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004258:	d028      	beq.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800425a:	f7fe fbe7 	bl	8002a2c <HAL_GetTick>
 800425e:	4602      	mov	r2, r0
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	1ad3      	subs	r3, r2, r3
 8004264:	68ba      	ldr	r2, [r7, #8]
 8004266:	429a      	cmp	r2, r3
 8004268:	d302      	bcc.n	8004270 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800426a:	68bb      	ldr	r3, [r7, #8]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d11d      	bne.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	695b      	ldr	r3, [r3, #20]
 8004276:	f003 0304 	and.w	r3, r3, #4
 800427a:	2b04      	cmp	r3, #4
 800427c:	d016      	beq.n	80042ac <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800427e:	68fb      	ldr	r3, [r7, #12]
 8004280:	2200      	movs	r2, #0
 8004282:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	2220      	movs	r2, #32
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004298:	f043 0220 	orr.w	r2, r3, #32
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2200      	movs	r2, #0
 80042a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	e007      	b.n	80042bc <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80042ac:	68fb      	ldr	r3, [r7, #12]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	695b      	ldr	r3, [r3, #20]
 80042b2:	f003 0304 	and.w	r3, r3, #4
 80042b6:	2b04      	cmp	r3, #4
 80042b8:	d1c3      	bne.n	8004242 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042ba:	2300      	movs	r3, #0
}
 80042bc:	4618      	mov	r0, r3
 80042be:	3710      	adds	r7, #16
 80042c0:	46bd      	mov	sp, r7
 80042c2:	bd80      	pop	{r7, pc}

080042c4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042c4:	b480      	push	{r7}
 80042c6:	b083      	sub	sp, #12
 80042c8:	af00      	add	r7, sp, #0
 80042ca:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80042d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80042da:	d11b      	bne.n	8004314 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80042e4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	2200      	movs	r2, #0
 80042ea:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2220      	movs	r2, #32
 80042f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004300:	f043 0204 	orr.w	r2, r3, #4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	2200      	movs	r2, #0
 800430c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e000      	b.n	8004316 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004314:	2300      	movs	r3, #0
}
 8004316:	4618      	mov	r0, r3
 8004318:	370c      	adds	r7, #12
 800431a:	46bd      	mov	sp, r7
 800431c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004320:	4770      	bx	lr
	...

08004324 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2b00      	cmp	r3, #0
 8004330:	d101      	bne.n	8004336 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004332:	2301      	movs	r3, #1
 8004334:	e267      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	f003 0301 	and.w	r3, r3, #1
 800433e:	2b00      	cmp	r3, #0
 8004340:	d075      	beq.n	800442e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004342:	4b88      	ldr	r3, [pc, #544]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 8004344:	689b      	ldr	r3, [r3, #8]
 8004346:	f003 030c 	and.w	r3, r3, #12
 800434a:	2b04      	cmp	r3, #4
 800434c:	d00c      	beq.n	8004368 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800434e:	4b85      	ldr	r3, [pc, #532]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 8004350:	689b      	ldr	r3, [r3, #8]
 8004352:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004356:	2b08      	cmp	r3, #8
 8004358:	d112      	bne.n	8004380 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800435a:	4b82      	ldr	r3, [pc, #520]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 800435c:	685b      	ldr	r3, [r3, #4]
 800435e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004362:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004366:	d10b      	bne.n	8004380 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004368:	4b7e      	ldr	r3, [pc, #504]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004370:	2b00      	cmp	r3, #0
 8004372:	d05b      	beq.n	800442c <HAL_RCC_OscConfig+0x108>
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	685b      	ldr	r3, [r3, #4]
 8004378:	2b00      	cmp	r3, #0
 800437a:	d157      	bne.n	800442c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800437c:	2301      	movs	r3, #1
 800437e:	e242      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	685b      	ldr	r3, [r3, #4]
 8004384:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004388:	d106      	bne.n	8004398 <HAL_RCC_OscConfig+0x74>
 800438a:	4b76      	ldr	r3, [pc, #472]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	4a75      	ldr	r2, [pc, #468]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 8004390:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004394:	6013      	str	r3, [r2, #0]
 8004396:	e01d      	b.n	80043d4 <HAL_RCC_OscConfig+0xb0>
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80043a0:	d10c      	bne.n	80043bc <HAL_RCC_OscConfig+0x98>
 80043a2:	4b70      	ldr	r3, [pc, #448]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80043a4:	681b      	ldr	r3, [r3, #0]
 80043a6:	4a6f      	ldr	r2, [pc, #444]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80043a8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80043ac:	6013      	str	r3, [r2, #0]
 80043ae:	4b6d      	ldr	r3, [pc, #436]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	4a6c      	ldr	r2, [pc, #432]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80043b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043b8:	6013      	str	r3, [r2, #0]
 80043ba:	e00b      	b.n	80043d4 <HAL_RCC_OscConfig+0xb0>
 80043bc:	4b69      	ldr	r3, [pc, #420]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	4a68      	ldr	r2, [pc, #416]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80043c2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80043c6:	6013      	str	r3, [r2, #0]
 80043c8:	4b66      	ldr	r3, [pc, #408]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	4a65      	ldr	r2, [pc, #404]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80043ce:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80043d2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	2b00      	cmp	r3, #0
 80043da:	d013      	beq.n	8004404 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043dc:	f7fe fb26 	bl	8002a2c <HAL_GetTick>
 80043e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	e008      	b.n	80043f6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043e4:	f7fe fb22 	bl	8002a2c <HAL_GetTick>
 80043e8:	4602      	mov	r2, r0
 80043ea:	693b      	ldr	r3, [r7, #16]
 80043ec:	1ad3      	subs	r3, r2, r3
 80043ee:	2b64      	cmp	r3, #100	; 0x64
 80043f0:	d901      	bls.n	80043f6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043f2:	2303      	movs	r3, #3
 80043f4:	e207      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043f6:	4b5b      	ldr	r3, [pc, #364]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d0f0      	beq.n	80043e4 <HAL_RCC_OscConfig+0xc0>
 8004402:	e014      	b.n	800442e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004404:	f7fe fb12 	bl	8002a2c <HAL_GetTick>
 8004408:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440a:	e008      	b.n	800441e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800440c:	f7fe fb0e 	bl	8002a2c <HAL_GetTick>
 8004410:	4602      	mov	r2, r0
 8004412:	693b      	ldr	r3, [r7, #16]
 8004414:	1ad3      	subs	r3, r2, r3
 8004416:	2b64      	cmp	r3, #100	; 0x64
 8004418:	d901      	bls.n	800441e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800441a:	2303      	movs	r3, #3
 800441c:	e1f3      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800441e:	4b51      	ldr	r3, [pc, #324]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004426:	2b00      	cmp	r3, #0
 8004428:	d1f0      	bne.n	800440c <HAL_RCC_OscConfig+0xe8>
 800442a:	e000      	b.n	800442e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800442c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	f003 0302 	and.w	r3, r3, #2
 8004436:	2b00      	cmp	r3, #0
 8004438:	d063      	beq.n	8004502 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800443a:	4b4a      	ldr	r3, [pc, #296]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 800443c:	689b      	ldr	r3, [r3, #8]
 800443e:	f003 030c 	and.w	r3, r3, #12
 8004442:	2b00      	cmp	r3, #0
 8004444:	d00b      	beq.n	800445e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004446:	4b47      	ldr	r3, [pc, #284]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 8004448:	689b      	ldr	r3, [r3, #8]
 800444a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800444e:	2b08      	cmp	r3, #8
 8004450:	d11c      	bne.n	800448c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004452:	4b44      	ldr	r3, [pc, #272]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 8004454:	685b      	ldr	r3, [r3, #4]
 8004456:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800445a:	2b00      	cmp	r3, #0
 800445c:	d116      	bne.n	800448c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800445e:	4b41      	ldr	r3, [pc, #260]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f003 0302 	and.w	r3, r3, #2
 8004466:	2b00      	cmp	r3, #0
 8004468:	d005      	beq.n	8004476 <HAL_RCC_OscConfig+0x152>
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68db      	ldr	r3, [r3, #12]
 800446e:	2b01      	cmp	r3, #1
 8004470:	d001      	beq.n	8004476 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004472:	2301      	movs	r3, #1
 8004474:	e1c7      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004476:	4b3b      	ldr	r3, [pc, #236]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	691b      	ldr	r3, [r3, #16]
 8004482:	00db      	lsls	r3, r3, #3
 8004484:	4937      	ldr	r1, [pc, #220]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 8004486:	4313      	orrs	r3, r2
 8004488:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800448a:	e03a      	b.n	8004502 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68db      	ldr	r3, [r3, #12]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d020      	beq.n	80044d6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004494:	4b34      	ldr	r3, [pc, #208]	; (8004568 <HAL_RCC_OscConfig+0x244>)
 8004496:	2201      	movs	r2, #1
 8004498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800449a:	f7fe fac7 	bl	8002a2c <HAL_GetTick>
 800449e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a0:	e008      	b.n	80044b4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044a2:	f7fe fac3 	bl	8002a2c <HAL_GetTick>
 80044a6:	4602      	mov	r2, r0
 80044a8:	693b      	ldr	r3, [r7, #16]
 80044aa:	1ad3      	subs	r3, r2, r3
 80044ac:	2b02      	cmp	r3, #2
 80044ae:	d901      	bls.n	80044b4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80044b0:	2303      	movs	r3, #3
 80044b2:	e1a8      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044b4:	4b2b      	ldr	r3, [pc, #172]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	f003 0302 	and.w	r3, r3, #2
 80044bc:	2b00      	cmp	r3, #0
 80044be:	d0f0      	beq.n	80044a2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044c0:	4b28      	ldr	r3, [pc, #160]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	691b      	ldr	r3, [r3, #16]
 80044cc:	00db      	lsls	r3, r3, #3
 80044ce:	4925      	ldr	r1, [pc, #148]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80044d0:	4313      	orrs	r3, r2
 80044d2:	600b      	str	r3, [r1, #0]
 80044d4:	e015      	b.n	8004502 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044d6:	4b24      	ldr	r3, [pc, #144]	; (8004568 <HAL_RCC_OscConfig+0x244>)
 80044d8:	2200      	movs	r2, #0
 80044da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044dc:	f7fe faa6 	bl	8002a2c <HAL_GetTick>
 80044e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	e008      	b.n	80044f6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044e4:	f7fe faa2 	bl	8002a2c <HAL_GetTick>
 80044e8:	4602      	mov	r2, r0
 80044ea:	693b      	ldr	r3, [r7, #16]
 80044ec:	1ad3      	subs	r3, r2, r3
 80044ee:	2b02      	cmp	r3, #2
 80044f0:	d901      	bls.n	80044f6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044f2:	2303      	movs	r3, #3
 80044f4:	e187      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044f6:	4b1b      	ldr	r3, [pc, #108]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f003 0302 	and.w	r3, r3, #2
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d1f0      	bne.n	80044e4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	f003 0308 	and.w	r3, r3, #8
 800450a:	2b00      	cmp	r3, #0
 800450c:	d036      	beq.n	800457c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	695b      	ldr	r3, [r3, #20]
 8004512:	2b00      	cmp	r3, #0
 8004514:	d016      	beq.n	8004544 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004516:	4b15      	ldr	r3, [pc, #84]	; (800456c <HAL_RCC_OscConfig+0x248>)
 8004518:	2201      	movs	r2, #1
 800451a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800451c:	f7fe fa86 	bl	8002a2c <HAL_GetTick>
 8004520:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004522:	e008      	b.n	8004536 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004524:	f7fe fa82 	bl	8002a2c <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	693b      	ldr	r3, [r7, #16]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d901      	bls.n	8004536 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	e167      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004536:	4b0b      	ldr	r3, [pc, #44]	; (8004564 <HAL_RCC_OscConfig+0x240>)
 8004538:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800453a:	f003 0302 	and.w	r3, r3, #2
 800453e:	2b00      	cmp	r3, #0
 8004540:	d0f0      	beq.n	8004524 <HAL_RCC_OscConfig+0x200>
 8004542:	e01b      	b.n	800457c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004544:	4b09      	ldr	r3, [pc, #36]	; (800456c <HAL_RCC_OscConfig+0x248>)
 8004546:	2200      	movs	r2, #0
 8004548:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800454a:	f7fe fa6f 	bl	8002a2c <HAL_GetTick>
 800454e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004550:	e00e      	b.n	8004570 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004552:	f7fe fa6b 	bl	8002a2c <HAL_GetTick>
 8004556:	4602      	mov	r2, r0
 8004558:	693b      	ldr	r3, [r7, #16]
 800455a:	1ad3      	subs	r3, r2, r3
 800455c:	2b02      	cmp	r3, #2
 800455e:	d907      	bls.n	8004570 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004560:	2303      	movs	r3, #3
 8004562:	e150      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
 8004564:	40023800 	.word	0x40023800
 8004568:	42470000 	.word	0x42470000
 800456c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004570:	4b88      	ldr	r3, [pc, #544]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004572:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004574:	f003 0302 	and.w	r3, r3, #2
 8004578:	2b00      	cmp	r3, #0
 800457a:	d1ea      	bne.n	8004552 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	f003 0304 	and.w	r3, r3, #4
 8004584:	2b00      	cmp	r3, #0
 8004586:	f000 8097 	beq.w	80046b8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800458a:	2300      	movs	r3, #0
 800458c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800458e:	4b81      	ldr	r3, [pc, #516]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004592:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004596:	2b00      	cmp	r3, #0
 8004598:	d10f      	bne.n	80045ba <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800459a:	2300      	movs	r3, #0
 800459c:	60bb      	str	r3, [r7, #8]
 800459e:	4b7d      	ldr	r3, [pc, #500]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 80045a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a2:	4a7c      	ldr	r2, [pc, #496]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 80045a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80045a8:	6413      	str	r3, [r2, #64]	; 0x40
 80045aa:	4b7a      	ldr	r3, [pc, #488]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 80045ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80045b2:	60bb      	str	r3, [r7, #8]
 80045b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045b6:	2301      	movs	r3, #1
 80045b8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ba:	4b77      	ldr	r3, [pc, #476]	; (8004798 <HAL_RCC_OscConfig+0x474>)
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045c2:	2b00      	cmp	r3, #0
 80045c4:	d118      	bne.n	80045f8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045c6:	4b74      	ldr	r3, [pc, #464]	; (8004798 <HAL_RCC_OscConfig+0x474>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4a73      	ldr	r2, [pc, #460]	; (8004798 <HAL_RCC_OscConfig+0x474>)
 80045cc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80045d0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045d2:	f7fe fa2b 	bl	8002a2c <HAL_GetTick>
 80045d6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	e008      	b.n	80045ec <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045da:	f7fe fa27 	bl	8002a2c <HAL_GetTick>
 80045de:	4602      	mov	r2, r0
 80045e0:	693b      	ldr	r3, [r7, #16]
 80045e2:	1ad3      	subs	r3, r2, r3
 80045e4:	2b02      	cmp	r3, #2
 80045e6:	d901      	bls.n	80045ec <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045e8:	2303      	movs	r3, #3
 80045ea:	e10c      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045ec:	4b6a      	ldr	r3, [pc, #424]	; (8004798 <HAL_RCC_OscConfig+0x474>)
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d0f0      	beq.n	80045da <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d106      	bne.n	800460e <HAL_RCC_OscConfig+0x2ea>
 8004600:	4b64      	ldr	r3, [pc, #400]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004604:	4a63      	ldr	r2, [pc, #396]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004606:	f043 0301 	orr.w	r3, r3, #1
 800460a:	6713      	str	r3, [r2, #112]	; 0x70
 800460c:	e01c      	b.n	8004648 <HAL_RCC_OscConfig+0x324>
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	689b      	ldr	r3, [r3, #8]
 8004612:	2b05      	cmp	r3, #5
 8004614:	d10c      	bne.n	8004630 <HAL_RCC_OscConfig+0x30c>
 8004616:	4b5f      	ldr	r3, [pc, #380]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004618:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800461a:	4a5e      	ldr	r2, [pc, #376]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 800461c:	f043 0304 	orr.w	r3, r3, #4
 8004620:	6713      	str	r3, [r2, #112]	; 0x70
 8004622:	4b5c      	ldr	r3, [pc, #368]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004624:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004626:	4a5b      	ldr	r2, [pc, #364]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004628:	f043 0301 	orr.w	r3, r3, #1
 800462c:	6713      	str	r3, [r2, #112]	; 0x70
 800462e:	e00b      	b.n	8004648 <HAL_RCC_OscConfig+0x324>
 8004630:	4b58      	ldr	r3, [pc, #352]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004632:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004634:	4a57      	ldr	r2, [pc, #348]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004636:	f023 0301 	bic.w	r3, r3, #1
 800463a:	6713      	str	r3, [r2, #112]	; 0x70
 800463c:	4b55      	ldr	r3, [pc, #340]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 800463e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004640:	4a54      	ldr	r2, [pc, #336]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004642:	f023 0304 	bic.w	r3, r3, #4
 8004646:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	2b00      	cmp	r3, #0
 800464e:	d015      	beq.n	800467c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004650:	f7fe f9ec 	bl	8002a2c <HAL_GetTick>
 8004654:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004656:	e00a      	b.n	800466e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004658:	f7fe f9e8 	bl	8002a2c <HAL_GetTick>
 800465c:	4602      	mov	r2, r0
 800465e:	693b      	ldr	r3, [r7, #16]
 8004660:	1ad3      	subs	r3, r2, r3
 8004662:	f241 3288 	movw	r2, #5000	; 0x1388
 8004666:	4293      	cmp	r3, r2
 8004668:	d901      	bls.n	800466e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800466a:	2303      	movs	r3, #3
 800466c:	e0cb      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800466e:	4b49      	ldr	r3, [pc, #292]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004672:	f003 0302 	and.w	r3, r3, #2
 8004676:	2b00      	cmp	r3, #0
 8004678:	d0ee      	beq.n	8004658 <HAL_RCC_OscConfig+0x334>
 800467a:	e014      	b.n	80046a6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800467c:	f7fe f9d6 	bl	8002a2c <HAL_GetTick>
 8004680:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004682:	e00a      	b.n	800469a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004684:	f7fe f9d2 	bl	8002a2c <HAL_GetTick>
 8004688:	4602      	mov	r2, r0
 800468a:	693b      	ldr	r3, [r7, #16]
 800468c:	1ad3      	subs	r3, r2, r3
 800468e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004692:	4293      	cmp	r3, r2
 8004694:	d901      	bls.n	800469a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004696:	2303      	movs	r3, #3
 8004698:	e0b5      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800469a:	4b3e      	ldr	r3, [pc, #248]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 800469c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800469e:	f003 0302 	and.w	r3, r3, #2
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1ee      	bne.n	8004684 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80046a6:	7dfb      	ldrb	r3, [r7, #23]
 80046a8:	2b01      	cmp	r3, #1
 80046aa:	d105      	bne.n	80046b8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80046ac:	4b39      	ldr	r3, [pc, #228]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 80046ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046b0:	4a38      	ldr	r2, [pc, #224]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 80046b2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80046b6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	699b      	ldr	r3, [r3, #24]
 80046bc:	2b00      	cmp	r3, #0
 80046be:	f000 80a1 	beq.w	8004804 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046c2:	4b34      	ldr	r3, [pc, #208]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 80046c4:	689b      	ldr	r3, [r3, #8]
 80046c6:	f003 030c 	and.w	r3, r3, #12
 80046ca:	2b08      	cmp	r3, #8
 80046cc:	d05c      	beq.n	8004788 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	699b      	ldr	r3, [r3, #24]
 80046d2:	2b02      	cmp	r3, #2
 80046d4:	d141      	bne.n	800475a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046d6:	4b31      	ldr	r3, [pc, #196]	; (800479c <HAL_RCC_OscConfig+0x478>)
 80046d8:	2200      	movs	r2, #0
 80046da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046dc:	f7fe f9a6 	bl	8002a2c <HAL_GetTick>
 80046e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e2:	e008      	b.n	80046f6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046e4:	f7fe f9a2 	bl	8002a2c <HAL_GetTick>
 80046e8:	4602      	mov	r2, r0
 80046ea:	693b      	ldr	r3, [r7, #16]
 80046ec:	1ad3      	subs	r3, r2, r3
 80046ee:	2b02      	cmp	r3, #2
 80046f0:	d901      	bls.n	80046f6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046f2:	2303      	movs	r3, #3
 80046f4:	e087      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046f6:	4b27      	ldr	r3, [pc, #156]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d1f0      	bne.n	80046e4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	69da      	ldr	r2, [r3, #28]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	6a1b      	ldr	r3, [r3, #32]
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004710:	019b      	lsls	r3, r3, #6
 8004712:	431a      	orrs	r2, r3
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004718:	085b      	lsrs	r3, r3, #1
 800471a:	3b01      	subs	r3, #1
 800471c:	041b      	lsls	r3, r3, #16
 800471e:	431a      	orrs	r2, r3
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	061b      	lsls	r3, r3, #24
 8004726:	491b      	ldr	r1, [pc, #108]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 8004728:	4313      	orrs	r3, r2
 800472a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800472c:	4b1b      	ldr	r3, [pc, #108]	; (800479c <HAL_RCC_OscConfig+0x478>)
 800472e:	2201      	movs	r2, #1
 8004730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004732:	f7fe f97b 	bl	8002a2c <HAL_GetTick>
 8004736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004738:	e008      	b.n	800474c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800473a:	f7fe f977 	bl	8002a2c <HAL_GetTick>
 800473e:	4602      	mov	r2, r0
 8004740:	693b      	ldr	r3, [r7, #16]
 8004742:	1ad3      	subs	r3, r2, r3
 8004744:	2b02      	cmp	r3, #2
 8004746:	d901      	bls.n	800474c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004748:	2303      	movs	r3, #3
 800474a:	e05c      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800474c:	4b11      	ldr	r3, [pc, #68]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004754:	2b00      	cmp	r3, #0
 8004756:	d0f0      	beq.n	800473a <HAL_RCC_OscConfig+0x416>
 8004758:	e054      	b.n	8004804 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800475a:	4b10      	ldr	r3, [pc, #64]	; (800479c <HAL_RCC_OscConfig+0x478>)
 800475c:	2200      	movs	r2, #0
 800475e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004760:	f7fe f964 	bl	8002a2c <HAL_GetTick>
 8004764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	e008      	b.n	800477a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004768:	f7fe f960 	bl	8002a2c <HAL_GetTick>
 800476c:	4602      	mov	r2, r0
 800476e:	693b      	ldr	r3, [r7, #16]
 8004770:	1ad3      	subs	r3, r2, r3
 8004772:	2b02      	cmp	r3, #2
 8004774:	d901      	bls.n	800477a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004776:	2303      	movs	r3, #3
 8004778:	e045      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800477a:	4b06      	ldr	r3, [pc, #24]	; (8004794 <HAL_RCC_OscConfig+0x470>)
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004782:	2b00      	cmp	r3, #0
 8004784:	d1f0      	bne.n	8004768 <HAL_RCC_OscConfig+0x444>
 8004786:	e03d      	b.n	8004804 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	699b      	ldr	r3, [r3, #24]
 800478c:	2b01      	cmp	r3, #1
 800478e:	d107      	bne.n	80047a0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	e038      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
 8004794:	40023800 	.word	0x40023800
 8004798:	40007000 	.word	0x40007000
 800479c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80047a0:	4b1b      	ldr	r3, [pc, #108]	; (8004810 <HAL_RCC_OscConfig+0x4ec>)
 80047a2:	685b      	ldr	r3, [r3, #4]
 80047a4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	2b01      	cmp	r3, #1
 80047ac:	d028      	beq.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047b8:	429a      	cmp	r2, r3
 80047ba:	d121      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047c6:	429a      	cmp	r2, r3
 80047c8:	d11a      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ca:	68fa      	ldr	r2, [r7, #12]
 80047cc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80047d0:	4013      	ands	r3, r2
 80047d2:	687a      	ldr	r2, [r7, #4]
 80047d4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80047d6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047d8:	4293      	cmp	r3, r2
 80047da:	d111      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047e6:	085b      	lsrs	r3, r3, #1
 80047e8:	3b01      	subs	r3, #1
 80047ea:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047ec:	429a      	cmp	r2, r3
 80047ee:	d107      	bne.n	8004800 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047fa:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047fc:	429a      	cmp	r2, r3
 80047fe:	d001      	beq.n	8004804 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8004800:	2301      	movs	r3, #1
 8004802:	e000      	b.n	8004806 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004804:	2300      	movs	r3, #0
}
 8004806:	4618      	mov	r0, r3
 8004808:	3718      	adds	r7, #24
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	40023800 	.word	0x40023800

08004814 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	b084      	sub	sp, #16
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d101      	bne.n	8004828 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004824:	2301      	movs	r3, #1
 8004826:	e0cc      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004828:	4b68      	ldr	r3, [pc, #416]	; (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 800482a:	681b      	ldr	r3, [r3, #0]
 800482c:	f003 0307 	and.w	r3, r3, #7
 8004830:	683a      	ldr	r2, [r7, #0]
 8004832:	429a      	cmp	r2, r3
 8004834:	d90c      	bls.n	8004850 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004836:	4b65      	ldr	r3, [pc, #404]	; (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004838:	683a      	ldr	r2, [r7, #0]
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800483e:	4b63      	ldr	r3, [pc, #396]	; (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004840:	681b      	ldr	r3, [r3, #0]
 8004842:	f003 0307 	and.w	r3, r3, #7
 8004846:	683a      	ldr	r2, [r7, #0]
 8004848:	429a      	cmp	r2, r3
 800484a:	d001      	beq.n	8004850 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800484c:	2301      	movs	r3, #1
 800484e:	e0b8      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	681b      	ldr	r3, [r3, #0]
 8004854:	f003 0302 	and.w	r3, r3, #2
 8004858:	2b00      	cmp	r3, #0
 800485a:	d020      	beq.n	800489e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	f003 0304 	and.w	r3, r3, #4
 8004864:	2b00      	cmp	r3, #0
 8004866:	d005      	beq.n	8004874 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004868:	4b59      	ldr	r3, [pc, #356]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800486a:	689b      	ldr	r3, [r3, #8]
 800486c:	4a58      	ldr	r2, [pc, #352]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004872:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	f003 0308 	and.w	r3, r3, #8
 800487c:	2b00      	cmp	r3, #0
 800487e:	d005      	beq.n	800488c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004880:	4b53      	ldr	r3, [pc, #332]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	4a52      	ldr	r2, [pc, #328]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800488a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800488c:	4b50      	ldr	r3, [pc, #320]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800488e:	689b      	ldr	r3, [r3, #8]
 8004890:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	689b      	ldr	r3, [r3, #8]
 8004898:	494d      	ldr	r1, [pc, #308]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800489a:	4313      	orrs	r3, r2
 800489c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f003 0301 	and.w	r3, r3, #1
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d044      	beq.n	8004934 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	2b01      	cmp	r3, #1
 80048b0:	d107      	bne.n	80048c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80048b2:	4b47      	ldr	r3, [pc, #284]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048b4:	681b      	ldr	r3, [r3, #0]
 80048b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d119      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e07f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	2b02      	cmp	r3, #2
 80048c8:	d003      	beq.n	80048d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ce:	2b03      	cmp	r3, #3
 80048d0:	d107      	bne.n	80048e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048d2:	4b3f      	ldr	r3, [pc, #252]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d109      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048de:	2301      	movs	r3, #1
 80048e0:	e06f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048e2:	4b3b      	ldr	r3, [pc, #236]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f003 0302 	and.w	r3, r3, #2
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d101      	bne.n	80048f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ee:	2301      	movs	r3, #1
 80048f0:	e067      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048f2:	4b37      	ldr	r3, [pc, #220]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80048f4:	689b      	ldr	r3, [r3, #8]
 80048f6:	f023 0203 	bic.w	r2, r3, #3
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	685b      	ldr	r3, [r3, #4]
 80048fe:	4934      	ldr	r1, [pc, #208]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004900:	4313      	orrs	r3, r2
 8004902:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004904:	f7fe f892 	bl	8002a2c <HAL_GetTick>
 8004908:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490a:	e00a      	b.n	8004922 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800490c:	f7fe f88e 	bl	8002a2c <HAL_GetTick>
 8004910:	4602      	mov	r2, r0
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	1ad3      	subs	r3, r2, r3
 8004916:	f241 3288 	movw	r2, #5000	; 0x1388
 800491a:	4293      	cmp	r3, r2
 800491c:	d901      	bls.n	8004922 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800491e:	2303      	movs	r3, #3
 8004920:	e04f      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004922:	4b2b      	ldr	r3, [pc, #172]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004924:	689b      	ldr	r3, [r3, #8]
 8004926:	f003 020c 	and.w	r2, r3, #12
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	685b      	ldr	r3, [r3, #4]
 800492e:	009b      	lsls	r3, r3, #2
 8004930:	429a      	cmp	r2, r3
 8004932:	d1eb      	bne.n	800490c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004934:	4b25      	ldr	r3, [pc, #148]	; (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	f003 0307 	and.w	r3, r3, #7
 800493c:	683a      	ldr	r2, [r7, #0]
 800493e:	429a      	cmp	r2, r3
 8004940:	d20c      	bcs.n	800495c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004942:	4b22      	ldr	r3, [pc, #136]	; (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 8004944:	683a      	ldr	r2, [r7, #0]
 8004946:	b2d2      	uxtb	r2, r2
 8004948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800494a:	4b20      	ldr	r3, [pc, #128]	; (80049cc <HAL_RCC_ClockConfig+0x1b8>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f003 0307 	and.w	r3, r3, #7
 8004952:	683a      	ldr	r2, [r7, #0]
 8004954:	429a      	cmp	r2, r3
 8004956:	d001      	beq.n	800495c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004958:	2301      	movs	r3, #1
 800495a:	e032      	b.n	80049c2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	f003 0304 	and.w	r3, r3, #4
 8004964:	2b00      	cmp	r3, #0
 8004966:	d008      	beq.n	800497a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004968:	4b19      	ldr	r3, [pc, #100]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 800496a:	689b      	ldr	r3, [r3, #8]
 800496c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	68db      	ldr	r3, [r3, #12]
 8004974:	4916      	ldr	r1, [pc, #88]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004976:	4313      	orrs	r3, r2
 8004978:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	f003 0308 	and.w	r3, r3, #8
 8004982:	2b00      	cmp	r3, #0
 8004984:	d009      	beq.n	800499a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004986:	4b12      	ldr	r3, [pc, #72]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004988:	689b      	ldr	r3, [r3, #8]
 800498a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	691b      	ldr	r3, [r3, #16]
 8004992:	00db      	lsls	r3, r3, #3
 8004994:	490e      	ldr	r1, [pc, #56]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 8004996:	4313      	orrs	r3, r2
 8004998:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800499a:	f000 f821 	bl	80049e0 <HAL_RCC_GetSysClockFreq>
 800499e:	4602      	mov	r2, r0
 80049a0:	4b0b      	ldr	r3, [pc, #44]	; (80049d0 <HAL_RCC_ClockConfig+0x1bc>)
 80049a2:	689b      	ldr	r3, [r3, #8]
 80049a4:	091b      	lsrs	r3, r3, #4
 80049a6:	f003 030f 	and.w	r3, r3, #15
 80049aa:	490a      	ldr	r1, [pc, #40]	; (80049d4 <HAL_RCC_ClockConfig+0x1c0>)
 80049ac:	5ccb      	ldrb	r3, [r1, r3]
 80049ae:	fa22 f303 	lsr.w	r3, r2, r3
 80049b2:	4a09      	ldr	r2, [pc, #36]	; (80049d8 <HAL_RCC_ClockConfig+0x1c4>)
 80049b4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049b6:	4b09      	ldr	r3, [pc, #36]	; (80049dc <HAL_RCC_ClockConfig+0x1c8>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fd fff2 	bl	80029a4 <HAL_InitTick>

  return HAL_OK;
 80049c0:	2300      	movs	r3, #0
}
 80049c2:	4618      	mov	r0, r3
 80049c4:	3710      	adds	r7, #16
 80049c6:	46bd      	mov	sp, r7
 80049c8:	bd80      	pop	{r7, pc}
 80049ca:	bf00      	nop
 80049cc:	40023c00 	.word	0x40023c00
 80049d0:	40023800 	.word	0x40023800
 80049d4:	0800741c 	.word	0x0800741c
 80049d8:	20000100 	.word	0x20000100
 80049dc:	20000104 	.word	0x20000104

080049e0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049e0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049e4:	b090      	sub	sp, #64	; 0x40
 80049e6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049e8:	2300      	movs	r3, #0
 80049ea:	637b      	str	r3, [r7, #52]	; 0x34
 80049ec:	2300      	movs	r3, #0
 80049ee:	63fb      	str	r3, [r7, #60]	; 0x3c
 80049f0:	2300      	movs	r3, #0
 80049f2:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80049f4:	2300      	movs	r3, #0
 80049f6:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049f8:	4b59      	ldr	r3, [pc, #356]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 80049fa:	689b      	ldr	r3, [r3, #8]
 80049fc:	f003 030c 	and.w	r3, r3, #12
 8004a00:	2b08      	cmp	r3, #8
 8004a02:	d00d      	beq.n	8004a20 <HAL_RCC_GetSysClockFreq+0x40>
 8004a04:	2b08      	cmp	r3, #8
 8004a06:	f200 80a1 	bhi.w	8004b4c <HAL_RCC_GetSysClockFreq+0x16c>
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_RCC_GetSysClockFreq+0x34>
 8004a0e:	2b04      	cmp	r3, #4
 8004a10:	d003      	beq.n	8004a1a <HAL_RCC_GetSysClockFreq+0x3a>
 8004a12:	e09b      	b.n	8004b4c <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a14:	4b53      	ldr	r3, [pc, #332]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a16:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8004a18:	e09b      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a1a:	4b53      	ldr	r3, [pc, #332]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a1c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004a1e:	e098      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a20:	4b4f      	ldr	r3, [pc, #316]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004a28:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a2a:	4b4d      	ldr	r3, [pc, #308]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a2c:	685b      	ldr	r3, [r3, #4]
 8004a2e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d028      	beq.n	8004a88 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a36:	4b4a      	ldr	r3, [pc, #296]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	099b      	lsrs	r3, r3, #6
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	623b      	str	r3, [r7, #32]
 8004a40:	627a      	str	r2, [r7, #36]	; 0x24
 8004a42:	6a3b      	ldr	r3, [r7, #32]
 8004a44:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a48:	2100      	movs	r1, #0
 8004a4a:	4b47      	ldr	r3, [pc, #284]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a4c:	fb03 f201 	mul.w	r2, r3, r1
 8004a50:	2300      	movs	r3, #0
 8004a52:	fb00 f303 	mul.w	r3, r0, r3
 8004a56:	4413      	add	r3, r2
 8004a58:	4a43      	ldr	r2, [pc, #268]	; (8004b68 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a5a:	fba0 1202 	umull	r1, r2, r0, r2
 8004a5e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004a60:	460a      	mov	r2, r1
 8004a62:	62ba      	str	r2, [r7, #40]	; 0x28
 8004a64:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004a66:	4413      	add	r3, r2
 8004a68:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004a6a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	61bb      	str	r3, [r7, #24]
 8004a70:	61fa      	str	r2, [r7, #28]
 8004a72:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a76:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8004a7a:	f7fb ff07 	bl	800088c <__aeabi_uldivmod>
 8004a7e:	4602      	mov	r2, r0
 8004a80:	460b      	mov	r3, r1
 8004a82:	4613      	mov	r3, r2
 8004a84:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004a86:	e053      	b.n	8004b30 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a88:	4b35      	ldr	r3, [pc, #212]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004a8a:	685b      	ldr	r3, [r3, #4]
 8004a8c:	099b      	lsrs	r3, r3, #6
 8004a8e:	2200      	movs	r2, #0
 8004a90:	613b      	str	r3, [r7, #16]
 8004a92:	617a      	str	r2, [r7, #20]
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a9a:	f04f 0b00 	mov.w	fp, #0
 8004a9e:	4652      	mov	r2, sl
 8004aa0:	465b      	mov	r3, fp
 8004aa2:	f04f 0000 	mov.w	r0, #0
 8004aa6:	f04f 0100 	mov.w	r1, #0
 8004aaa:	0159      	lsls	r1, r3, #5
 8004aac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004ab0:	0150      	lsls	r0, r2, #5
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	ebb2 080a 	subs.w	r8, r2, sl
 8004aba:	eb63 090b 	sbc.w	r9, r3, fp
 8004abe:	f04f 0200 	mov.w	r2, #0
 8004ac2:	f04f 0300 	mov.w	r3, #0
 8004ac6:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004aca:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004ace:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004ad2:	ebb2 0408 	subs.w	r4, r2, r8
 8004ad6:	eb63 0509 	sbc.w	r5, r3, r9
 8004ada:	f04f 0200 	mov.w	r2, #0
 8004ade:	f04f 0300 	mov.w	r3, #0
 8004ae2:	00eb      	lsls	r3, r5, #3
 8004ae4:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ae8:	00e2      	lsls	r2, r4, #3
 8004aea:	4614      	mov	r4, r2
 8004aec:	461d      	mov	r5, r3
 8004aee:	eb14 030a 	adds.w	r3, r4, sl
 8004af2:	603b      	str	r3, [r7, #0]
 8004af4:	eb45 030b 	adc.w	r3, r5, fp
 8004af8:	607b      	str	r3, [r7, #4]
 8004afa:	f04f 0200 	mov.w	r2, #0
 8004afe:	f04f 0300 	mov.w	r3, #0
 8004b02:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004b06:	4629      	mov	r1, r5
 8004b08:	028b      	lsls	r3, r1, #10
 8004b0a:	4621      	mov	r1, r4
 8004b0c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004b10:	4621      	mov	r1, r4
 8004b12:	028a      	lsls	r2, r1, #10
 8004b14:	4610      	mov	r0, r2
 8004b16:	4619      	mov	r1, r3
 8004b18:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b1a:	2200      	movs	r2, #0
 8004b1c:	60bb      	str	r3, [r7, #8]
 8004b1e:	60fa      	str	r2, [r7, #12]
 8004b20:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b24:	f7fb feb2 	bl	800088c <__aeabi_uldivmod>
 8004b28:	4602      	mov	r2, r0
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	4613      	mov	r3, r2
 8004b2e:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b30:	4b0b      	ldr	r3, [pc, #44]	; (8004b60 <HAL_RCC_GetSysClockFreq+0x180>)
 8004b32:	685b      	ldr	r3, [r3, #4]
 8004b34:	0c1b      	lsrs	r3, r3, #16
 8004b36:	f003 0303 	and.w	r3, r3, #3
 8004b3a:	3301      	adds	r3, #1
 8004b3c:	005b      	lsls	r3, r3, #1
 8004b3e:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8004b40:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8004b42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b44:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b48:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b4a:	e002      	b.n	8004b52 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b4c:	4b05      	ldr	r3, [pc, #20]	; (8004b64 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b4e:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8004b50:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3740      	adds	r7, #64	; 0x40
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b5e:	bf00      	nop
 8004b60:	40023800 	.word	0x40023800
 8004b64:	00f42400 	.word	0x00f42400
 8004b68:	016e3600 	.word	0x016e3600

08004b6c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b6c:	b480      	push	{r7}
 8004b6e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b70:	4b03      	ldr	r3, [pc, #12]	; (8004b80 <HAL_RCC_GetHCLKFreq+0x14>)
 8004b72:	681b      	ldr	r3, [r3, #0]
}
 8004b74:	4618      	mov	r0, r3
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
 8004b7e:	bf00      	nop
 8004b80:	20000100 	.word	0x20000100

08004b84 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b84:	b580      	push	{r7, lr}
 8004b86:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b88:	f7ff fff0 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004b8c:	4602      	mov	r2, r0
 8004b8e:	4b05      	ldr	r3, [pc, #20]	; (8004ba4 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b90:	689b      	ldr	r3, [r3, #8]
 8004b92:	0a9b      	lsrs	r3, r3, #10
 8004b94:	f003 0307 	and.w	r3, r3, #7
 8004b98:	4903      	ldr	r1, [pc, #12]	; (8004ba8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b9a:	5ccb      	ldrb	r3, [r1, r3]
 8004b9c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004ba0:	4618      	mov	r0, r3
 8004ba2:	bd80      	pop	{r7, pc}
 8004ba4:	40023800 	.word	0x40023800
 8004ba8:	0800742c 	.word	0x0800742c

08004bac <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004bb0:	f7ff ffdc 	bl	8004b6c <HAL_RCC_GetHCLKFreq>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	4b05      	ldr	r3, [pc, #20]	; (8004bcc <HAL_RCC_GetPCLK2Freq+0x20>)
 8004bb8:	689b      	ldr	r3, [r3, #8]
 8004bba:	0b5b      	lsrs	r3, r3, #13
 8004bbc:	f003 0307 	and.w	r3, r3, #7
 8004bc0:	4903      	ldr	r1, [pc, #12]	; (8004bd0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bc2:	5ccb      	ldrb	r3, [r1, r3]
 8004bc4:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bc8:	4618      	mov	r0, r3
 8004bca:	bd80      	pop	{r7, pc}
 8004bcc:	40023800 	.word	0x40023800
 8004bd0:	0800742c 	.word	0x0800742c

08004bd4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bd4:	b580      	push	{r7, lr}
 8004bd6:	b082      	sub	sp, #8
 8004bd8:	af00      	add	r7, sp, #0
 8004bda:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d101      	bne.n	8004be6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e07b      	b.n	8004cde <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004be6:	687b      	ldr	r3, [r7, #4]
 8004be8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bea:	2b00      	cmp	r3, #0
 8004bec:	d108      	bne.n	8004c00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004bf6:	d009      	beq.n	8004c0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	61da      	str	r2, [r3, #28]
 8004bfe:	e005      	b.n	8004c0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2200      	movs	r2, #0
 8004c04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	2200      	movs	r2, #0
 8004c0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2200      	movs	r2, #0
 8004c10:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004c18:	b2db      	uxtb	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d106      	bne.n	8004c2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	2200      	movs	r2, #0
 8004c22:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c26:	6878      	ldr	r0, [r7, #4]
 8004c28:	f7fd fb28 	bl	800227c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	2202      	movs	r2, #2
 8004c30:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004c42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	689b      	ldr	r3, [r3, #8]
 8004c50:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	68db      	ldr	r3, [r3, #12]
 8004c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	691b      	ldr	r3, [r3, #16]
 8004c64:	f003 0302 	and.w	r3, r3, #2
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	f003 0301 	and.w	r3, r3, #1
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	699b      	ldr	r3, [r3, #24]
 8004c78:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c7c:	431a      	orrs	r2, r3
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004c86:	431a      	orrs	r2, r3
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6a1b      	ldr	r3, [r3, #32]
 8004c8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004c90:	ea42 0103 	orr.w	r1, r2, r3
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004c98:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	430a      	orrs	r2, r1
 8004ca2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	0c1b      	lsrs	r3, r3, #16
 8004caa:	f003 0104 	and.w	r1, r3, #4
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cb2:	f003 0210 	and.w	r2, r3, #16
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	430a      	orrs	r2, r1
 8004cbc:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	69da      	ldr	r2, [r3, #28]
 8004cc4:	687b      	ldr	r3, [r7, #4]
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ccc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2200      	movs	r2, #0
 8004cd2:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cd4:	687b      	ldr	r3, [r7, #4]
 8004cd6:	2201      	movs	r2, #1
 8004cd8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004cdc:	2300      	movs	r3, #0
}
 8004cde:	4618      	mov	r0, r3
 8004ce0:	3708      	adds	r7, #8
 8004ce2:	46bd      	mov	sp, r7
 8004ce4:	bd80      	pop	{r7, pc}

08004ce6 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004ce6:	b580      	push	{r7, lr}
 8004ce8:	b082      	sub	sp, #8
 8004cea:	af00      	add	r7, sp, #0
 8004cec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d101      	bne.n	8004cf8 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004cf4:	2301      	movs	r3, #1
 8004cf6:	e041      	b.n	8004d7c <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004cfe:	b2db      	uxtb	r3, r3
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d106      	bne.n	8004d12 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	2200      	movs	r2, #0
 8004d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004d0c:	6878      	ldr	r0, [r7, #4]
 8004d0e:	f7fd fb1d 	bl	800234c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	2202      	movs	r2, #2
 8004d16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	681a      	ldr	r2, [r3, #0]
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	3304      	adds	r3, #4
 8004d22:	4619      	mov	r1, r3
 8004d24:	4610      	mov	r0, r2
 8004d26:	f000 fc97 	bl	8005658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	2201      	movs	r2, #1
 8004d2e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	2201      	movs	r2, #1
 8004d36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	2201      	movs	r2, #1
 8004d46:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	2201      	movs	r2, #1
 8004d4e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	2201      	movs	r2, #1
 8004d56:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2201      	movs	r2, #1
 8004d66:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2201      	movs	r2, #1
 8004d6e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	2201      	movs	r2, #1
 8004d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3708      	adds	r7, #8
 8004d80:	46bd      	mov	sp, r7
 8004d82:	bd80      	pop	{r7, pc}

08004d84 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d84:	b580      	push	{r7, lr}
 8004d86:	b082      	sub	sp, #8
 8004d88:	af00      	add	r7, sp, #0
 8004d8a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2b00      	cmp	r3, #0
 8004d90:	d101      	bne.n	8004d96 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d92:	2301      	movs	r3, #1
 8004d94:	e041      	b.n	8004e1a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d9c:	b2db      	uxtb	r3, r3
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d106      	bne.n	8004db0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2200      	movs	r2, #0
 8004da6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004daa:	6878      	ldr	r0, [r7, #4]
 8004dac:	f000 f839 	bl	8004e22 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004db0:	687b      	ldr	r3, [r7, #4]
 8004db2:	2202      	movs	r2, #2
 8004db4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681a      	ldr	r2, [r3, #0]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	3304      	adds	r3, #4
 8004dc0:	4619      	mov	r1, r3
 8004dc2:	4610      	mov	r0, r2
 8004dc4:	f000 fc48 	bl	8005658 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2201      	movs	r2, #1
 8004dcc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2201      	movs	r2, #1
 8004dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2201      	movs	r2, #1
 8004ddc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e18:	2300      	movs	r3, #0
}
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	3708      	adds	r7, #8
 8004e1e:	46bd      	mov	sp, r7
 8004e20:	bd80      	pop	{r7, pc}

08004e22 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e22:	b480      	push	{r7}
 8004e24:	b083      	sub	sp, #12
 8004e26:	af00      	add	r7, sp, #0
 8004e28:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e2a:	bf00      	nop
 8004e2c:	370c      	adds	r7, #12
 8004e2e:	46bd      	mov	sp, r7
 8004e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e34:	4770      	bx	lr
	...

08004e38 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e38:	b580      	push	{r7, lr}
 8004e3a:	b084      	sub	sp, #16
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e42:	683b      	ldr	r3, [r7, #0]
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d109      	bne.n	8004e5c <HAL_TIM_PWM_Start+0x24>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e4e:	b2db      	uxtb	r3, r3
 8004e50:	2b01      	cmp	r3, #1
 8004e52:	bf14      	ite	ne
 8004e54:	2301      	movne	r3, #1
 8004e56:	2300      	moveq	r3, #0
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	e022      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x6a>
 8004e5c:	683b      	ldr	r3, [r7, #0]
 8004e5e:	2b04      	cmp	r3, #4
 8004e60:	d109      	bne.n	8004e76 <HAL_TIM_PWM_Start+0x3e>
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e68:	b2db      	uxtb	r3, r3
 8004e6a:	2b01      	cmp	r3, #1
 8004e6c:	bf14      	ite	ne
 8004e6e:	2301      	movne	r3, #1
 8004e70:	2300      	moveq	r3, #0
 8004e72:	b2db      	uxtb	r3, r3
 8004e74:	e015      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x6a>
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	2b08      	cmp	r3, #8
 8004e7a:	d109      	bne.n	8004e90 <HAL_TIM_PWM_Start+0x58>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	e008      	b.n	8004ea2 <HAL_TIM_PWM_Start+0x6a>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e96:	b2db      	uxtb	r3, r3
 8004e98:	2b01      	cmp	r3, #1
 8004e9a:	bf14      	ite	ne
 8004e9c:	2301      	movne	r3, #1
 8004e9e:	2300      	moveq	r3, #0
 8004ea0:	b2db      	uxtb	r3, r3
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d001      	beq.n	8004eaa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004ea6:	2301      	movs	r3, #1
 8004ea8:	e07c      	b.n	8004fa4 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004eaa:	683b      	ldr	r3, [r7, #0]
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d104      	bne.n	8004eba <HAL_TIM_PWM_Start+0x82>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2202      	movs	r2, #2
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb8:	e013      	b.n	8004ee2 <HAL_TIM_PWM_Start+0xaa>
 8004eba:	683b      	ldr	r3, [r7, #0]
 8004ebc:	2b04      	cmp	r3, #4
 8004ebe:	d104      	bne.n	8004eca <HAL_TIM_PWM_Start+0x92>
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2202      	movs	r2, #2
 8004ec4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec8:	e00b      	b.n	8004ee2 <HAL_TIM_PWM_Start+0xaa>
 8004eca:	683b      	ldr	r3, [r7, #0]
 8004ecc:	2b08      	cmp	r3, #8
 8004ece:	d104      	bne.n	8004eda <HAL_TIM_PWM_Start+0xa2>
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2202      	movs	r2, #2
 8004ed4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ed8:	e003      	b.n	8004ee2 <HAL_TIM_PWM_Start+0xaa>
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	2202      	movs	r2, #2
 8004ede:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	2201      	movs	r2, #1
 8004ee8:	6839      	ldr	r1, [r7, #0]
 8004eea:	4618      	mov	r0, r3
 8004eec:	f000 feaa 	bl	8005c44 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4a2d      	ldr	r2, [pc, #180]	; (8004fac <HAL_TIM_PWM_Start+0x174>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d004      	beq.n	8004f04 <HAL_TIM_PWM_Start+0xcc>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	4a2c      	ldr	r2, [pc, #176]	; (8004fb0 <HAL_TIM_PWM_Start+0x178>)
 8004f00:	4293      	cmp	r3, r2
 8004f02:	d101      	bne.n	8004f08 <HAL_TIM_PWM_Start+0xd0>
 8004f04:	2301      	movs	r3, #1
 8004f06:	e000      	b.n	8004f0a <HAL_TIM_PWM_Start+0xd2>
 8004f08:	2300      	movs	r3, #0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d007      	beq.n	8004f1e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004f1c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a22      	ldr	r2, [pc, #136]	; (8004fac <HAL_TIM_PWM_Start+0x174>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d022      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x136>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f30:	d01d      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x136>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1f      	ldr	r2, [pc, #124]	; (8004fb4 <HAL_TIM_PWM_Start+0x17c>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d018      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x136>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a1d      	ldr	r2, [pc, #116]	; (8004fb8 <HAL_TIM_PWM_Start+0x180>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d013      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x136>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a1c      	ldr	r2, [pc, #112]	; (8004fbc <HAL_TIM_PWM_Start+0x184>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d00e      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x136>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a16      	ldr	r2, [pc, #88]	; (8004fb0 <HAL_TIM_PWM_Start+0x178>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d009      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x136>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	4a18      	ldr	r2, [pc, #96]	; (8004fc0 <HAL_TIM_PWM_Start+0x188>)
 8004f60:	4293      	cmp	r3, r2
 8004f62:	d004      	beq.n	8004f6e <HAL_TIM_PWM_Start+0x136>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <HAL_TIM_PWM_Start+0x18c>)
 8004f6a:	4293      	cmp	r3, r2
 8004f6c:	d111      	bne.n	8004f92 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	689b      	ldr	r3, [r3, #8]
 8004f74:	f003 0307 	and.w	r3, r3, #7
 8004f78:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	2b06      	cmp	r3, #6
 8004f7e:	d010      	beq.n	8004fa2 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	681b      	ldr	r3, [r3, #0]
 8004f84:	681a      	ldr	r2, [r3, #0]
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f042 0201 	orr.w	r2, r2, #1
 8004f8e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f90:	e007      	b.n	8004fa2 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	681a      	ldr	r2, [r3, #0]
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	f042 0201 	orr.w	r2, r2, #1
 8004fa0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}
 8004fac:	40010000 	.word	0x40010000
 8004fb0:	40010400 	.word	0x40010400
 8004fb4:	40000400 	.word	0x40000400
 8004fb8:	40000800 	.word	0x40000800
 8004fbc:	40000c00 	.word	0x40000c00
 8004fc0:	40014000 	.word	0x40014000
 8004fc4:	40001800 	.word	0x40001800

08004fc8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
 8004fd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d101      	bne.n	8004fdc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fd8:	2301      	movs	r3, #1
 8004fda:	e097      	b.n	800510c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe2:	b2db      	uxtb	r3, r3
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d106      	bne.n	8004ff6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	2200      	movs	r2, #0
 8004fec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004ff0:	6878      	ldr	r0, [r7, #4]
 8004ff2:	f7fd fa2b 	bl	800244c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	2202      	movs	r2, #2
 8004ffa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681b      	ldr	r3, [r3, #0]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	687a      	ldr	r2, [r7, #4]
 8005006:	6812      	ldr	r2, [r2, #0]
 8005008:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800500c:	f023 0307 	bic.w	r3, r3, #7
 8005010:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681a      	ldr	r2, [r3, #0]
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	3304      	adds	r3, #4
 800501a:	4619      	mov	r1, r3
 800501c:	4610      	mov	r0, r2
 800501e:	f000 fb1b 	bl	8005658 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	689b      	ldr	r3, [r3, #8]
 8005028:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	699b      	ldr	r3, [r3, #24]
 8005030:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	6a1b      	ldr	r3, [r3, #32]
 8005038:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800503a:	683b      	ldr	r3, [r7, #0]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	697a      	ldr	r2, [r7, #20]
 8005040:	4313      	orrs	r3, r2
 8005042:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005044:	693b      	ldr	r3, [r7, #16]
 8005046:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800504a:	f023 0303 	bic.w	r3, r3, #3
 800504e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005050:	683b      	ldr	r3, [r7, #0]
 8005052:	689a      	ldr	r2, [r3, #8]
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	699b      	ldr	r3, [r3, #24]
 8005058:	021b      	lsls	r3, r3, #8
 800505a:	4313      	orrs	r3, r2
 800505c:	693a      	ldr	r2, [r7, #16]
 800505e:	4313      	orrs	r3, r2
 8005060:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005062:	693b      	ldr	r3, [r7, #16]
 8005064:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005068:	f023 030c 	bic.w	r3, r3, #12
 800506c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005074:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005078:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	68da      	ldr	r2, [r3, #12]
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	69db      	ldr	r3, [r3, #28]
 8005082:	021b      	lsls	r3, r3, #8
 8005084:	4313      	orrs	r3, r2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	691b      	ldr	r3, [r3, #16]
 8005090:	011a      	lsls	r2, r3, #4
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	6a1b      	ldr	r3, [r3, #32]
 8005096:	031b      	lsls	r3, r3, #12
 8005098:	4313      	orrs	r3, r2
 800509a:	693a      	ldr	r2, [r7, #16]
 800509c:	4313      	orrs	r3, r2
 800509e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80050a6:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80050ae:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685a      	ldr	r2, [r3, #4]
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	695b      	ldr	r3, [r3, #20]
 80050b8:	011b      	lsls	r3, r3, #4
 80050ba:	4313      	orrs	r3, r2
 80050bc:	68fa      	ldr	r2, [r7, #12]
 80050be:	4313      	orrs	r3, r2
 80050c0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	697a      	ldr	r2, [r7, #20]
 80050c8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	693a      	ldr	r2, [r7, #16]
 80050d0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050d2:	687b      	ldr	r3, [r7, #4]
 80050d4:	681b      	ldr	r3, [r3, #0]
 80050d6:	68fa      	ldr	r2, [r7, #12]
 80050d8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	2201      	movs	r2, #1
 80050de:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2201      	movs	r2, #1
 80050e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	2201      	movs	r2, #1
 80050ee:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2201      	movs	r2, #1
 80050f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	2201      	movs	r2, #1
 80050fe:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	2201      	movs	r2, #1
 8005106:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800510a:	2300      	movs	r3, #0
}
 800510c:	4618      	mov	r0, r3
 800510e:	3718      	adds	r7, #24
 8005110:	46bd      	mov	sp, r7
 8005112:	bd80      	pop	{r7, pc}

08005114 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005114:	b580      	push	{r7, lr}
 8005116:	b084      	sub	sp, #16
 8005118:	af00      	add	r7, sp, #0
 800511a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	68db      	ldr	r3, [r3, #12]
 8005122:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	691b      	ldr	r3, [r3, #16]
 800512a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800512c:	68bb      	ldr	r3, [r7, #8]
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d020      	beq.n	8005178 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8005136:	68fb      	ldr	r3, [r7, #12]
 8005138:	f003 0302 	and.w	r3, r3, #2
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01b      	beq.n	8005178 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	681b      	ldr	r3, [r3, #0]
 8005144:	f06f 0202 	mvn.w	r2, #2
 8005148:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	2201      	movs	r2, #1
 800514e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005150:	687b      	ldr	r3, [r7, #4]
 8005152:	681b      	ldr	r3, [r3, #0]
 8005154:	699b      	ldr	r3, [r3, #24]
 8005156:	f003 0303 	and.w	r3, r3, #3
 800515a:	2b00      	cmp	r3, #0
 800515c:	d003      	beq.n	8005166 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800515e:	6878      	ldr	r0, [r7, #4]
 8005160:	f000 fa5b 	bl	800561a <HAL_TIM_IC_CaptureCallback>
 8005164:	e005      	b.n	8005172 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005166:	6878      	ldr	r0, [r7, #4]
 8005168:	f000 fa4d 	bl	8005606 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800516c:	6878      	ldr	r0, [r7, #4]
 800516e:	f000 fa5e 	bl	800562e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005172:	687b      	ldr	r3, [r7, #4]
 8005174:	2200      	movs	r2, #0
 8005176:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005178:	68bb      	ldr	r3, [r7, #8]
 800517a:	f003 0304 	and.w	r3, r3, #4
 800517e:	2b00      	cmp	r3, #0
 8005180:	d020      	beq.n	80051c4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	f003 0304 	and.w	r3, r3, #4
 8005188:	2b00      	cmp	r3, #0
 800518a:	d01b      	beq.n	80051c4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	f06f 0204 	mvn.w	r2, #4
 8005194:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	681b      	ldr	r3, [r3, #0]
 80051a0:	699b      	ldr	r3, [r3, #24]
 80051a2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d003      	beq.n	80051b2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 fa35 	bl	800561a <HAL_TIM_IC_CaptureCallback>
 80051b0:	e005      	b.n	80051be <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051b2:	6878      	ldr	r0, [r7, #4]
 80051b4:	f000 fa27 	bl	8005606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80051b8:	6878      	ldr	r0, [r7, #4]
 80051ba:	f000 fa38 	bl	800562e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	2200      	movs	r2, #0
 80051c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80051c4:	68bb      	ldr	r3, [r7, #8]
 80051c6:	f003 0308 	and.w	r3, r3, #8
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	d020      	beq.n	8005210 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	f003 0308 	and.w	r3, r3, #8
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d01b      	beq.n	8005210 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f06f 0208 	mvn.w	r2, #8
 80051e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	2204      	movs	r2, #4
 80051e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	69db      	ldr	r3, [r3, #28]
 80051ee:	f003 0303 	and.w	r3, r3, #3
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d003      	beq.n	80051fe <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fa0f 	bl	800561a <HAL_TIM_IC_CaptureCallback>
 80051fc:	e005      	b.n	800520a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80051fe:	6878      	ldr	r0, [r7, #4]
 8005200:	f000 fa01 	bl	8005606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005204:	6878      	ldr	r0, [r7, #4]
 8005206:	f000 fa12 	bl	800562e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	2200      	movs	r2, #0
 800520e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f003 0310 	and.w	r3, r3, #16
 8005216:	2b00      	cmp	r3, #0
 8005218:	d020      	beq.n	800525c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800521a:	68fb      	ldr	r3, [r7, #12]
 800521c:	f003 0310 	and.w	r3, r3, #16
 8005220:	2b00      	cmp	r3, #0
 8005222:	d01b      	beq.n	800525c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f06f 0210 	mvn.w	r2, #16
 800522c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	2208      	movs	r2, #8
 8005232:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	69db      	ldr	r3, [r3, #28]
 800523a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800523e:	2b00      	cmp	r3, #0
 8005240:	d003      	beq.n	800524a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f000 f9e9 	bl	800561a <HAL_TIM_IC_CaptureCallback>
 8005248:	e005      	b.n	8005256 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800524a:	6878      	ldr	r0, [r7, #4]
 800524c:	f000 f9db 	bl	8005606 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005250:	6878      	ldr	r0, [r7, #4]
 8005252:	f000 f9ec 	bl	800562e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	2200      	movs	r2, #0
 800525a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800525c:	68bb      	ldr	r3, [r7, #8]
 800525e:	f003 0301 	and.w	r3, r3, #1
 8005262:	2b00      	cmp	r3, #0
 8005264:	d00c      	beq.n	8005280 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8005266:	68fb      	ldr	r3, [r7, #12]
 8005268:	f003 0301 	and.w	r3, r3, #1
 800526c:	2b00      	cmp	r3, #0
 800526e:	d007      	beq.n	8005280 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	f06f 0201 	mvn.w	r2, #1
 8005278:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800527a:	6878      	ldr	r0, [r7, #4]
 800527c:	f7fc fc20 	bl	8001ac0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005286:	2b00      	cmp	r3, #0
 8005288:	d00c      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005290:	2b00      	cmp	r3, #0
 8005292:	d007      	beq.n	80052a4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800529c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800529e:	6878      	ldr	r0, [r7, #4]
 80052a0:	f000 fdce 	bl	8005e40 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80052a4:	68bb      	ldr	r3, [r7, #8]
 80052a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d00c      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80052ae:	68fb      	ldr	r3, [r7, #12]
 80052b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d007      	beq.n	80052c8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80052c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80052c2:	6878      	ldr	r0, [r7, #4]
 80052c4:	f000 f9bd 	bl	8005642 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80052c8:	68bb      	ldr	r3, [r7, #8]
 80052ca:	f003 0320 	and.w	r3, r3, #32
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d00c      	beq.n	80052ec <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	f003 0320 	and.w	r3, r3, #32
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d007      	beq.n	80052ec <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	f06f 0220 	mvn.w	r2, #32
 80052e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80052e6:	6878      	ldr	r0, [r7, #4]
 80052e8:	f000 fda0 	bl	8005e2c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80052ec:	bf00      	nop
 80052ee:	3710      	adds	r7, #16
 80052f0:	46bd      	mov	sp, r7
 80052f2:	bd80      	pop	{r7, pc}

080052f4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80052f4:	b580      	push	{r7, lr}
 80052f6:	b086      	sub	sp, #24
 80052f8:	af00      	add	r7, sp, #0
 80052fa:	60f8      	str	r0, [r7, #12]
 80052fc:	60b9      	str	r1, [r7, #8]
 80052fe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005300:	2300      	movs	r3, #0
 8005302:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005304:	68fb      	ldr	r3, [r7, #12]
 8005306:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800530a:	2b01      	cmp	r3, #1
 800530c:	d101      	bne.n	8005312 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800530e:	2302      	movs	r3, #2
 8005310:	e0ae      	b.n	8005470 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005312:	68fb      	ldr	r3, [r7, #12]
 8005314:	2201      	movs	r2, #1
 8005316:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800531a:	687b      	ldr	r3, [r7, #4]
 800531c:	2b0c      	cmp	r3, #12
 800531e:	f200 809f 	bhi.w	8005460 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005322:	a201      	add	r2, pc, #4	; (adr r2, 8005328 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005324:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005328:	0800535d 	.word	0x0800535d
 800532c:	08005461 	.word	0x08005461
 8005330:	08005461 	.word	0x08005461
 8005334:	08005461 	.word	0x08005461
 8005338:	0800539d 	.word	0x0800539d
 800533c:	08005461 	.word	0x08005461
 8005340:	08005461 	.word	0x08005461
 8005344:	08005461 	.word	0x08005461
 8005348:	080053df 	.word	0x080053df
 800534c:	08005461 	.word	0x08005461
 8005350:	08005461 	.word	0x08005461
 8005354:	08005461 	.word	0x08005461
 8005358:	0800541f 	.word	0x0800541f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800535c:	68fb      	ldr	r3, [r7, #12]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	68b9      	ldr	r1, [r7, #8]
 8005362:	4618      	mov	r0, r3
 8005364:	f000 fa24 	bl	80057b0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	699a      	ldr	r2, [r3, #24]
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f042 0208 	orr.w	r2, r2, #8
 8005376:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005378:	68fb      	ldr	r3, [r7, #12]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	699a      	ldr	r2, [r3, #24]
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f022 0204 	bic.w	r2, r2, #4
 8005386:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	681b      	ldr	r3, [r3, #0]
 800538c:	6999      	ldr	r1, [r3, #24]
 800538e:	68bb      	ldr	r3, [r7, #8]
 8005390:	691a      	ldr	r2, [r3, #16]
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	430a      	orrs	r2, r1
 8005398:	619a      	str	r2, [r3, #24]
      break;
 800539a:	e064      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800539c:	68fb      	ldr	r3, [r7, #12]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	68b9      	ldr	r1, [r7, #8]
 80053a2:	4618      	mov	r0, r3
 80053a4:	f000 fa74 	bl	8005890 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	699a      	ldr	r2, [r3, #24]
 80053ae:	68fb      	ldr	r3, [r7, #12]
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80053b6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	681b      	ldr	r3, [r3, #0]
 80053bc:	699a      	ldr	r2, [r3, #24]
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	681b      	ldr	r3, [r3, #0]
 80053c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80053c6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80053c8:	68fb      	ldr	r3, [r7, #12]
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	6999      	ldr	r1, [r3, #24]
 80053ce:	68bb      	ldr	r3, [r7, #8]
 80053d0:	691b      	ldr	r3, [r3, #16]
 80053d2:	021a      	lsls	r2, r3, #8
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	430a      	orrs	r2, r1
 80053da:	619a      	str	r2, [r3, #24]
      break;
 80053dc:	e043      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	68b9      	ldr	r1, [r7, #8]
 80053e4:	4618      	mov	r0, r3
 80053e6:	f000 fac9 	bl	800597c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	69da      	ldr	r2, [r3, #28]
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f042 0208 	orr.w	r2, r2, #8
 80053f8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	69da      	ldr	r2, [r3, #28]
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f022 0204 	bic.w	r2, r2, #4
 8005408:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	69d9      	ldr	r1, [r3, #28]
 8005410:	68bb      	ldr	r3, [r7, #8]
 8005412:	691a      	ldr	r2, [r3, #16]
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	430a      	orrs	r2, r1
 800541a:	61da      	str	r2, [r3, #28]
      break;
 800541c:	e023      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	68b9      	ldr	r1, [r7, #8]
 8005424:	4618      	mov	r0, r3
 8005426:	f000 fb1d 	bl	8005a64 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	69da      	ldr	r2, [r3, #28]
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005438:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800543a:	68fb      	ldr	r3, [r7, #12]
 800543c:	681b      	ldr	r3, [r3, #0]
 800543e:	69da      	ldr	r2, [r3, #28]
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005448:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	69d9      	ldr	r1, [r3, #28]
 8005450:	68bb      	ldr	r3, [r7, #8]
 8005452:	691b      	ldr	r3, [r3, #16]
 8005454:	021a      	lsls	r2, r3, #8
 8005456:	68fb      	ldr	r3, [r7, #12]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	430a      	orrs	r2, r1
 800545c:	61da      	str	r2, [r3, #28]
      break;
 800545e:	e002      	b.n	8005466 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005460:	2301      	movs	r3, #1
 8005462:	75fb      	strb	r3, [r7, #23]
      break;
 8005464:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005466:	68fb      	ldr	r3, [r7, #12]
 8005468:	2200      	movs	r2, #0
 800546a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800546e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005470:	4618      	mov	r0, r3
 8005472:	3718      	adds	r7, #24
 8005474:	46bd      	mov	sp, r7
 8005476:	bd80      	pop	{r7, pc}

08005478 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005478:	b580      	push	{r7, lr}
 800547a:	b084      	sub	sp, #16
 800547c:	af00      	add	r7, sp, #0
 800547e:	6078      	str	r0, [r7, #4]
 8005480:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005482:	2300      	movs	r3, #0
 8005484:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800548c:	2b01      	cmp	r3, #1
 800548e:	d101      	bne.n	8005494 <HAL_TIM_ConfigClockSource+0x1c>
 8005490:	2302      	movs	r3, #2
 8005492:	e0b4      	b.n	80055fe <HAL_TIM_ConfigClockSource+0x186>
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2201      	movs	r2, #1
 8005498:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2202      	movs	r2, #2
 80054a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80054ac:	68bb      	ldr	r3, [r7, #8]
 80054ae:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80054b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80054ba:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	68ba      	ldr	r2, [r7, #8]
 80054c2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054cc:	d03e      	beq.n	800554c <HAL_TIM_ConfigClockSource+0xd4>
 80054ce:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80054d2:	f200 8087 	bhi.w	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054d6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054da:	f000 8086 	beq.w	80055ea <HAL_TIM_ConfigClockSource+0x172>
 80054de:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80054e2:	d87f      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054e4:	2b70      	cmp	r3, #112	; 0x70
 80054e6:	d01a      	beq.n	800551e <HAL_TIM_ConfigClockSource+0xa6>
 80054e8:	2b70      	cmp	r3, #112	; 0x70
 80054ea:	d87b      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054ec:	2b60      	cmp	r3, #96	; 0x60
 80054ee:	d050      	beq.n	8005592 <HAL_TIM_ConfigClockSource+0x11a>
 80054f0:	2b60      	cmp	r3, #96	; 0x60
 80054f2:	d877      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054f4:	2b50      	cmp	r3, #80	; 0x50
 80054f6:	d03c      	beq.n	8005572 <HAL_TIM_ConfigClockSource+0xfa>
 80054f8:	2b50      	cmp	r3, #80	; 0x50
 80054fa:	d873      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 80054fc:	2b40      	cmp	r3, #64	; 0x40
 80054fe:	d058      	beq.n	80055b2 <HAL_TIM_ConfigClockSource+0x13a>
 8005500:	2b40      	cmp	r3, #64	; 0x40
 8005502:	d86f      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005504:	2b30      	cmp	r3, #48	; 0x30
 8005506:	d064      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005508:	2b30      	cmp	r3, #48	; 0x30
 800550a:	d86b      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 800550c:	2b20      	cmp	r3, #32
 800550e:	d060      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005510:	2b20      	cmp	r3, #32
 8005512:	d867      	bhi.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
 8005514:	2b00      	cmp	r3, #0
 8005516:	d05c      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 8005518:	2b10      	cmp	r3, #16
 800551a:	d05a      	beq.n	80055d2 <HAL_TIM_ConfigClockSource+0x15a>
 800551c:	e062      	b.n	80055e4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800551e:	687b      	ldr	r3, [r7, #4]
 8005520:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005522:	683b      	ldr	r3, [r7, #0]
 8005524:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005526:	683b      	ldr	r3, [r7, #0]
 8005528:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800552a:	683b      	ldr	r3, [r7, #0]
 800552c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800552e:	f000 fb69 	bl	8005c04 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	689b      	ldr	r3, [r3, #8]
 8005538:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005540:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	68ba      	ldr	r2, [r7, #8]
 8005548:	609a      	str	r2, [r3, #8]
      break;
 800554a:	e04f      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005550:	683b      	ldr	r3, [r7, #0]
 8005552:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8005554:	683b      	ldr	r3, [r7, #0]
 8005556:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005558:	683b      	ldr	r3, [r7, #0]
 800555a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800555c:	f000 fb52 	bl	8005c04 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	681b      	ldr	r3, [r3, #0]
 8005564:	689a      	ldr	r2, [r3, #8]
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	681b      	ldr	r3, [r3, #0]
 800556a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800556e:	609a      	str	r2, [r3, #8]
      break;
 8005570:	e03c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005576:	683b      	ldr	r3, [r7, #0]
 8005578:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800557e:	461a      	mov	r2, r3
 8005580:	f000 fac6 	bl	8005b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	681b      	ldr	r3, [r3, #0]
 8005588:	2150      	movs	r1, #80	; 0x50
 800558a:	4618      	mov	r0, r3
 800558c:	f000 fb1f 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 8005590:	e02c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8005596:	683b      	ldr	r3, [r7, #0]
 8005598:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800559a:	683b      	ldr	r3, [r7, #0]
 800559c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800559e:	461a      	mov	r2, r3
 80055a0:	f000 fae5 	bl	8005b6e <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	2160      	movs	r1, #96	; 0x60
 80055aa:	4618      	mov	r0, r3
 80055ac:	f000 fb0f 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 80055b0:	e01c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80055b6:	683b      	ldr	r3, [r7, #0]
 80055b8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80055ba:	683b      	ldr	r3, [r7, #0]
 80055bc:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80055be:	461a      	mov	r2, r3
 80055c0:	f000 faa6 	bl	8005b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	2140      	movs	r1, #64	; 0x40
 80055ca:	4618      	mov	r0, r3
 80055cc:	f000 faff 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 80055d0:	e00c      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681a      	ldr	r2, [r3, #0]
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	681b      	ldr	r3, [r3, #0]
 80055da:	4619      	mov	r1, r3
 80055dc:	4610      	mov	r0, r2
 80055de:	f000 faf6 	bl	8005bce <TIM_ITRx_SetConfig>
      break;
 80055e2:	e003      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	73fb      	strb	r3, [r7, #15]
      break;
 80055e8:	e000      	b.n	80055ec <HAL_TIM_ConfigClockSource+0x174>
      break;
 80055ea:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	2200      	movs	r2, #0
 80055f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80055fc:	7bfb      	ldrb	r3, [r7, #15]
}
 80055fe:	4618      	mov	r0, r3
 8005600:	3710      	adds	r7, #16
 8005602:	46bd      	mov	sp, r7
 8005604:	bd80      	pop	{r7, pc}

08005606 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005606:	b480      	push	{r7}
 8005608:	b083      	sub	sp, #12
 800560a:	af00      	add	r7, sp, #0
 800560c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800560e:	bf00      	nop
 8005610:	370c      	adds	r7, #12
 8005612:	46bd      	mov	sp, r7
 8005614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005618:	4770      	bx	lr

0800561a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800561a:	b480      	push	{r7}
 800561c:	b083      	sub	sp, #12
 800561e:	af00      	add	r7, sp, #0
 8005620:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005622:	bf00      	nop
 8005624:	370c      	adds	r7, #12
 8005626:	46bd      	mov	sp, r7
 8005628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800562c:	4770      	bx	lr

0800562e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800562e:	b480      	push	{r7}
 8005630:	b083      	sub	sp, #12
 8005632:	af00      	add	r7, sp, #0
 8005634:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005636:	bf00      	nop
 8005638:	370c      	adds	r7, #12
 800563a:	46bd      	mov	sp, r7
 800563c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005640:	4770      	bx	lr

08005642 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005642:	b480      	push	{r7}
 8005644:	b083      	sub	sp, #12
 8005646:	af00      	add	r7, sp, #0
 8005648:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800564a:	bf00      	nop
 800564c:	370c      	adds	r7, #12
 800564e:	46bd      	mov	sp, r7
 8005650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005654:	4770      	bx	lr
	...

08005658 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005658:	b480      	push	{r7}
 800565a:	b085      	sub	sp, #20
 800565c:	af00      	add	r7, sp, #0
 800565e:	6078      	str	r0, [r7, #4]
 8005660:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	4a46      	ldr	r2, [pc, #280]	; (8005784 <TIM_Base_SetConfig+0x12c>)
 800566c:	4293      	cmp	r3, r2
 800566e:	d013      	beq.n	8005698 <TIM_Base_SetConfig+0x40>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005676:	d00f      	beq.n	8005698 <TIM_Base_SetConfig+0x40>
 8005678:	687b      	ldr	r3, [r7, #4]
 800567a:	4a43      	ldr	r2, [pc, #268]	; (8005788 <TIM_Base_SetConfig+0x130>)
 800567c:	4293      	cmp	r3, r2
 800567e:	d00b      	beq.n	8005698 <TIM_Base_SetConfig+0x40>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	4a42      	ldr	r2, [pc, #264]	; (800578c <TIM_Base_SetConfig+0x134>)
 8005684:	4293      	cmp	r3, r2
 8005686:	d007      	beq.n	8005698 <TIM_Base_SetConfig+0x40>
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	4a41      	ldr	r2, [pc, #260]	; (8005790 <TIM_Base_SetConfig+0x138>)
 800568c:	4293      	cmp	r3, r2
 800568e:	d003      	beq.n	8005698 <TIM_Base_SetConfig+0x40>
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	4a40      	ldr	r2, [pc, #256]	; (8005794 <TIM_Base_SetConfig+0x13c>)
 8005694:	4293      	cmp	r3, r2
 8005696:	d108      	bne.n	80056aa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800569e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80056a0:	683b      	ldr	r3, [r7, #0]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	68fa      	ldr	r2, [r7, #12]
 80056a6:	4313      	orrs	r3, r2
 80056a8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	4a35      	ldr	r2, [pc, #212]	; (8005784 <TIM_Base_SetConfig+0x12c>)
 80056ae:	4293      	cmp	r3, r2
 80056b0:	d02b      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80056b8:	d027      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	4a32      	ldr	r2, [pc, #200]	; (8005788 <TIM_Base_SetConfig+0x130>)
 80056be:	4293      	cmp	r3, r2
 80056c0:	d023      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	4a31      	ldr	r2, [pc, #196]	; (800578c <TIM_Base_SetConfig+0x134>)
 80056c6:	4293      	cmp	r3, r2
 80056c8:	d01f      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056ca:	687b      	ldr	r3, [r7, #4]
 80056cc:	4a30      	ldr	r2, [pc, #192]	; (8005790 <TIM_Base_SetConfig+0x138>)
 80056ce:	4293      	cmp	r3, r2
 80056d0:	d01b      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	4a2f      	ldr	r2, [pc, #188]	; (8005794 <TIM_Base_SetConfig+0x13c>)
 80056d6:	4293      	cmp	r3, r2
 80056d8:	d017      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	4a2e      	ldr	r2, [pc, #184]	; (8005798 <TIM_Base_SetConfig+0x140>)
 80056de:	4293      	cmp	r3, r2
 80056e0:	d013      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	4a2d      	ldr	r2, [pc, #180]	; (800579c <TIM_Base_SetConfig+0x144>)
 80056e6:	4293      	cmp	r3, r2
 80056e8:	d00f      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	4a2c      	ldr	r2, [pc, #176]	; (80057a0 <TIM_Base_SetConfig+0x148>)
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d00b      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	4a2b      	ldr	r2, [pc, #172]	; (80057a4 <TIM_Base_SetConfig+0x14c>)
 80056f6:	4293      	cmp	r3, r2
 80056f8:	d007      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	4a2a      	ldr	r2, [pc, #168]	; (80057a8 <TIM_Base_SetConfig+0x150>)
 80056fe:	4293      	cmp	r3, r2
 8005700:	d003      	beq.n	800570a <TIM_Base_SetConfig+0xb2>
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	4a29      	ldr	r2, [pc, #164]	; (80057ac <TIM_Base_SetConfig+0x154>)
 8005706:	4293      	cmp	r3, r2
 8005708:	d108      	bne.n	800571c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800570a:	68fb      	ldr	r3, [r7, #12]
 800570c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005710:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005712:	683b      	ldr	r3, [r7, #0]
 8005714:	68db      	ldr	r3, [r3, #12]
 8005716:	68fa      	ldr	r2, [r7, #12]
 8005718:	4313      	orrs	r3, r2
 800571a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005722:	683b      	ldr	r3, [r7, #0]
 8005724:	695b      	ldr	r3, [r3, #20]
 8005726:	4313      	orrs	r3, r2
 8005728:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	68fa      	ldr	r2, [r7, #12]
 800572e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005730:	683b      	ldr	r3, [r7, #0]
 8005732:	689a      	ldr	r2, [r3, #8]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005738:	683b      	ldr	r3, [r7, #0]
 800573a:	681a      	ldr	r2, [r3, #0]
 800573c:	687b      	ldr	r3, [r7, #4]
 800573e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	4a10      	ldr	r2, [pc, #64]	; (8005784 <TIM_Base_SetConfig+0x12c>)
 8005744:	4293      	cmp	r3, r2
 8005746:	d003      	beq.n	8005750 <TIM_Base_SetConfig+0xf8>
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	4a12      	ldr	r2, [pc, #72]	; (8005794 <TIM_Base_SetConfig+0x13c>)
 800574c:	4293      	cmp	r3, r2
 800574e:	d103      	bne.n	8005758 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005750:	683b      	ldr	r3, [r7, #0]
 8005752:	691a      	ldr	r2, [r3, #16]
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2201      	movs	r2, #1
 800575c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	f003 0301 	and.w	r3, r3, #1
 8005766:	2b01      	cmp	r3, #1
 8005768:	d105      	bne.n	8005776 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691b      	ldr	r3, [r3, #16]
 800576e:	f023 0201 	bic.w	r2, r3, #1
 8005772:	687b      	ldr	r3, [r7, #4]
 8005774:	611a      	str	r2, [r3, #16]
  }
}
 8005776:	bf00      	nop
 8005778:	3714      	adds	r7, #20
 800577a:	46bd      	mov	sp, r7
 800577c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005780:	4770      	bx	lr
 8005782:	bf00      	nop
 8005784:	40010000 	.word	0x40010000
 8005788:	40000400 	.word	0x40000400
 800578c:	40000800 	.word	0x40000800
 8005790:	40000c00 	.word	0x40000c00
 8005794:	40010400 	.word	0x40010400
 8005798:	40014000 	.word	0x40014000
 800579c:	40014400 	.word	0x40014400
 80057a0:	40014800 	.word	0x40014800
 80057a4:	40001800 	.word	0x40001800
 80057a8:	40001c00 	.word	0x40001c00
 80057ac:	40002000 	.word	0x40002000

080057b0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80057b0:	b480      	push	{r7}
 80057b2:	b087      	sub	sp, #28
 80057b4:	af00      	add	r7, sp, #0
 80057b6:	6078      	str	r0, [r7, #4]
 80057b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	6a1b      	ldr	r3, [r3, #32]
 80057be:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	6a1b      	ldr	r3, [r3, #32]
 80057c4:	f023 0201 	bic.w	r2, r3, #1
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	685b      	ldr	r3, [r3, #4]
 80057d0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	699b      	ldr	r3, [r3, #24]
 80057d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	f023 0303 	bic.w	r3, r3, #3
 80057e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80057e8:	683b      	ldr	r3, [r7, #0]
 80057ea:	681b      	ldr	r3, [r3, #0]
 80057ec:	68fa      	ldr	r2, [r7, #12]
 80057ee:	4313      	orrs	r3, r2
 80057f0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80057f2:	697b      	ldr	r3, [r7, #20]
 80057f4:	f023 0302 	bic.w	r3, r3, #2
 80057f8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80057fa:	683b      	ldr	r3, [r7, #0]
 80057fc:	689b      	ldr	r3, [r3, #8]
 80057fe:	697a      	ldr	r2, [r7, #20]
 8005800:	4313      	orrs	r3, r2
 8005802:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	4a20      	ldr	r2, [pc, #128]	; (8005888 <TIM_OC1_SetConfig+0xd8>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d003      	beq.n	8005814 <TIM_OC1_SetConfig+0x64>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	4a1f      	ldr	r2, [pc, #124]	; (800588c <TIM_OC1_SetConfig+0xdc>)
 8005810:	4293      	cmp	r3, r2
 8005812:	d10c      	bne.n	800582e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005814:	697b      	ldr	r3, [r7, #20]
 8005816:	f023 0308 	bic.w	r3, r3, #8
 800581a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	697a      	ldr	r2, [r7, #20]
 8005822:	4313      	orrs	r3, r2
 8005824:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005826:	697b      	ldr	r3, [r7, #20]
 8005828:	f023 0304 	bic.w	r3, r3, #4
 800582c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	4a15      	ldr	r2, [pc, #84]	; (8005888 <TIM_OC1_SetConfig+0xd8>)
 8005832:	4293      	cmp	r3, r2
 8005834:	d003      	beq.n	800583e <TIM_OC1_SetConfig+0x8e>
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	4a14      	ldr	r2, [pc, #80]	; (800588c <TIM_OC1_SetConfig+0xdc>)
 800583a:	4293      	cmp	r3, r2
 800583c:	d111      	bne.n	8005862 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800583e:	693b      	ldr	r3, [r7, #16]
 8005840:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005844:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005846:	693b      	ldr	r3, [r7, #16]
 8005848:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800584c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800584e:	683b      	ldr	r3, [r7, #0]
 8005850:	695b      	ldr	r3, [r3, #20]
 8005852:	693a      	ldr	r2, [r7, #16]
 8005854:	4313      	orrs	r3, r2
 8005856:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	699b      	ldr	r3, [r3, #24]
 800585c:	693a      	ldr	r2, [r7, #16]
 800585e:	4313      	orrs	r3, r2
 8005860:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005862:	687b      	ldr	r3, [r7, #4]
 8005864:	693a      	ldr	r2, [r7, #16]
 8005866:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	68fa      	ldr	r2, [r7, #12]
 800586c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800586e:	683b      	ldr	r3, [r7, #0]
 8005870:	685a      	ldr	r2, [r3, #4]
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	697a      	ldr	r2, [r7, #20]
 800587a:	621a      	str	r2, [r3, #32]
}
 800587c:	bf00      	nop
 800587e:	371c      	adds	r7, #28
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr
 8005888:	40010000 	.word	0x40010000
 800588c:	40010400 	.word	0x40010400

08005890 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005890:	b480      	push	{r7}
 8005892:	b087      	sub	sp, #28
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
 8005898:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	6a1b      	ldr	r3, [r3, #32]
 800589e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	6a1b      	ldr	r3, [r3, #32]
 80058a4:	f023 0210 	bic.w	r2, r3, #16
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	685b      	ldr	r3, [r3, #4]
 80058b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	699b      	ldr	r3, [r3, #24]
 80058b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80058b8:	68fb      	ldr	r3, [r7, #12]
 80058ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80058be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80058c8:	683b      	ldr	r3, [r7, #0]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	021b      	lsls	r3, r3, #8
 80058ce:	68fa      	ldr	r2, [r7, #12]
 80058d0:	4313      	orrs	r3, r2
 80058d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80058d4:	697b      	ldr	r3, [r7, #20]
 80058d6:	f023 0320 	bic.w	r3, r3, #32
 80058da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	011b      	lsls	r3, r3, #4
 80058e2:	697a      	ldr	r2, [r7, #20]
 80058e4:	4313      	orrs	r3, r2
 80058e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	4a22      	ldr	r2, [pc, #136]	; (8005974 <TIM_OC2_SetConfig+0xe4>)
 80058ec:	4293      	cmp	r3, r2
 80058ee:	d003      	beq.n	80058f8 <TIM_OC2_SetConfig+0x68>
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	4a21      	ldr	r2, [pc, #132]	; (8005978 <TIM_OC2_SetConfig+0xe8>)
 80058f4:	4293      	cmp	r3, r2
 80058f6:	d10d      	bne.n	8005914 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80058f8:	697b      	ldr	r3, [r7, #20]
 80058fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80058fe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005900:	683b      	ldr	r3, [r7, #0]
 8005902:	68db      	ldr	r3, [r3, #12]
 8005904:	011b      	lsls	r3, r3, #4
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800590c:	697b      	ldr	r3, [r7, #20]
 800590e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005912:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a17      	ldr	r2, [pc, #92]	; (8005974 <TIM_OC2_SetConfig+0xe4>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d003      	beq.n	8005924 <TIM_OC2_SetConfig+0x94>
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	4a16      	ldr	r2, [pc, #88]	; (8005978 <TIM_OC2_SetConfig+0xe8>)
 8005920:	4293      	cmp	r3, r2
 8005922:	d113      	bne.n	800594c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005924:	693b      	ldr	r3, [r7, #16]
 8005926:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800592a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800592c:	693b      	ldr	r3, [r7, #16]
 800592e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005932:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	695b      	ldr	r3, [r3, #20]
 8005938:	009b      	lsls	r3, r3, #2
 800593a:	693a      	ldr	r2, [r7, #16]
 800593c:	4313      	orrs	r3, r2
 800593e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	699b      	ldr	r3, [r3, #24]
 8005944:	009b      	lsls	r3, r3, #2
 8005946:	693a      	ldr	r2, [r7, #16]
 8005948:	4313      	orrs	r3, r2
 800594a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	693a      	ldr	r2, [r7, #16]
 8005950:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	68fa      	ldr	r2, [r7, #12]
 8005956:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005958:	683b      	ldr	r3, [r7, #0]
 800595a:	685a      	ldr	r2, [r3, #4]
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	697a      	ldr	r2, [r7, #20]
 8005964:	621a      	str	r2, [r3, #32]
}
 8005966:	bf00      	nop
 8005968:	371c      	adds	r7, #28
 800596a:	46bd      	mov	sp, r7
 800596c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005970:	4770      	bx	lr
 8005972:	bf00      	nop
 8005974:	40010000 	.word	0x40010000
 8005978:	40010400 	.word	0x40010400

0800597c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800597c:	b480      	push	{r7}
 800597e:	b087      	sub	sp, #28
 8005980:	af00      	add	r7, sp, #0
 8005982:	6078      	str	r0, [r7, #4]
 8005984:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	6a1b      	ldr	r3, [r3, #32]
 800598a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	6a1b      	ldr	r3, [r3, #32]
 8005990:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	685b      	ldr	r3, [r3, #4]
 800599c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	69db      	ldr	r3, [r3, #28]
 80059a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80059ac:	68fb      	ldr	r3, [r7, #12]
 80059ae:	f023 0303 	bic.w	r3, r3, #3
 80059b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059b4:	683b      	ldr	r3, [r7, #0]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	68fa      	ldr	r2, [r7, #12]
 80059ba:	4313      	orrs	r3, r2
 80059bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80059c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	689b      	ldr	r3, [r3, #8]
 80059ca:	021b      	lsls	r3, r3, #8
 80059cc:	697a      	ldr	r2, [r7, #20]
 80059ce:	4313      	orrs	r3, r2
 80059d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	4a21      	ldr	r2, [pc, #132]	; (8005a5c <TIM_OC3_SetConfig+0xe0>)
 80059d6:	4293      	cmp	r3, r2
 80059d8:	d003      	beq.n	80059e2 <TIM_OC3_SetConfig+0x66>
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	4a20      	ldr	r2, [pc, #128]	; (8005a60 <TIM_OC3_SetConfig+0xe4>)
 80059de:	4293      	cmp	r3, r2
 80059e0:	d10d      	bne.n	80059fe <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80059e2:	697b      	ldr	r3, [r7, #20]
 80059e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80059e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80059ea:	683b      	ldr	r3, [r7, #0]
 80059ec:	68db      	ldr	r3, [r3, #12]
 80059ee:	021b      	lsls	r3, r3, #8
 80059f0:	697a      	ldr	r2, [r7, #20]
 80059f2:	4313      	orrs	r3, r2
 80059f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80059f6:	697b      	ldr	r3, [r7, #20]
 80059f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80059fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	4a16      	ldr	r2, [pc, #88]	; (8005a5c <TIM_OC3_SetConfig+0xe0>)
 8005a02:	4293      	cmp	r3, r2
 8005a04:	d003      	beq.n	8005a0e <TIM_OC3_SetConfig+0x92>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	4a15      	ldr	r2, [pc, #84]	; (8005a60 <TIM_OC3_SetConfig+0xe4>)
 8005a0a:	4293      	cmp	r3, r2
 8005a0c:	d113      	bne.n	8005a36 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005a0e:	693b      	ldr	r3, [r7, #16]
 8005a10:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005a14:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005a16:	693b      	ldr	r3, [r7, #16]
 8005a18:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005a1c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005a1e:	683b      	ldr	r3, [r7, #0]
 8005a20:	695b      	ldr	r3, [r3, #20]
 8005a22:	011b      	lsls	r3, r3, #4
 8005a24:	693a      	ldr	r2, [r7, #16]
 8005a26:	4313      	orrs	r3, r2
 8005a28:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005a2a:	683b      	ldr	r3, [r7, #0]
 8005a2c:	699b      	ldr	r3, [r3, #24]
 8005a2e:	011b      	lsls	r3, r3, #4
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	693a      	ldr	r2, [r7, #16]
 8005a3a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005a3c:	687b      	ldr	r3, [r7, #4]
 8005a3e:	68fa      	ldr	r2, [r7, #12]
 8005a40:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005a42:	683b      	ldr	r3, [r7, #0]
 8005a44:	685a      	ldr	r2, [r3, #4]
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	697a      	ldr	r2, [r7, #20]
 8005a4e:	621a      	str	r2, [r3, #32]
}
 8005a50:	bf00      	nop
 8005a52:	371c      	adds	r7, #28
 8005a54:	46bd      	mov	sp, r7
 8005a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a5a:	4770      	bx	lr
 8005a5c:	40010000 	.word	0x40010000
 8005a60:	40010400 	.word	0x40010400

08005a64 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a64:	b480      	push	{r7}
 8005a66:	b087      	sub	sp, #28
 8005a68:	af00      	add	r7, sp, #0
 8005a6a:	6078      	str	r0, [r7, #4]
 8005a6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	6a1b      	ldr	r3, [r3, #32]
 8005a78:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a7c:	687b      	ldr	r3, [r7, #4]
 8005a7e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	685b      	ldr	r3, [r3, #4]
 8005a84:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005a8c:	68fb      	ldr	r3, [r7, #12]
 8005a8e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a92:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a9c:	683b      	ldr	r3, [r7, #0]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	021b      	lsls	r3, r3, #8
 8005aa2:	68fa      	ldr	r2, [r7, #12]
 8005aa4:	4313      	orrs	r3, r2
 8005aa6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005aa8:	693b      	ldr	r3, [r7, #16]
 8005aaa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005aae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005ab0:	683b      	ldr	r3, [r7, #0]
 8005ab2:	689b      	ldr	r3, [r3, #8]
 8005ab4:	031b      	lsls	r3, r3, #12
 8005ab6:	693a      	ldr	r2, [r7, #16]
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	4a12      	ldr	r2, [pc, #72]	; (8005b08 <TIM_OC4_SetConfig+0xa4>)
 8005ac0:	4293      	cmp	r3, r2
 8005ac2:	d003      	beq.n	8005acc <TIM_OC4_SetConfig+0x68>
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	4a11      	ldr	r2, [pc, #68]	; (8005b0c <TIM_OC4_SetConfig+0xa8>)
 8005ac8:	4293      	cmp	r3, r2
 8005aca:	d109      	bne.n	8005ae0 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005ad2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005ad4:	683b      	ldr	r3, [r7, #0]
 8005ad6:	695b      	ldr	r3, [r3, #20]
 8005ad8:	019b      	lsls	r3, r3, #6
 8005ada:	697a      	ldr	r2, [r7, #20]
 8005adc:	4313      	orrs	r3, r2
 8005ade:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	697a      	ldr	r2, [r7, #20]
 8005ae4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	68fa      	ldr	r2, [r7, #12]
 8005aea:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	685a      	ldr	r2, [r3, #4]
 8005af0:	687b      	ldr	r3, [r7, #4]
 8005af2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	693a      	ldr	r2, [r7, #16]
 8005af8:	621a      	str	r2, [r3, #32]
}
 8005afa:	bf00      	nop
 8005afc:	371c      	adds	r7, #28
 8005afe:	46bd      	mov	sp, r7
 8005b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b04:	4770      	bx	lr
 8005b06:	bf00      	nop
 8005b08:	40010000 	.word	0x40010000
 8005b0c:	40010400 	.word	0x40010400

08005b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b10:	b480      	push	{r7}
 8005b12:	b087      	sub	sp, #28
 8005b14:	af00      	add	r7, sp, #0
 8005b16:	60f8      	str	r0, [r7, #12]
 8005b18:	60b9      	str	r1, [r7, #8]
 8005b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	6a1b      	ldr	r3, [r3, #32]
 8005b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	6a1b      	ldr	r3, [r3, #32]
 8005b26:	f023 0201 	bic.w	r2, r3, #1
 8005b2a:	68fb      	ldr	r3, [r7, #12]
 8005b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	699b      	ldr	r3, [r3, #24]
 8005b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005b34:	693b      	ldr	r3, [r7, #16]
 8005b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	011b      	lsls	r3, r3, #4
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	4313      	orrs	r3, r2
 8005b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005b46:	697b      	ldr	r3, [r7, #20]
 8005b48:	f023 030a 	bic.w	r3, r3, #10
 8005b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005b4e:	697a      	ldr	r2, [r7, #20]
 8005b50:	68bb      	ldr	r3, [r7, #8]
 8005b52:	4313      	orrs	r3, r2
 8005b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	693a      	ldr	r2, [r7, #16]
 8005b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005b5c:	68fb      	ldr	r3, [r7, #12]
 8005b5e:	697a      	ldr	r2, [r7, #20]
 8005b60:	621a      	str	r2, [r3, #32]
}
 8005b62:	bf00      	nop
 8005b64:	371c      	adds	r7, #28
 8005b66:	46bd      	mov	sp, r7
 8005b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6c:	4770      	bx	lr

08005b6e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005b6e:	b480      	push	{r7}
 8005b70:	b087      	sub	sp, #28
 8005b72:	af00      	add	r7, sp, #0
 8005b74:	60f8      	str	r0, [r7, #12]
 8005b76:	60b9      	str	r1, [r7, #8]
 8005b78:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005b7a:	68fb      	ldr	r3, [r7, #12]
 8005b7c:	6a1b      	ldr	r3, [r3, #32]
 8005b7e:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	6a1b      	ldr	r3, [r3, #32]
 8005b84:	f023 0210 	bic.w	r2, r3, #16
 8005b88:	68fb      	ldr	r3, [r7, #12]
 8005b8a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005b8c:	68fb      	ldr	r3, [r7, #12]
 8005b8e:	699b      	ldr	r3, [r3, #24]
 8005b90:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005b92:	693b      	ldr	r3, [r7, #16]
 8005b94:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005b98:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	031b      	lsls	r3, r3, #12
 8005b9e:	693a      	ldr	r2, [r7, #16]
 8005ba0:	4313      	orrs	r3, r2
 8005ba2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005baa:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005bac:	68bb      	ldr	r3, [r7, #8]
 8005bae:	011b      	lsls	r3, r3, #4
 8005bb0:	697a      	ldr	r2, [r7, #20]
 8005bb2:	4313      	orrs	r3, r2
 8005bb4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	693a      	ldr	r2, [r7, #16]
 8005bba:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005bbc:	68fb      	ldr	r3, [r7, #12]
 8005bbe:	697a      	ldr	r2, [r7, #20]
 8005bc0:	621a      	str	r2, [r3, #32]
}
 8005bc2:	bf00      	nop
 8005bc4:	371c      	adds	r7, #28
 8005bc6:	46bd      	mov	sp, r7
 8005bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bcc:	4770      	bx	lr

08005bce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005bce:	b480      	push	{r7}
 8005bd0:	b085      	sub	sp, #20
 8005bd2:	af00      	add	r7, sp, #0
 8005bd4:	6078      	str	r0, [r7, #4]
 8005bd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	689b      	ldr	r3, [r3, #8]
 8005bdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005bde:	68fb      	ldr	r3, [r7, #12]
 8005be0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005be4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005be6:	683a      	ldr	r2, [r7, #0]
 8005be8:	68fb      	ldr	r3, [r7, #12]
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f043 0307 	orr.w	r3, r3, #7
 8005bf0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	68fa      	ldr	r2, [r7, #12]
 8005bf6:	609a      	str	r2, [r3, #8]
}
 8005bf8:	bf00      	nop
 8005bfa:	3714      	adds	r7, #20
 8005bfc:	46bd      	mov	sp, r7
 8005bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c02:	4770      	bx	lr

08005c04 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	60f8      	str	r0, [r7, #12]
 8005c0c:	60b9      	str	r1, [r7, #8]
 8005c0e:	607a      	str	r2, [r7, #4]
 8005c10:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	689b      	ldr	r3, [r3, #8]
 8005c16:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005c18:	697b      	ldr	r3, [r7, #20]
 8005c1a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005c1e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005c20:	683b      	ldr	r3, [r7, #0]
 8005c22:	021a      	lsls	r2, r3, #8
 8005c24:	687b      	ldr	r3, [r7, #4]
 8005c26:	431a      	orrs	r2, r3
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	4313      	orrs	r3, r2
 8005c2c:	697a      	ldr	r2, [r7, #20]
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	697a      	ldr	r2, [r7, #20]
 8005c36:	609a      	str	r2, [r3, #8]
}
 8005c38:	bf00      	nop
 8005c3a:	371c      	adds	r7, #28
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b087      	sub	sp, #28
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	60f8      	str	r0, [r7, #12]
 8005c4c:	60b9      	str	r1, [r7, #8]
 8005c4e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005c50:	68bb      	ldr	r3, [r7, #8]
 8005c52:	f003 031f 	and.w	r3, r3, #31
 8005c56:	2201      	movs	r2, #1
 8005c58:	fa02 f303 	lsl.w	r3, r2, r3
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	6a1a      	ldr	r2, [r3, #32]
 8005c62:	697b      	ldr	r3, [r7, #20]
 8005c64:	43db      	mvns	r3, r3
 8005c66:	401a      	ands	r2, r3
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	6a1a      	ldr	r2, [r3, #32]
 8005c70:	68bb      	ldr	r3, [r7, #8]
 8005c72:	f003 031f 	and.w	r3, r3, #31
 8005c76:	6879      	ldr	r1, [r7, #4]
 8005c78:	fa01 f303 	lsl.w	r3, r1, r3
 8005c7c:	431a      	orrs	r2, r3
 8005c7e:	68fb      	ldr	r3, [r7, #12]
 8005c80:	621a      	str	r2, [r3, #32]
}
 8005c82:	bf00      	nop
 8005c84:	371c      	adds	r7, #28
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr
	...

08005c90 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005c90:	b480      	push	{r7}
 8005c92:	b085      	sub	sp, #20
 8005c94:	af00      	add	r7, sp, #0
 8005c96:	6078      	str	r0, [r7, #4]
 8005c98:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005ca0:	2b01      	cmp	r3, #1
 8005ca2:	d101      	bne.n	8005ca8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005ca4:	2302      	movs	r3, #2
 8005ca6:	e05a      	b.n	8005d5e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	2201      	movs	r2, #1
 8005cac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cb0:	687b      	ldr	r3, [r7, #4]
 8005cb2:	2202      	movs	r2, #2
 8005cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	681b      	ldr	r3, [r3, #0]
 8005cbc:	685b      	ldr	r3, [r3, #4]
 8005cbe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	689b      	ldr	r3, [r3, #8]
 8005cc6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005cc8:	68fb      	ldr	r3, [r7, #12]
 8005cca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005cce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005cd0:	683b      	ldr	r3, [r7, #0]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	68fa      	ldr	r2, [r7, #12]
 8005cd6:	4313      	orrs	r3, r2
 8005cd8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	68fa      	ldr	r2, [r7, #12]
 8005ce0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	681b      	ldr	r3, [r3, #0]
 8005ce6:	4a21      	ldr	r2, [pc, #132]	; (8005d6c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005ce8:	4293      	cmp	r3, r2
 8005cea:	d022      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cf4:	d01d      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	4a1d      	ldr	r2, [pc, #116]	; (8005d70 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005cfc:	4293      	cmp	r3, r2
 8005cfe:	d018      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	4a1b      	ldr	r2, [pc, #108]	; (8005d74 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005d06:	4293      	cmp	r3, r2
 8005d08:	d013      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	681b      	ldr	r3, [r3, #0]
 8005d0e:	4a1a      	ldr	r2, [pc, #104]	; (8005d78 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d00e      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	4a18      	ldr	r2, [pc, #96]	; (8005d7c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005d1a:	4293      	cmp	r3, r2
 8005d1c:	d009      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d1e:	687b      	ldr	r3, [r7, #4]
 8005d20:	681b      	ldr	r3, [r3, #0]
 8005d22:	4a17      	ldr	r2, [pc, #92]	; (8005d80 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005d24:	4293      	cmp	r3, r2
 8005d26:	d004      	beq.n	8005d32 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	4a15      	ldr	r2, [pc, #84]	; (8005d84 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005d2e:	4293      	cmp	r3, r2
 8005d30:	d10c      	bne.n	8005d4c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005d32:	68bb      	ldr	r3, [r7, #8]
 8005d34:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005d38:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005d3a:	683b      	ldr	r3, [r7, #0]
 8005d3c:	685b      	ldr	r3, [r3, #4]
 8005d3e:	68ba      	ldr	r2, [r7, #8]
 8005d40:	4313      	orrs	r3, r2
 8005d42:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	68ba      	ldr	r2, [r7, #8]
 8005d4a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2200      	movs	r2, #0
 8005d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d5c:	2300      	movs	r3, #0
}
 8005d5e:	4618      	mov	r0, r3
 8005d60:	3714      	adds	r7, #20
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr
 8005d6a:	bf00      	nop
 8005d6c:	40010000 	.word	0x40010000
 8005d70:	40000400 	.word	0x40000400
 8005d74:	40000800 	.word	0x40000800
 8005d78:	40000c00 	.word	0x40000c00
 8005d7c:	40010400 	.word	0x40010400
 8005d80:	40014000 	.word	0x40014000
 8005d84:	40001800 	.word	0x40001800

08005d88 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005d88:	b480      	push	{r7}
 8005d8a:	b085      	sub	sp, #20
 8005d8c:	af00      	add	r7, sp, #0
 8005d8e:	6078      	str	r0, [r7, #4]
 8005d90:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005d92:	2300      	movs	r3, #0
 8005d94:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d101      	bne.n	8005da4 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005da0:	2302      	movs	r3, #2
 8005da2:	e03d      	b.n	8005e20 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2201      	movs	r2, #1
 8005da8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005dac:	68fb      	ldr	r3, [r7, #12]
 8005dae:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8005db2:	683b      	ldr	r3, [r7, #0]
 8005db4:	68db      	ldr	r3, [r3, #12]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	4313      	orrs	r3, r2
 8005dc6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005dc8:	68fb      	ldr	r3, [r7, #12]
 8005dca:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005dce:	683b      	ldr	r3, [r7, #0]
 8005dd0:	685b      	ldr	r3, [r3, #4]
 8005dd2:	4313      	orrs	r3, r2
 8005dd4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005ddc:	683b      	ldr	r3, [r7, #0]
 8005dde:	681b      	ldr	r3, [r3, #0]
 8005de0:	4313      	orrs	r3, r2
 8005de2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005dea:	683b      	ldr	r3, [r7, #0]
 8005dec:	691b      	ldr	r3, [r3, #16]
 8005dee:	4313      	orrs	r3, r2
 8005df0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005df8:	683b      	ldr	r3, [r7, #0]
 8005dfa:	695b      	ldr	r3, [r3, #20]
 8005dfc:	4313      	orrs	r3, r2
 8005dfe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005e00:	68fb      	ldr	r3, [r7, #12]
 8005e02:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005e06:	683b      	ldr	r3, [r7, #0]
 8005e08:	69db      	ldr	r3, [r3, #28]
 8005e0a:	4313      	orrs	r3, r2
 8005e0c:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68fa      	ldr	r2, [r7, #12]
 8005e14:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2200      	movs	r2, #0
 8005e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005e1e:	2300      	movs	r3, #0
}
 8005e20:	4618      	mov	r0, r3
 8005e22:	3714      	adds	r7, #20
 8005e24:	46bd      	mov	sp, r7
 8005e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e2a:	4770      	bx	lr

08005e2c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005e2c:	b480      	push	{r7}
 8005e2e:	b083      	sub	sp, #12
 8005e30:	af00      	add	r7, sp, #0
 8005e32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005e34:	bf00      	nop
 8005e36:	370c      	adds	r7, #12
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3e:	4770      	bx	lr

08005e40 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005e48:	bf00      	nop
 8005e4a:	370c      	adds	r7, #12
 8005e4c:	46bd      	mov	sp, r7
 8005e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e52:	4770      	bx	lr

08005e54 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e54:	b580      	push	{r7, lr}
 8005e56:	b082      	sub	sp, #8
 8005e58:	af00      	add	r7, sp, #0
 8005e5a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d101      	bne.n	8005e66 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e62:	2301      	movs	r3, #1
 8005e64:	e042      	b.n	8005eec <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005e6c:	b2db      	uxtb	r3, r3
 8005e6e:	2b00      	cmp	r3, #0
 8005e70:	d106      	bne.n	8005e80 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005e7a:	6878      	ldr	r0, [r7, #4]
 8005e7c:	f7fc fc14 	bl	80026a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2224      	movs	r2, #36	; 0x24
 8005e84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	68da      	ldr	r2, [r3, #12]
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8005e96:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005e98:	6878      	ldr	r0, [r7, #4]
 8005e9a:	f000 f82b 	bl	8005ef4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	691a      	ldr	r2, [r3, #16]
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005eac:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	695a      	ldr	r2, [r3, #20]
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005ebc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	68da      	ldr	r2, [r3, #12]
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005ecc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	2200      	movs	r2, #0
 8005ed2:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2220      	movs	r2, #32
 8005ed8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	2220      	movs	r2, #32
 8005ee0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	2200      	movs	r2, #0
 8005ee8:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8005eea:	2300      	movs	r3, #0
}
 8005eec:	4618      	mov	r0, r3
 8005eee:	3708      	adds	r7, #8
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	bd80      	pop	{r7, pc}

08005ef4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ef4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ef8:	b0c0      	sub	sp, #256	; 0x100
 8005efa:	af00      	add	r7, sp, #0
 8005efc:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	691b      	ldr	r3, [r3, #16]
 8005f08:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005f0c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f10:	68d9      	ldr	r1, [r3, #12]
 8005f12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f16:	681a      	ldr	r2, [r3, #0]
 8005f18:	ea40 0301 	orr.w	r3, r0, r1
 8005f1c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005f1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f22:	689a      	ldr	r2, [r3, #8]
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f28:	691b      	ldr	r3, [r3, #16]
 8005f2a:	431a      	orrs	r2, r3
 8005f2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f30:	695b      	ldr	r3, [r3, #20]
 8005f32:	431a      	orrs	r2, r3
 8005f34:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f38:	69db      	ldr	r3, [r3, #28]
 8005f3a:	4313      	orrs	r3, r2
 8005f3c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f40:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	68db      	ldr	r3, [r3, #12]
 8005f48:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005f4c:	f021 010c 	bic.w	r1, r1, #12
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005f5a:	430b      	orrs	r3, r1
 8005f5c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f5e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	695b      	ldr	r3, [r3, #20]
 8005f66:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005f6a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f6e:	6999      	ldr	r1, [r3, #24]
 8005f70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f74:	681a      	ldr	r2, [r3, #0]
 8005f76:	ea40 0301 	orr.w	r3, r0, r1
 8005f7a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f80:	681a      	ldr	r2, [r3, #0]
 8005f82:	4b8f      	ldr	r3, [pc, #572]	; (80061c0 <UART_SetConfig+0x2cc>)
 8005f84:	429a      	cmp	r2, r3
 8005f86:	d005      	beq.n	8005f94 <UART_SetConfig+0xa0>
 8005f88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005f8c:	681a      	ldr	r2, [r3, #0]
 8005f8e:	4b8d      	ldr	r3, [pc, #564]	; (80061c4 <UART_SetConfig+0x2d0>)
 8005f90:	429a      	cmp	r2, r3
 8005f92:	d104      	bne.n	8005f9e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f94:	f7fe fe0a 	bl	8004bac <HAL_RCC_GetPCLK2Freq>
 8005f98:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005f9c:	e003      	b.n	8005fa6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f9e:	f7fe fdf1 	bl	8004b84 <HAL_RCC_GetPCLK1Freq>
 8005fa2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005fa6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005faa:	69db      	ldr	r3, [r3, #28]
 8005fac:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005fb0:	f040 810c 	bne.w	80061cc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005fb4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005fbe:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005fc2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005fc6:	4622      	mov	r2, r4
 8005fc8:	462b      	mov	r3, r5
 8005fca:	1891      	adds	r1, r2, r2
 8005fcc:	65b9      	str	r1, [r7, #88]	; 0x58
 8005fce:	415b      	adcs	r3, r3
 8005fd0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005fd2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005fd6:	4621      	mov	r1, r4
 8005fd8:	eb12 0801 	adds.w	r8, r2, r1
 8005fdc:	4629      	mov	r1, r5
 8005fde:	eb43 0901 	adc.w	r9, r3, r1
 8005fe2:	f04f 0200 	mov.w	r2, #0
 8005fe6:	f04f 0300 	mov.w	r3, #0
 8005fea:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fee:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005ff2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005ff6:	4690      	mov	r8, r2
 8005ff8:	4699      	mov	r9, r3
 8005ffa:	4623      	mov	r3, r4
 8005ffc:	eb18 0303 	adds.w	r3, r8, r3
 8006000:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8006004:	462b      	mov	r3, r5
 8006006:	eb49 0303 	adc.w	r3, r9, r3
 800600a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800600e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006012:	685b      	ldr	r3, [r3, #4]
 8006014:	2200      	movs	r2, #0
 8006016:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800601a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800601e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8006022:	460b      	mov	r3, r1
 8006024:	18db      	adds	r3, r3, r3
 8006026:	653b      	str	r3, [r7, #80]	; 0x50
 8006028:	4613      	mov	r3, r2
 800602a:	eb42 0303 	adc.w	r3, r2, r3
 800602e:	657b      	str	r3, [r7, #84]	; 0x54
 8006030:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006034:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006038:	f7fa fc28 	bl	800088c <__aeabi_uldivmod>
 800603c:	4602      	mov	r2, r0
 800603e:	460b      	mov	r3, r1
 8006040:	4b61      	ldr	r3, [pc, #388]	; (80061c8 <UART_SetConfig+0x2d4>)
 8006042:	fba3 2302 	umull	r2, r3, r3, r2
 8006046:	095b      	lsrs	r3, r3, #5
 8006048:	011c      	lsls	r4, r3, #4
 800604a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800604e:	2200      	movs	r2, #0
 8006050:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006054:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006058:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800605c:	4642      	mov	r2, r8
 800605e:	464b      	mov	r3, r9
 8006060:	1891      	adds	r1, r2, r2
 8006062:	64b9      	str	r1, [r7, #72]	; 0x48
 8006064:	415b      	adcs	r3, r3
 8006066:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006068:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800606c:	4641      	mov	r1, r8
 800606e:	eb12 0a01 	adds.w	sl, r2, r1
 8006072:	4649      	mov	r1, r9
 8006074:	eb43 0b01 	adc.w	fp, r3, r1
 8006078:	f04f 0200 	mov.w	r2, #0
 800607c:	f04f 0300 	mov.w	r3, #0
 8006080:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006084:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006088:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800608c:	4692      	mov	sl, r2
 800608e:	469b      	mov	fp, r3
 8006090:	4643      	mov	r3, r8
 8006092:	eb1a 0303 	adds.w	r3, sl, r3
 8006096:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800609a:	464b      	mov	r3, r9
 800609c:	eb4b 0303 	adc.w	r3, fp, r3
 80060a0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80060a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80060a8:	685b      	ldr	r3, [r3, #4]
 80060aa:	2200      	movs	r2, #0
 80060ac:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80060b0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80060b4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80060b8:	460b      	mov	r3, r1
 80060ba:	18db      	adds	r3, r3, r3
 80060bc:	643b      	str	r3, [r7, #64]	; 0x40
 80060be:	4613      	mov	r3, r2
 80060c0:	eb42 0303 	adc.w	r3, r2, r3
 80060c4:	647b      	str	r3, [r7, #68]	; 0x44
 80060c6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80060ca:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80060ce:	f7fa fbdd 	bl	800088c <__aeabi_uldivmod>
 80060d2:	4602      	mov	r2, r0
 80060d4:	460b      	mov	r3, r1
 80060d6:	4611      	mov	r1, r2
 80060d8:	4b3b      	ldr	r3, [pc, #236]	; (80061c8 <UART_SetConfig+0x2d4>)
 80060da:	fba3 2301 	umull	r2, r3, r3, r1
 80060de:	095b      	lsrs	r3, r3, #5
 80060e0:	2264      	movs	r2, #100	; 0x64
 80060e2:	fb02 f303 	mul.w	r3, r2, r3
 80060e6:	1acb      	subs	r3, r1, r3
 80060e8:	00db      	lsls	r3, r3, #3
 80060ea:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80060ee:	4b36      	ldr	r3, [pc, #216]	; (80061c8 <UART_SetConfig+0x2d4>)
 80060f0:	fba3 2302 	umull	r2, r3, r3, r2
 80060f4:	095b      	lsrs	r3, r3, #5
 80060f6:	005b      	lsls	r3, r3, #1
 80060f8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80060fc:	441c      	add	r4, r3
 80060fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006102:	2200      	movs	r2, #0
 8006104:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006108:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800610c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8006110:	4642      	mov	r2, r8
 8006112:	464b      	mov	r3, r9
 8006114:	1891      	adds	r1, r2, r2
 8006116:	63b9      	str	r1, [r7, #56]	; 0x38
 8006118:	415b      	adcs	r3, r3
 800611a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800611c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006120:	4641      	mov	r1, r8
 8006122:	1851      	adds	r1, r2, r1
 8006124:	6339      	str	r1, [r7, #48]	; 0x30
 8006126:	4649      	mov	r1, r9
 8006128:	414b      	adcs	r3, r1
 800612a:	637b      	str	r3, [r7, #52]	; 0x34
 800612c:	f04f 0200 	mov.w	r2, #0
 8006130:	f04f 0300 	mov.w	r3, #0
 8006134:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006138:	4659      	mov	r1, fp
 800613a:	00cb      	lsls	r3, r1, #3
 800613c:	4651      	mov	r1, sl
 800613e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006142:	4651      	mov	r1, sl
 8006144:	00ca      	lsls	r2, r1, #3
 8006146:	4610      	mov	r0, r2
 8006148:	4619      	mov	r1, r3
 800614a:	4603      	mov	r3, r0
 800614c:	4642      	mov	r2, r8
 800614e:	189b      	adds	r3, r3, r2
 8006150:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006154:	464b      	mov	r3, r9
 8006156:	460a      	mov	r2, r1
 8006158:	eb42 0303 	adc.w	r3, r2, r3
 800615c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006160:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006164:	685b      	ldr	r3, [r3, #4]
 8006166:	2200      	movs	r2, #0
 8006168:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800616c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006170:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006174:	460b      	mov	r3, r1
 8006176:	18db      	adds	r3, r3, r3
 8006178:	62bb      	str	r3, [r7, #40]	; 0x28
 800617a:	4613      	mov	r3, r2
 800617c:	eb42 0303 	adc.w	r3, r2, r3
 8006180:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006182:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006186:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800618a:	f7fa fb7f 	bl	800088c <__aeabi_uldivmod>
 800618e:	4602      	mov	r2, r0
 8006190:	460b      	mov	r3, r1
 8006192:	4b0d      	ldr	r3, [pc, #52]	; (80061c8 <UART_SetConfig+0x2d4>)
 8006194:	fba3 1302 	umull	r1, r3, r3, r2
 8006198:	095b      	lsrs	r3, r3, #5
 800619a:	2164      	movs	r1, #100	; 0x64
 800619c:	fb01 f303 	mul.w	r3, r1, r3
 80061a0:	1ad3      	subs	r3, r2, r3
 80061a2:	00db      	lsls	r3, r3, #3
 80061a4:	3332      	adds	r3, #50	; 0x32
 80061a6:	4a08      	ldr	r2, [pc, #32]	; (80061c8 <UART_SetConfig+0x2d4>)
 80061a8:	fba2 2303 	umull	r2, r3, r2, r3
 80061ac:	095b      	lsrs	r3, r3, #5
 80061ae:	f003 0207 	and.w	r2, r3, #7
 80061b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	4422      	add	r2, r4
 80061ba:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80061bc:	e106      	b.n	80063cc <UART_SetConfig+0x4d8>
 80061be:	bf00      	nop
 80061c0:	40011000 	.word	0x40011000
 80061c4:	40011400 	.word	0x40011400
 80061c8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80061d0:	2200      	movs	r2, #0
 80061d2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80061d6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80061da:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80061de:	4642      	mov	r2, r8
 80061e0:	464b      	mov	r3, r9
 80061e2:	1891      	adds	r1, r2, r2
 80061e4:	6239      	str	r1, [r7, #32]
 80061e6:	415b      	adcs	r3, r3
 80061e8:	627b      	str	r3, [r7, #36]	; 0x24
 80061ea:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061ee:	4641      	mov	r1, r8
 80061f0:	1854      	adds	r4, r2, r1
 80061f2:	4649      	mov	r1, r9
 80061f4:	eb43 0501 	adc.w	r5, r3, r1
 80061f8:	f04f 0200 	mov.w	r2, #0
 80061fc:	f04f 0300 	mov.w	r3, #0
 8006200:	00eb      	lsls	r3, r5, #3
 8006202:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006206:	00e2      	lsls	r2, r4, #3
 8006208:	4614      	mov	r4, r2
 800620a:	461d      	mov	r5, r3
 800620c:	4643      	mov	r3, r8
 800620e:	18e3      	adds	r3, r4, r3
 8006210:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006214:	464b      	mov	r3, r9
 8006216:	eb45 0303 	adc.w	r3, r5, r3
 800621a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800621e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006222:	685b      	ldr	r3, [r3, #4]
 8006224:	2200      	movs	r2, #0
 8006226:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800622a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800622e:	f04f 0200 	mov.w	r2, #0
 8006232:	f04f 0300 	mov.w	r3, #0
 8006236:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800623a:	4629      	mov	r1, r5
 800623c:	008b      	lsls	r3, r1, #2
 800623e:	4621      	mov	r1, r4
 8006240:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006244:	4621      	mov	r1, r4
 8006246:	008a      	lsls	r2, r1, #2
 8006248:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800624c:	f7fa fb1e 	bl	800088c <__aeabi_uldivmod>
 8006250:	4602      	mov	r2, r0
 8006252:	460b      	mov	r3, r1
 8006254:	4b60      	ldr	r3, [pc, #384]	; (80063d8 <UART_SetConfig+0x4e4>)
 8006256:	fba3 2302 	umull	r2, r3, r3, r2
 800625a:	095b      	lsrs	r3, r3, #5
 800625c:	011c      	lsls	r4, r3, #4
 800625e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006262:	2200      	movs	r2, #0
 8006264:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006268:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800626c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006270:	4642      	mov	r2, r8
 8006272:	464b      	mov	r3, r9
 8006274:	1891      	adds	r1, r2, r2
 8006276:	61b9      	str	r1, [r7, #24]
 8006278:	415b      	adcs	r3, r3
 800627a:	61fb      	str	r3, [r7, #28]
 800627c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006280:	4641      	mov	r1, r8
 8006282:	1851      	adds	r1, r2, r1
 8006284:	6139      	str	r1, [r7, #16]
 8006286:	4649      	mov	r1, r9
 8006288:	414b      	adcs	r3, r1
 800628a:	617b      	str	r3, [r7, #20]
 800628c:	f04f 0200 	mov.w	r2, #0
 8006290:	f04f 0300 	mov.w	r3, #0
 8006294:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006298:	4659      	mov	r1, fp
 800629a:	00cb      	lsls	r3, r1, #3
 800629c:	4651      	mov	r1, sl
 800629e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80062a2:	4651      	mov	r1, sl
 80062a4:	00ca      	lsls	r2, r1, #3
 80062a6:	4610      	mov	r0, r2
 80062a8:	4619      	mov	r1, r3
 80062aa:	4603      	mov	r3, r0
 80062ac:	4642      	mov	r2, r8
 80062ae:	189b      	adds	r3, r3, r2
 80062b0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80062b4:	464b      	mov	r3, r9
 80062b6:	460a      	mov	r2, r1
 80062b8:	eb42 0303 	adc.w	r3, r2, r3
 80062bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80062c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	2200      	movs	r2, #0
 80062c8:	67bb      	str	r3, [r7, #120]	; 0x78
 80062ca:	67fa      	str	r2, [r7, #124]	; 0x7c
 80062cc:	f04f 0200 	mov.w	r2, #0
 80062d0:	f04f 0300 	mov.w	r3, #0
 80062d4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80062d8:	4649      	mov	r1, r9
 80062da:	008b      	lsls	r3, r1, #2
 80062dc:	4641      	mov	r1, r8
 80062de:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062e2:	4641      	mov	r1, r8
 80062e4:	008a      	lsls	r2, r1, #2
 80062e6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80062ea:	f7fa facf 	bl	800088c <__aeabi_uldivmod>
 80062ee:	4602      	mov	r2, r0
 80062f0:	460b      	mov	r3, r1
 80062f2:	4611      	mov	r1, r2
 80062f4:	4b38      	ldr	r3, [pc, #224]	; (80063d8 <UART_SetConfig+0x4e4>)
 80062f6:	fba3 2301 	umull	r2, r3, r3, r1
 80062fa:	095b      	lsrs	r3, r3, #5
 80062fc:	2264      	movs	r2, #100	; 0x64
 80062fe:	fb02 f303 	mul.w	r3, r2, r3
 8006302:	1acb      	subs	r3, r1, r3
 8006304:	011b      	lsls	r3, r3, #4
 8006306:	3332      	adds	r3, #50	; 0x32
 8006308:	4a33      	ldr	r2, [pc, #204]	; (80063d8 <UART_SetConfig+0x4e4>)
 800630a:	fba2 2303 	umull	r2, r3, r2, r3
 800630e:	095b      	lsrs	r3, r3, #5
 8006310:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006314:	441c      	add	r4, r3
 8006316:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800631a:	2200      	movs	r2, #0
 800631c:	673b      	str	r3, [r7, #112]	; 0x70
 800631e:	677a      	str	r2, [r7, #116]	; 0x74
 8006320:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006324:	4642      	mov	r2, r8
 8006326:	464b      	mov	r3, r9
 8006328:	1891      	adds	r1, r2, r2
 800632a:	60b9      	str	r1, [r7, #8]
 800632c:	415b      	adcs	r3, r3
 800632e:	60fb      	str	r3, [r7, #12]
 8006330:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006334:	4641      	mov	r1, r8
 8006336:	1851      	adds	r1, r2, r1
 8006338:	6039      	str	r1, [r7, #0]
 800633a:	4649      	mov	r1, r9
 800633c:	414b      	adcs	r3, r1
 800633e:	607b      	str	r3, [r7, #4]
 8006340:	f04f 0200 	mov.w	r2, #0
 8006344:	f04f 0300 	mov.w	r3, #0
 8006348:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800634c:	4659      	mov	r1, fp
 800634e:	00cb      	lsls	r3, r1, #3
 8006350:	4651      	mov	r1, sl
 8006352:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006356:	4651      	mov	r1, sl
 8006358:	00ca      	lsls	r2, r1, #3
 800635a:	4610      	mov	r0, r2
 800635c:	4619      	mov	r1, r3
 800635e:	4603      	mov	r3, r0
 8006360:	4642      	mov	r2, r8
 8006362:	189b      	adds	r3, r3, r2
 8006364:	66bb      	str	r3, [r7, #104]	; 0x68
 8006366:	464b      	mov	r3, r9
 8006368:	460a      	mov	r2, r1
 800636a:	eb42 0303 	adc.w	r3, r2, r3
 800636e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	685b      	ldr	r3, [r3, #4]
 8006376:	2200      	movs	r2, #0
 8006378:	663b      	str	r3, [r7, #96]	; 0x60
 800637a:	667a      	str	r2, [r7, #100]	; 0x64
 800637c:	f04f 0200 	mov.w	r2, #0
 8006380:	f04f 0300 	mov.w	r3, #0
 8006384:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006388:	4649      	mov	r1, r9
 800638a:	008b      	lsls	r3, r1, #2
 800638c:	4641      	mov	r1, r8
 800638e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006392:	4641      	mov	r1, r8
 8006394:	008a      	lsls	r2, r1, #2
 8006396:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800639a:	f7fa fa77 	bl	800088c <__aeabi_uldivmod>
 800639e:	4602      	mov	r2, r0
 80063a0:	460b      	mov	r3, r1
 80063a2:	4b0d      	ldr	r3, [pc, #52]	; (80063d8 <UART_SetConfig+0x4e4>)
 80063a4:	fba3 1302 	umull	r1, r3, r3, r2
 80063a8:	095b      	lsrs	r3, r3, #5
 80063aa:	2164      	movs	r1, #100	; 0x64
 80063ac:	fb01 f303 	mul.w	r3, r1, r3
 80063b0:	1ad3      	subs	r3, r2, r3
 80063b2:	011b      	lsls	r3, r3, #4
 80063b4:	3332      	adds	r3, #50	; 0x32
 80063b6:	4a08      	ldr	r2, [pc, #32]	; (80063d8 <UART_SetConfig+0x4e4>)
 80063b8:	fba2 2303 	umull	r2, r3, r2, r3
 80063bc:	095b      	lsrs	r3, r3, #5
 80063be:	f003 020f 	and.w	r2, r3, #15
 80063c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	4422      	add	r2, r4
 80063ca:	609a      	str	r2, [r3, #8]
}
 80063cc:	bf00      	nop
 80063ce:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80063d2:	46bd      	mov	sp, r7
 80063d4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063d8:	51eb851f 	.word	0x51eb851f

080063dc <std>:
 80063dc:	2300      	movs	r3, #0
 80063de:	b510      	push	{r4, lr}
 80063e0:	4604      	mov	r4, r0
 80063e2:	e9c0 3300 	strd	r3, r3, [r0]
 80063e6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80063ea:	6083      	str	r3, [r0, #8]
 80063ec:	8181      	strh	r1, [r0, #12]
 80063ee:	6643      	str	r3, [r0, #100]	; 0x64
 80063f0:	81c2      	strh	r2, [r0, #14]
 80063f2:	6183      	str	r3, [r0, #24]
 80063f4:	4619      	mov	r1, r3
 80063f6:	2208      	movs	r2, #8
 80063f8:	305c      	adds	r0, #92	; 0x5c
 80063fa:	f000 f9f7 	bl	80067ec <memset>
 80063fe:	4b0d      	ldr	r3, [pc, #52]	; (8006434 <std+0x58>)
 8006400:	6263      	str	r3, [r4, #36]	; 0x24
 8006402:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <std+0x5c>)
 8006404:	62a3      	str	r3, [r4, #40]	; 0x28
 8006406:	4b0d      	ldr	r3, [pc, #52]	; (800643c <std+0x60>)
 8006408:	62e3      	str	r3, [r4, #44]	; 0x2c
 800640a:	4b0d      	ldr	r3, [pc, #52]	; (8006440 <std+0x64>)
 800640c:	6323      	str	r3, [r4, #48]	; 0x30
 800640e:	4b0d      	ldr	r3, [pc, #52]	; (8006444 <std+0x68>)
 8006410:	6224      	str	r4, [r4, #32]
 8006412:	429c      	cmp	r4, r3
 8006414:	d006      	beq.n	8006424 <std+0x48>
 8006416:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800641a:	4294      	cmp	r4, r2
 800641c:	d002      	beq.n	8006424 <std+0x48>
 800641e:	33d0      	adds	r3, #208	; 0xd0
 8006420:	429c      	cmp	r4, r3
 8006422:	d105      	bne.n	8006430 <std+0x54>
 8006424:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006428:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800642c:	f000 ba56 	b.w	80068dc <__retarget_lock_init_recursive>
 8006430:	bd10      	pop	{r4, pc}
 8006432:	bf00      	nop
 8006434:	0800663d 	.word	0x0800663d
 8006438:	0800665f 	.word	0x0800665f
 800643c:	08006697 	.word	0x08006697
 8006440:	080066bb 	.word	0x080066bb
 8006444:	20000600 	.word	0x20000600

08006448 <stdio_exit_handler>:
 8006448:	4a02      	ldr	r2, [pc, #8]	; (8006454 <stdio_exit_handler+0xc>)
 800644a:	4903      	ldr	r1, [pc, #12]	; (8006458 <stdio_exit_handler+0x10>)
 800644c:	4803      	ldr	r0, [pc, #12]	; (800645c <stdio_exit_handler+0x14>)
 800644e:	f000 b869 	b.w	8006524 <_fwalk_sglue>
 8006452:	bf00      	nop
 8006454:	2000010c 	.word	0x2000010c
 8006458:	08007189 	.word	0x08007189
 800645c:	20000118 	.word	0x20000118

08006460 <cleanup_stdio>:
 8006460:	6841      	ldr	r1, [r0, #4]
 8006462:	4b0c      	ldr	r3, [pc, #48]	; (8006494 <cleanup_stdio+0x34>)
 8006464:	4299      	cmp	r1, r3
 8006466:	b510      	push	{r4, lr}
 8006468:	4604      	mov	r4, r0
 800646a:	d001      	beq.n	8006470 <cleanup_stdio+0x10>
 800646c:	f000 fe8c 	bl	8007188 <_fflush_r>
 8006470:	68a1      	ldr	r1, [r4, #8]
 8006472:	4b09      	ldr	r3, [pc, #36]	; (8006498 <cleanup_stdio+0x38>)
 8006474:	4299      	cmp	r1, r3
 8006476:	d002      	beq.n	800647e <cleanup_stdio+0x1e>
 8006478:	4620      	mov	r0, r4
 800647a:	f000 fe85 	bl	8007188 <_fflush_r>
 800647e:	68e1      	ldr	r1, [r4, #12]
 8006480:	4b06      	ldr	r3, [pc, #24]	; (800649c <cleanup_stdio+0x3c>)
 8006482:	4299      	cmp	r1, r3
 8006484:	d004      	beq.n	8006490 <cleanup_stdio+0x30>
 8006486:	4620      	mov	r0, r4
 8006488:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800648c:	f000 be7c 	b.w	8007188 <_fflush_r>
 8006490:	bd10      	pop	{r4, pc}
 8006492:	bf00      	nop
 8006494:	20000600 	.word	0x20000600
 8006498:	20000668 	.word	0x20000668
 800649c:	200006d0 	.word	0x200006d0

080064a0 <global_stdio_init.part.0>:
 80064a0:	b510      	push	{r4, lr}
 80064a2:	4b0b      	ldr	r3, [pc, #44]	; (80064d0 <global_stdio_init.part.0+0x30>)
 80064a4:	4c0b      	ldr	r4, [pc, #44]	; (80064d4 <global_stdio_init.part.0+0x34>)
 80064a6:	4a0c      	ldr	r2, [pc, #48]	; (80064d8 <global_stdio_init.part.0+0x38>)
 80064a8:	601a      	str	r2, [r3, #0]
 80064aa:	4620      	mov	r0, r4
 80064ac:	2200      	movs	r2, #0
 80064ae:	2104      	movs	r1, #4
 80064b0:	f7ff ff94 	bl	80063dc <std>
 80064b4:	f104 0068 	add.w	r0, r4, #104	; 0x68
 80064b8:	2201      	movs	r2, #1
 80064ba:	2109      	movs	r1, #9
 80064bc:	f7ff ff8e 	bl	80063dc <std>
 80064c0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 80064c4:	2202      	movs	r2, #2
 80064c6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80064ca:	2112      	movs	r1, #18
 80064cc:	f7ff bf86 	b.w	80063dc <std>
 80064d0:	20000738 	.word	0x20000738
 80064d4:	20000600 	.word	0x20000600
 80064d8:	08006449 	.word	0x08006449

080064dc <__sfp_lock_acquire>:
 80064dc:	4801      	ldr	r0, [pc, #4]	; (80064e4 <__sfp_lock_acquire+0x8>)
 80064de:	f000 b9fe 	b.w	80068de <__retarget_lock_acquire_recursive>
 80064e2:	bf00      	nop
 80064e4:	20000741 	.word	0x20000741

080064e8 <__sfp_lock_release>:
 80064e8:	4801      	ldr	r0, [pc, #4]	; (80064f0 <__sfp_lock_release+0x8>)
 80064ea:	f000 b9f9 	b.w	80068e0 <__retarget_lock_release_recursive>
 80064ee:	bf00      	nop
 80064f0:	20000741 	.word	0x20000741

080064f4 <__sinit>:
 80064f4:	b510      	push	{r4, lr}
 80064f6:	4604      	mov	r4, r0
 80064f8:	f7ff fff0 	bl	80064dc <__sfp_lock_acquire>
 80064fc:	6a23      	ldr	r3, [r4, #32]
 80064fe:	b11b      	cbz	r3, 8006508 <__sinit+0x14>
 8006500:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006504:	f7ff bff0 	b.w	80064e8 <__sfp_lock_release>
 8006508:	4b04      	ldr	r3, [pc, #16]	; (800651c <__sinit+0x28>)
 800650a:	6223      	str	r3, [r4, #32]
 800650c:	4b04      	ldr	r3, [pc, #16]	; (8006520 <__sinit+0x2c>)
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	2b00      	cmp	r3, #0
 8006512:	d1f5      	bne.n	8006500 <__sinit+0xc>
 8006514:	f7ff ffc4 	bl	80064a0 <global_stdio_init.part.0>
 8006518:	e7f2      	b.n	8006500 <__sinit+0xc>
 800651a:	bf00      	nop
 800651c:	08006461 	.word	0x08006461
 8006520:	20000738 	.word	0x20000738

08006524 <_fwalk_sglue>:
 8006524:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006528:	4607      	mov	r7, r0
 800652a:	4688      	mov	r8, r1
 800652c:	4614      	mov	r4, r2
 800652e:	2600      	movs	r6, #0
 8006530:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006534:	f1b9 0901 	subs.w	r9, r9, #1
 8006538:	d505      	bpl.n	8006546 <_fwalk_sglue+0x22>
 800653a:	6824      	ldr	r4, [r4, #0]
 800653c:	2c00      	cmp	r4, #0
 800653e:	d1f7      	bne.n	8006530 <_fwalk_sglue+0xc>
 8006540:	4630      	mov	r0, r6
 8006542:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006546:	89ab      	ldrh	r3, [r5, #12]
 8006548:	2b01      	cmp	r3, #1
 800654a:	d907      	bls.n	800655c <_fwalk_sglue+0x38>
 800654c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006550:	3301      	adds	r3, #1
 8006552:	d003      	beq.n	800655c <_fwalk_sglue+0x38>
 8006554:	4629      	mov	r1, r5
 8006556:	4638      	mov	r0, r7
 8006558:	47c0      	blx	r8
 800655a:	4306      	orrs	r6, r0
 800655c:	3568      	adds	r5, #104	; 0x68
 800655e:	e7e9      	b.n	8006534 <_fwalk_sglue+0x10>

08006560 <iprintf>:
 8006560:	b40f      	push	{r0, r1, r2, r3}
 8006562:	b507      	push	{r0, r1, r2, lr}
 8006564:	4906      	ldr	r1, [pc, #24]	; (8006580 <iprintf+0x20>)
 8006566:	ab04      	add	r3, sp, #16
 8006568:	6808      	ldr	r0, [r1, #0]
 800656a:	f853 2b04 	ldr.w	r2, [r3], #4
 800656e:	6881      	ldr	r1, [r0, #8]
 8006570:	9301      	str	r3, [sp, #4]
 8006572:	f000 fad9 	bl	8006b28 <_vfiprintf_r>
 8006576:	b003      	add	sp, #12
 8006578:	f85d eb04 	ldr.w	lr, [sp], #4
 800657c:	b004      	add	sp, #16
 800657e:	4770      	bx	lr
 8006580:	20000164 	.word	0x20000164

08006584 <_puts_r>:
 8006584:	6a03      	ldr	r3, [r0, #32]
 8006586:	b570      	push	{r4, r5, r6, lr}
 8006588:	6884      	ldr	r4, [r0, #8]
 800658a:	4605      	mov	r5, r0
 800658c:	460e      	mov	r6, r1
 800658e:	b90b      	cbnz	r3, 8006594 <_puts_r+0x10>
 8006590:	f7ff ffb0 	bl	80064f4 <__sinit>
 8006594:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006596:	07db      	lsls	r3, r3, #31
 8006598:	d405      	bmi.n	80065a6 <_puts_r+0x22>
 800659a:	89a3      	ldrh	r3, [r4, #12]
 800659c:	0598      	lsls	r0, r3, #22
 800659e:	d402      	bmi.n	80065a6 <_puts_r+0x22>
 80065a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065a2:	f000 f99c 	bl	80068de <__retarget_lock_acquire_recursive>
 80065a6:	89a3      	ldrh	r3, [r4, #12]
 80065a8:	0719      	lsls	r1, r3, #28
 80065aa:	d513      	bpl.n	80065d4 <_puts_r+0x50>
 80065ac:	6923      	ldr	r3, [r4, #16]
 80065ae:	b18b      	cbz	r3, 80065d4 <_puts_r+0x50>
 80065b0:	3e01      	subs	r6, #1
 80065b2:	68a3      	ldr	r3, [r4, #8]
 80065b4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80065b8:	3b01      	subs	r3, #1
 80065ba:	60a3      	str	r3, [r4, #8]
 80065bc:	b9e9      	cbnz	r1, 80065fa <_puts_r+0x76>
 80065be:	2b00      	cmp	r3, #0
 80065c0:	da2e      	bge.n	8006620 <_puts_r+0x9c>
 80065c2:	4622      	mov	r2, r4
 80065c4:	210a      	movs	r1, #10
 80065c6:	4628      	mov	r0, r5
 80065c8:	f000 f87b 	bl	80066c2 <__swbuf_r>
 80065cc:	3001      	adds	r0, #1
 80065ce:	d007      	beq.n	80065e0 <_puts_r+0x5c>
 80065d0:	250a      	movs	r5, #10
 80065d2:	e007      	b.n	80065e4 <_puts_r+0x60>
 80065d4:	4621      	mov	r1, r4
 80065d6:	4628      	mov	r0, r5
 80065d8:	f000 f8b0 	bl	800673c <__swsetup_r>
 80065dc:	2800      	cmp	r0, #0
 80065de:	d0e7      	beq.n	80065b0 <_puts_r+0x2c>
 80065e0:	f04f 35ff 	mov.w	r5, #4294967295
 80065e4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80065e6:	07da      	lsls	r2, r3, #31
 80065e8:	d405      	bmi.n	80065f6 <_puts_r+0x72>
 80065ea:	89a3      	ldrh	r3, [r4, #12]
 80065ec:	059b      	lsls	r3, r3, #22
 80065ee:	d402      	bmi.n	80065f6 <_puts_r+0x72>
 80065f0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80065f2:	f000 f975 	bl	80068e0 <__retarget_lock_release_recursive>
 80065f6:	4628      	mov	r0, r5
 80065f8:	bd70      	pop	{r4, r5, r6, pc}
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	da04      	bge.n	8006608 <_puts_r+0x84>
 80065fe:	69a2      	ldr	r2, [r4, #24]
 8006600:	429a      	cmp	r2, r3
 8006602:	dc06      	bgt.n	8006612 <_puts_r+0x8e>
 8006604:	290a      	cmp	r1, #10
 8006606:	d004      	beq.n	8006612 <_puts_r+0x8e>
 8006608:	6823      	ldr	r3, [r4, #0]
 800660a:	1c5a      	adds	r2, r3, #1
 800660c:	6022      	str	r2, [r4, #0]
 800660e:	7019      	strb	r1, [r3, #0]
 8006610:	e7cf      	b.n	80065b2 <_puts_r+0x2e>
 8006612:	4622      	mov	r2, r4
 8006614:	4628      	mov	r0, r5
 8006616:	f000 f854 	bl	80066c2 <__swbuf_r>
 800661a:	3001      	adds	r0, #1
 800661c:	d1c9      	bne.n	80065b2 <_puts_r+0x2e>
 800661e:	e7df      	b.n	80065e0 <_puts_r+0x5c>
 8006620:	6823      	ldr	r3, [r4, #0]
 8006622:	250a      	movs	r5, #10
 8006624:	1c5a      	adds	r2, r3, #1
 8006626:	6022      	str	r2, [r4, #0]
 8006628:	701d      	strb	r5, [r3, #0]
 800662a:	e7db      	b.n	80065e4 <_puts_r+0x60>

0800662c <puts>:
 800662c:	4b02      	ldr	r3, [pc, #8]	; (8006638 <puts+0xc>)
 800662e:	4601      	mov	r1, r0
 8006630:	6818      	ldr	r0, [r3, #0]
 8006632:	f7ff bfa7 	b.w	8006584 <_puts_r>
 8006636:	bf00      	nop
 8006638:	20000164 	.word	0x20000164

0800663c <__sread>:
 800663c:	b510      	push	{r4, lr}
 800663e:	460c      	mov	r4, r1
 8006640:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006644:	f000 f8fc 	bl	8006840 <_read_r>
 8006648:	2800      	cmp	r0, #0
 800664a:	bfab      	itete	ge
 800664c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800664e:	89a3      	ldrhlt	r3, [r4, #12]
 8006650:	181b      	addge	r3, r3, r0
 8006652:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006656:	bfac      	ite	ge
 8006658:	6563      	strge	r3, [r4, #84]	; 0x54
 800665a:	81a3      	strhlt	r3, [r4, #12]
 800665c:	bd10      	pop	{r4, pc}

0800665e <__swrite>:
 800665e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006662:	461f      	mov	r7, r3
 8006664:	898b      	ldrh	r3, [r1, #12]
 8006666:	05db      	lsls	r3, r3, #23
 8006668:	4605      	mov	r5, r0
 800666a:	460c      	mov	r4, r1
 800666c:	4616      	mov	r6, r2
 800666e:	d505      	bpl.n	800667c <__swrite+0x1e>
 8006670:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006674:	2302      	movs	r3, #2
 8006676:	2200      	movs	r2, #0
 8006678:	f000 f8d0 	bl	800681c <_lseek_r>
 800667c:	89a3      	ldrh	r3, [r4, #12]
 800667e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006682:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006686:	81a3      	strh	r3, [r4, #12]
 8006688:	4632      	mov	r2, r6
 800668a:	463b      	mov	r3, r7
 800668c:	4628      	mov	r0, r5
 800668e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006692:	f000 b8e7 	b.w	8006864 <_write_r>

08006696 <__sseek>:
 8006696:	b510      	push	{r4, lr}
 8006698:	460c      	mov	r4, r1
 800669a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800669e:	f000 f8bd 	bl	800681c <_lseek_r>
 80066a2:	1c43      	adds	r3, r0, #1
 80066a4:	89a3      	ldrh	r3, [r4, #12]
 80066a6:	bf15      	itete	ne
 80066a8:	6560      	strne	r0, [r4, #84]	; 0x54
 80066aa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 80066ae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 80066b2:	81a3      	strheq	r3, [r4, #12]
 80066b4:	bf18      	it	ne
 80066b6:	81a3      	strhne	r3, [r4, #12]
 80066b8:	bd10      	pop	{r4, pc}

080066ba <__sclose>:
 80066ba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066be:	f000 b89d 	b.w	80067fc <_close_r>

080066c2 <__swbuf_r>:
 80066c2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80066c4:	460e      	mov	r6, r1
 80066c6:	4614      	mov	r4, r2
 80066c8:	4605      	mov	r5, r0
 80066ca:	b118      	cbz	r0, 80066d4 <__swbuf_r+0x12>
 80066cc:	6a03      	ldr	r3, [r0, #32]
 80066ce:	b90b      	cbnz	r3, 80066d4 <__swbuf_r+0x12>
 80066d0:	f7ff ff10 	bl	80064f4 <__sinit>
 80066d4:	69a3      	ldr	r3, [r4, #24]
 80066d6:	60a3      	str	r3, [r4, #8]
 80066d8:	89a3      	ldrh	r3, [r4, #12]
 80066da:	071a      	lsls	r2, r3, #28
 80066dc:	d525      	bpl.n	800672a <__swbuf_r+0x68>
 80066de:	6923      	ldr	r3, [r4, #16]
 80066e0:	b31b      	cbz	r3, 800672a <__swbuf_r+0x68>
 80066e2:	6823      	ldr	r3, [r4, #0]
 80066e4:	6922      	ldr	r2, [r4, #16]
 80066e6:	1a98      	subs	r0, r3, r2
 80066e8:	6963      	ldr	r3, [r4, #20]
 80066ea:	b2f6      	uxtb	r6, r6
 80066ec:	4283      	cmp	r3, r0
 80066ee:	4637      	mov	r7, r6
 80066f0:	dc04      	bgt.n	80066fc <__swbuf_r+0x3a>
 80066f2:	4621      	mov	r1, r4
 80066f4:	4628      	mov	r0, r5
 80066f6:	f000 fd47 	bl	8007188 <_fflush_r>
 80066fa:	b9e0      	cbnz	r0, 8006736 <__swbuf_r+0x74>
 80066fc:	68a3      	ldr	r3, [r4, #8]
 80066fe:	3b01      	subs	r3, #1
 8006700:	60a3      	str	r3, [r4, #8]
 8006702:	6823      	ldr	r3, [r4, #0]
 8006704:	1c5a      	adds	r2, r3, #1
 8006706:	6022      	str	r2, [r4, #0]
 8006708:	701e      	strb	r6, [r3, #0]
 800670a:	6962      	ldr	r2, [r4, #20]
 800670c:	1c43      	adds	r3, r0, #1
 800670e:	429a      	cmp	r2, r3
 8006710:	d004      	beq.n	800671c <__swbuf_r+0x5a>
 8006712:	89a3      	ldrh	r3, [r4, #12]
 8006714:	07db      	lsls	r3, r3, #31
 8006716:	d506      	bpl.n	8006726 <__swbuf_r+0x64>
 8006718:	2e0a      	cmp	r6, #10
 800671a:	d104      	bne.n	8006726 <__swbuf_r+0x64>
 800671c:	4621      	mov	r1, r4
 800671e:	4628      	mov	r0, r5
 8006720:	f000 fd32 	bl	8007188 <_fflush_r>
 8006724:	b938      	cbnz	r0, 8006736 <__swbuf_r+0x74>
 8006726:	4638      	mov	r0, r7
 8006728:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800672a:	4621      	mov	r1, r4
 800672c:	4628      	mov	r0, r5
 800672e:	f000 f805 	bl	800673c <__swsetup_r>
 8006732:	2800      	cmp	r0, #0
 8006734:	d0d5      	beq.n	80066e2 <__swbuf_r+0x20>
 8006736:	f04f 37ff 	mov.w	r7, #4294967295
 800673a:	e7f4      	b.n	8006726 <__swbuf_r+0x64>

0800673c <__swsetup_r>:
 800673c:	b538      	push	{r3, r4, r5, lr}
 800673e:	4b2a      	ldr	r3, [pc, #168]	; (80067e8 <__swsetup_r+0xac>)
 8006740:	4605      	mov	r5, r0
 8006742:	6818      	ldr	r0, [r3, #0]
 8006744:	460c      	mov	r4, r1
 8006746:	b118      	cbz	r0, 8006750 <__swsetup_r+0x14>
 8006748:	6a03      	ldr	r3, [r0, #32]
 800674a:	b90b      	cbnz	r3, 8006750 <__swsetup_r+0x14>
 800674c:	f7ff fed2 	bl	80064f4 <__sinit>
 8006750:	89a3      	ldrh	r3, [r4, #12]
 8006752:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006756:	0718      	lsls	r0, r3, #28
 8006758:	d422      	bmi.n	80067a0 <__swsetup_r+0x64>
 800675a:	06d9      	lsls	r1, r3, #27
 800675c:	d407      	bmi.n	800676e <__swsetup_r+0x32>
 800675e:	2309      	movs	r3, #9
 8006760:	602b      	str	r3, [r5, #0]
 8006762:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006766:	81a3      	strh	r3, [r4, #12]
 8006768:	f04f 30ff 	mov.w	r0, #4294967295
 800676c:	e034      	b.n	80067d8 <__swsetup_r+0x9c>
 800676e:	0758      	lsls	r0, r3, #29
 8006770:	d512      	bpl.n	8006798 <__swsetup_r+0x5c>
 8006772:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006774:	b141      	cbz	r1, 8006788 <__swsetup_r+0x4c>
 8006776:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800677a:	4299      	cmp	r1, r3
 800677c:	d002      	beq.n	8006784 <__swsetup_r+0x48>
 800677e:	4628      	mov	r0, r5
 8006780:	f000 f8b0 	bl	80068e4 <_free_r>
 8006784:	2300      	movs	r3, #0
 8006786:	6363      	str	r3, [r4, #52]	; 0x34
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800678e:	81a3      	strh	r3, [r4, #12]
 8006790:	2300      	movs	r3, #0
 8006792:	6063      	str	r3, [r4, #4]
 8006794:	6923      	ldr	r3, [r4, #16]
 8006796:	6023      	str	r3, [r4, #0]
 8006798:	89a3      	ldrh	r3, [r4, #12]
 800679a:	f043 0308 	orr.w	r3, r3, #8
 800679e:	81a3      	strh	r3, [r4, #12]
 80067a0:	6923      	ldr	r3, [r4, #16]
 80067a2:	b94b      	cbnz	r3, 80067b8 <__swsetup_r+0x7c>
 80067a4:	89a3      	ldrh	r3, [r4, #12]
 80067a6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80067aa:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80067ae:	d003      	beq.n	80067b8 <__swsetup_r+0x7c>
 80067b0:	4621      	mov	r1, r4
 80067b2:	4628      	mov	r0, r5
 80067b4:	f000 fd36 	bl	8007224 <__smakebuf_r>
 80067b8:	89a0      	ldrh	r0, [r4, #12]
 80067ba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80067be:	f010 0301 	ands.w	r3, r0, #1
 80067c2:	d00a      	beq.n	80067da <__swsetup_r+0x9e>
 80067c4:	2300      	movs	r3, #0
 80067c6:	60a3      	str	r3, [r4, #8]
 80067c8:	6963      	ldr	r3, [r4, #20]
 80067ca:	425b      	negs	r3, r3
 80067cc:	61a3      	str	r3, [r4, #24]
 80067ce:	6923      	ldr	r3, [r4, #16]
 80067d0:	b943      	cbnz	r3, 80067e4 <__swsetup_r+0xa8>
 80067d2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80067d6:	d1c4      	bne.n	8006762 <__swsetup_r+0x26>
 80067d8:	bd38      	pop	{r3, r4, r5, pc}
 80067da:	0781      	lsls	r1, r0, #30
 80067dc:	bf58      	it	pl
 80067de:	6963      	ldrpl	r3, [r4, #20]
 80067e0:	60a3      	str	r3, [r4, #8]
 80067e2:	e7f4      	b.n	80067ce <__swsetup_r+0x92>
 80067e4:	2000      	movs	r0, #0
 80067e6:	e7f7      	b.n	80067d8 <__swsetup_r+0x9c>
 80067e8:	20000164 	.word	0x20000164

080067ec <memset>:
 80067ec:	4402      	add	r2, r0
 80067ee:	4603      	mov	r3, r0
 80067f0:	4293      	cmp	r3, r2
 80067f2:	d100      	bne.n	80067f6 <memset+0xa>
 80067f4:	4770      	bx	lr
 80067f6:	f803 1b01 	strb.w	r1, [r3], #1
 80067fa:	e7f9      	b.n	80067f0 <memset+0x4>

080067fc <_close_r>:
 80067fc:	b538      	push	{r3, r4, r5, lr}
 80067fe:	4d06      	ldr	r5, [pc, #24]	; (8006818 <_close_r+0x1c>)
 8006800:	2300      	movs	r3, #0
 8006802:	4604      	mov	r4, r0
 8006804:	4608      	mov	r0, r1
 8006806:	602b      	str	r3, [r5, #0]
 8006808:	f7fc f803 	bl	8002812 <_close>
 800680c:	1c43      	adds	r3, r0, #1
 800680e:	d102      	bne.n	8006816 <_close_r+0x1a>
 8006810:	682b      	ldr	r3, [r5, #0]
 8006812:	b103      	cbz	r3, 8006816 <_close_r+0x1a>
 8006814:	6023      	str	r3, [r4, #0]
 8006816:	bd38      	pop	{r3, r4, r5, pc}
 8006818:	2000073c 	.word	0x2000073c

0800681c <_lseek_r>:
 800681c:	b538      	push	{r3, r4, r5, lr}
 800681e:	4d07      	ldr	r5, [pc, #28]	; (800683c <_lseek_r+0x20>)
 8006820:	4604      	mov	r4, r0
 8006822:	4608      	mov	r0, r1
 8006824:	4611      	mov	r1, r2
 8006826:	2200      	movs	r2, #0
 8006828:	602a      	str	r2, [r5, #0]
 800682a:	461a      	mov	r2, r3
 800682c:	f7fc f818 	bl	8002860 <_lseek>
 8006830:	1c43      	adds	r3, r0, #1
 8006832:	d102      	bne.n	800683a <_lseek_r+0x1e>
 8006834:	682b      	ldr	r3, [r5, #0]
 8006836:	b103      	cbz	r3, 800683a <_lseek_r+0x1e>
 8006838:	6023      	str	r3, [r4, #0]
 800683a:	bd38      	pop	{r3, r4, r5, pc}
 800683c:	2000073c 	.word	0x2000073c

08006840 <_read_r>:
 8006840:	b538      	push	{r3, r4, r5, lr}
 8006842:	4d07      	ldr	r5, [pc, #28]	; (8006860 <_read_r+0x20>)
 8006844:	4604      	mov	r4, r0
 8006846:	4608      	mov	r0, r1
 8006848:	4611      	mov	r1, r2
 800684a:	2200      	movs	r2, #0
 800684c:	602a      	str	r2, [r5, #0]
 800684e:	461a      	mov	r2, r3
 8006850:	f7fb ffa6 	bl	80027a0 <_read>
 8006854:	1c43      	adds	r3, r0, #1
 8006856:	d102      	bne.n	800685e <_read_r+0x1e>
 8006858:	682b      	ldr	r3, [r5, #0]
 800685a:	b103      	cbz	r3, 800685e <_read_r+0x1e>
 800685c:	6023      	str	r3, [r4, #0]
 800685e:	bd38      	pop	{r3, r4, r5, pc}
 8006860:	2000073c 	.word	0x2000073c

08006864 <_write_r>:
 8006864:	b538      	push	{r3, r4, r5, lr}
 8006866:	4d07      	ldr	r5, [pc, #28]	; (8006884 <_write_r+0x20>)
 8006868:	4604      	mov	r4, r0
 800686a:	4608      	mov	r0, r1
 800686c:	4611      	mov	r1, r2
 800686e:	2200      	movs	r2, #0
 8006870:	602a      	str	r2, [r5, #0]
 8006872:	461a      	mov	r2, r3
 8006874:	f7fb ffb1 	bl	80027da <_write>
 8006878:	1c43      	adds	r3, r0, #1
 800687a:	d102      	bne.n	8006882 <_write_r+0x1e>
 800687c:	682b      	ldr	r3, [r5, #0]
 800687e:	b103      	cbz	r3, 8006882 <_write_r+0x1e>
 8006880:	6023      	str	r3, [r4, #0]
 8006882:	bd38      	pop	{r3, r4, r5, pc}
 8006884:	2000073c 	.word	0x2000073c

08006888 <__errno>:
 8006888:	4b01      	ldr	r3, [pc, #4]	; (8006890 <__errno+0x8>)
 800688a:	6818      	ldr	r0, [r3, #0]
 800688c:	4770      	bx	lr
 800688e:	bf00      	nop
 8006890:	20000164 	.word	0x20000164

08006894 <__libc_init_array>:
 8006894:	b570      	push	{r4, r5, r6, lr}
 8006896:	4d0d      	ldr	r5, [pc, #52]	; (80068cc <__libc_init_array+0x38>)
 8006898:	4c0d      	ldr	r4, [pc, #52]	; (80068d0 <__libc_init_array+0x3c>)
 800689a:	1b64      	subs	r4, r4, r5
 800689c:	10a4      	asrs	r4, r4, #2
 800689e:	2600      	movs	r6, #0
 80068a0:	42a6      	cmp	r6, r4
 80068a2:	d109      	bne.n	80068b8 <__libc_init_array+0x24>
 80068a4:	4d0b      	ldr	r5, [pc, #44]	; (80068d4 <__libc_init_array+0x40>)
 80068a6:	4c0c      	ldr	r4, [pc, #48]	; (80068d8 <__libc_init_array+0x44>)
 80068a8:	f000 fd2a 	bl	8007300 <_init>
 80068ac:	1b64      	subs	r4, r4, r5
 80068ae:	10a4      	asrs	r4, r4, #2
 80068b0:	2600      	movs	r6, #0
 80068b2:	42a6      	cmp	r6, r4
 80068b4:	d105      	bne.n	80068c2 <__libc_init_array+0x2e>
 80068b6:	bd70      	pop	{r4, r5, r6, pc}
 80068b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80068bc:	4798      	blx	r3
 80068be:	3601      	adds	r6, #1
 80068c0:	e7ee      	b.n	80068a0 <__libc_init_array+0xc>
 80068c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80068c6:	4798      	blx	r3
 80068c8:	3601      	adds	r6, #1
 80068ca:	e7f2      	b.n	80068b2 <__libc_init_array+0x1e>
 80068cc:	08007470 	.word	0x08007470
 80068d0:	08007470 	.word	0x08007470
 80068d4:	08007470 	.word	0x08007470
 80068d8:	08007474 	.word	0x08007474

080068dc <__retarget_lock_init_recursive>:
 80068dc:	4770      	bx	lr

080068de <__retarget_lock_acquire_recursive>:
 80068de:	4770      	bx	lr

080068e0 <__retarget_lock_release_recursive>:
 80068e0:	4770      	bx	lr
	...

080068e4 <_free_r>:
 80068e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80068e6:	2900      	cmp	r1, #0
 80068e8:	d044      	beq.n	8006974 <_free_r+0x90>
 80068ea:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80068ee:	9001      	str	r0, [sp, #4]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	f1a1 0404 	sub.w	r4, r1, #4
 80068f6:	bfb8      	it	lt
 80068f8:	18e4      	addlt	r4, r4, r3
 80068fa:	f000 f8df 	bl	8006abc <__malloc_lock>
 80068fe:	4a1e      	ldr	r2, [pc, #120]	; (8006978 <_free_r+0x94>)
 8006900:	9801      	ldr	r0, [sp, #4]
 8006902:	6813      	ldr	r3, [r2, #0]
 8006904:	b933      	cbnz	r3, 8006914 <_free_r+0x30>
 8006906:	6063      	str	r3, [r4, #4]
 8006908:	6014      	str	r4, [r2, #0]
 800690a:	b003      	add	sp, #12
 800690c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006910:	f000 b8da 	b.w	8006ac8 <__malloc_unlock>
 8006914:	42a3      	cmp	r3, r4
 8006916:	d908      	bls.n	800692a <_free_r+0x46>
 8006918:	6825      	ldr	r5, [r4, #0]
 800691a:	1961      	adds	r1, r4, r5
 800691c:	428b      	cmp	r3, r1
 800691e:	bf01      	itttt	eq
 8006920:	6819      	ldreq	r1, [r3, #0]
 8006922:	685b      	ldreq	r3, [r3, #4]
 8006924:	1949      	addeq	r1, r1, r5
 8006926:	6021      	streq	r1, [r4, #0]
 8006928:	e7ed      	b.n	8006906 <_free_r+0x22>
 800692a:	461a      	mov	r2, r3
 800692c:	685b      	ldr	r3, [r3, #4]
 800692e:	b10b      	cbz	r3, 8006934 <_free_r+0x50>
 8006930:	42a3      	cmp	r3, r4
 8006932:	d9fa      	bls.n	800692a <_free_r+0x46>
 8006934:	6811      	ldr	r1, [r2, #0]
 8006936:	1855      	adds	r5, r2, r1
 8006938:	42a5      	cmp	r5, r4
 800693a:	d10b      	bne.n	8006954 <_free_r+0x70>
 800693c:	6824      	ldr	r4, [r4, #0]
 800693e:	4421      	add	r1, r4
 8006940:	1854      	adds	r4, r2, r1
 8006942:	42a3      	cmp	r3, r4
 8006944:	6011      	str	r1, [r2, #0]
 8006946:	d1e0      	bne.n	800690a <_free_r+0x26>
 8006948:	681c      	ldr	r4, [r3, #0]
 800694a:	685b      	ldr	r3, [r3, #4]
 800694c:	6053      	str	r3, [r2, #4]
 800694e:	440c      	add	r4, r1
 8006950:	6014      	str	r4, [r2, #0]
 8006952:	e7da      	b.n	800690a <_free_r+0x26>
 8006954:	d902      	bls.n	800695c <_free_r+0x78>
 8006956:	230c      	movs	r3, #12
 8006958:	6003      	str	r3, [r0, #0]
 800695a:	e7d6      	b.n	800690a <_free_r+0x26>
 800695c:	6825      	ldr	r5, [r4, #0]
 800695e:	1961      	adds	r1, r4, r5
 8006960:	428b      	cmp	r3, r1
 8006962:	bf04      	itt	eq
 8006964:	6819      	ldreq	r1, [r3, #0]
 8006966:	685b      	ldreq	r3, [r3, #4]
 8006968:	6063      	str	r3, [r4, #4]
 800696a:	bf04      	itt	eq
 800696c:	1949      	addeq	r1, r1, r5
 800696e:	6021      	streq	r1, [r4, #0]
 8006970:	6054      	str	r4, [r2, #4]
 8006972:	e7ca      	b.n	800690a <_free_r+0x26>
 8006974:	b003      	add	sp, #12
 8006976:	bd30      	pop	{r4, r5, pc}
 8006978:	20000744 	.word	0x20000744

0800697c <sbrk_aligned>:
 800697c:	b570      	push	{r4, r5, r6, lr}
 800697e:	4e0e      	ldr	r6, [pc, #56]	; (80069b8 <sbrk_aligned+0x3c>)
 8006980:	460c      	mov	r4, r1
 8006982:	6831      	ldr	r1, [r6, #0]
 8006984:	4605      	mov	r5, r0
 8006986:	b911      	cbnz	r1, 800698e <sbrk_aligned+0x12>
 8006988:	f000 fcaa 	bl	80072e0 <_sbrk_r>
 800698c:	6030      	str	r0, [r6, #0]
 800698e:	4621      	mov	r1, r4
 8006990:	4628      	mov	r0, r5
 8006992:	f000 fca5 	bl	80072e0 <_sbrk_r>
 8006996:	1c43      	adds	r3, r0, #1
 8006998:	d00a      	beq.n	80069b0 <sbrk_aligned+0x34>
 800699a:	1cc4      	adds	r4, r0, #3
 800699c:	f024 0403 	bic.w	r4, r4, #3
 80069a0:	42a0      	cmp	r0, r4
 80069a2:	d007      	beq.n	80069b4 <sbrk_aligned+0x38>
 80069a4:	1a21      	subs	r1, r4, r0
 80069a6:	4628      	mov	r0, r5
 80069a8:	f000 fc9a 	bl	80072e0 <_sbrk_r>
 80069ac:	3001      	adds	r0, #1
 80069ae:	d101      	bne.n	80069b4 <sbrk_aligned+0x38>
 80069b0:	f04f 34ff 	mov.w	r4, #4294967295
 80069b4:	4620      	mov	r0, r4
 80069b6:	bd70      	pop	{r4, r5, r6, pc}
 80069b8:	20000748 	.word	0x20000748

080069bc <_malloc_r>:
 80069bc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80069c0:	1ccd      	adds	r5, r1, #3
 80069c2:	f025 0503 	bic.w	r5, r5, #3
 80069c6:	3508      	adds	r5, #8
 80069c8:	2d0c      	cmp	r5, #12
 80069ca:	bf38      	it	cc
 80069cc:	250c      	movcc	r5, #12
 80069ce:	2d00      	cmp	r5, #0
 80069d0:	4607      	mov	r7, r0
 80069d2:	db01      	blt.n	80069d8 <_malloc_r+0x1c>
 80069d4:	42a9      	cmp	r1, r5
 80069d6:	d905      	bls.n	80069e4 <_malloc_r+0x28>
 80069d8:	230c      	movs	r3, #12
 80069da:	603b      	str	r3, [r7, #0]
 80069dc:	2600      	movs	r6, #0
 80069de:	4630      	mov	r0, r6
 80069e0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80069e4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8006ab8 <_malloc_r+0xfc>
 80069e8:	f000 f868 	bl	8006abc <__malloc_lock>
 80069ec:	f8d8 3000 	ldr.w	r3, [r8]
 80069f0:	461c      	mov	r4, r3
 80069f2:	bb5c      	cbnz	r4, 8006a4c <_malloc_r+0x90>
 80069f4:	4629      	mov	r1, r5
 80069f6:	4638      	mov	r0, r7
 80069f8:	f7ff ffc0 	bl	800697c <sbrk_aligned>
 80069fc:	1c43      	adds	r3, r0, #1
 80069fe:	4604      	mov	r4, r0
 8006a00:	d155      	bne.n	8006aae <_malloc_r+0xf2>
 8006a02:	f8d8 4000 	ldr.w	r4, [r8]
 8006a06:	4626      	mov	r6, r4
 8006a08:	2e00      	cmp	r6, #0
 8006a0a:	d145      	bne.n	8006a98 <_malloc_r+0xdc>
 8006a0c:	2c00      	cmp	r4, #0
 8006a0e:	d048      	beq.n	8006aa2 <_malloc_r+0xe6>
 8006a10:	6823      	ldr	r3, [r4, #0]
 8006a12:	4631      	mov	r1, r6
 8006a14:	4638      	mov	r0, r7
 8006a16:	eb04 0903 	add.w	r9, r4, r3
 8006a1a:	f000 fc61 	bl	80072e0 <_sbrk_r>
 8006a1e:	4581      	cmp	r9, r0
 8006a20:	d13f      	bne.n	8006aa2 <_malloc_r+0xe6>
 8006a22:	6821      	ldr	r1, [r4, #0]
 8006a24:	1a6d      	subs	r5, r5, r1
 8006a26:	4629      	mov	r1, r5
 8006a28:	4638      	mov	r0, r7
 8006a2a:	f7ff ffa7 	bl	800697c <sbrk_aligned>
 8006a2e:	3001      	adds	r0, #1
 8006a30:	d037      	beq.n	8006aa2 <_malloc_r+0xe6>
 8006a32:	6823      	ldr	r3, [r4, #0]
 8006a34:	442b      	add	r3, r5
 8006a36:	6023      	str	r3, [r4, #0]
 8006a38:	f8d8 3000 	ldr.w	r3, [r8]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d038      	beq.n	8006ab2 <_malloc_r+0xf6>
 8006a40:	685a      	ldr	r2, [r3, #4]
 8006a42:	42a2      	cmp	r2, r4
 8006a44:	d12b      	bne.n	8006a9e <_malloc_r+0xe2>
 8006a46:	2200      	movs	r2, #0
 8006a48:	605a      	str	r2, [r3, #4]
 8006a4a:	e00f      	b.n	8006a6c <_malloc_r+0xb0>
 8006a4c:	6822      	ldr	r2, [r4, #0]
 8006a4e:	1b52      	subs	r2, r2, r5
 8006a50:	d41f      	bmi.n	8006a92 <_malloc_r+0xd6>
 8006a52:	2a0b      	cmp	r2, #11
 8006a54:	d917      	bls.n	8006a86 <_malloc_r+0xca>
 8006a56:	1961      	adds	r1, r4, r5
 8006a58:	42a3      	cmp	r3, r4
 8006a5a:	6025      	str	r5, [r4, #0]
 8006a5c:	bf18      	it	ne
 8006a5e:	6059      	strne	r1, [r3, #4]
 8006a60:	6863      	ldr	r3, [r4, #4]
 8006a62:	bf08      	it	eq
 8006a64:	f8c8 1000 	streq.w	r1, [r8]
 8006a68:	5162      	str	r2, [r4, r5]
 8006a6a:	604b      	str	r3, [r1, #4]
 8006a6c:	4638      	mov	r0, r7
 8006a6e:	f104 060b 	add.w	r6, r4, #11
 8006a72:	f000 f829 	bl	8006ac8 <__malloc_unlock>
 8006a76:	f026 0607 	bic.w	r6, r6, #7
 8006a7a:	1d23      	adds	r3, r4, #4
 8006a7c:	1af2      	subs	r2, r6, r3
 8006a7e:	d0ae      	beq.n	80069de <_malloc_r+0x22>
 8006a80:	1b9b      	subs	r3, r3, r6
 8006a82:	50a3      	str	r3, [r4, r2]
 8006a84:	e7ab      	b.n	80069de <_malloc_r+0x22>
 8006a86:	42a3      	cmp	r3, r4
 8006a88:	6862      	ldr	r2, [r4, #4]
 8006a8a:	d1dd      	bne.n	8006a48 <_malloc_r+0x8c>
 8006a8c:	f8c8 2000 	str.w	r2, [r8]
 8006a90:	e7ec      	b.n	8006a6c <_malloc_r+0xb0>
 8006a92:	4623      	mov	r3, r4
 8006a94:	6864      	ldr	r4, [r4, #4]
 8006a96:	e7ac      	b.n	80069f2 <_malloc_r+0x36>
 8006a98:	4634      	mov	r4, r6
 8006a9a:	6876      	ldr	r6, [r6, #4]
 8006a9c:	e7b4      	b.n	8006a08 <_malloc_r+0x4c>
 8006a9e:	4613      	mov	r3, r2
 8006aa0:	e7cc      	b.n	8006a3c <_malloc_r+0x80>
 8006aa2:	230c      	movs	r3, #12
 8006aa4:	603b      	str	r3, [r7, #0]
 8006aa6:	4638      	mov	r0, r7
 8006aa8:	f000 f80e 	bl	8006ac8 <__malloc_unlock>
 8006aac:	e797      	b.n	80069de <_malloc_r+0x22>
 8006aae:	6025      	str	r5, [r4, #0]
 8006ab0:	e7dc      	b.n	8006a6c <_malloc_r+0xb0>
 8006ab2:	605b      	str	r3, [r3, #4]
 8006ab4:	deff      	udf	#255	; 0xff
 8006ab6:	bf00      	nop
 8006ab8:	20000744 	.word	0x20000744

08006abc <__malloc_lock>:
 8006abc:	4801      	ldr	r0, [pc, #4]	; (8006ac4 <__malloc_lock+0x8>)
 8006abe:	f7ff bf0e 	b.w	80068de <__retarget_lock_acquire_recursive>
 8006ac2:	bf00      	nop
 8006ac4:	20000740 	.word	0x20000740

08006ac8 <__malloc_unlock>:
 8006ac8:	4801      	ldr	r0, [pc, #4]	; (8006ad0 <__malloc_unlock+0x8>)
 8006aca:	f7ff bf09 	b.w	80068e0 <__retarget_lock_release_recursive>
 8006ace:	bf00      	nop
 8006ad0:	20000740 	.word	0x20000740

08006ad4 <__sfputc_r>:
 8006ad4:	6893      	ldr	r3, [r2, #8]
 8006ad6:	3b01      	subs	r3, #1
 8006ad8:	2b00      	cmp	r3, #0
 8006ada:	b410      	push	{r4}
 8006adc:	6093      	str	r3, [r2, #8]
 8006ade:	da08      	bge.n	8006af2 <__sfputc_r+0x1e>
 8006ae0:	6994      	ldr	r4, [r2, #24]
 8006ae2:	42a3      	cmp	r3, r4
 8006ae4:	db01      	blt.n	8006aea <__sfputc_r+0x16>
 8006ae6:	290a      	cmp	r1, #10
 8006ae8:	d103      	bne.n	8006af2 <__sfputc_r+0x1e>
 8006aea:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006aee:	f7ff bde8 	b.w	80066c2 <__swbuf_r>
 8006af2:	6813      	ldr	r3, [r2, #0]
 8006af4:	1c58      	adds	r0, r3, #1
 8006af6:	6010      	str	r0, [r2, #0]
 8006af8:	7019      	strb	r1, [r3, #0]
 8006afa:	4608      	mov	r0, r1
 8006afc:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006b00:	4770      	bx	lr

08006b02 <__sfputs_r>:
 8006b02:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006b04:	4606      	mov	r6, r0
 8006b06:	460f      	mov	r7, r1
 8006b08:	4614      	mov	r4, r2
 8006b0a:	18d5      	adds	r5, r2, r3
 8006b0c:	42ac      	cmp	r4, r5
 8006b0e:	d101      	bne.n	8006b14 <__sfputs_r+0x12>
 8006b10:	2000      	movs	r0, #0
 8006b12:	e007      	b.n	8006b24 <__sfputs_r+0x22>
 8006b14:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006b18:	463a      	mov	r2, r7
 8006b1a:	4630      	mov	r0, r6
 8006b1c:	f7ff ffda 	bl	8006ad4 <__sfputc_r>
 8006b20:	1c43      	adds	r3, r0, #1
 8006b22:	d1f3      	bne.n	8006b0c <__sfputs_r+0xa>
 8006b24:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006b28 <_vfiprintf_r>:
 8006b28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006b2c:	460d      	mov	r5, r1
 8006b2e:	b09d      	sub	sp, #116	; 0x74
 8006b30:	4614      	mov	r4, r2
 8006b32:	4698      	mov	r8, r3
 8006b34:	4606      	mov	r6, r0
 8006b36:	b118      	cbz	r0, 8006b40 <_vfiprintf_r+0x18>
 8006b38:	6a03      	ldr	r3, [r0, #32]
 8006b3a:	b90b      	cbnz	r3, 8006b40 <_vfiprintf_r+0x18>
 8006b3c:	f7ff fcda 	bl	80064f4 <__sinit>
 8006b40:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b42:	07d9      	lsls	r1, r3, #31
 8006b44:	d405      	bmi.n	8006b52 <_vfiprintf_r+0x2a>
 8006b46:	89ab      	ldrh	r3, [r5, #12]
 8006b48:	059a      	lsls	r2, r3, #22
 8006b4a:	d402      	bmi.n	8006b52 <_vfiprintf_r+0x2a>
 8006b4c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b4e:	f7ff fec6 	bl	80068de <__retarget_lock_acquire_recursive>
 8006b52:	89ab      	ldrh	r3, [r5, #12]
 8006b54:	071b      	lsls	r3, r3, #28
 8006b56:	d501      	bpl.n	8006b5c <_vfiprintf_r+0x34>
 8006b58:	692b      	ldr	r3, [r5, #16]
 8006b5a:	b99b      	cbnz	r3, 8006b84 <_vfiprintf_r+0x5c>
 8006b5c:	4629      	mov	r1, r5
 8006b5e:	4630      	mov	r0, r6
 8006b60:	f7ff fdec 	bl	800673c <__swsetup_r>
 8006b64:	b170      	cbz	r0, 8006b84 <_vfiprintf_r+0x5c>
 8006b66:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006b68:	07dc      	lsls	r4, r3, #31
 8006b6a:	d504      	bpl.n	8006b76 <_vfiprintf_r+0x4e>
 8006b6c:	f04f 30ff 	mov.w	r0, #4294967295
 8006b70:	b01d      	add	sp, #116	; 0x74
 8006b72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006b76:	89ab      	ldrh	r3, [r5, #12]
 8006b78:	0598      	lsls	r0, r3, #22
 8006b7a:	d4f7      	bmi.n	8006b6c <_vfiprintf_r+0x44>
 8006b7c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006b7e:	f7ff feaf 	bl	80068e0 <__retarget_lock_release_recursive>
 8006b82:	e7f3      	b.n	8006b6c <_vfiprintf_r+0x44>
 8006b84:	2300      	movs	r3, #0
 8006b86:	9309      	str	r3, [sp, #36]	; 0x24
 8006b88:	2320      	movs	r3, #32
 8006b8a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006b8e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006b92:	2330      	movs	r3, #48	; 0x30
 8006b94:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8006d48 <_vfiprintf_r+0x220>
 8006b98:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006b9c:	f04f 0901 	mov.w	r9, #1
 8006ba0:	4623      	mov	r3, r4
 8006ba2:	469a      	mov	sl, r3
 8006ba4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006ba8:	b10a      	cbz	r2, 8006bae <_vfiprintf_r+0x86>
 8006baa:	2a25      	cmp	r2, #37	; 0x25
 8006bac:	d1f9      	bne.n	8006ba2 <_vfiprintf_r+0x7a>
 8006bae:	ebba 0b04 	subs.w	fp, sl, r4
 8006bb2:	d00b      	beq.n	8006bcc <_vfiprintf_r+0xa4>
 8006bb4:	465b      	mov	r3, fp
 8006bb6:	4622      	mov	r2, r4
 8006bb8:	4629      	mov	r1, r5
 8006bba:	4630      	mov	r0, r6
 8006bbc:	f7ff ffa1 	bl	8006b02 <__sfputs_r>
 8006bc0:	3001      	adds	r0, #1
 8006bc2:	f000 80a9 	beq.w	8006d18 <_vfiprintf_r+0x1f0>
 8006bc6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006bc8:	445a      	add	r2, fp
 8006bca:	9209      	str	r2, [sp, #36]	; 0x24
 8006bcc:	f89a 3000 	ldrb.w	r3, [sl]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	f000 80a1 	beq.w	8006d18 <_vfiprintf_r+0x1f0>
 8006bd6:	2300      	movs	r3, #0
 8006bd8:	f04f 32ff 	mov.w	r2, #4294967295
 8006bdc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006be0:	f10a 0a01 	add.w	sl, sl, #1
 8006be4:	9304      	str	r3, [sp, #16]
 8006be6:	9307      	str	r3, [sp, #28]
 8006be8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006bec:	931a      	str	r3, [sp, #104]	; 0x68
 8006bee:	4654      	mov	r4, sl
 8006bf0:	2205      	movs	r2, #5
 8006bf2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006bf6:	4854      	ldr	r0, [pc, #336]	; (8006d48 <_vfiprintf_r+0x220>)
 8006bf8:	f7f9 faea 	bl	80001d0 <memchr>
 8006bfc:	9a04      	ldr	r2, [sp, #16]
 8006bfe:	b9d8      	cbnz	r0, 8006c38 <_vfiprintf_r+0x110>
 8006c00:	06d1      	lsls	r1, r2, #27
 8006c02:	bf44      	itt	mi
 8006c04:	2320      	movmi	r3, #32
 8006c06:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c0a:	0713      	lsls	r3, r2, #28
 8006c0c:	bf44      	itt	mi
 8006c0e:	232b      	movmi	r3, #43	; 0x2b
 8006c10:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006c14:	f89a 3000 	ldrb.w	r3, [sl]
 8006c18:	2b2a      	cmp	r3, #42	; 0x2a
 8006c1a:	d015      	beq.n	8006c48 <_vfiprintf_r+0x120>
 8006c1c:	9a07      	ldr	r2, [sp, #28]
 8006c1e:	4654      	mov	r4, sl
 8006c20:	2000      	movs	r0, #0
 8006c22:	f04f 0c0a 	mov.w	ip, #10
 8006c26:	4621      	mov	r1, r4
 8006c28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006c2c:	3b30      	subs	r3, #48	; 0x30
 8006c2e:	2b09      	cmp	r3, #9
 8006c30:	d94d      	bls.n	8006cce <_vfiprintf_r+0x1a6>
 8006c32:	b1b0      	cbz	r0, 8006c62 <_vfiprintf_r+0x13a>
 8006c34:	9207      	str	r2, [sp, #28]
 8006c36:	e014      	b.n	8006c62 <_vfiprintf_r+0x13a>
 8006c38:	eba0 0308 	sub.w	r3, r0, r8
 8006c3c:	fa09 f303 	lsl.w	r3, r9, r3
 8006c40:	4313      	orrs	r3, r2
 8006c42:	9304      	str	r3, [sp, #16]
 8006c44:	46a2      	mov	sl, r4
 8006c46:	e7d2      	b.n	8006bee <_vfiprintf_r+0xc6>
 8006c48:	9b03      	ldr	r3, [sp, #12]
 8006c4a:	1d19      	adds	r1, r3, #4
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	9103      	str	r1, [sp, #12]
 8006c50:	2b00      	cmp	r3, #0
 8006c52:	bfbb      	ittet	lt
 8006c54:	425b      	neglt	r3, r3
 8006c56:	f042 0202 	orrlt.w	r2, r2, #2
 8006c5a:	9307      	strge	r3, [sp, #28]
 8006c5c:	9307      	strlt	r3, [sp, #28]
 8006c5e:	bfb8      	it	lt
 8006c60:	9204      	strlt	r2, [sp, #16]
 8006c62:	7823      	ldrb	r3, [r4, #0]
 8006c64:	2b2e      	cmp	r3, #46	; 0x2e
 8006c66:	d10c      	bne.n	8006c82 <_vfiprintf_r+0x15a>
 8006c68:	7863      	ldrb	r3, [r4, #1]
 8006c6a:	2b2a      	cmp	r3, #42	; 0x2a
 8006c6c:	d134      	bne.n	8006cd8 <_vfiprintf_r+0x1b0>
 8006c6e:	9b03      	ldr	r3, [sp, #12]
 8006c70:	1d1a      	adds	r2, r3, #4
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	9203      	str	r2, [sp, #12]
 8006c76:	2b00      	cmp	r3, #0
 8006c78:	bfb8      	it	lt
 8006c7a:	f04f 33ff 	movlt.w	r3, #4294967295
 8006c7e:	3402      	adds	r4, #2
 8006c80:	9305      	str	r3, [sp, #20]
 8006c82:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8006d58 <_vfiprintf_r+0x230>
 8006c86:	7821      	ldrb	r1, [r4, #0]
 8006c88:	2203      	movs	r2, #3
 8006c8a:	4650      	mov	r0, sl
 8006c8c:	f7f9 faa0 	bl	80001d0 <memchr>
 8006c90:	b138      	cbz	r0, 8006ca2 <_vfiprintf_r+0x17a>
 8006c92:	9b04      	ldr	r3, [sp, #16]
 8006c94:	eba0 000a 	sub.w	r0, r0, sl
 8006c98:	2240      	movs	r2, #64	; 0x40
 8006c9a:	4082      	lsls	r2, r0
 8006c9c:	4313      	orrs	r3, r2
 8006c9e:	3401      	adds	r4, #1
 8006ca0:	9304      	str	r3, [sp, #16]
 8006ca2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006ca6:	4829      	ldr	r0, [pc, #164]	; (8006d4c <_vfiprintf_r+0x224>)
 8006ca8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006cac:	2206      	movs	r2, #6
 8006cae:	f7f9 fa8f 	bl	80001d0 <memchr>
 8006cb2:	2800      	cmp	r0, #0
 8006cb4:	d03f      	beq.n	8006d36 <_vfiprintf_r+0x20e>
 8006cb6:	4b26      	ldr	r3, [pc, #152]	; (8006d50 <_vfiprintf_r+0x228>)
 8006cb8:	bb1b      	cbnz	r3, 8006d02 <_vfiprintf_r+0x1da>
 8006cba:	9b03      	ldr	r3, [sp, #12]
 8006cbc:	3307      	adds	r3, #7
 8006cbe:	f023 0307 	bic.w	r3, r3, #7
 8006cc2:	3308      	adds	r3, #8
 8006cc4:	9303      	str	r3, [sp, #12]
 8006cc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006cc8:	443b      	add	r3, r7
 8006cca:	9309      	str	r3, [sp, #36]	; 0x24
 8006ccc:	e768      	b.n	8006ba0 <_vfiprintf_r+0x78>
 8006cce:	fb0c 3202 	mla	r2, ip, r2, r3
 8006cd2:	460c      	mov	r4, r1
 8006cd4:	2001      	movs	r0, #1
 8006cd6:	e7a6      	b.n	8006c26 <_vfiprintf_r+0xfe>
 8006cd8:	2300      	movs	r3, #0
 8006cda:	3401      	adds	r4, #1
 8006cdc:	9305      	str	r3, [sp, #20]
 8006cde:	4619      	mov	r1, r3
 8006ce0:	f04f 0c0a 	mov.w	ip, #10
 8006ce4:	4620      	mov	r0, r4
 8006ce6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006cea:	3a30      	subs	r2, #48	; 0x30
 8006cec:	2a09      	cmp	r2, #9
 8006cee:	d903      	bls.n	8006cf8 <_vfiprintf_r+0x1d0>
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d0c6      	beq.n	8006c82 <_vfiprintf_r+0x15a>
 8006cf4:	9105      	str	r1, [sp, #20]
 8006cf6:	e7c4      	b.n	8006c82 <_vfiprintf_r+0x15a>
 8006cf8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006cfc:	4604      	mov	r4, r0
 8006cfe:	2301      	movs	r3, #1
 8006d00:	e7f0      	b.n	8006ce4 <_vfiprintf_r+0x1bc>
 8006d02:	ab03      	add	r3, sp, #12
 8006d04:	9300      	str	r3, [sp, #0]
 8006d06:	462a      	mov	r2, r5
 8006d08:	4b12      	ldr	r3, [pc, #72]	; (8006d54 <_vfiprintf_r+0x22c>)
 8006d0a:	a904      	add	r1, sp, #16
 8006d0c:	4630      	mov	r0, r6
 8006d0e:	f3af 8000 	nop.w
 8006d12:	4607      	mov	r7, r0
 8006d14:	1c78      	adds	r0, r7, #1
 8006d16:	d1d6      	bne.n	8006cc6 <_vfiprintf_r+0x19e>
 8006d18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d1a:	07d9      	lsls	r1, r3, #31
 8006d1c:	d405      	bmi.n	8006d2a <_vfiprintf_r+0x202>
 8006d1e:	89ab      	ldrh	r3, [r5, #12]
 8006d20:	059a      	lsls	r2, r3, #22
 8006d22:	d402      	bmi.n	8006d2a <_vfiprintf_r+0x202>
 8006d24:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d26:	f7ff fddb 	bl	80068e0 <__retarget_lock_release_recursive>
 8006d2a:	89ab      	ldrh	r3, [r5, #12]
 8006d2c:	065b      	lsls	r3, r3, #25
 8006d2e:	f53f af1d 	bmi.w	8006b6c <_vfiprintf_r+0x44>
 8006d32:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006d34:	e71c      	b.n	8006b70 <_vfiprintf_r+0x48>
 8006d36:	ab03      	add	r3, sp, #12
 8006d38:	9300      	str	r3, [sp, #0]
 8006d3a:	462a      	mov	r2, r5
 8006d3c:	4b05      	ldr	r3, [pc, #20]	; (8006d54 <_vfiprintf_r+0x22c>)
 8006d3e:	a904      	add	r1, sp, #16
 8006d40:	4630      	mov	r0, r6
 8006d42:	f000 f879 	bl	8006e38 <_printf_i>
 8006d46:	e7e4      	b.n	8006d12 <_vfiprintf_r+0x1ea>
 8006d48:	08007434 	.word	0x08007434
 8006d4c:	0800743e 	.word	0x0800743e
 8006d50:	00000000 	.word	0x00000000
 8006d54:	08006b03 	.word	0x08006b03
 8006d58:	0800743a 	.word	0x0800743a

08006d5c <_printf_common>:
 8006d5c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006d60:	4616      	mov	r6, r2
 8006d62:	4699      	mov	r9, r3
 8006d64:	688a      	ldr	r2, [r1, #8]
 8006d66:	690b      	ldr	r3, [r1, #16]
 8006d68:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8006d6c:	4293      	cmp	r3, r2
 8006d6e:	bfb8      	it	lt
 8006d70:	4613      	movlt	r3, r2
 8006d72:	6033      	str	r3, [r6, #0]
 8006d74:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8006d78:	4607      	mov	r7, r0
 8006d7a:	460c      	mov	r4, r1
 8006d7c:	b10a      	cbz	r2, 8006d82 <_printf_common+0x26>
 8006d7e:	3301      	adds	r3, #1
 8006d80:	6033      	str	r3, [r6, #0]
 8006d82:	6823      	ldr	r3, [r4, #0]
 8006d84:	0699      	lsls	r1, r3, #26
 8006d86:	bf42      	ittt	mi
 8006d88:	6833      	ldrmi	r3, [r6, #0]
 8006d8a:	3302      	addmi	r3, #2
 8006d8c:	6033      	strmi	r3, [r6, #0]
 8006d8e:	6825      	ldr	r5, [r4, #0]
 8006d90:	f015 0506 	ands.w	r5, r5, #6
 8006d94:	d106      	bne.n	8006da4 <_printf_common+0x48>
 8006d96:	f104 0a19 	add.w	sl, r4, #25
 8006d9a:	68e3      	ldr	r3, [r4, #12]
 8006d9c:	6832      	ldr	r2, [r6, #0]
 8006d9e:	1a9b      	subs	r3, r3, r2
 8006da0:	42ab      	cmp	r3, r5
 8006da2:	dc26      	bgt.n	8006df2 <_printf_common+0x96>
 8006da4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006da8:	1e13      	subs	r3, r2, #0
 8006daa:	6822      	ldr	r2, [r4, #0]
 8006dac:	bf18      	it	ne
 8006dae:	2301      	movne	r3, #1
 8006db0:	0692      	lsls	r2, r2, #26
 8006db2:	d42b      	bmi.n	8006e0c <_printf_common+0xb0>
 8006db4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006db8:	4649      	mov	r1, r9
 8006dba:	4638      	mov	r0, r7
 8006dbc:	47c0      	blx	r8
 8006dbe:	3001      	adds	r0, #1
 8006dc0:	d01e      	beq.n	8006e00 <_printf_common+0xa4>
 8006dc2:	6823      	ldr	r3, [r4, #0]
 8006dc4:	6922      	ldr	r2, [r4, #16]
 8006dc6:	f003 0306 	and.w	r3, r3, #6
 8006dca:	2b04      	cmp	r3, #4
 8006dcc:	bf02      	ittt	eq
 8006dce:	68e5      	ldreq	r5, [r4, #12]
 8006dd0:	6833      	ldreq	r3, [r6, #0]
 8006dd2:	1aed      	subeq	r5, r5, r3
 8006dd4:	68a3      	ldr	r3, [r4, #8]
 8006dd6:	bf0c      	ite	eq
 8006dd8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ddc:	2500      	movne	r5, #0
 8006dde:	4293      	cmp	r3, r2
 8006de0:	bfc4      	itt	gt
 8006de2:	1a9b      	subgt	r3, r3, r2
 8006de4:	18ed      	addgt	r5, r5, r3
 8006de6:	2600      	movs	r6, #0
 8006de8:	341a      	adds	r4, #26
 8006dea:	42b5      	cmp	r5, r6
 8006dec:	d11a      	bne.n	8006e24 <_printf_common+0xc8>
 8006dee:	2000      	movs	r0, #0
 8006df0:	e008      	b.n	8006e04 <_printf_common+0xa8>
 8006df2:	2301      	movs	r3, #1
 8006df4:	4652      	mov	r2, sl
 8006df6:	4649      	mov	r1, r9
 8006df8:	4638      	mov	r0, r7
 8006dfa:	47c0      	blx	r8
 8006dfc:	3001      	adds	r0, #1
 8006dfe:	d103      	bne.n	8006e08 <_printf_common+0xac>
 8006e00:	f04f 30ff 	mov.w	r0, #4294967295
 8006e04:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006e08:	3501      	adds	r5, #1
 8006e0a:	e7c6      	b.n	8006d9a <_printf_common+0x3e>
 8006e0c:	18e1      	adds	r1, r4, r3
 8006e0e:	1c5a      	adds	r2, r3, #1
 8006e10:	2030      	movs	r0, #48	; 0x30
 8006e12:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006e16:	4422      	add	r2, r4
 8006e18:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8006e1c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8006e20:	3302      	adds	r3, #2
 8006e22:	e7c7      	b.n	8006db4 <_printf_common+0x58>
 8006e24:	2301      	movs	r3, #1
 8006e26:	4622      	mov	r2, r4
 8006e28:	4649      	mov	r1, r9
 8006e2a:	4638      	mov	r0, r7
 8006e2c:	47c0      	blx	r8
 8006e2e:	3001      	adds	r0, #1
 8006e30:	d0e6      	beq.n	8006e00 <_printf_common+0xa4>
 8006e32:	3601      	adds	r6, #1
 8006e34:	e7d9      	b.n	8006dea <_printf_common+0x8e>
	...

08006e38 <_printf_i>:
 8006e38:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006e3c:	7e0f      	ldrb	r7, [r1, #24]
 8006e3e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8006e40:	2f78      	cmp	r7, #120	; 0x78
 8006e42:	4691      	mov	r9, r2
 8006e44:	4680      	mov	r8, r0
 8006e46:	460c      	mov	r4, r1
 8006e48:	469a      	mov	sl, r3
 8006e4a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8006e4e:	d807      	bhi.n	8006e60 <_printf_i+0x28>
 8006e50:	2f62      	cmp	r7, #98	; 0x62
 8006e52:	d80a      	bhi.n	8006e6a <_printf_i+0x32>
 8006e54:	2f00      	cmp	r7, #0
 8006e56:	f000 80d4 	beq.w	8007002 <_printf_i+0x1ca>
 8006e5a:	2f58      	cmp	r7, #88	; 0x58
 8006e5c:	f000 80c0 	beq.w	8006fe0 <_printf_i+0x1a8>
 8006e60:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006e64:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8006e68:	e03a      	b.n	8006ee0 <_printf_i+0xa8>
 8006e6a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8006e6e:	2b15      	cmp	r3, #21
 8006e70:	d8f6      	bhi.n	8006e60 <_printf_i+0x28>
 8006e72:	a101      	add	r1, pc, #4	; (adr r1, 8006e78 <_printf_i+0x40>)
 8006e74:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006e78:	08006ed1 	.word	0x08006ed1
 8006e7c:	08006ee5 	.word	0x08006ee5
 8006e80:	08006e61 	.word	0x08006e61
 8006e84:	08006e61 	.word	0x08006e61
 8006e88:	08006e61 	.word	0x08006e61
 8006e8c:	08006e61 	.word	0x08006e61
 8006e90:	08006ee5 	.word	0x08006ee5
 8006e94:	08006e61 	.word	0x08006e61
 8006e98:	08006e61 	.word	0x08006e61
 8006e9c:	08006e61 	.word	0x08006e61
 8006ea0:	08006e61 	.word	0x08006e61
 8006ea4:	08006fe9 	.word	0x08006fe9
 8006ea8:	08006f11 	.word	0x08006f11
 8006eac:	08006fa3 	.word	0x08006fa3
 8006eb0:	08006e61 	.word	0x08006e61
 8006eb4:	08006e61 	.word	0x08006e61
 8006eb8:	0800700b 	.word	0x0800700b
 8006ebc:	08006e61 	.word	0x08006e61
 8006ec0:	08006f11 	.word	0x08006f11
 8006ec4:	08006e61 	.word	0x08006e61
 8006ec8:	08006e61 	.word	0x08006e61
 8006ecc:	08006fab 	.word	0x08006fab
 8006ed0:	682b      	ldr	r3, [r5, #0]
 8006ed2:	1d1a      	adds	r2, r3, #4
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	602a      	str	r2, [r5, #0]
 8006ed8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8006edc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006ee0:	2301      	movs	r3, #1
 8006ee2:	e09f      	b.n	8007024 <_printf_i+0x1ec>
 8006ee4:	6820      	ldr	r0, [r4, #0]
 8006ee6:	682b      	ldr	r3, [r5, #0]
 8006ee8:	0607      	lsls	r7, r0, #24
 8006eea:	f103 0104 	add.w	r1, r3, #4
 8006eee:	6029      	str	r1, [r5, #0]
 8006ef0:	d501      	bpl.n	8006ef6 <_printf_i+0xbe>
 8006ef2:	681e      	ldr	r6, [r3, #0]
 8006ef4:	e003      	b.n	8006efe <_printf_i+0xc6>
 8006ef6:	0646      	lsls	r6, r0, #25
 8006ef8:	d5fb      	bpl.n	8006ef2 <_printf_i+0xba>
 8006efa:	f9b3 6000 	ldrsh.w	r6, [r3]
 8006efe:	2e00      	cmp	r6, #0
 8006f00:	da03      	bge.n	8006f0a <_printf_i+0xd2>
 8006f02:	232d      	movs	r3, #45	; 0x2d
 8006f04:	4276      	negs	r6, r6
 8006f06:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8006f0a:	485a      	ldr	r0, [pc, #360]	; (8007074 <_printf_i+0x23c>)
 8006f0c:	230a      	movs	r3, #10
 8006f0e:	e012      	b.n	8006f36 <_printf_i+0xfe>
 8006f10:	682b      	ldr	r3, [r5, #0]
 8006f12:	6820      	ldr	r0, [r4, #0]
 8006f14:	1d19      	adds	r1, r3, #4
 8006f16:	6029      	str	r1, [r5, #0]
 8006f18:	0605      	lsls	r5, r0, #24
 8006f1a:	d501      	bpl.n	8006f20 <_printf_i+0xe8>
 8006f1c:	681e      	ldr	r6, [r3, #0]
 8006f1e:	e002      	b.n	8006f26 <_printf_i+0xee>
 8006f20:	0641      	lsls	r1, r0, #25
 8006f22:	d5fb      	bpl.n	8006f1c <_printf_i+0xe4>
 8006f24:	881e      	ldrh	r6, [r3, #0]
 8006f26:	4853      	ldr	r0, [pc, #332]	; (8007074 <_printf_i+0x23c>)
 8006f28:	2f6f      	cmp	r7, #111	; 0x6f
 8006f2a:	bf0c      	ite	eq
 8006f2c:	2308      	moveq	r3, #8
 8006f2e:	230a      	movne	r3, #10
 8006f30:	2100      	movs	r1, #0
 8006f32:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8006f36:	6865      	ldr	r5, [r4, #4]
 8006f38:	60a5      	str	r5, [r4, #8]
 8006f3a:	2d00      	cmp	r5, #0
 8006f3c:	bfa2      	ittt	ge
 8006f3e:	6821      	ldrge	r1, [r4, #0]
 8006f40:	f021 0104 	bicge.w	r1, r1, #4
 8006f44:	6021      	strge	r1, [r4, #0]
 8006f46:	b90e      	cbnz	r6, 8006f4c <_printf_i+0x114>
 8006f48:	2d00      	cmp	r5, #0
 8006f4a:	d04b      	beq.n	8006fe4 <_printf_i+0x1ac>
 8006f4c:	4615      	mov	r5, r2
 8006f4e:	fbb6 f1f3 	udiv	r1, r6, r3
 8006f52:	fb03 6711 	mls	r7, r3, r1, r6
 8006f56:	5dc7      	ldrb	r7, [r0, r7]
 8006f58:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8006f5c:	4637      	mov	r7, r6
 8006f5e:	42bb      	cmp	r3, r7
 8006f60:	460e      	mov	r6, r1
 8006f62:	d9f4      	bls.n	8006f4e <_printf_i+0x116>
 8006f64:	2b08      	cmp	r3, #8
 8006f66:	d10b      	bne.n	8006f80 <_printf_i+0x148>
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	07de      	lsls	r6, r3, #31
 8006f6c:	d508      	bpl.n	8006f80 <_printf_i+0x148>
 8006f6e:	6923      	ldr	r3, [r4, #16]
 8006f70:	6861      	ldr	r1, [r4, #4]
 8006f72:	4299      	cmp	r1, r3
 8006f74:	bfde      	ittt	le
 8006f76:	2330      	movle	r3, #48	; 0x30
 8006f78:	f805 3c01 	strble.w	r3, [r5, #-1]
 8006f7c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006f80:	1b52      	subs	r2, r2, r5
 8006f82:	6122      	str	r2, [r4, #16]
 8006f84:	f8cd a000 	str.w	sl, [sp]
 8006f88:	464b      	mov	r3, r9
 8006f8a:	aa03      	add	r2, sp, #12
 8006f8c:	4621      	mov	r1, r4
 8006f8e:	4640      	mov	r0, r8
 8006f90:	f7ff fee4 	bl	8006d5c <_printf_common>
 8006f94:	3001      	adds	r0, #1
 8006f96:	d14a      	bne.n	800702e <_printf_i+0x1f6>
 8006f98:	f04f 30ff 	mov.w	r0, #4294967295
 8006f9c:	b004      	add	sp, #16
 8006f9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fa2:	6823      	ldr	r3, [r4, #0]
 8006fa4:	f043 0320 	orr.w	r3, r3, #32
 8006fa8:	6023      	str	r3, [r4, #0]
 8006faa:	4833      	ldr	r0, [pc, #204]	; (8007078 <_printf_i+0x240>)
 8006fac:	2778      	movs	r7, #120	; 0x78
 8006fae:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006fb2:	6823      	ldr	r3, [r4, #0]
 8006fb4:	6829      	ldr	r1, [r5, #0]
 8006fb6:	061f      	lsls	r7, r3, #24
 8006fb8:	f851 6b04 	ldr.w	r6, [r1], #4
 8006fbc:	d402      	bmi.n	8006fc4 <_printf_i+0x18c>
 8006fbe:	065f      	lsls	r7, r3, #25
 8006fc0:	bf48      	it	mi
 8006fc2:	b2b6      	uxthmi	r6, r6
 8006fc4:	07df      	lsls	r7, r3, #31
 8006fc6:	bf48      	it	mi
 8006fc8:	f043 0320 	orrmi.w	r3, r3, #32
 8006fcc:	6029      	str	r1, [r5, #0]
 8006fce:	bf48      	it	mi
 8006fd0:	6023      	strmi	r3, [r4, #0]
 8006fd2:	b91e      	cbnz	r6, 8006fdc <_printf_i+0x1a4>
 8006fd4:	6823      	ldr	r3, [r4, #0]
 8006fd6:	f023 0320 	bic.w	r3, r3, #32
 8006fda:	6023      	str	r3, [r4, #0]
 8006fdc:	2310      	movs	r3, #16
 8006fde:	e7a7      	b.n	8006f30 <_printf_i+0xf8>
 8006fe0:	4824      	ldr	r0, [pc, #144]	; (8007074 <_printf_i+0x23c>)
 8006fe2:	e7e4      	b.n	8006fae <_printf_i+0x176>
 8006fe4:	4615      	mov	r5, r2
 8006fe6:	e7bd      	b.n	8006f64 <_printf_i+0x12c>
 8006fe8:	682b      	ldr	r3, [r5, #0]
 8006fea:	6826      	ldr	r6, [r4, #0]
 8006fec:	6961      	ldr	r1, [r4, #20]
 8006fee:	1d18      	adds	r0, r3, #4
 8006ff0:	6028      	str	r0, [r5, #0]
 8006ff2:	0635      	lsls	r5, r6, #24
 8006ff4:	681b      	ldr	r3, [r3, #0]
 8006ff6:	d501      	bpl.n	8006ffc <_printf_i+0x1c4>
 8006ff8:	6019      	str	r1, [r3, #0]
 8006ffa:	e002      	b.n	8007002 <_printf_i+0x1ca>
 8006ffc:	0670      	lsls	r0, r6, #25
 8006ffe:	d5fb      	bpl.n	8006ff8 <_printf_i+0x1c0>
 8007000:	8019      	strh	r1, [r3, #0]
 8007002:	2300      	movs	r3, #0
 8007004:	6123      	str	r3, [r4, #16]
 8007006:	4615      	mov	r5, r2
 8007008:	e7bc      	b.n	8006f84 <_printf_i+0x14c>
 800700a:	682b      	ldr	r3, [r5, #0]
 800700c:	1d1a      	adds	r2, r3, #4
 800700e:	602a      	str	r2, [r5, #0]
 8007010:	681d      	ldr	r5, [r3, #0]
 8007012:	6862      	ldr	r2, [r4, #4]
 8007014:	2100      	movs	r1, #0
 8007016:	4628      	mov	r0, r5
 8007018:	f7f9 f8da 	bl	80001d0 <memchr>
 800701c:	b108      	cbz	r0, 8007022 <_printf_i+0x1ea>
 800701e:	1b40      	subs	r0, r0, r5
 8007020:	6060      	str	r0, [r4, #4]
 8007022:	6863      	ldr	r3, [r4, #4]
 8007024:	6123      	str	r3, [r4, #16]
 8007026:	2300      	movs	r3, #0
 8007028:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800702c:	e7aa      	b.n	8006f84 <_printf_i+0x14c>
 800702e:	6923      	ldr	r3, [r4, #16]
 8007030:	462a      	mov	r2, r5
 8007032:	4649      	mov	r1, r9
 8007034:	4640      	mov	r0, r8
 8007036:	47d0      	blx	sl
 8007038:	3001      	adds	r0, #1
 800703a:	d0ad      	beq.n	8006f98 <_printf_i+0x160>
 800703c:	6823      	ldr	r3, [r4, #0]
 800703e:	079b      	lsls	r3, r3, #30
 8007040:	d413      	bmi.n	800706a <_printf_i+0x232>
 8007042:	68e0      	ldr	r0, [r4, #12]
 8007044:	9b03      	ldr	r3, [sp, #12]
 8007046:	4298      	cmp	r0, r3
 8007048:	bfb8      	it	lt
 800704a:	4618      	movlt	r0, r3
 800704c:	e7a6      	b.n	8006f9c <_printf_i+0x164>
 800704e:	2301      	movs	r3, #1
 8007050:	4632      	mov	r2, r6
 8007052:	4649      	mov	r1, r9
 8007054:	4640      	mov	r0, r8
 8007056:	47d0      	blx	sl
 8007058:	3001      	adds	r0, #1
 800705a:	d09d      	beq.n	8006f98 <_printf_i+0x160>
 800705c:	3501      	adds	r5, #1
 800705e:	68e3      	ldr	r3, [r4, #12]
 8007060:	9903      	ldr	r1, [sp, #12]
 8007062:	1a5b      	subs	r3, r3, r1
 8007064:	42ab      	cmp	r3, r5
 8007066:	dcf2      	bgt.n	800704e <_printf_i+0x216>
 8007068:	e7eb      	b.n	8007042 <_printf_i+0x20a>
 800706a:	2500      	movs	r5, #0
 800706c:	f104 0619 	add.w	r6, r4, #25
 8007070:	e7f5      	b.n	800705e <_printf_i+0x226>
 8007072:	bf00      	nop
 8007074:	08007445 	.word	0x08007445
 8007078:	08007456 	.word	0x08007456

0800707c <__sflush_r>:
 800707c:	898a      	ldrh	r2, [r1, #12]
 800707e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007082:	4605      	mov	r5, r0
 8007084:	0710      	lsls	r0, r2, #28
 8007086:	460c      	mov	r4, r1
 8007088:	d458      	bmi.n	800713c <__sflush_r+0xc0>
 800708a:	684b      	ldr	r3, [r1, #4]
 800708c:	2b00      	cmp	r3, #0
 800708e:	dc05      	bgt.n	800709c <__sflush_r+0x20>
 8007090:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8007092:	2b00      	cmp	r3, #0
 8007094:	dc02      	bgt.n	800709c <__sflush_r+0x20>
 8007096:	2000      	movs	r0, #0
 8007098:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800709c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800709e:	2e00      	cmp	r6, #0
 80070a0:	d0f9      	beq.n	8007096 <__sflush_r+0x1a>
 80070a2:	2300      	movs	r3, #0
 80070a4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80070a8:	682f      	ldr	r7, [r5, #0]
 80070aa:	6a21      	ldr	r1, [r4, #32]
 80070ac:	602b      	str	r3, [r5, #0]
 80070ae:	d032      	beq.n	8007116 <__sflush_r+0x9a>
 80070b0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80070b2:	89a3      	ldrh	r3, [r4, #12]
 80070b4:	075a      	lsls	r2, r3, #29
 80070b6:	d505      	bpl.n	80070c4 <__sflush_r+0x48>
 80070b8:	6863      	ldr	r3, [r4, #4]
 80070ba:	1ac0      	subs	r0, r0, r3
 80070bc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80070be:	b10b      	cbz	r3, 80070c4 <__sflush_r+0x48>
 80070c0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80070c2:	1ac0      	subs	r0, r0, r3
 80070c4:	2300      	movs	r3, #0
 80070c6:	4602      	mov	r2, r0
 80070c8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80070ca:	6a21      	ldr	r1, [r4, #32]
 80070cc:	4628      	mov	r0, r5
 80070ce:	47b0      	blx	r6
 80070d0:	1c43      	adds	r3, r0, #1
 80070d2:	89a3      	ldrh	r3, [r4, #12]
 80070d4:	d106      	bne.n	80070e4 <__sflush_r+0x68>
 80070d6:	6829      	ldr	r1, [r5, #0]
 80070d8:	291d      	cmp	r1, #29
 80070da:	d82b      	bhi.n	8007134 <__sflush_r+0xb8>
 80070dc:	4a29      	ldr	r2, [pc, #164]	; (8007184 <__sflush_r+0x108>)
 80070de:	410a      	asrs	r2, r1
 80070e0:	07d6      	lsls	r6, r2, #31
 80070e2:	d427      	bmi.n	8007134 <__sflush_r+0xb8>
 80070e4:	2200      	movs	r2, #0
 80070e6:	6062      	str	r2, [r4, #4]
 80070e8:	04d9      	lsls	r1, r3, #19
 80070ea:	6922      	ldr	r2, [r4, #16]
 80070ec:	6022      	str	r2, [r4, #0]
 80070ee:	d504      	bpl.n	80070fa <__sflush_r+0x7e>
 80070f0:	1c42      	adds	r2, r0, #1
 80070f2:	d101      	bne.n	80070f8 <__sflush_r+0x7c>
 80070f4:	682b      	ldr	r3, [r5, #0]
 80070f6:	b903      	cbnz	r3, 80070fa <__sflush_r+0x7e>
 80070f8:	6560      	str	r0, [r4, #84]	; 0x54
 80070fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80070fc:	602f      	str	r7, [r5, #0]
 80070fe:	2900      	cmp	r1, #0
 8007100:	d0c9      	beq.n	8007096 <__sflush_r+0x1a>
 8007102:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8007106:	4299      	cmp	r1, r3
 8007108:	d002      	beq.n	8007110 <__sflush_r+0x94>
 800710a:	4628      	mov	r0, r5
 800710c:	f7ff fbea 	bl	80068e4 <_free_r>
 8007110:	2000      	movs	r0, #0
 8007112:	6360      	str	r0, [r4, #52]	; 0x34
 8007114:	e7c0      	b.n	8007098 <__sflush_r+0x1c>
 8007116:	2301      	movs	r3, #1
 8007118:	4628      	mov	r0, r5
 800711a:	47b0      	blx	r6
 800711c:	1c41      	adds	r1, r0, #1
 800711e:	d1c8      	bne.n	80070b2 <__sflush_r+0x36>
 8007120:	682b      	ldr	r3, [r5, #0]
 8007122:	2b00      	cmp	r3, #0
 8007124:	d0c5      	beq.n	80070b2 <__sflush_r+0x36>
 8007126:	2b1d      	cmp	r3, #29
 8007128:	d001      	beq.n	800712e <__sflush_r+0xb2>
 800712a:	2b16      	cmp	r3, #22
 800712c:	d101      	bne.n	8007132 <__sflush_r+0xb6>
 800712e:	602f      	str	r7, [r5, #0]
 8007130:	e7b1      	b.n	8007096 <__sflush_r+0x1a>
 8007132:	89a3      	ldrh	r3, [r4, #12]
 8007134:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007138:	81a3      	strh	r3, [r4, #12]
 800713a:	e7ad      	b.n	8007098 <__sflush_r+0x1c>
 800713c:	690f      	ldr	r7, [r1, #16]
 800713e:	2f00      	cmp	r7, #0
 8007140:	d0a9      	beq.n	8007096 <__sflush_r+0x1a>
 8007142:	0793      	lsls	r3, r2, #30
 8007144:	680e      	ldr	r6, [r1, #0]
 8007146:	bf08      	it	eq
 8007148:	694b      	ldreq	r3, [r1, #20]
 800714a:	600f      	str	r7, [r1, #0]
 800714c:	bf18      	it	ne
 800714e:	2300      	movne	r3, #0
 8007150:	eba6 0807 	sub.w	r8, r6, r7
 8007154:	608b      	str	r3, [r1, #8]
 8007156:	f1b8 0f00 	cmp.w	r8, #0
 800715a:	dd9c      	ble.n	8007096 <__sflush_r+0x1a>
 800715c:	6a21      	ldr	r1, [r4, #32]
 800715e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8007160:	4643      	mov	r3, r8
 8007162:	463a      	mov	r2, r7
 8007164:	4628      	mov	r0, r5
 8007166:	47b0      	blx	r6
 8007168:	2800      	cmp	r0, #0
 800716a:	dc06      	bgt.n	800717a <__sflush_r+0xfe>
 800716c:	89a3      	ldrh	r3, [r4, #12]
 800716e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	f04f 30ff 	mov.w	r0, #4294967295
 8007178:	e78e      	b.n	8007098 <__sflush_r+0x1c>
 800717a:	4407      	add	r7, r0
 800717c:	eba8 0800 	sub.w	r8, r8, r0
 8007180:	e7e9      	b.n	8007156 <__sflush_r+0xda>
 8007182:	bf00      	nop
 8007184:	dfbffffe 	.word	0xdfbffffe

08007188 <_fflush_r>:
 8007188:	b538      	push	{r3, r4, r5, lr}
 800718a:	690b      	ldr	r3, [r1, #16]
 800718c:	4605      	mov	r5, r0
 800718e:	460c      	mov	r4, r1
 8007190:	b913      	cbnz	r3, 8007198 <_fflush_r+0x10>
 8007192:	2500      	movs	r5, #0
 8007194:	4628      	mov	r0, r5
 8007196:	bd38      	pop	{r3, r4, r5, pc}
 8007198:	b118      	cbz	r0, 80071a2 <_fflush_r+0x1a>
 800719a:	6a03      	ldr	r3, [r0, #32]
 800719c:	b90b      	cbnz	r3, 80071a2 <_fflush_r+0x1a>
 800719e:	f7ff f9a9 	bl	80064f4 <__sinit>
 80071a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80071a6:	2b00      	cmp	r3, #0
 80071a8:	d0f3      	beq.n	8007192 <_fflush_r+0xa>
 80071aa:	6e62      	ldr	r2, [r4, #100]	; 0x64
 80071ac:	07d0      	lsls	r0, r2, #31
 80071ae:	d404      	bmi.n	80071ba <_fflush_r+0x32>
 80071b0:	0599      	lsls	r1, r3, #22
 80071b2:	d402      	bmi.n	80071ba <_fflush_r+0x32>
 80071b4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071b6:	f7ff fb92 	bl	80068de <__retarget_lock_acquire_recursive>
 80071ba:	4628      	mov	r0, r5
 80071bc:	4621      	mov	r1, r4
 80071be:	f7ff ff5d 	bl	800707c <__sflush_r>
 80071c2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80071c4:	07da      	lsls	r2, r3, #31
 80071c6:	4605      	mov	r5, r0
 80071c8:	d4e4      	bmi.n	8007194 <_fflush_r+0xc>
 80071ca:	89a3      	ldrh	r3, [r4, #12]
 80071cc:	059b      	lsls	r3, r3, #22
 80071ce:	d4e1      	bmi.n	8007194 <_fflush_r+0xc>
 80071d0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80071d2:	f7ff fb85 	bl	80068e0 <__retarget_lock_release_recursive>
 80071d6:	e7dd      	b.n	8007194 <_fflush_r+0xc>

080071d8 <__swhatbuf_r>:
 80071d8:	b570      	push	{r4, r5, r6, lr}
 80071da:	460c      	mov	r4, r1
 80071dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80071e0:	2900      	cmp	r1, #0
 80071e2:	b096      	sub	sp, #88	; 0x58
 80071e4:	4615      	mov	r5, r2
 80071e6:	461e      	mov	r6, r3
 80071e8:	da0d      	bge.n	8007206 <__swhatbuf_r+0x2e>
 80071ea:	89a3      	ldrh	r3, [r4, #12]
 80071ec:	f013 0f80 	tst.w	r3, #128	; 0x80
 80071f0:	f04f 0100 	mov.w	r1, #0
 80071f4:	bf0c      	ite	eq
 80071f6:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80071fa:	2340      	movne	r3, #64	; 0x40
 80071fc:	2000      	movs	r0, #0
 80071fe:	6031      	str	r1, [r6, #0]
 8007200:	602b      	str	r3, [r5, #0]
 8007202:	b016      	add	sp, #88	; 0x58
 8007204:	bd70      	pop	{r4, r5, r6, pc}
 8007206:	466a      	mov	r2, sp
 8007208:	f000 f848 	bl	800729c <_fstat_r>
 800720c:	2800      	cmp	r0, #0
 800720e:	dbec      	blt.n	80071ea <__swhatbuf_r+0x12>
 8007210:	9901      	ldr	r1, [sp, #4]
 8007212:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007216:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800721a:	4259      	negs	r1, r3
 800721c:	4159      	adcs	r1, r3
 800721e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007222:	e7eb      	b.n	80071fc <__swhatbuf_r+0x24>

08007224 <__smakebuf_r>:
 8007224:	898b      	ldrh	r3, [r1, #12]
 8007226:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8007228:	079d      	lsls	r5, r3, #30
 800722a:	4606      	mov	r6, r0
 800722c:	460c      	mov	r4, r1
 800722e:	d507      	bpl.n	8007240 <__smakebuf_r+0x1c>
 8007230:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007234:	6023      	str	r3, [r4, #0]
 8007236:	6123      	str	r3, [r4, #16]
 8007238:	2301      	movs	r3, #1
 800723a:	6163      	str	r3, [r4, #20]
 800723c:	b002      	add	sp, #8
 800723e:	bd70      	pop	{r4, r5, r6, pc}
 8007240:	ab01      	add	r3, sp, #4
 8007242:	466a      	mov	r2, sp
 8007244:	f7ff ffc8 	bl	80071d8 <__swhatbuf_r>
 8007248:	9900      	ldr	r1, [sp, #0]
 800724a:	4605      	mov	r5, r0
 800724c:	4630      	mov	r0, r6
 800724e:	f7ff fbb5 	bl	80069bc <_malloc_r>
 8007252:	b948      	cbnz	r0, 8007268 <__smakebuf_r+0x44>
 8007254:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007258:	059a      	lsls	r2, r3, #22
 800725a:	d4ef      	bmi.n	800723c <__smakebuf_r+0x18>
 800725c:	f023 0303 	bic.w	r3, r3, #3
 8007260:	f043 0302 	orr.w	r3, r3, #2
 8007264:	81a3      	strh	r3, [r4, #12]
 8007266:	e7e3      	b.n	8007230 <__smakebuf_r+0xc>
 8007268:	89a3      	ldrh	r3, [r4, #12]
 800726a:	6020      	str	r0, [r4, #0]
 800726c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007270:	81a3      	strh	r3, [r4, #12]
 8007272:	9b00      	ldr	r3, [sp, #0]
 8007274:	6163      	str	r3, [r4, #20]
 8007276:	9b01      	ldr	r3, [sp, #4]
 8007278:	6120      	str	r0, [r4, #16]
 800727a:	b15b      	cbz	r3, 8007294 <__smakebuf_r+0x70>
 800727c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007280:	4630      	mov	r0, r6
 8007282:	f000 f81d 	bl	80072c0 <_isatty_r>
 8007286:	b128      	cbz	r0, 8007294 <__smakebuf_r+0x70>
 8007288:	89a3      	ldrh	r3, [r4, #12]
 800728a:	f023 0303 	bic.w	r3, r3, #3
 800728e:	f043 0301 	orr.w	r3, r3, #1
 8007292:	81a3      	strh	r3, [r4, #12]
 8007294:	89a3      	ldrh	r3, [r4, #12]
 8007296:	431d      	orrs	r5, r3
 8007298:	81a5      	strh	r5, [r4, #12]
 800729a:	e7cf      	b.n	800723c <__smakebuf_r+0x18>

0800729c <_fstat_r>:
 800729c:	b538      	push	{r3, r4, r5, lr}
 800729e:	4d07      	ldr	r5, [pc, #28]	; (80072bc <_fstat_r+0x20>)
 80072a0:	2300      	movs	r3, #0
 80072a2:	4604      	mov	r4, r0
 80072a4:	4608      	mov	r0, r1
 80072a6:	4611      	mov	r1, r2
 80072a8:	602b      	str	r3, [r5, #0]
 80072aa:	f7fb fabe 	bl	800282a <_fstat>
 80072ae:	1c43      	adds	r3, r0, #1
 80072b0:	d102      	bne.n	80072b8 <_fstat_r+0x1c>
 80072b2:	682b      	ldr	r3, [r5, #0]
 80072b4:	b103      	cbz	r3, 80072b8 <_fstat_r+0x1c>
 80072b6:	6023      	str	r3, [r4, #0]
 80072b8:	bd38      	pop	{r3, r4, r5, pc}
 80072ba:	bf00      	nop
 80072bc:	2000073c 	.word	0x2000073c

080072c0 <_isatty_r>:
 80072c0:	b538      	push	{r3, r4, r5, lr}
 80072c2:	4d06      	ldr	r5, [pc, #24]	; (80072dc <_isatty_r+0x1c>)
 80072c4:	2300      	movs	r3, #0
 80072c6:	4604      	mov	r4, r0
 80072c8:	4608      	mov	r0, r1
 80072ca:	602b      	str	r3, [r5, #0]
 80072cc:	f7fb fabd 	bl	800284a <_isatty>
 80072d0:	1c43      	adds	r3, r0, #1
 80072d2:	d102      	bne.n	80072da <_isatty_r+0x1a>
 80072d4:	682b      	ldr	r3, [r5, #0]
 80072d6:	b103      	cbz	r3, 80072da <_isatty_r+0x1a>
 80072d8:	6023      	str	r3, [r4, #0]
 80072da:	bd38      	pop	{r3, r4, r5, pc}
 80072dc:	2000073c 	.word	0x2000073c

080072e0 <_sbrk_r>:
 80072e0:	b538      	push	{r3, r4, r5, lr}
 80072e2:	4d06      	ldr	r5, [pc, #24]	; (80072fc <_sbrk_r+0x1c>)
 80072e4:	2300      	movs	r3, #0
 80072e6:	4604      	mov	r4, r0
 80072e8:	4608      	mov	r0, r1
 80072ea:	602b      	str	r3, [r5, #0]
 80072ec:	f7fb fac6 	bl	800287c <_sbrk>
 80072f0:	1c43      	adds	r3, r0, #1
 80072f2:	d102      	bne.n	80072fa <_sbrk_r+0x1a>
 80072f4:	682b      	ldr	r3, [r5, #0]
 80072f6:	b103      	cbz	r3, 80072fa <_sbrk_r+0x1a>
 80072f8:	6023      	str	r3, [r4, #0]
 80072fa:	bd38      	pop	{r3, r4, r5, pc}
 80072fc:	2000073c 	.word	0x2000073c

08007300 <_init>:
 8007300:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007302:	bf00      	nop
 8007304:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007306:	bc08      	pop	{r3}
 8007308:	469e      	mov	lr, r3
 800730a:	4770      	bx	lr

0800730c <_fini>:
 800730c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800730e:	bf00      	nop
 8007310:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007312:	bc08      	pop	{r3}
 8007314:	469e      	mov	lr, r3
 8007316:	4770      	bx	lr
