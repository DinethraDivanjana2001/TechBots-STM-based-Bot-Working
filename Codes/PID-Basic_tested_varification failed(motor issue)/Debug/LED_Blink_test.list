
LED_Blink_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003f70  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  0800402c  0800402c  0001402c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080040c0  080040c0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080040c0  080040c0  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080040c0  080040c0  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080040c0  080040c0  000140c0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080040c4  080040c4  000140c4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080040c8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000012c  2000000c  080040d4  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000138  080040d4  00020138  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000c8ea  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001d5d  00000000  00000000  0002c961  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000d90  00000000  00000000  0002e6c0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000a82  00000000  00000000  0002f450  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001c0d2  00000000  00000000  0002fed2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000eaea  00000000  00000000  0004bfa4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000bc1c5  00000000  00000000  0005aa8e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003120  00000000  00000000  00116c54  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000076  00000000  00000000  00119d74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	08004014 	.word	0x08004014

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	08004014 	.word	0x08004014

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800021c:	b580      	push	{r7, lr}
 800021e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000220:	f000 fc9c 	bl	8000b5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000224:	f000 f838 	bl	8000298 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000228:	f000 fa2c 	bl	8000684 <MX_GPIO_Init>
  MX_TIM1_Init();
 800022c:	f000 f8fc 	bl	8000428 <MX_TIM1_Init>
  MX_ADC1_Init();
 8000230:	f000 f890 	bl	8000354 <MX_ADC1_Init>
  MX_TIM3_Init();
 8000234:	f000 f9ce 	bl	80005d4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim1, MotorR_PWM);
 8000238:	4b13      	ldr	r3, [pc, #76]	; (8000288 <main+0x6c>)
 800023a:	2100      	movs	r1, #0
 800023c:	0018      	movs	r0, r3
 800023e:	f002 fd89 	bl	8002d54 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, MotorL_PWM);
 8000242:	4b11      	ldr	r3, [pc, #68]	; (8000288 <main+0x6c>)
 8000244:	2104      	movs	r1, #4
 8000246:	0018      	movs	r0, r3
 8000248:	f002 fd84 	bl	8002d54 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim3);
 800024c:	4b0f      	ldr	r3, [pc, #60]	; (800028c <main+0x70>)
 800024e:	0018      	movs	r0, r3
 8000250:	f002 fcbe 	bl	8002bd0 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start(&hadc1);
 8000254:	4b0e      	ldr	r3, [pc, #56]	; (8000290 <main+0x74>)
 8000256:	0018      	movs	r0, r3
 8000258:	f000 ffe8 	bl	800122c <HAL_ADC_Start>

  sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 800025c:	4b0d      	ldr	r3, [pc, #52]	; (8000294 <main+0x78>)
 800025e:	2200      	movs	r2, #0
 8000260:	605a      	str	r2, [r3, #4]
  sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000262:	4b0c      	ldr	r3, [pc, #48]	; (8000294 <main+0x78>)
 8000264:	2200      	movs	r2, #0
 8000266:	609a      	str	r2, [r3, #8]
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {

	  speed(255,255);
 8000268:	21ff      	movs	r1, #255	; 0xff
 800026a:	20ff      	movs	r0, #255	; 0xff
 800026c:	f000 faa6 	bl	80007bc <speed>

	  motor(left, Forward);
 8000270:	2101      	movs	r1, #1
 8000272:	2000      	movs	r0, #0
 8000274:	f000 fab6 	bl	80007e4 <motor>
	  motor(right, Backward);
 8000278:	2301      	movs	r3, #1
 800027a:	425b      	negs	r3, r3
 800027c:	0019      	movs	r1, r3
 800027e:	2001      	movs	r0, #1
 8000280:	f000 fab0 	bl	80007e4 <motor>
	  speed(255,255);
 8000284:	e7f0      	b.n	8000268 <main+0x4c>
 8000286:	46c0      	nop			; (mov r8, r8)
 8000288:	2000008c 	.word	0x2000008c
 800028c:	200000d8 	.word	0x200000d8
 8000290:	20000028 	.word	0x20000028
 8000294:	20000124 	.word	0x20000124

08000298 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000298:	b590      	push	{r4, r7, lr}
 800029a:	b095      	sub	sp, #84	; 0x54
 800029c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800029e:	2414      	movs	r4, #20
 80002a0:	193b      	adds	r3, r7, r4
 80002a2:	0018      	movs	r0, r3
 80002a4:	233c      	movs	r3, #60	; 0x3c
 80002a6:	001a      	movs	r2, r3
 80002a8:	2100      	movs	r1, #0
 80002aa:	f003 fe87 	bl	8003fbc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80002ae:	1d3b      	adds	r3, r7, #4
 80002b0:	0018      	movs	r0, r3
 80002b2:	2310      	movs	r3, #16
 80002b4:	001a      	movs	r2, r3
 80002b6:	2100      	movs	r1, #0
 80002b8:	f003 fe80 	bl	8003fbc <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 80002bc:	2380      	movs	r3, #128	; 0x80
 80002be:	009b      	lsls	r3, r3, #2
 80002c0:	0018      	movs	r0, r3
 80002c2:	f001 fcc7 	bl	8001c54 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80002c6:	193b      	adds	r3, r7, r4
 80002c8:	2202      	movs	r2, #2
 80002ca:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80002cc:	193b      	adds	r3, r7, r4
 80002ce:	2280      	movs	r2, #128	; 0x80
 80002d0:	0052      	lsls	r2, r2, #1
 80002d2:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 80002d4:	0021      	movs	r1, r4
 80002d6:	187b      	adds	r3, r7, r1
 80002d8:	2200      	movs	r2, #0
 80002da:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80002dc:	187b      	adds	r3, r7, r1
 80002de:	2240      	movs	r2, #64	; 0x40
 80002e0:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80002e2:	187b      	adds	r3, r7, r1
 80002e4:	2202      	movs	r2, #2
 80002e6:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80002e8:	187b      	adds	r3, r7, r1
 80002ea:	2202      	movs	r2, #2
 80002ec:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 80002ee:	187b      	adds	r3, r7, r1
 80002f0:	2200      	movs	r2, #0
 80002f2:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 80002f4:	187b      	adds	r3, r7, r1
 80002f6:	2208      	movs	r2, #8
 80002f8:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80002fa:	187b      	adds	r3, r7, r1
 80002fc:	2280      	movs	r2, #128	; 0x80
 80002fe:	0292      	lsls	r2, r2, #10
 8000300:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000302:	187b      	adds	r3, r7, r1
 8000304:	2280      	movs	r2, #128	; 0x80
 8000306:	0492      	lsls	r2, r2, #18
 8000308:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800030a:	187b      	adds	r3, r7, r1
 800030c:	2280      	movs	r2, #128	; 0x80
 800030e:	0592      	lsls	r2, r2, #22
 8000310:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000312:	187b      	adds	r3, r7, r1
 8000314:	0018      	movs	r0, r3
 8000316:	f001 fcdd 	bl	8001cd4 <HAL_RCC_OscConfig>
 800031a:	1e03      	subs	r3, r0, #0
 800031c:	d001      	beq.n	8000322 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 800031e:	f000 faab 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000322:	1d3b      	adds	r3, r7, #4
 8000324:	2207      	movs	r2, #7
 8000326:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000328:	1d3b      	adds	r3, r7, #4
 800032a:	2202      	movs	r2, #2
 800032c:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800032e:	1d3b      	adds	r3, r7, #4
 8000330:	2200      	movs	r2, #0
 8000332:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000334:	1d3b      	adds	r3, r7, #4
 8000336:	2200      	movs	r2, #0
 8000338:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800033a:	1d3b      	adds	r3, r7, #4
 800033c:	2102      	movs	r1, #2
 800033e:	0018      	movs	r0, r3
 8000340:	f002 f828 	bl	8002394 <HAL_RCC_ClockConfig>
 8000344:	1e03      	subs	r3, r0, #0
 8000346:	d001      	beq.n	800034c <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000348:	f000 fa96 	bl	8000878 <Error_Handler>
  }
}
 800034c:	46c0      	nop			; (mov r8, r8)
 800034e:	46bd      	mov	sp, r7
 8000350:	b015      	add	sp, #84	; 0x54
 8000352:	bd90      	pop	{r4, r7, pc}

08000354 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000354:	b580      	push	{r7, lr}
 8000356:	b084      	sub	sp, #16
 8000358:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800035a:	1d3b      	adds	r3, r7, #4
 800035c:	0018      	movs	r0, r3
 800035e:	230c      	movs	r3, #12
 8000360:	001a      	movs	r2, r3
 8000362:	2100      	movs	r1, #0
 8000364:	f003 fe2a 	bl	8003fbc <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000368:	4b2d      	ldr	r3, [pc, #180]	; (8000420 <MX_ADC1_Init+0xcc>)
 800036a:	4a2e      	ldr	r2, [pc, #184]	; (8000424 <MX_ADC1_Init+0xd0>)
 800036c:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 800036e:	4b2c      	ldr	r3, [pc, #176]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000370:	2280      	movs	r2, #128	; 0x80
 8000372:	05d2      	lsls	r2, r2, #23
 8000374:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000376:	4b2a      	ldr	r3, [pc, #168]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000378:	2200      	movs	r2, #0
 800037a:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800037c:	4b28      	ldr	r3, [pc, #160]	; (8000420 <MX_ADC1_Init+0xcc>)
 800037e:	2200      	movs	r2, #0
 8000380:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000382:	4b27      	ldr	r3, [pc, #156]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000384:	2200      	movs	r2, #0
 8000386:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000388:	4b25      	ldr	r3, [pc, #148]	; (8000420 <MX_ADC1_Init+0xcc>)
 800038a:	2204      	movs	r2, #4
 800038c:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 800038e:	4b24      	ldr	r3, [pc, #144]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000390:	2200      	movs	r2, #0
 8000392:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000394:	4b22      	ldr	r3, [pc, #136]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000396:	2200      	movs	r2, #0
 8000398:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800039a:	4b21      	ldr	r3, [pc, #132]	; (8000420 <MX_ADC1_Init+0xcc>)
 800039c:	2200      	movs	r2, #0
 800039e:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 80003a0:	4b1f      	ldr	r3, [pc, #124]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003a2:	2201      	movs	r2, #1
 80003a4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80003a6:	4b1e      	ldr	r3, [pc, #120]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003a8:	2220      	movs	r2, #32
 80003aa:	2100      	movs	r1, #0
 80003ac:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80003ae:	4b1c      	ldr	r3, [pc, #112]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003b0:	2200      	movs	r2, #0
 80003b2:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80003b4:	4b1a      	ldr	r3, [pc, #104]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003b6:	2200      	movs	r2, #0
 80003b8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80003ba:	4b19      	ldr	r3, [pc, #100]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003bc:	222c      	movs	r2, #44	; 0x2c
 80003be:	2100      	movs	r1, #0
 80003c0:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 80003c2:	4b17      	ldr	r3, [pc, #92]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003c4:	2200      	movs	r2, #0
 80003c6:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 80003c8:	4b15      	ldr	r3, [pc, #84]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003ca:	2200      	movs	r2, #0
 80003cc:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 80003ce:	4b14      	ldr	r3, [pc, #80]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003d0:	2200      	movs	r2, #0
 80003d2:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 80003d4:	4b12      	ldr	r3, [pc, #72]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003d6:	223c      	movs	r2, #60	; 0x3c
 80003d8:	2100      	movs	r1, #0
 80003da:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 80003dc:	4b10      	ldr	r3, [pc, #64]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003de:	2200      	movs	r2, #0
 80003e0:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80003e2:	4b0f      	ldr	r3, [pc, #60]	; (8000420 <MX_ADC1_Init+0xcc>)
 80003e4:	0018      	movs	r0, r3
 80003e6:	f000 fd79 	bl	8000edc <HAL_ADC_Init>
 80003ea:	1e03      	subs	r3, r0, #0
 80003ec:	d001      	beq.n	80003f2 <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 80003ee:	f000 fa43 	bl	8000878 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 80003f2:	1d3b      	adds	r3, r7, #4
 80003f4:	2201      	movs	r2, #1
 80003f6:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80003f8:	1d3b      	adds	r3, r7, #4
 80003fa:	2200      	movs	r2, #0
 80003fc:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 80003fe:	1d3b      	adds	r3, r7, #4
 8000400:	2200      	movs	r2, #0
 8000402:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000404:	1d3a      	adds	r2, r7, #4
 8000406:	4b06      	ldr	r3, [pc, #24]	; (8000420 <MX_ADC1_Init+0xcc>)
 8000408:	0011      	movs	r1, r2
 800040a:	0018      	movs	r0, r3
 800040c:	f000 ff5c 	bl	80012c8 <HAL_ADC_ConfigChannel>
 8000410:	1e03      	subs	r3, r0, #0
 8000412:	d001      	beq.n	8000418 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000414:	f000 fa30 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000418:	46c0      	nop			; (mov r8, r8)
 800041a:	46bd      	mov	sp, r7
 800041c:	b004      	add	sp, #16
 800041e:	bd80      	pop	{r7, pc}
 8000420:	20000028 	.word	0x20000028
 8000424:	40012400 	.word	0x40012400

08000428 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000428:	b580      	push	{r7, lr}
 800042a:	b09c      	sub	sp, #112	; 0x70
 800042c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800042e:	2360      	movs	r3, #96	; 0x60
 8000430:	18fb      	adds	r3, r7, r3
 8000432:	0018      	movs	r0, r3
 8000434:	2310      	movs	r3, #16
 8000436:	001a      	movs	r2, r3
 8000438:	2100      	movs	r1, #0
 800043a:	f003 fdbf 	bl	8003fbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800043e:	2354      	movs	r3, #84	; 0x54
 8000440:	18fb      	adds	r3, r7, r3
 8000442:	0018      	movs	r0, r3
 8000444:	230c      	movs	r3, #12
 8000446:	001a      	movs	r2, r3
 8000448:	2100      	movs	r1, #0
 800044a:	f003 fdb7 	bl	8003fbc <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800044e:	2338      	movs	r3, #56	; 0x38
 8000450:	18fb      	adds	r3, r7, r3
 8000452:	0018      	movs	r0, r3
 8000454:	231c      	movs	r3, #28
 8000456:	001a      	movs	r2, r3
 8000458:	2100      	movs	r1, #0
 800045a:	f003 fdaf 	bl	8003fbc <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800045e:	1d3b      	adds	r3, r7, #4
 8000460:	0018      	movs	r0, r3
 8000462:	2334      	movs	r3, #52	; 0x34
 8000464:	001a      	movs	r2, r3
 8000466:	2100      	movs	r1, #0
 8000468:	f003 fda8 	bl	8003fbc <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800046c:	4b56      	ldr	r3, [pc, #344]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 800046e:	4a57      	ldr	r2, [pc, #348]	; (80005cc <MX_TIM1_Init+0x1a4>)
 8000470:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8000472:	4b55      	ldr	r3, [pc, #340]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 8000474:	227f      	movs	r2, #127	; 0x7f
 8000476:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000478:	4b53      	ldr	r3, [pc, #332]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 800047a:	2200      	movs	r2, #0
 800047c:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625;
 800047e:	4b52      	ldr	r3, [pc, #328]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 8000480:	4a53      	ldr	r2, [pc, #332]	; (80005d0 <MX_TIM1_Init+0x1a8>)
 8000482:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000484:	4b50      	ldr	r3, [pc, #320]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 8000486:	2200      	movs	r2, #0
 8000488:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800048a:	4b4f      	ldr	r3, [pc, #316]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 800048c:	2200      	movs	r2, #0
 800048e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000490:	4b4d      	ldr	r3, [pc, #308]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 8000492:	2200      	movs	r2, #0
 8000494:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000496:	4b4c      	ldr	r3, [pc, #304]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 8000498:	0018      	movs	r0, r3
 800049a:	f002 fb41 	bl	8002b20 <HAL_TIM_Base_Init>
 800049e:	1e03      	subs	r3, r0, #0
 80004a0:	d001      	beq.n	80004a6 <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 80004a2:	f000 f9e9 	bl	8000878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80004a6:	2160      	movs	r1, #96	; 0x60
 80004a8:	187b      	adds	r3, r7, r1
 80004aa:	2280      	movs	r2, #128	; 0x80
 80004ac:	0152      	lsls	r2, r2, #5
 80004ae:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80004b0:	187a      	adds	r2, r7, r1
 80004b2:	4b45      	ldr	r3, [pc, #276]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 80004b4:	0011      	movs	r1, r2
 80004b6:	0018      	movs	r0, r3
 80004b8:	f002 ff44 	bl	8003344 <HAL_TIM_ConfigClockSource>
 80004bc:	1e03      	subs	r3, r0, #0
 80004be:	d001      	beq.n	80004c4 <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 80004c0:	f000 f9da 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80004c4:	4b40      	ldr	r3, [pc, #256]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 80004c6:	0018      	movs	r0, r3
 80004c8:	f002 fbe4 	bl	8002c94 <HAL_TIM_PWM_Init>
 80004cc:	1e03      	subs	r3, r0, #0
 80004ce:	d001      	beq.n	80004d4 <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 80004d0:	f000 f9d2 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80004d4:	2154      	movs	r1, #84	; 0x54
 80004d6:	187b      	adds	r3, r7, r1
 80004d8:	2200      	movs	r2, #0
 80004da:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 80004dc:	187b      	adds	r3, r7, r1
 80004de:	2200      	movs	r2, #0
 80004e0:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80004e2:	187b      	adds	r3, r7, r1
 80004e4:	2200      	movs	r2, #0
 80004e6:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80004e8:	187a      	adds	r2, r7, r1
 80004ea:	4b37      	ldr	r3, [pc, #220]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 80004ec:	0011      	movs	r1, r2
 80004ee:	0018      	movs	r0, r3
 80004f0:	f003 fc3a 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 80004f4:	1e03      	subs	r3, r0, #0
 80004f6:	d001      	beq.n	80004fc <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 80004f8:	f000 f9be 	bl	8000878 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80004fc:	2138      	movs	r1, #56	; 0x38
 80004fe:	187b      	adds	r3, r7, r1
 8000500:	2260      	movs	r2, #96	; 0x60
 8000502:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000504:	187b      	adds	r3, r7, r1
 8000506:	2200      	movs	r2, #0
 8000508:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800050a:	187b      	adds	r3, r7, r1
 800050c:	2200      	movs	r2, #0
 800050e:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000510:	187b      	adds	r3, r7, r1
 8000512:	2200      	movs	r2, #0
 8000514:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000516:	187b      	adds	r3, r7, r1
 8000518:	2200      	movs	r2, #0
 800051a:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800051c:	187b      	adds	r3, r7, r1
 800051e:	2200      	movs	r2, #0
 8000520:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000522:	187b      	adds	r3, r7, r1
 8000524:	2200      	movs	r2, #0
 8000526:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000528:	1879      	adds	r1, r7, r1
 800052a:	4b27      	ldr	r3, [pc, #156]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 800052c:	2200      	movs	r2, #0
 800052e:	0018      	movs	r0, r3
 8000530:	f002 fe08 	bl	8003144 <HAL_TIM_PWM_ConfigChannel>
 8000534:	1e03      	subs	r3, r0, #0
 8000536:	d001      	beq.n	800053c <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000538:	f000 f99e 	bl	8000878 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800053c:	2338      	movs	r3, #56	; 0x38
 800053e:	18f9      	adds	r1, r7, r3
 8000540:	4b21      	ldr	r3, [pc, #132]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 8000542:	2204      	movs	r2, #4
 8000544:	0018      	movs	r0, r3
 8000546:	f002 fdfd 	bl	8003144 <HAL_TIM_PWM_ConfigChannel>
 800054a:	1e03      	subs	r3, r0, #0
 800054c:	d001      	beq.n	8000552 <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 800054e:	f000 f993 	bl	8000878 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000552:	1d3b      	adds	r3, r7, #4
 8000554:	2200      	movs	r2, #0
 8000556:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000558:	1d3b      	adds	r3, r7, #4
 800055a:	2200      	movs	r2, #0
 800055c:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 800055e:	1d3b      	adds	r3, r7, #4
 8000560:	2200      	movs	r2, #0
 8000562:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000564:	1d3b      	adds	r3, r7, #4
 8000566:	2200      	movs	r2, #0
 8000568:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800056a:	1d3b      	adds	r3, r7, #4
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000570:	1d3b      	adds	r3, r7, #4
 8000572:	2280      	movs	r2, #128	; 0x80
 8000574:	0192      	lsls	r2, r2, #6
 8000576:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000578:	1d3b      	adds	r3, r7, #4
 800057a:	2200      	movs	r2, #0
 800057c:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 800057e:	1d3b      	adds	r3, r7, #4
 8000580:	2200      	movs	r2, #0
 8000582:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000584:	1d3b      	adds	r3, r7, #4
 8000586:	2200      	movs	r2, #0
 8000588:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 800058a:	1d3b      	adds	r3, r7, #4
 800058c:	2280      	movs	r2, #128	; 0x80
 800058e:	0492      	lsls	r2, r2, #18
 8000590:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000592:	1d3b      	adds	r3, r7, #4
 8000594:	2200      	movs	r2, #0
 8000596:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000598:	1d3b      	adds	r3, r7, #4
 800059a:	2200      	movs	r2, #0
 800059c:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 800059e:	1d3b      	adds	r3, r7, #4
 80005a0:	2200      	movs	r2, #0
 80005a2:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80005a4:	1d3a      	adds	r2, r7, #4
 80005a6:	4b08      	ldr	r3, [pc, #32]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 80005a8:	0011      	movs	r1, r2
 80005aa:	0018      	movs	r0, r3
 80005ac:	f003 fc52 	bl	8003e54 <HAL_TIMEx_ConfigBreakDeadTime>
 80005b0:	1e03      	subs	r3, r0, #0
 80005b2:	d001      	beq.n	80005b8 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 80005b4:	f000 f960 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80005b8:	4b03      	ldr	r3, [pc, #12]	; (80005c8 <MX_TIM1_Init+0x1a0>)
 80005ba:	0018      	movs	r0, r3
 80005bc:	f000 fa3c 	bl	8000a38 <HAL_TIM_MspPostInit>

}
 80005c0:	46c0      	nop			; (mov r8, r8)
 80005c2:	46bd      	mov	sp, r7
 80005c4:	b01c      	add	sp, #112	; 0x70
 80005c6:	bd80      	pop	{r7, pc}
 80005c8:	2000008c 	.word	0x2000008c
 80005cc:	40012c00 	.word	0x40012c00
 80005d0:	00000271 	.word	0x00000271

080005d4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	b088      	sub	sp, #32
 80005d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80005da:	2310      	movs	r3, #16
 80005dc:	18fb      	adds	r3, r7, r3
 80005de:	0018      	movs	r0, r3
 80005e0:	2310      	movs	r3, #16
 80005e2:	001a      	movs	r2, r3
 80005e4:	2100      	movs	r1, #0
 80005e6:	f003 fce9 	bl	8003fbc <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80005ea:	1d3b      	adds	r3, r7, #4
 80005ec:	0018      	movs	r0, r3
 80005ee:	230c      	movs	r3, #12
 80005f0:	001a      	movs	r2, r3
 80005f2:	2100      	movs	r1, #0
 80005f4:	f003 fce2 	bl	8003fbc <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80005f8:	4b1e      	ldr	r3, [pc, #120]	; (8000674 <MX_TIM3_Init+0xa0>)
 80005fa:	4a1f      	ldr	r2, [pc, #124]	; (8000678 <MX_TIM3_Init+0xa4>)
 80005fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400-1;
 80005fe:	4b1d      	ldr	r3, [pc, #116]	; (8000674 <MX_TIM3_Init+0xa0>)
 8000600:	4a1e      	ldr	r2, [pc, #120]	; (800067c <MX_TIM3_Init+0xa8>)
 8000602:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000604:	4b1b      	ldr	r3, [pc, #108]	; (8000674 <MX_TIM3_Init+0xa0>)
 8000606:	2200      	movs	r2, #0
 8000608:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800060a:	4b1a      	ldr	r3, [pc, #104]	; (8000674 <MX_TIM3_Init+0xa0>)
 800060c:	4a1c      	ldr	r2, [pc, #112]	; (8000680 <MX_TIM3_Init+0xac>)
 800060e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000610:	4b18      	ldr	r3, [pc, #96]	; (8000674 <MX_TIM3_Init+0xa0>)
 8000612:	2200      	movs	r2, #0
 8000614:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000616:	4b17      	ldr	r3, [pc, #92]	; (8000674 <MX_TIM3_Init+0xa0>)
 8000618:	2200      	movs	r2, #0
 800061a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800061c:	4b15      	ldr	r3, [pc, #84]	; (8000674 <MX_TIM3_Init+0xa0>)
 800061e:	0018      	movs	r0, r3
 8000620:	f002 fa7e 	bl	8002b20 <HAL_TIM_Base_Init>
 8000624:	1e03      	subs	r3, r0, #0
 8000626:	d001      	beq.n	800062c <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000628:	f000 f926 	bl	8000878 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800062c:	2110      	movs	r1, #16
 800062e:	187b      	adds	r3, r7, r1
 8000630:	2280      	movs	r2, #128	; 0x80
 8000632:	0152      	lsls	r2, r2, #5
 8000634:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000636:	187a      	adds	r2, r7, r1
 8000638:	4b0e      	ldr	r3, [pc, #56]	; (8000674 <MX_TIM3_Init+0xa0>)
 800063a:	0011      	movs	r1, r2
 800063c:	0018      	movs	r0, r3
 800063e:	f002 fe81 	bl	8003344 <HAL_TIM_ConfigClockSource>
 8000642:	1e03      	subs	r3, r0, #0
 8000644:	d001      	beq.n	800064a <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000646:	f000 f917 	bl	8000878 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800064a:	1d3b      	adds	r3, r7, #4
 800064c:	2200      	movs	r2, #0
 800064e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000650:	1d3b      	adds	r3, r7, #4
 8000652:	2200      	movs	r2, #0
 8000654:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000656:	1d3a      	adds	r2, r7, #4
 8000658:	4b06      	ldr	r3, [pc, #24]	; (8000674 <MX_TIM3_Init+0xa0>)
 800065a:	0011      	movs	r1, r2
 800065c:	0018      	movs	r0, r3
 800065e:	f003 fb83 	bl	8003d68 <HAL_TIMEx_MasterConfigSynchronization>
 8000662:	1e03      	subs	r3, r0, #0
 8000664:	d001      	beq.n	800066a <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000666:	f000 f907 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800066a:	46c0      	nop			; (mov r8, r8)
 800066c:	46bd      	mov	sp, r7
 800066e:	b008      	add	sp, #32
 8000670:	bd80      	pop	{r7, pc}
 8000672:	46c0      	nop			; (mov r8, r8)
 8000674:	200000d8 	.word	0x200000d8
 8000678:	40000400 	.word	0x40000400
 800067c:	000018ff 	.word	0x000018ff
 8000680:	00002710 	.word	0x00002710

08000684 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000684:	b590      	push	{r4, r7, lr}
 8000686:	b08b      	sub	sp, #44	; 0x2c
 8000688:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800068a:	2414      	movs	r4, #20
 800068c:	193b      	adds	r3, r7, r4
 800068e:	0018      	movs	r0, r3
 8000690:	2314      	movs	r3, #20
 8000692:	001a      	movs	r2, r3
 8000694:	2100      	movs	r1, #0
 8000696:	f003 fc91 	bl	8003fbc <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800069a:	4b3a      	ldr	r3, [pc, #232]	; (8000784 <MX_GPIO_Init+0x100>)
 800069c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800069e:	4b39      	ldr	r3, [pc, #228]	; (8000784 <MX_GPIO_Init+0x100>)
 80006a0:	2104      	movs	r1, #4
 80006a2:	430a      	orrs	r2, r1
 80006a4:	635a      	str	r2, [r3, #52]	; 0x34
 80006a6:	4b37      	ldr	r3, [pc, #220]	; (8000784 <MX_GPIO_Init+0x100>)
 80006a8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006aa:	2204      	movs	r2, #4
 80006ac:	4013      	ands	r3, r2
 80006ae:	613b      	str	r3, [r7, #16]
 80006b0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80006b2:	4b34      	ldr	r3, [pc, #208]	; (8000784 <MX_GPIO_Init+0x100>)
 80006b4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006b6:	4b33      	ldr	r3, [pc, #204]	; (8000784 <MX_GPIO_Init+0x100>)
 80006b8:	2120      	movs	r1, #32
 80006ba:	430a      	orrs	r2, r1
 80006bc:	635a      	str	r2, [r3, #52]	; 0x34
 80006be:	4b31      	ldr	r3, [pc, #196]	; (8000784 <MX_GPIO_Init+0x100>)
 80006c0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006c2:	2220      	movs	r2, #32
 80006c4:	4013      	ands	r3, r2
 80006c6:	60fb      	str	r3, [r7, #12]
 80006c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006ca:	4b2e      	ldr	r3, [pc, #184]	; (8000784 <MX_GPIO_Init+0x100>)
 80006cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006ce:	4b2d      	ldr	r3, [pc, #180]	; (8000784 <MX_GPIO_Init+0x100>)
 80006d0:	2101      	movs	r1, #1
 80006d2:	430a      	orrs	r2, r1
 80006d4:	635a      	str	r2, [r3, #52]	; 0x34
 80006d6:	4b2b      	ldr	r3, [pc, #172]	; (8000784 <MX_GPIO_Init+0x100>)
 80006d8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006da:	2201      	movs	r2, #1
 80006dc:	4013      	ands	r3, r2
 80006de:	60bb      	str	r3, [r7, #8]
 80006e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80006e2:	4b28      	ldr	r3, [pc, #160]	; (8000784 <MX_GPIO_Init+0x100>)
 80006e4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80006e6:	4b27      	ldr	r3, [pc, #156]	; (8000784 <MX_GPIO_Init+0x100>)
 80006e8:	2102      	movs	r1, #2
 80006ea:	430a      	orrs	r2, r1
 80006ec:	635a      	str	r2, [r3, #52]	; 0x34
 80006ee:	4b25      	ldr	r3, [pc, #148]	; (8000784 <MX_GPIO_Init+0x100>)
 80006f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80006f2:	2202      	movs	r2, #2
 80006f4:	4013      	ands	r3, r2
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MotorR_B_Pin|MotorR_A_Pin, GPIO_PIN_RESET);
 80006fa:	4b23      	ldr	r3, [pc, #140]	; (8000788 <MX_GPIO_Init+0x104>)
 80006fc:	2200      	movs	r2, #0
 80006fe:	210c      	movs	r1, #12
 8000700:	0018      	movs	r0, r3
 8000702:	f001 fa89 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorL_B_Pin|MotorL_A_Pin, GPIO_PIN_RESET);
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_GPIO_Init+0x108>)
 8000708:	2200      	movs	r2, #0
 800070a:	2103      	movs	r1, #3
 800070c:	0018      	movs	r0, r3
 800070e:	f001 fa83 	bl	8001c18 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Calibrate_btn_Pin */
  GPIO_InitStruct.Pin = Calibrate_btn_Pin;
 8000712:	193b      	adds	r3, r7, r4
 8000714:	2280      	movs	r2, #128	; 0x80
 8000716:	0192      	lsls	r2, r2, #6
 8000718:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800071a:	193b      	adds	r3, r7, r4
 800071c:	2200      	movs	r2, #0
 800071e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000720:	193b      	adds	r3, r7, r4
 8000722:	2201      	movs	r2, #1
 8000724:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Calibrate_btn_GPIO_Port, &GPIO_InitStruct);
 8000726:	193b      	adds	r3, r7, r4
 8000728:	4a17      	ldr	r2, [pc, #92]	; (8000788 <MX_GPIO_Init+0x104>)
 800072a:	0019      	movs	r1, r3
 800072c:	0010      	movs	r0, r2
 800072e:	f001 f907 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorR_B_Pin MotorR_A_Pin */
  GPIO_InitStruct.Pin = MotorR_B_Pin|MotorR_A_Pin;
 8000732:	193b      	adds	r3, r7, r4
 8000734:	220c      	movs	r2, #12
 8000736:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000738:	193b      	adds	r3, r7, r4
 800073a:	2201      	movs	r2, #1
 800073c:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800073e:	193b      	adds	r3, r7, r4
 8000740:	2200      	movs	r2, #0
 8000742:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000744:	193b      	adds	r3, r7, r4
 8000746:	2200      	movs	r2, #0
 8000748:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800074a:	193b      	adds	r3, r7, r4
 800074c:	4a0e      	ldr	r2, [pc, #56]	; (8000788 <MX_GPIO_Init+0x104>)
 800074e:	0019      	movs	r1, r3
 8000750:	0010      	movs	r0, r2
 8000752:	f001 f8f5 	bl	8001940 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorL_B_Pin MotorL_A_Pin */
  GPIO_InitStruct.Pin = MotorL_B_Pin|MotorL_A_Pin;
 8000756:	0021      	movs	r1, r4
 8000758:	187b      	adds	r3, r7, r1
 800075a:	2203      	movs	r2, #3
 800075c:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800075e:	187b      	adds	r3, r7, r1
 8000760:	2201      	movs	r2, #1
 8000762:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000764:	187b      	adds	r3, r7, r1
 8000766:	2200      	movs	r2, #0
 8000768:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800076a:	187b      	adds	r3, r7, r1
 800076c:	2200      	movs	r2, #0
 800076e:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000770:	187b      	adds	r3, r7, r1
 8000772:	4a06      	ldr	r2, [pc, #24]	; (800078c <MX_GPIO_Init+0x108>)
 8000774:	0019      	movs	r1, r3
 8000776:	0010      	movs	r0, r2
 8000778:	f001 f8e2 	bl	8001940 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 800077c:	46c0      	nop			; (mov r8, r8)
 800077e:	46bd      	mov	sp, r7
 8000780:	b00b      	add	sp, #44	; 0x2c
 8000782:	bd90      	pop	{r4, r7, pc}
 8000784:	40021000 	.word	0x40021000
 8000788:	50000800 	.word	0x50000800
 800078c:	50000400 	.word	0x50000400

08000790 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000790:	b580      	push	{r7, lr}
 8000792:	b082      	sub	sp, #8
 8000794:	af00      	add	r7, sp, #0
 8000796:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8000798:	687b      	ldr	r3, [r7, #4]
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4a05      	ldr	r2, [pc, #20]	; (80007b4 <HAL_TIM_PeriodElapsedCallback+0x24>)
 800079e:	4293      	cmp	r3, r2
 80007a0:	d104      	bne.n	80007ac <HAL_TIM_PeriodElapsedCallback+0x1c>
    millis_counter++;
 80007a2:	4b05      	ldr	r3, [pc, #20]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1c5a      	adds	r2, r3, #1
 80007a8:	4b03      	ldr	r3, [pc, #12]	; (80007b8 <HAL_TIM_PeriodElapsedCallback+0x28>)
 80007aa:	601a      	str	r2, [r3, #0]
  }
}
 80007ac:	46c0      	nop			; (mov r8, r8)
 80007ae:	46bd      	mov	sp, r7
 80007b0:	b002      	add	sp, #8
 80007b2:	bd80      	pop	{r7, pc}
 80007b4:	40000400 	.word	0x40000400
 80007b8:	20000130 	.word	0x20000130

080007bc <speed>:

uint32_t millis() {
  return millis_counter;
}

void speed(int Left, int Right){
 80007bc:	b580      	push	{r7, lr}
 80007be:	b082      	sub	sp, #8
 80007c0:	af00      	add	r7, sp, #0
 80007c2:	6078      	str	r0, [r7, #4]
 80007c4:	6039      	str	r1, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim1,MotorR_PWM,Right);
 80007c6:	4b06      	ldr	r3, [pc, #24]	; (80007e0 <speed+0x24>)
 80007c8:	681b      	ldr	r3, [r3, #0]
 80007ca:	683a      	ldr	r2, [r7, #0]
 80007cc:	635a      	str	r2, [r3, #52]	; 0x34
	  __HAL_TIM_SET_COMPARE(&htim1,MotorL_PWM,Left);
 80007ce:	4b04      	ldr	r3, [pc, #16]	; (80007e0 <speed+0x24>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	687a      	ldr	r2, [r7, #4]
 80007d4:	639a      	str	r2, [r3, #56]	; 0x38
}
 80007d6:	46c0      	nop			; (mov r8, r8)
 80007d8:	46bd      	mov	sp, r7
 80007da:	b002      	add	sp, #8
 80007dc:	bd80      	pop	{r7, pc}
 80007de:	46c0      	nop			; (mov r8, r8)
 80007e0:	2000008c 	.word	0x2000008c

080007e4 <motor>:

void motor(int motor,int direction){
 80007e4:	b580      	push	{r7, lr}
 80007e6:	b082      	sub	sp, #8
 80007e8:	af00      	add	r7, sp, #0
 80007ea:	6078      	str	r0, [r7, #4]
 80007ec:	6039      	str	r1, [r7, #0]
	if (motor == 0){
 80007ee:	687b      	ldr	r3, [r7, #4]
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d11c      	bne.n	800082e <motor+0x4a>
		if (direction == 1){
 80007f4:	683b      	ldr	r3, [r7, #0]
 80007f6:	2b01      	cmp	r3, #1
 80007f8:	d10c      	bne.n	8000814 <motor+0x30>
			HAL_GPIO_WritePin(Motor_LB_gpio, Motor_LB_pin, 0);
 80007fa:	4b1d      	ldr	r3, [pc, #116]	; (8000870 <motor+0x8c>)
 80007fc:	2200      	movs	r2, #0
 80007fe:	2102      	movs	r1, #2
 8000800:	0018      	movs	r0, r3
 8000802:	f001 fa09 	bl	8001c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_LF_gpio, Motor_LF_pin, 1);
 8000806:	4b1a      	ldr	r3, [pc, #104]	; (8000870 <motor+0x8c>)
 8000808:	2201      	movs	r2, #1
 800080a:	2101      	movs	r1, #1
 800080c:	0018      	movs	r0, r3
 800080e:	f001 fa03 	bl	8001c18 <HAL_GPIO_WritePin>
		}else{
			HAL_GPIO_WritePin(Motor_RB_gpio, Motor_RB_pin, 1);
			HAL_GPIO_WritePin(Motor_RF_gpio, Motor_RF_pin, 0);
		}
	}
}
 8000812:	e028      	b.n	8000866 <motor+0x82>
			HAL_GPIO_WritePin(Motor_LB_gpio, Motor_LB_pin, 1);
 8000814:	4b16      	ldr	r3, [pc, #88]	; (8000870 <motor+0x8c>)
 8000816:	2201      	movs	r2, #1
 8000818:	2102      	movs	r1, #2
 800081a:	0018      	movs	r0, r3
 800081c:	f001 f9fc 	bl	8001c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_LF_gpio, Motor_LF_pin, 0);
 8000820:	4b13      	ldr	r3, [pc, #76]	; (8000870 <motor+0x8c>)
 8000822:	2200      	movs	r2, #0
 8000824:	2101      	movs	r1, #1
 8000826:	0018      	movs	r0, r3
 8000828:	f001 f9f6 	bl	8001c18 <HAL_GPIO_WritePin>
}
 800082c:	e01b      	b.n	8000866 <motor+0x82>
		if (direction == 1){
 800082e:	683b      	ldr	r3, [r7, #0]
 8000830:	2b01      	cmp	r3, #1
 8000832:	d10c      	bne.n	800084e <motor+0x6a>
			HAL_GPIO_WritePin(Motor_RB_gpio, Motor_RB_pin, 0);
 8000834:	4b0f      	ldr	r3, [pc, #60]	; (8000874 <motor+0x90>)
 8000836:	2200      	movs	r2, #0
 8000838:	2108      	movs	r1, #8
 800083a:	0018      	movs	r0, r3
 800083c:	f001 f9ec 	bl	8001c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_RF_gpio, Motor_RF_pin, 1);
 8000840:	4b0c      	ldr	r3, [pc, #48]	; (8000874 <motor+0x90>)
 8000842:	2201      	movs	r2, #1
 8000844:	2104      	movs	r1, #4
 8000846:	0018      	movs	r0, r3
 8000848:	f001 f9e6 	bl	8001c18 <HAL_GPIO_WritePin>
}
 800084c:	e00b      	b.n	8000866 <motor+0x82>
			HAL_GPIO_WritePin(Motor_RB_gpio, Motor_RB_pin, 1);
 800084e:	4b09      	ldr	r3, [pc, #36]	; (8000874 <motor+0x90>)
 8000850:	2201      	movs	r2, #1
 8000852:	2108      	movs	r1, #8
 8000854:	0018      	movs	r0, r3
 8000856:	f001 f9df 	bl	8001c18 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(Motor_RF_gpio, Motor_RF_pin, 0);
 800085a:	4b06      	ldr	r3, [pc, #24]	; (8000874 <motor+0x90>)
 800085c:	2200      	movs	r2, #0
 800085e:	2104      	movs	r1, #4
 8000860:	0018      	movs	r0, r3
 8000862:	f001 f9d9 	bl	8001c18 <HAL_GPIO_WritePin>
}
 8000866:	46c0      	nop			; (mov r8, r8)
 8000868:	46bd      	mov	sp, r7
 800086a:	b002      	add	sp, #8
 800086c:	bd80      	pop	{r7, pc}
 800086e:	46c0      	nop			; (mov r8, r8)
 8000870:	50000400 	.word	0x50000400
 8000874:	50000800 	.word	0x50000800

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b580      	push	{r7, lr}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	e7fe      	b.n	8000880 <Error_Handler+0x8>
	...

08000884 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	4b11      	ldr	r3, [pc, #68]	; (80008d0 <HAL_MspInit+0x4c>)
 800088c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800088e:	4b10      	ldr	r3, [pc, #64]	; (80008d0 <HAL_MspInit+0x4c>)
 8000890:	2101      	movs	r1, #1
 8000892:	430a      	orrs	r2, r1
 8000894:	641a      	str	r2, [r3, #64]	; 0x40
 8000896:	4b0e      	ldr	r3, [pc, #56]	; (80008d0 <HAL_MspInit+0x4c>)
 8000898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800089a:	2201      	movs	r2, #1
 800089c:	4013      	ands	r3, r2
 800089e:	607b      	str	r3, [r7, #4]
 80008a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a2:	4b0b      	ldr	r3, [pc, #44]	; (80008d0 <HAL_MspInit+0x4c>)
 80008a4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008a6:	4b0a      	ldr	r3, [pc, #40]	; (80008d0 <HAL_MspInit+0x4c>)
 80008a8:	2180      	movs	r1, #128	; 0x80
 80008aa:	0549      	lsls	r1, r1, #21
 80008ac:	430a      	orrs	r2, r1
 80008ae:	63da      	str	r2, [r3, #60]	; 0x3c
 80008b0:	4b07      	ldr	r3, [pc, #28]	; (80008d0 <HAL_MspInit+0x4c>)
 80008b2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80008b4:	2380      	movs	r3, #128	; 0x80
 80008b6:	055b      	lsls	r3, r3, #21
 80008b8:	4013      	ands	r3, r2
 80008ba:	603b      	str	r3, [r7, #0]
 80008bc:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 80008be:	23c0      	movs	r3, #192	; 0xc0
 80008c0:	00db      	lsls	r3, r3, #3
 80008c2:	0018      	movs	r0, r3
 80008c4:	f000 f9d0 	bl	8000c68 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c8:	46c0      	nop			; (mov r8, r8)
 80008ca:	46bd      	mov	sp, r7
 80008cc:	b002      	add	sp, #8
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40021000 	.word	0x40021000

080008d4 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80008d4:	b590      	push	{r4, r7, lr}
 80008d6:	b08b      	sub	sp, #44	; 0x2c
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	2414      	movs	r4, #20
 80008de:	193b      	adds	r3, r7, r4
 80008e0:	0018      	movs	r0, r3
 80008e2:	2314      	movs	r3, #20
 80008e4:	001a      	movs	r2, r3
 80008e6:	2100      	movs	r1, #0
 80008e8:	f003 fb68 	bl	8003fbc <memset>
  if(hadc->Instance==ADC1)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a25      	ldr	r2, [pc, #148]	; (8000988 <HAL_ADC_MspInit+0xb4>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d144      	bne.n	8000980 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 80008f6:	4b25      	ldr	r3, [pc, #148]	; (800098c <HAL_ADC_MspInit+0xb8>)
 80008f8:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80008fa:	4b24      	ldr	r3, [pc, #144]	; (800098c <HAL_ADC_MspInit+0xb8>)
 80008fc:	2180      	movs	r1, #128	; 0x80
 80008fe:	0349      	lsls	r1, r1, #13
 8000900:	430a      	orrs	r2, r1
 8000902:	641a      	str	r2, [r3, #64]	; 0x40
 8000904:	4b21      	ldr	r3, [pc, #132]	; (800098c <HAL_ADC_MspInit+0xb8>)
 8000906:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8000908:	2380      	movs	r3, #128	; 0x80
 800090a:	035b      	lsls	r3, r3, #13
 800090c:	4013      	ands	r3, r2
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	4b1e      	ldr	r3, [pc, #120]	; (800098c <HAL_ADC_MspInit+0xb8>)
 8000914:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_ADC_MspInit+0xb8>)
 8000918:	2101      	movs	r1, #1
 800091a:	430a      	orrs	r2, r1
 800091c:	635a      	str	r2, [r3, #52]	; 0x34
 800091e:	4b1b      	ldr	r3, [pc, #108]	; (800098c <HAL_ADC_MspInit+0xb8>)
 8000920:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000922:	2201      	movs	r2, #1
 8000924:	4013      	ands	r3, r2
 8000926:	60fb      	str	r3, [r7, #12]
 8000928:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	4b18      	ldr	r3, [pc, #96]	; (800098c <HAL_ADC_MspInit+0xb8>)
 800092c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_ADC_MspInit+0xb8>)
 8000930:	2102      	movs	r1, #2
 8000932:	430a      	orrs	r2, r1
 8000934:	635a      	str	r2, [r3, #52]	; 0x34
 8000936:	4b15      	ldr	r3, [pc, #84]	; (800098c <HAL_ADC_MspInit+0xb8>)
 8000938:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800093a:	2202      	movs	r2, #2
 800093c:	4013      	ands	r3, r2
 800093e:	60bb      	str	r3, [r7, #8]
 8000940:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Sensor_0_Pin|Sensor_8_Pin|Sensor_1_Pin|Sensor_2_Pin
 8000942:	193b      	adds	r3, r7, r4
 8000944:	22ff      	movs	r2, #255	; 0xff
 8000946:	601a      	str	r2, [r3, #0]
                          |Sensor_3_Pin|Sensor_4_Pin|Sensor_5_Pin|Sensor_6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000948:	193b      	adds	r3, r7, r4
 800094a:	2203      	movs	r2, #3
 800094c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800094e:	193b      	adds	r3, r7, r4
 8000950:	2200      	movs	r2, #0
 8000952:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000954:	193a      	adds	r2, r7, r4
 8000956:	23a0      	movs	r3, #160	; 0xa0
 8000958:	05db      	lsls	r3, r3, #23
 800095a:	0011      	movs	r1, r2
 800095c:	0018      	movs	r0, r3
 800095e:	f000 ffef 	bl	8001940 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Sensor_7_Pin;
 8000962:	193b      	adds	r3, r7, r4
 8000964:	2204      	movs	r2, #4
 8000966:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000968:	193b      	adds	r3, r7, r4
 800096a:	2203      	movs	r2, #3
 800096c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096e:	193b      	adds	r3, r7, r4
 8000970:	2200      	movs	r2, #0
 8000972:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Sensor_7_GPIO_Port, &GPIO_InitStruct);
 8000974:	193b      	adds	r3, r7, r4
 8000976:	4a06      	ldr	r2, [pc, #24]	; (8000990 <HAL_ADC_MspInit+0xbc>)
 8000978:	0019      	movs	r1, r3
 800097a:	0010      	movs	r0, r2
 800097c:	f000 ffe0 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000980:	46c0      	nop			; (mov r8, r8)
 8000982:	46bd      	mov	sp, r7
 8000984:	b00b      	add	sp, #44	; 0x2c
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	40012400 	.word	0x40012400
 800098c:	40021000 	.word	0x40021000
 8000990:	50000400 	.word	0x50000400

08000994 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b099      	sub	sp, #100	; 0x64
 8000998:	af00      	add	r7, sp, #0
 800099a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800099c:	2414      	movs	r4, #20
 800099e:	193b      	adds	r3, r7, r4
 80009a0:	0018      	movs	r0, r3
 80009a2:	234c      	movs	r3, #76	; 0x4c
 80009a4:	001a      	movs	r2, r3
 80009a6:	2100      	movs	r1, #0
 80009a8:	f003 fb08 	bl	8003fbc <memset>
  if(htim_base->Instance==TIM1)
 80009ac:	687b      	ldr	r3, [r7, #4]
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a1e      	ldr	r2, [pc, #120]	; (8000a2c <HAL_TIM_Base_MspInit+0x98>)
 80009b2:	4293      	cmp	r3, r2
 80009b4:	d11d      	bne.n	80009f2 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 80009b6:	193b      	adds	r3, r7, r4
 80009b8:	2280      	movs	r2, #128	; 0x80
 80009ba:	0392      	lsls	r2, r2, #14
 80009bc:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 80009be:	193b      	adds	r3, r7, r4
 80009c0:	2200      	movs	r2, #0
 80009c2:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80009c4:	193b      	adds	r3, r7, r4
 80009c6:	0018      	movs	r0, r3
 80009c8:	f001 fe6e 	bl	80026a8 <HAL_RCCEx_PeriphCLKConfig>
 80009cc:	1e03      	subs	r3, r0, #0
 80009ce:	d001      	beq.n	80009d4 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 80009d0:	f7ff ff52 	bl	8000878 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80009d4:	4b16      	ldr	r3, [pc, #88]	; (8000a30 <HAL_TIM_Base_MspInit+0x9c>)
 80009d6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009d8:	4b15      	ldr	r3, [pc, #84]	; (8000a30 <HAL_TIM_Base_MspInit+0x9c>)
 80009da:	2180      	movs	r1, #128	; 0x80
 80009dc:	0109      	lsls	r1, r1, #4
 80009de:	430a      	orrs	r2, r1
 80009e0:	641a      	str	r2, [r3, #64]	; 0x40
 80009e2:	4b13      	ldr	r3, [pc, #76]	; (8000a30 <HAL_TIM_Base_MspInit+0x9c>)
 80009e4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80009e6:	2380      	movs	r3, #128	; 0x80
 80009e8:	011b      	lsls	r3, r3, #4
 80009ea:	4013      	ands	r3, r2
 80009ec:	613b      	str	r3, [r7, #16]
 80009ee:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80009f0:	e018      	b.n	8000a24 <HAL_TIM_Base_MspInit+0x90>
  else if(htim_base->Instance==TIM3)
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	4a0f      	ldr	r2, [pc, #60]	; (8000a34 <HAL_TIM_Base_MspInit+0xa0>)
 80009f8:	4293      	cmp	r3, r2
 80009fa:	d113      	bne.n	8000a24 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80009fc:	4b0c      	ldr	r3, [pc, #48]	; (8000a30 <HAL_TIM_Base_MspInit+0x9c>)
 80009fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000a00:	4b0b      	ldr	r3, [pc, #44]	; (8000a30 <HAL_TIM_Base_MspInit+0x9c>)
 8000a02:	2102      	movs	r1, #2
 8000a04:	430a      	orrs	r2, r1
 8000a06:	63da      	str	r2, [r3, #60]	; 0x3c
 8000a08:	4b09      	ldr	r3, [pc, #36]	; (8000a30 <HAL_TIM_Base_MspInit+0x9c>)
 8000a0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8000a0c:	2202      	movs	r2, #2
 8000a0e:	4013      	ands	r3, r2
 8000a10:	60fb      	str	r3, [r7, #12]
 8000a12:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 0, 0);
 8000a14:	2200      	movs	r2, #0
 8000a16:	2100      	movs	r1, #0
 8000a18:	2010      	movs	r0, #16
 8000a1a:	f000 ff5f 	bl	80018dc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 8000a1e:	2010      	movs	r0, #16
 8000a20:	f000 ff71 	bl	8001906 <HAL_NVIC_EnableIRQ>
}
 8000a24:	46c0      	nop			; (mov r8, r8)
 8000a26:	46bd      	mov	sp, r7
 8000a28:	b019      	add	sp, #100	; 0x64
 8000a2a:	bd90      	pop	{r4, r7, pc}
 8000a2c:	40012c00 	.word	0x40012c00
 8000a30:	40021000 	.word	0x40021000
 8000a34:	40000400 	.word	0x40000400

08000a38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000a38:	b590      	push	{r4, r7, lr}
 8000a3a:	b089      	sub	sp, #36	; 0x24
 8000a3c:	af00      	add	r7, sp, #0
 8000a3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a40:	240c      	movs	r4, #12
 8000a42:	193b      	adds	r3, r7, r4
 8000a44:	0018      	movs	r0, r3
 8000a46:	2314      	movs	r3, #20
 8000a48:	001a      	movs	r2, r3
 8000a4a:	2100      	movs	r1, #0
 8000a4c:	f003 fab6 	bl	8003fbc <memset>
  if(htim->Instance==TIM1)
 8000a50:	687b      	ldr	r3, [r7, #4]
 8000a52:	681b      	ldr	r3, [r3, #0]
 8000a54:	4a15      	ldr	r2, [pc, #84]	; (8000aac <HAL_TIM_MspPostInit+0x74>)
 8000a56:	4293      	cmp	r3, r2
 8000a58:	d123      	bne.n	8000aa2 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a5a:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <HAL_TIM_MspPostInit+0x78>)
 8000a5c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000a5e:	4b14      	ldr	r3, [pc, #80]	; (8000ab0 <HAL_TIM_MspPostInit+0x78>)
 8000a60:	2101      	movs	r1, #1
 8000a62:	430a      	orrs	r2, r1
 8000a64:	635a      	str	r2, [r3, #52]	; 0x34
 8000a66:	4b12      	ldr	r3, [pc, #72]	; (8000ab0 <HAL_TIM_MspPostInit+0x78>)
 8000a68:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	4013      	ands	r3, r2
 8000a6e:	60bb      	str	r3, [r7, #8]
 8000a70:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MotorR_PWM_Pin|MotorL_PWM_Pin;
 8000a72:	193b      	adds	r3, r7, r4
 8000a74:	22c0      	movs	r2, #192	; 0xc0
 8000a76:	0092      	lsls	r2, r2, #2
 8000a78:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a7a:	0021      	movs	r1, r4
 8000a7c:	187b      	adds	r3, r7, r1
 8000a7e:	2202      	movs	r2, #2
 8000a80:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	187b      	adds	r3, r7, r1
 8000a84:	2200      	movs	r2, #0
 8000a86:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a88:	187b      	adds	r3, r7, r1
 8000a8a:	2200      	movs	r2, #0
 8000a8c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 8000a8e:	187b      	adds	r3, r7, r1
 8000a90:	2202      	movs	r2, #2
 8000a92:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a94:	187a      	adds	r2, r7, r1
 8000a96:	23a0      	movs	r3, #160	; 0xa0
 8000a98:	05db      	lsls	r3, r3, #23
 8000a9a:	0011      	movs	r1, r2
 8000a9c:	0018      	movs	r0, r3
 8000a9e:	f000 ff4f 	bl	8001940 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8000aa2:	46c0      	nop			; (mov r8, r8)
 8000aa4:	46bd      	mov	sp, r7
 8000aa6:	b009      	add	sp, #36	; 0x24
 8000aa8:	bd90      	pop	{r4, r7, pc}
 8000aaa:	46c0      	nop			; (mov r8, r8)
 8000aac:	40012c00 	.word	0x40012c00
 8000ab0:	40021000 	.word	0x40021000

08000ab4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ab8:	e7fe      	b.n	8000ab8 <NMI_Handler+0x4>

08000aba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000aba:	b580      	push	{r7, lr}
 8000abc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000abe:	e7fe      	b.n	8000abe <HardFault_Handler+0x4>

08000ac0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000ac0:	b580      	push	{r7, lr}
 8000ac2:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8000ac4:	46c0      	nop			; (mov r8, r8)
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}

08000aca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000aca:	b580      	push	{r7, lr}
 8000acc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000ace:	46c0      	nop			; (mov r8, r8)
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}

08000ad4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ad8:	f000 f8aa 	bl	8000c30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000adc:	46c0      	nop			; (mov r8, r8)
 8000ade:	46bd      	mov	sp, r7
 8000ae0:	bd80      	pop	{r7, pc}
	...

08000ae4 <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 8000ae4:	b580      	push	{r7, lr}
 8000ae6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */

  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ae8:	4b03      	ldr	r3, [pc, #12]	; (8000af8 <TIM3_TIM4_IRQHandler+0x14>)
 8000aea:	0018      	movs	r0, r3
 8000aec:	f002 fa22 	bl	8002f34 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */

  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 8000af0:	46c0      	nop			; (mov r8, r8)
 8000af2:	46bd      	mov	sp, r7
 8000af4:	bd80      	pop	{r7, pc}
 8000af6:	46c0      	nop			; (mov r8, r8)
 8000af8:	200000d8 	.word	0x200000d8

08000afc <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000afc:	b580      	push	{r7, lr}
 8000afe:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b00:	46c0      	nop			; (mov r8, r8)
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
	...

08000b08 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8000b08:	480d      	ldr	r0, [pc, #52]	; (8000b40 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8000b0a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000b0c:	f7ff fff6 	bl	8000afc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000b10:	480c      	ldr	r0, [pc, #48]	; (8000b44 <LoopForever+0x6>)
  ldr r1, =_edata
 8000b12:	490d      	ldr	r1, [pc, #52]	; (8000b48 <LoopForever+0xa>)
  ldr r2, =_sidata
 8000b14:	4a0d      	ldr	r2, [pc, #52]	; (8000b4c <LoopForever+0xe>)
  movs r3, #0
 8000b16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b18:	e002      	b.n	8000b20 <LoopCopyDataInit>

08000b1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b1e:	3304      	adds	r3, #4

08000b20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b24:	d3f9      	bcc.n	8000b1a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b26:	4a0a      	ldr	r2, [pc, #40]	; (8000b50 <LoopForever+0x12>)
  ldr r4, =_ebss
 8000b28:	4c0a      	ldr	r4, [pc, #40]	; (8000b54 <LoopForever+0x16>)
  movs r3, #0
 8000b2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b2c:	e001      	b.n	8000b32 <LoopFillZerobss>

08000b2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b30:	3204      	adds	r2, #4

08000b32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b34:	d3fb      	bcc.n	8000b2e <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 8000b36:	f003 fa49 	bl	8003fcc <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 8000b3a:	f7ff fb6f 	bl	800021c <main>

08000b3e <LoopForever>:

LoopForever:
  b LoopForever
 8000b3e:	e7fe      	b.n	8000b3e <LoopForever>
  ldr   r0, =_estack
 8000b40:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 8000b44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b48:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000b4c:	080040c8 	.word	0x080040c8
  ldr r2, =_sbss
 8000b50:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000b54:	20000138 	.word	0x20000138

08000b58 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000b58:	e7fe      	b.n	8000b58 <ADC1_COMP_IRQHandler>
	...

08000b5c <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b082      	sub	sp, #8
 8000b60:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8000b62:	1dfb      	adds	r3, r7, #7
 8000b64:	2200      	movs	r2, #0
 8000b66:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000b68:	4b0b      	ldr	r3, [pc, #44]	; (8000b98 <HAL_Init+0x3c>)
 8000b6a:	681a      	ldr	r2, [r3, #0]
 8000b6c:	4b0a      	ldr	r3, [pc, #40]	; (8000b98 <HAL_Init+0x3c>)
 8000b6e:	2180      	movs	r1, #128	; 0x80
 8000b70:	0049      	lsls	r1, r1, #1
 8000b72:	430a      	orrs	r2, r1
 8000b74:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000b76:	2000      	movs	r0, #0
 8000b78:	f000 f810 	bl	8000b9c <HAL_InitTick>
 8000b7c:	1e03      	subs	r3, r0, #0
 8000b7e:	d003      	beq.n	8000b88 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8000b80:	1dfb      	adds	r3, r7, #7
 8000b82:	2201      	movs	r2, #1
 8000b84:	701a      	strb	r2, [r3, #0]
 8000b86:	e001      	b.n	8000b8c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8000b88:	f7ff fe7c 	bl	8000884 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8000b8c:	1dfb      	adds	r3, r7, #7
 8000b8e:	781b      	ldrb	r3, [r3, #0]
}
 8000b90:	0018      	movs	r0, r3
 8000b92:	46bd      	mov	sp, r7
 8000b94:	b002      	add	sp, #8
 8000b96:	bd80      	pop	{r7, pc}
 8000b98:	40022000 	.word	0x40022000

08000b9c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000b9c:	b590      	push	{r4, r7, lr}
 8000b9e:	b085      	sub	sp, #20
 8000ba0:	af00      	add	r7, sp, #0
 8000ba2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8000ba4:	230f      	movs	r3, #15
 8000ba6:	18fb      	adds	r3, r7, r3
 8000ba8:	2200      	movs	r2, #0
 8000baa:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 8000bac:	4b1d      	ldr	r3, [pc, #116]	; (8000c24 <HAL_InitTick+0x88>)
 8000bae:	781b      	ldrb	r3, [r3, #0]
 8000bb0:	2b00      	cmp	r3, #0
 8000bb2:	d02b      	beq.n	8000c0c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8000bb4:	4b1c      	ldr	r3, [pc, #112]	; (8000c28 <HAL_InitTick+0x8c>)
 8000bb6:	681c      	ldr	r4, [r3, #0]
 8000bb8:	4b1a      	ldr	r3, [pc, #104]	; (8000c24 <HAL_InitTick+0x88>)
 8000bba:	781b      	ldrb	r3, [r3, #0]
 8000bbc:	0019      	movs	r1, r3
 8000bbe:	23fa      	movs	r3, #250	; 0xfa
 8000bc0:	0098      	lsls	r0, r3, #2
 8000bc2:	f7ff fa9f 	bl	8000104 <__udivsi3>
 8000bc6:	0003      	movs	r3, r0
 8000bc8:	0019      	movs	r1, r3
 8000bca:	0020      	movs	r0, r4
 8000bcc:	f7ff fa9a 	bl	8000104 <__udivsi3>
 8000bd0:	0003      	movs	r3, r0
 8000bd2:	0018      	movs	r0, r3
 8000bd4:	f000 fea7 	bl	8001926 <HAL_SYSTICK_Config>
 8000bd8:	1e03      	subs	r3, r0, #0
 8000bda:	d112      	bne.n	8000c02 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	2b03      	cmp	r3, #3
 8000be0:	d80a      	bhi.n	8000bf8 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000be2:	6879      	ldr	r1, [r7, #4]
 8000be4:	2301      	movs	r3, #1
 8000be6:	425b      	negs	r3, r3
 8000be8:	2200      	movs	r2, #0
 8000bea:	0018      	movs	r0, r3
 8000bec:	f000 fe76 	bl	80018dc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000bf0:	4b0e      	ldr	r3, [pc, #56]	; (8000c2c <HAL_InitTick+0x90>)
 8000bf2:	687a      	ldr	r2, [r7, #4]
 8000bf4:	601a      	str	r2, [r3, #0]
 8000bf6:	e00d      	b.n	8000c14 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8000bf8:	230f      	movs	r3, #15
 8000bfa:	18fb      	adds	r3, r7, r3
 8000bfc:	2201      	movs	r2, #1
 8000bfe:	701a      	strb	r2, [r3, #0]
 8000c00:	e008      	b.n	8000c14 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8000c02:	230f      	movs	r3, #15
 8000c04:	18fb      	adds	r3, r7, r3
 8000c06:	2201      	movs	r2, #1
 8000c08:	701a      	strb	r2, [r3, #0]
 8000c0a:	e003      	b.n	8000c14 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000c0c:	230f      	movs	r3, #15
 8000c0e:	18fb      	adds	r3, r7, r3
 8000c10:	2201      	movs	r2, #1
 8000c12:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8000c14:	230f      	movs	r3, #15
 8000c16:	18fb      	adds	r3, r7, r3
 8000c18:	781b      	ldrb	r3, [r3, #0]
}
 8000c1a:	0018      	movs	r0, r3
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	b005      	add	sp, #20
 8000c20:	bd90      	pop	{r4, r7, pc}
 8000c22:	46c0      	nop			; (mov r8, r8)
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	20000004 	.word	0x20000004

08000c30 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000c34:	4b05      	ldr	r3, [pc, #20]	; (8000c4c <HAL_IncTick+0x1c>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	001a      	movs	r2, r3
 8000c3a:	4b05      	ldr	r3, [pc, #20]	; (8000c50 <HAL_IncTick+0x20>)
 8000c3c:	681b      	ldr	r3, [r3, #0]
 8000c3e:	18d2      	adds	r2, r2, r3
 8000c40:	4b03      	ldr	r3, [pc, #12]	; (8000c50 <HAL_IncTick+0x20>)
 8000c42:	601a      	str	r2, [r3, #0]
}
 8000c44:	46c0      	nop			; (mov r8, r8)
 8000c46:	46bd      	mov	sp, r7
 8000c48:	bd80      	pop	{r7, pc}
 8000c4a:	46c0      	nop			; (mov r8, r8)
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	20000134 	.word	0x20000134

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b580      	push	{r7, lr}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b02      	ldr	r3, [pc, #8]	; (8000c64 <HAL_GetTick+0x10>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	0018      	movs	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	bd80      	pop	{r7, pc}
 8000c62:	46c0      	nop			; (mov r8, r8)
 8000c64:	20000134 	.word	0x20000134

08000c68 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b082      	sub	sp, #8
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 8000c70:	4b06      	ldr	r3, [pc, #24]	; (8000c8c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c72:	681b      	ldr	r3, [r3, #0]
 8000c74:	4a06      	ldr	r2, [pc, #24]	; (8000c90 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 8000c76:	4013      	ands	r3, r2
 8000c78:	0019      	movs	r1, r3
 8000c7a:	4b04      	ldr	r3, [pc, #16]	; (8000c8c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 8000c7c:	687a      	ldr	r2, [r7, #4]
 8000c7e:	430a      	orrs	r2, r1
 8000c80:	601a      	str	r2, [r3, #0]
}
 8000c82:	46c0      	nop			; (mov r8, r8)
 8000c84:	46bd      	mov	sp, r7
 8000c86:	b002      	add	sp, #8
 8000c88:	bd80      	pop	{r7, pc}
 8000c8a:	46c0      	nop			; (mov r8, r8)
 8000c8c:	40010000 	.word	0x40010000
 8000c90:	fffff9ff 	.word	0xfffff9ff

08000c94 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8000c94:	b580      	push	{r7, lr}
 8000c96:	b082      	sub	sp, #8
 8000c98:	af00      	add	r7, sp, #0
 8000c9a:	6078      	str	r0, [r7, #4]
 8000c9c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8000c9e:	687b      	ldr	r3, [r7, #4]
 8000ca0:	681b      	ldr	r3, [r3, #0]
 8000ca2:	4a05      	ldr	r2, [pc, #20]	; (8000cb8 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8000ca4:	401a      	ands	r2, r3
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	431a      	orrs	r2, r3
 8000caa:	687b      	ldr	r3, [r7, #4]
 8000cac:	601a      	str	r2, [r3, #0]
}
 8000cae:	46c0      	nop			; (mov r8, r8)
 8000cb0:	46bd      	mov	sp, r7
 8000cb2:	b002      	add	sp, #8
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	46c0      	nop			; (mov r8, r8)
 8000cb8:	fe3fffff 	.word	0xfe3fffff

08000cbc <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 8000cbc:	b580      	push	{r7, lr}
 8000cbe:	b082      	sub	sp, #8
 8000cc0:	af00      	add	r7, sp, #0
 8000cc2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8000cc4:	687b      	ldr	r3, [r7, #4]
 8000cc6:	681a      	ldr	r2, [r3, #0]
 8000cc8:	23e0      	movs	r3, #224	; 0xe0
 8000cca:	045b      	lsls	r3, r3, #17
 8000ccc:	4013      	ands	r3, r2
}
 8000cce:	0018      	movs	r0, r3
 8000cd0:	46bd      	mov	sp, r7
 8000cd2:	b002      	add	sp, #8
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	60f8      	str	r0, [r7, #12]
 8000cde:	60b9      	str	r1, [r7, #8]
 8000ce0:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8000ce2:	68fb      	ldr	r3, [r7, #12]
 8000ce4:	695b      	ldr	r3, [r3, #20]
 8000ce6:	68ba      	ldr	r2, [r7, #8]
 8000ce8:	2104      	movs	r1, #4
 8000cea:	400a      	ands	r2, r1
 8000cec:	2107      	movs	r1, #7
 8000cee:	4091      	lsls	r1, r2
 8000cf0:	000a      	movs	r2, r1
 8000cf2:	43d2      	mvns	r2, r2
 8000cf4:	401a      	ands	r2, r3
 8000cf6:	68bb      	ldr	r3, [r7, #8]
 8000cf8:	2104      	movs	r1, #4
 8000cfa:	400b      	ands	r3, r1
 8000cfc:	6879      	ldr	r1, [r7, #4]
 8000cfe:	4099      	lsls	r1, r3
 8000d00:	000b      	movs	r3, r1
 8000d02:	431a      	orrs	r2, r3
 8000d04:	68fb      	ldr	r3, [r7, #12]
 8000d06:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8000d08:	46c0      	nop			; (mov r8, r8)
 8000d0a:	46bd      	mov	sp, r7
 8000d0c:	b004      	add	sp, #16
 8000d0e:	bd80      	pop	{r7, pc}

08000d10 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8000d10:	b580      	push	{r7, lr}
 8000d12:	b082      	sub	sp, #8
 8000d14:	af00      	add	r7, sp, #0
 8000d16:	6078      	str	r0, [r7, #4]
 8000d18:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d1a:	687b      	ldr	r3, [r7, #4]
 8000d1c:	695b      	ldr	r3, [r3, #20]
 8000d1e:	683a      	ldr	r2, [r7, #0]
 8000d20:	2104      	movs	r1, #4
 8000d22:	400a      	ands	r2, r1
 8000d24:	2107      	movs	r1, #7
 8000d26:	4091      	lsls	r1, r2
 8000d28:	000a      	movs	r2, r1
 8000d2a:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 8000d2c:	683b      	ldr	r3, [r7, #0]
 8000d2e:	2104      	movs	r1, #4
 8000d30:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 8000d32:	40da      	lsrs	r2, r3
 8000d34:	0013      	movs	r3, r2
}
 8000d36:	0018      	movs	r0, r3
 8000d38:	46bd      	mov	sp, r7
 8000d3a:	b002      	add	sp, #8
 8000d3c:	bd80      	pop	{r7, pc}

08000d3e <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8000d3e:	b580      	push	{r7, lr}
 8000d40:	b084      	sub	sp, #16
 8000d42:	af00      	add	r7, sp, #0
 8000d44:	60f8      	str	r0, [r7, #12]
 8000d46:	60b9      	str	r1, [r7, #8]
 8000d48:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 8000d4a:	68fb      	ldr	r3, [r7, #12]
 8000d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000d4e:	68ba      	ldr	r2, [r7, #8]
 8000d50:	211f      	movs	r1, #31
 8000d52:	400a      	ands	r2, r1
 8000d54:	210f      	movs	r1, #15
 8000d56:	4091      	lsls	r1, r2
 8000d58:	000a      	movs	r2, r1
 8000d5a:	43d2      	mvns	r2, r2
 8000d5c:	401a      	ands	r2, r3
 8000d5e:	687b      	ldr	r3, [r7, #4]
 8000d60:	0e9b      	lsrs	r3, r3, #26
 8000d62:	210f      	movs	r1, #15
 8000d64:	4019      	ands	r1, r3
 8000d66:	68bb      	ldr	r3, [r7, #8]
 8000d68:	201f      	movs	r0, #31
 8000d6a:	4003      	ands	r3, r0
 8000d6c:	4099      	lsls	r1, r3
 8000d6e:	000b      	movs	r3, r1
 8000d70:	431a      	orrs	r2, r3
 8000d72:	68fb      	ldr	r3, [r7, #12]
 8000d74:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8000d76:	46c0      	nop			; (mov r8, r8)
 8000d78:	46bd      	mov	sp, r7
 8000d7a:	b004      	add	sp, #16
 8000d7c:	bd80      	pop	{r7, pc}

08000d7e <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000d7e:	b580      	push	{r7, lr}
 8000d80:	b082      	sub	sp, #8
 8000d82:	af00      	add	r7, sp, #0
 8000d84:	6078      	str	r0, [r7, #4]
 8000d86:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000d88:	687b      	ldr	r3, [r7, #4]
 8000d8a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8000d8c:	683b      	ldr	r3, [r7, #0]
 8000d8e:	035b      	lsls	r3, r3, #13
 8000d90:	0b5b      	lsrs	r3, r3, #13
 8000d92:	431a      	orrs	r2, r3
 8000d94:	687b      	ldr	r3, [r7, #4]
 8000d96:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000d98:	46c0      	nop			; (mov r8, r8)
 8000d9a:	46bd      	mov	sp, r7
 8000d9c:	b002      	add	sp, #8
 8000d9e:	bd80      	pop	{r7, pc}

08000da0 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b082      	sub	sp, #8
 8000da4:	af00      	add	r7, sp, #0
 8000da6:	6078      	str	r0, [r7, #4]
 8000da8:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8000daa:	687b      	ldr	r3, [r7, #4]
 8000dac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000dae:	683a      	ldr	r2, [r7, #0]
 8000db0:	0352      	lsls	r2, r2, #13
 8000db2:	0b52      	lsrs	r2, r2, #13
 8000db4:	43d2      	mvns	r2, r2
 8000db6:	401a      	ands	r2, r3
 8000db8:	687b      	ldr	r3, [r7, #4]
 8000dba:	629a      	str	r2, [r3, #40]	; 0x28
}
 8000dbc:	46c0      	nop			; (mov r8, r8)
 8000dbe:	46bd      	mov	sp, r7
 8000dc0:	b002      	add	sp, #8
 8000dc2:	bd80      	pop	{r7, pc}

08000dc4 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8000dc4:	b580      	push	{r7, lr}
 8000dc6:	b084      	sub	sp, #16
 8000dc8:	af00      	add	r7, sp, #0
 8000dca:	60f8      	str	r0, [r7, #12]
 8000dcc:	60b9      	str	r1, [r7, #8]
 8000dce:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8000dd0:	68fb      	ldr	r3, [r7, #12]
 8000dd2:	695b      	ldr	r3, [r3, #20]
 8000dd4:	68ba      	ldr	r2, [r7, #8]
 8000dd6:	0212      	lsls	r2, r2, #8
 8000dd8:	43d2      	mvns	r2, r2
 8000dda:	401a      	ands	r2, r3
 8000ddc:	68bb      	ldr	r3, [r7, #8]
 8000dde:	021b      	lsls	r3, r3, #8
 8000de0:	6879      	ldr	r1, [r7, #4]
 8000de2:	400b      	ands	r3, r1
 8000de4:	4904      	ldr	r1, [pc, #16]	; (8000df8 <LL_ADC_SetChannelSamplingTime+0x34>)
 8000de6:	400b      	ands	r3, r1
 8000de8:	431a      	orrs	r2, r3
 8000dea:	68fb      	ldr	r3, [r7, #12]
 8000dec:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 8000dee:	46c0      	nop			; (mov r8, r8)
 8000df0:	46bd      	mov	sp, r7
 8000df2:	b004      	add	sp, #16
 8000df4:	bd80      	pop	{r7, pc}
 8000df6:	46c0      	nop			; (mov r8, r8)
 8000df8:	07ffff00 	.word	0x07ffff00

08000dfc <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8000dfc:	b580      	push	{r7, lr}
 8000dfe:	b082      	sub	sp, #8
 8000e00:	af00      	add	r7, sp, #0
 8000e02:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e04:	687b      	ldr	r3, [r7, #4]
 8000e06:	689b      	ldr	r3, [r3, #8]
 8000e08:	4a05      	ldr	r2, [pc, #20]	; (8000e20 <LL_ADC_EnableInternalRegulator+0x24>)
 8000e0a:	4013      	ands	r3, r2
 8000e0c:	2280      	movs	r2, #128	; 0x80
 8000e0e:	0552      	lsls	r2, r2, #21
 8000e10:	431a      	orrs	r2, r3
 8000e12:	687b      	ldr	r3, [r7, #4]
 8000e14:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8000e16:	46c0      	nop			; (mov r8, r8)
 8000e18:	46bd      	mov	sp, r7
 8000e1a:	b002      	add	sp, #8
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	46c0      	nop			; (mov r8, r8)
 8000e20:	6fffffe8 	.word	0x6fffffe8

08000e24 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	689a      	ldr	r2, [r3, #8]
 8000e30:	2380      	movs	r3, #128	; 0x80
 8000e32:	055b      	lsls	r3, r3, #21
 8000e34:	401a      	ands	r2, r3
 8000e36:	2380      	movs	r3, #128	; 0x80
 8000e38:	055b      	lsls	r3, r3, #21
 8000e3a:	429a      	cmp	r2, r3
 8000e3c:	d101      	bne.n	8000e42 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 8000e3e:	2301      	movs	r3, #1
 8000e40:	e000      	b.n	8000e44 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 8000e42:	2300      	movs	r3, #0
}
 8000e44:	0018      	movs	r0, r3
 8000e46:	46bd      	mov	sp, r7
 8000e48:	b002      	add	sp, #8
 8000e4a:	bd80      	pop	{r7, pc}

08000e4c <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8000e4c:	b580      	push	{r7, lr}
 8000e4e:	b082      	sub	sp, #8
 8000e50:	af00      	add	r7, sp, #0
 8000e52:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e54:	687b      	ldr	r3, [r7, #4]
 8000e56:	689b      	ldr	r3, [r3, #8]
 8000e58:	4a04      	ldr	r2, [pc, #16]	; (8000e6c <LL_ADC_Enable+0x20>)
 8000e5a:	4013      	ands	r3, r2
 8000e5c:	2201      	movs	r2, #1
 8000e5e:	431a      	orrs	r2, r3
 8000e60:	687b      	ldr	r3, [r7, #4]
 8000e62:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8000e64:	46c0      	nop			; (mov r8, r8)
 8000e66:	46bd      	mov	sp, r7
 8000e68:	b002      	add	sp, #8
 8000e6a:	bd80      	pop	{r7, pc}
 8000e6c:	7fffffe8 	.word	0x7fffffe8

08000e70 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 8000e70:	b580      	push	{r7, lr}
 8000e72:	b082      	sub	sp, #8
 8000e74:	af00      	add	r7, sp, #0
 8000e76:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8000e78:	687b      	ldr	r3, [r7, #4]
 8000e7a:	689b      	ldr	r3, [r3, #8]
 8000e7c:	2201      	movs	r2, #1
 8000e7e:	4013      	ands	r3, r2
 8000e80:	2b01      	cmp	r3, #1
 8000e82:	d101      	bne.n	8000e88 <LL_ADC_IsEnabled+0x18>
 8000e84:	2301      	movs	r3, #1
 8000e86:	e000      	b.n	8000e8a <LL_ADC_IsEnabled+0x1a>
 8000e88:	2300      	movs	r3, #0
}
 8000e8a:	0018      	movs	r0, r3
 8000e8c:	46bd      	mov	sp, r7
 8000e8e:	b002      	add	sp, #8
 8000e90:	bd80      	pop	{r7, pc}
	...

08000e94 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8000e9c:	687b      	ldr	r3, [r7, #4]
 8000e9e:	689b      	ldr	r3, [r3, #8]
 8000ea0:	4a04      	ldr	r2, [pc, #16]	; (8000eb4 <LL_ADC_REG_StartConversion+0x20>)
 8000ea2:	4013      	ands	r3, r2
 8000ea4:	2204      	movs	r2, #4
 8000ea6:	431a      	orrs	r2, r3
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8000eac:	46c0      	nop			; (mov r8, r8)
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	b002      	add	sp, #8
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	7fffffe8 	.word	0x7fffffe8

08000eb8 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8000ec0:	687b      	ldr	r3, [r7, #4]
 8000ec2:	689b      	ldr	r3, [r3, #8]
 8000ec4:	2204      	movs	r2, #4
 8000ec6:	4013      	ands	r3, r2
 8000ec8:	2b04      	cmp	r3, #4
 8000eca:	d101      	bne.n	8000ed0 <LL_ADC_REG_IsConversionOngoing+0x18>
 8000ecc:	2301      	movs	r3, #1
 8000ece:	e000      	b.n	8000ed2 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8000ed0:	2300      	movs	r3, #0
}
 8000ed2:	0018      	movs	r0, r3
 8000ed4:	46bd      	mov	sp, r7
 8000ed6:	b002      	add	sp, #8
 8000ed8:	bd80      	pop	{r7, pc}
	...

08000edc <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	b088      	sub	sp, #32
 8000ee0:	af00      	add	r7, sp, #0
 8000ee2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8000ee4:	231f      	movs	r3, #31
 8000ee6:	18fb      	adds	r3, r7, r3
 8000ee8:	2200      	movs	r2, #0
 8000eea:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 8000eec:	2300      	movs	r3, #0
 8000eee:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8000ef0:	2300      	movs	r3, #0
 8000ef2:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8000ef8:	687b      	ldr	r3, [r7, #4]
 8000efa:	2b00      	cmp	r3, #0
 8000efc:	d101      	bne.n	8000f02 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 8000efe:	2301      	movs	r3, #1
 8000f00:	e17f      	b.n	8001202 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8000f02:	687b      	ldr	r3, [r7, #4]
 8000f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f06:	2b00      	cmp	r3, #0
 8000f08:	d10a      	bne.n	8000f20 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	0018      	movs	r0, r3
 8000f0e:	f7ff fce1 	bl	80008d4 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	2200      	movs	r2, #0
 8000f16:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	2254      	movs	r2, #84	; 0x54
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f20:	687b      	ldr	r3, [r7, #4]
 8000f22:	681b      	ldr	r3, [r3, #0]
 8000f24:	0018      	movs	r0, r3
 8000f26:	f7ff ff7d 	bl	8000e24 <LL_ADC_IsInternalRegulatorEnabled>
 8000f2a:	1e03      	subs	r3, r0, #0
 8000f2c:	d115      	bne.n	8000f5a <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	0018      	movs	r0, r3
 8000f34:	f7ff ff62 	bl	8000dfc <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8000f38:	4bb4      	ldr	r3, [pc, #720]	; (800120c <HAL_ADC_Init+0x330>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	49b4      	ldr	r1, [pc, #720]	; (8001210 <HAL_ADC_Init+0x334>)
 8000f3e:	0018      	movs	r0, r3
 8000f40:	f7ff f8e0 	bl	8000104 <__udivsi3>
 8000f44:	0003      	movs	r3, r0
 8000f46:	3301      	adds	r3, #1
 8000f48:	005b      	lsls	r3, r3, #1
 8000f4a:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f4c:	e002      	b.n	8000f54 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 8000f4e:	68fb      	ldr	r3, [r7, #12]
 8000f50:	3b01      	subs	r3, #1
 8000f52:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 8000f54:	68fb      	ldr	r3, [r7, #12]
 8000f56:	2b00      	cmp	r3, #0
 8000f58:	d1f9      	bne.n	8000f4e <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	681b      	ldr	r3, [r3, #0]
 8000f5e:	0018      	movs	r0, r3
 8000f60:	f7ff ff60 	bl	8000e24 <LL_ADC_IsInternalRegulatorEnabled>
 8000f64:	1e03      	subs	r3, r0, #0
 8000f66:	d10f      	bne.n	8000f88 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f6c:	2210      	movs	r2, #16
 8000f6e:	431a      	orrs	r2, r3
 8000f70:	687b      	ldr	r3, [r7, #4]
 8000f72:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8000f74:	687b      	ldr	r3, [r7, #4]
 8000f76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f78:	2201      	movs	r2, #1
 8000f7a:	431a      	orrs	r2, r3
 8000f7c:	687b      	ldr	r3, [r7, #4]
 8000f7e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8000f80:	231f      	movs	r3, #31
 8000f82:	18fb      	adds	r3, r7, r3
 8000f84:	2201      	movs	r2, #1
 8000f86:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	681b      	ldr	r3, [r3, #0]
 8000f8c:	0018      	movs	r0, r3
 8000f8e:	f7ff ff93 	bl	8000eb8 <LL_ADC_REG_IsConversionOngoing>
 8000f92:	0003      	movs	r3, r0
 8000f94:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000f9a:	2210      	movs	r2, #16
 8000f9c:	4013      	ands	r3, r2
 8000f9e:	d000      	beq.n	8000fa2 <HAL_ADC_Init+0xc6>
 8000fa0:	e122      	b.n	80011e8 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8000fa2:	693b      	ldr	r3, [r7, #16]
 8000fa4:	2b00      	cmp	r3, #0
 8000fa6:	d000      	beq.n	8000faa <HAL_ADC_Init+0xce>
 8000fa8:	e11e      	b.n	80011e8 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fae:	4a99      	ldr	r2, [pc, #612]	; (8001214 <HAL_ADC_Init+0x338>)
 8000fb0:	4013      	ands	r3, r2
 8000fb2:	2202      	movs	r2, #2
 8000fb4:	431a      	orrs	r2, r3
 8000fb6:	687b      	ldr	r3, [r7, #4]
 8000fb8:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8000fba:	687b      	ldr	r3, [r7, #4]
 8000fbc:	681b      	ldr	r3, [r3, #0]
 8000fbe:	0018      	movs	r0, r3
 8000fc0:	f7ff ff56 	bl	8000e70 <LL_ADC_IsEnabled>
 8000fc4:	1e03      	subs	r3, r0, #0
 8000fc6:	d000      	beq.n	8000fca <HAL_ADC_Init+0xee>
 8000fc8:	e0ad      	b.n	8001126 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fce:	687b      	ldr	r3, [r7, #4]
 8000fd0:	7e1b      	ldrb	r3, [r3, #24]
 8000fd2:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8000fd4:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fd6:	687b      	ldr	r3, [r7, #4]
 8000fd8:	7e5b      	ldrb	r3, [r3, #25]
 8000fda:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8000fdc:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	7e9b      	ldrb	r3, [r3, #26]
 8000fe2:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8000fe4:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000fe6:	687b      	ldr	r3, [r7, #4]
 8000fe8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d002      	beq.n	8000ff4 <HAL_ADC_Init+0x118>
 8000fee:	2380      	movs	r3, #128	; 0x80
 8000ff0:	015b      	lsls	r3, r3, #5
 8000ff2:	e000      	b.n	8000ff6 <HAL_ADC_Init+0x11a>
 8000ff4:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8000ff6:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8000ffc:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8000ffe:	687b      	ldr	r3, [r7, #4]
 8001000:	691b      	ldr	r3, [r3, #16]
 8001002:	2b00      	cmp	r3, #0
 8001004:	da04      	bge.n	8001010 <HAL_ADC_Init+0x134>
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	691b      	ldr	r3, [r3, #16]
 800100a:	005b      	lsls	r3, r3, #1
 800100c:	085b      	lsrs	r3, r3, #1
 800100e:	e001      	b.n	8001014 <HAL_ADC_Init+0x138>
 8001010:	2380      	movs	r3, #128	; 0x80
 8001012:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001014:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001016:	687b      	ldr	r3, [r7, #4]
 8001018:	212c      	movs	r1, #44	; 0x2c
 800101a:	5c5b      	ldrb	r3, [r3, r1]
 800101c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 800101e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001020:	69ba      	ldr	r2, [r7, #24]
 8001022:	4313      	orrs	r3, r2
 8001024:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001026:	687b      	ldr	r3, [r7, #4]
 8001028:	2220      	movs	r2, #32
 800102a:	5c9b      	ldrb	r3, [r3, r2]
 800102c:	2b01      	cmp	r3, #1
 800102e:	d115      	bne.n	800105c <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	7e9b      	ldrb	r3, [r3, #26]
 8001034:	2b00      	cmp	r3, #0
 8001036:	d105      	bne.n	8001044 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001038:	69bb      	ldr	r3, [r7, #24]
 800103a:	2280      	movs	r2, #128	; 0x80
 800103c:	0252      	lsls	r2, r2, #9
 800103e:	4313      	orrs	r3, r2
 8001040:	61bb      	str	r3, [r7, #24]
 8001042:	e00b      	b.n	800105c <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001048:	2220      	movs	r2, #32
 800104a:	431a      	orrs	r2, r3
 800104c:	687b      	ldr	r3, [r7, #4]
 800104e:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001050:	687b      	ldr	r3, [r7, #4]
 8001052:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001054:	2201      	movs	r2, #1
 8001056:	431a      	orrs	r2, r3
 8001058:	687b      	ldr	r3, [r7, #4]
 800105a:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001060:	2b00      	cmp	r3, #0
 8001062:	d00a      	beq.n	800107a <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001068:	23e0      	movs	r3, #224	; 0xe0
 800106a:	005b      	lsls	r3, r3, #1
 800106c:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001072:	4313      	orrs	r3, r2
 8001074:	69ba      	ldr	r2, [r7, #24]
 8001076:	4313      	orrs	r3, r2
 8001078:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	681b      	ldr	r3, [r3, #0]
 800107e:	68db      	ldr	r3, [r3, #12]
 8001080:	4a65      	ldr	r2, [pc, #404]	; (8001218 <HAL_ADC_Init+0x33c>)
 8001082:	4013      	ands	r3, r2
 8001084:	0019      	movs	r1, r3
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	681b      	ldr	r3, [r3, #0]
 800108a:	69ba      	ldr	r2, [r7, #24]
 800108c:	430a      	orrs	r2, r1
 800108e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	685b      	ldr	r3, [r3, #4]
 8001094:	0f9b      	lsrs	r3, r3, #30
 8001096:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 800109c:	4313      	orrs	r3, r2
 800109e:	697a      	ldr	r2, [r7, #20]
 80010a0:	4313      	orrs	r3, r2
 80010a2:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	223c      	movs	r2, #60	; 0x3c
 80010a8:	5c9b      	ldrb	r3, [r3, r2]
 80010aa:	2b01      	cmp	r3, #1
 80010ac:	d111      	bne.n	80010d2 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	685b      	ldr	r3, [r3, #4]
 80010b2:	0f9b      	lsrs	r3, r3, #30
 80010b4:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 80010ba:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 80010c0:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 80010c2:	687b      	ldr	r3, [r7, #4]
 80010c4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 80010c6:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 80010c8:	697b      	ldr	r3, [r7, #20]
 80010ca:	4313      	orrs	r3, r2
 80010cc:	2201      	movs	r2, #1
 80010ce:	4313      	orrs	r3, r2
 80010d0:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 80010d2:	687b      	ldr	r3, [r7, #4]
 80010d4:	681b      	ldr	r3, [r3, #0]
 80010d6:	691b      	ldr	r3, [r3, #16]
 80010d8:	4a50      	ldr	r2, [pc, #320]	; (800121c <HAL_ADC_Init+0x340>)
 80010da:	4013      	ands	r3, r2
 80010dc:	0019      	movs	r1, r3
 80010de:	687b      	ldr	r3, [r7, #4]
 80010e0:	681b      	ldr	r3, [r3, #0]
 80010e2:	697a      	ldr	r2, [r7, #20]
 80010e4:	430a      	orrs	r2, r1
 80010e6:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	685a      	ldr	r2, [r3, #4]
 80010ec:	23c0      	movs	r3, #192	; 0xc0
 80010ee:	061b      	lsls	r3, r3, #24
 80010f0:	429a      	cmp	r2, r3
 80010f2:	d018      	beq.n	8001126 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 80010f8:	2380      	movs	r3, #128	; 0x80
 80010fa:	05db      	lsls	r3, r3, #23
 80010fc:	429a      	cmp	r2, r3
 80010fe:	d012      	beq.n	8001126 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001104:	2380      	movs	r3, #128	; 0x80
 8001106:	061b      	lsls	r3, r3, #24
 8001108:	429a      	cmp	r2, r3
 800110a:	d00c      	beq.n	8001126 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 800110c:	4b44      	ldr	r3, [pc, #272]	; (8001220 <HAL_ADC_Init+0x344>)
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	4a44      	ldr	r2, [pc, #272]	; (8001224 <HAL_ADC_Init+0x348>)
 8001112:	4013      	ands	r3, r2
 8001114:	0019      	movs	r1, r3
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	685a      	ldr	r2, [r3, #4]
 800111a:	23f0      	movs	r3, #240	; 0xf0
 800111c:	039b      	lsls	r3, r3, #14
 800111e:	401a      	ands	r2, r3
 8001120:	4b3f      	ldr	r3, [pc, #252]	; (8001220 <HAL_ADC_Init+0x344>)
 8001122:	430a      	orrs	r2, r1
 8001124:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	6818      	ldr	r0, [r3, #0]
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800112e:	001a      	movs	r2, r3
 8001130:	2100      	movs	r1, #0
 8001132:	f7ff fdd0 	bl	8000cd6 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	6818      	ldr	r0, [r3, #0]
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800113e:	493a      	ldr	r1, [pc, #232]	; (8001228 <HAL_ADC_Init+0x34c>)
 8001140:	001a      	movs	r2, r3
 8001142:	f7ff fdc8 	bl	8000cd6 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	691b      	ldr	r3, [r3, #16]
 800114a:	2b00      	cmp	r3, #0
 800114c:	d109      	bne.n	8001162 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	681b      	ldr	r3, [r3, #0]
 8001152:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001154:	687b      	ldr	r3, [r7, #4]
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2110      	movs	r1, #16
 800115a:	4249      	negs	r1, r1
 800115c:	430a      	orrs	r2, r1
 800115e:	629a      	str	r2, [r3, #40]	; 0x28
 8001160:	e018      	b.n	8001194 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001162:	687b      	ldr	r3, [r7, #4]
 8001164:	691a      	ldr	r2, [r3, #16]
 8001166:	2380      	movs	r3, #128	; 0x80
 8001168:	039b      	lsls	r3, r3, #14
 800116a:	429a      	cmp	r2, r3
 800116c:	d112      	bne.n	8001194 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 800116e:	687b      	ldr	r3, [r7, #4]
 8001170:	681b      	ldr	r3, [r3, #0]
 8001172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001174:	687b      	ldr	r3, [r7, #4]
 8001176:	69db      	ldr	r3, [r3, #28]
 8001178:	3b01      	subs	r3, #1
 800117a:	009b      	lsls	r3, r3, #2
 800117c:	221c      	movs	r2, #28
 800117e:	4013      	ands	r3, r2
 8001180:	2210      	movs	r2, #16
 8001182:	4252      	negs	r2, r2
 8001184:	409a      	lsls	r2, r3
 8001186:	0011      	movs	r1, r2
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800118c:	687b      	ldr	r3, [r7, #4]
 800118e:	681b      	ldr	r3, [r3, #0]
 8001190:	430a      	orrs	r2, r1
 8001192:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001194:	687b      	ldr	r3, [r7, #4]
 8001196:	681b      	ldr	r3, [r3, #0]
 8001198:	2100      	movs	r1, #0
 800119a:	0018      	movs	r0, r3
 800119c:	f7ff fdb8 	bl	8000d10 <LL_ADC_GetSamplingTimeCommonChannels>
 80011a0:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011a6:	429a      	cmp	r2, r3
 80011a8:	d10b      	bne.n	80011c2 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 80011aa:	687b      	ldr	r3, [r7, #4]
 80011ac:	2200      	movs	r2, #0
 80011ae:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011b4:	2203      	movs	r2, #3
 80011b6:	4393      	bics	r3, r2
 80011b8:	2201      	movs	r2, #1
 80011ba:	431a      	orrs	r2, r3
 80011bc:	687b      	ldr	r3, [r7, #4]
 80011be:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011c0:	e01c      	b.n	80011fc <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011c6:	2212      	movs	r2, #18
 80011c8:	4393      	bics	r3, r2
 80011ca:	2210      	movs	r2, #16
 80011cc:	431a      	orrs	r2, r3
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80011d6:	2201      	movs	r2, #1
 80011d8:	431a      	orrs	r2, r3
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 80011de:	231f      	movs	r3, #31
 80011e0:	18fb      	adds	r3, r7, r3
 80011e2:	2201      	movs	r2, #1
 80011e4:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 80011e6:	e009      	b.n	80011fc <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80011e8:	687b      	ldr	r3, [r7, #4]
 80011ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ec:	2210      	movs	r2, #16
 80011ee:	431a      	orrs	r2, r3
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80011f4:	231f      	movs	r3, #31
 80011f6:	18fb      	adds	r3, r7, r3
 80011f8:	2201      	movs	r2, #1
 80011fa:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80011fc:	231f      	movs	r3, #31
 80011fe:	18fb      	adds	r3, r7, r3
 8001200:	781b      	ldrb	r3, [r3, #0]
}
 8001202:	0018      	movs	r0, r3
 8001204:	46bd      	mov	sp, r7
 8001206:	b008      	add	sp, #32
 8001208:	bd80      	pop	{r7, pc}
 800120a:	46c0      	nop			; (mov r8, r8)
 800120c:	20000000 	.word	0x20000000
 8001210:	00030d40 	.word	0x00030d40
 8001214:	fffffefd 	.word	0xfffffefd
 8001218:	ffde0201 	.word	0xffde0201
 800121c:	1ffffc02 	.word	0x1ffffc02
 8001220:	40012708 	.word	0x40012708
 8001224:	ffc3ffff 	.word	0xffc3ffff
 8001228:	07ffff04 	.word	0x07ffff04

0800122c <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800122c:	b5b0      	push	{r4, r5, r7, lr}
 800122e:	b084      	sub	sp, #16
 8001230:	af00      	add	r7, sp, #0
 8001232:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001234:	687b      	ldr	r3, [r7, #4]
 8001236:	681b      	ldr	r3, [r3, #0]
 8001238:	0018      	movs	r0, r3
 800123a:	f7ff fe3d 	bl	8000eb8 <LL_ADC_REG_IsConversionOngoing>
 800123e:	1e03      	subs	r3, r0, #0
 8001240:	d135      	bne.n	80012ae <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001242:	687b      	ldr	r3, [r7, #4]
 8001244:	2254      	movs	r2, #84	; 0x54
 8001246:	5c9b      	ldrb	r3, [r3, r2]
 8001248:	2b01      	cmp	r3, #1
 800124a:	d101      	bne.n	8001250 <HAL_ADC_Start+0x24>
 800124c:	2302      	movs	r3, #2
 800124e:	e035      	b.n	80012bc <HAL_ADC_Start+0x90>
 8001250:	687b      	ldr	r3, [r7, #4]
 8001252:	2254      	movs	r2, #84	; 0x54
 8001254:	2101      	movs	r1, #1
 8001256:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001258:	250f      	movs	r5, #15
 800125a:	197c      	adds	r4, r7, r5
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	0018      	movs	r0, r3
 8001260:	f000 fa0a 	bl	8001678 <ADC_Enable>
 8001264:	0003      	movs	r3, r0
 8001266:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001268:	197b      	adds	r3, r7, r5
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b00      	cmp	r3, #0
 800126e:	d119      	bne.n	80012a4 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001274:	4a13      	ldr	r2, [pc, #76]	; (80012c4 <HAL_ADC_Start+0x98>)
 8001276:	4013      	ands	r3, r2
 8001278:	2280      	movs	r2, #128	; 0x80
 800127a:	0052      	lsls	r2, r2, #1
 800127c:	431a      	orrs	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	2200      	movs	r2, #0
 8001286:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	221c      	movs	r2, #28
 800128e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	2254      	movs	r2, #84	; 0x54
 8001294:	2100      	movs	r1, #0
 8001296:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	0018      	movs	r0, r3
 800129e:	f7ff fdf9 	bl	8000e94 <LL_ADC_REG_StartConversion>
 80012a2:	e008      	b.n	80012b6 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	2254      	movs	r2, #84	; 0x54
 80012a8:	2100      	movs	r1, #0
 80012aa:	5499      	strb	r1, [r3, r2]
 80012ac:	e003      	b.n	80012b6 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80012ae:	230f      	movs	r3, #15
 80012b0:	18fb      	adds	r3, r7, r3
 80012b2:	2202      	movs	r2, #2
 80012b4:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 80012b6:	230f      	movs	r3, #15
 80012b8:	18fb      	adds	r3, r7, r3
 80012ba:	781b      	ldrb	r3, [r3, #0]
}
 80012bc:	0018      	movs	r0, r3
 80012be:	46bd      	mov	sp, r7
 80012c0:	b004      	add	sp, #16
 80012c2:	bdb0      	pop	{r4, r5, r7, pc}
 80012c4:	fffff0fe 	.word	0xfffff0fe

080012c8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0
 80012ce:	6078      	str	r0, [r7, #4]
 80012d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80012d2:	2317      	movs	r3, #23
 80012d4:	18fb      	adds	r3, r7, r3
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 80012da:	2300      	movs	r3, #0
 80012dc:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	2254      	movs	r2, #84	; 0x54
 80012e2:	5c9b      	ldrb	r3, [r3, r2]
 80012e4:	2b01      	cmp	r3, #1
 80012e6:	d101      	bne.n	80012ec <HAL_ADC_ConfigChannel+0x24>
 80012e8:	2302      	movs	r3, #2
 80012ea:	e1c0      	b.n	800166e <HAL_ADC_ConfigChannel+0x3a6>
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	2254      	movs	r2, #84	; 0x54
 80012f0:	2101      	movs	r1, #1
 80012f2:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	0018      	movs	r0, r3
 80012fa:	f7ff fddd 	bl	8000eb8 <LL_ADC_REG_IsConversionOngoing>
 80012fe:	1e03      	subs	r3, r0, #0
 8001300:	d000      	beq.n	8001304 <HAL_ADC_ConfigChannel+0x3c>
 8001302:	e1a3      	b.n	800164c <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001304:	683b      	ldr	r3, [r7, #0]
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	2b02      	cmp	r3, #2
 800130a:	d100      	bne.n	800130e <HAL_ADC_ConfigChannel+0x46>
 800130c:	e143      	b.n	8001596 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800130e:	687b      	ldr	r3, [r7, #4]
 8001310:	691a      	ldr	r2, [r3, #16]
 8001312:	2380      	movs	r3, #128	; 0x80
 8001314:	061b      	lsls	r3, r3, #24
 8001316:	429a      	cmp	r2, r3
 8001318:	d004      	beq.n	8001324 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 800131e:	4ac1      	ldr	r2, [pc, #772]	; (8001624 <HAL_ADC_ConfigChannel+0x35c>)
 8001320:	4293      	cmp	r3, r2
 8001322:	d108      	bne.n	8001336 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001324:	687b      	ldr	r3, [r7, #4]
 8001326:	681a      	ldr	r2, [r3, #0]
 8001328:	683b      	ldr	r3, [r7, #0]
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	0019      	movs	r1, r3
 800132e:	0010      	movs	r0, r2
 8001330:	f7ff fd25 	bl	8000d7e <LL_ADC_REG_SetSequencerChAdd>
 8001334:	e0c9      	b.n	80014ca <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001336:	687b      	ldr	r3, [r7, #4]
 8001338:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800133a:	683b      	ldr	r3, [r7, #0]
 800133c:	685b      	ldr	r3, [r3, #4]
 800133e:	211f      	movs	r1, #31
 8001340:	400b      	ands	r3, r1
 8001342:	210f      	movs	r1, #15
 8001344:	4099      	lsls	r1, r3
 8001346:	000b      	movs	r3, r1
 8001348:	43db      	mvns	r3, r3
 800134a:	4013      	ands	r3, r2
 800134c:	0019      	movs	r1, r3
 800134e:	683b      	ldr	r3, [r7, #0]
 8001350:	681b      	ldr	r3, [r3, #0]
 8001352:	035b      	lsls	r3, r3, #13
 8001354:	0b5b      	lsrs	r3, r3, #13
 8001356:	d105      	bne.n	8001364 <HAL_ADC_ConfigChannel+0x9c>
 8001358:	683b      	ldr	r3, [r7, #0]
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	0e9b      	lsrs	r3, r3, #26
 800135e:	221f      	movs	r2, #31
 8001360:	4013      	ands	r3, r2
 8001362:	e098      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001364:	683b      	ldr	r3, [r7, #0]
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2201      	movs	r2, #1
 800136a:	4013      	ands	r3, r2
 800136c:	d000      	beq.n	8001370 <HAL_ADC_ConfigChannel+0xa8>
 800136e:	e091      	b.n	8001494 <HAL_ADC_ConfigChannel+0x1cc>
 8001370:	683b      	ldr	r3, [r7, #0]
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2202      	movs	r2, #2
 8001376:	4013      	ands	r3, r2
 8001378:	d000      	beq.n	800137c <HAL_ADC_ConfigChannel+0xb4>
 800137a:	e089      	b.n	8001490 <HAL_ADC_ConfigChannel+0x1c8>
 800137c:	683b      	ldr	r3, [r7, #0]
 800137e:	681b      	ldr	r3, [r3, #0]
 8001380:	2204      	movs	r2, #4
 8001382:	4013      	ands	r3, r2
 8001384:	d000      	beq.n	8001388 <HAL_ADC_ConfigChannel+0xc0>
 8001386:	e081      	b.n	800148c <HAL_ADC_ConfigChannel+0x1c4>
 8001388:	683b      	ldr	r3, [r7, #0]
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	2208      	movs	r2, #8
 800138e:	4013      	ands	r3, r2
 8001390:	d000      	beq.n	8001394 <HAL_ADC_ConfigChannel+0xcc>
 8001392:	e079      	b.n	8001488 <HAL_ADC_ConfigChannel+0x1c0>
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	2210      	movs	r2, #16
 800139a:	4013      	ands	r3, r2
 800139c:	d000      	beq.n	80013a0 <HAL_ADC_ConfigChannel+0xd8>
 800139e:	e071      	b.n	8001484 <HAL_ADC_ConfigChannel+0x1bc>
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	2220      	movs	r2, #32
 80013a6:	4013      	ands	r3, r2
 80013a8:	d000      	beq.n	80013ac <HAL_ADC_ConfigChannel+0xe4>
 80013aa:	e069      	b.n	8001480 <HAL_ADC_ConfigChannel+0x1b8>
 80013ac:	683b      	ldr	r3, [r7, #0]
 80013ae:	681b      	ldr	r3, [r3, #0]
 80013b0:	2240      	movs	r2, #64	; 0x40
 80013b2:	4013      	ands	r3, r2
 80013b4:	d000      	beq.n	80013b8 <HAL_ADC_ConfigChannel+0xf0>
 80013b6:	e061      	b.n	800147c <HAL_ADC_ConfigChannel+0x1b4>
 80013b8:	683b      	ldr	r3, [r7, #0]
 80013ba:	681b      	ldr	r3, [r3, #0]
 80013bc:	2280      	movs	r2, #128	; 0x80
 80013be:	4013      	ands	r3, r2
 80013c0:	d000      	beq.n	80013c4 <HAL_ADC_ConfigChannel+0xfc>
 80013c2:	e059      	b.n	8001478 <HAL_ADC_ConfigChannel+0x1b0>
 80013c4:	683b      	ldr	r3, [r7, #0]
 80013c6:	681a      	ldr	r2, [r3, #0]
 80013c8:	2380      	movs	r3, #128	; 0x80
 80013ca:	005b      	lsls	r3, r3, #1
 80013cc:	4013      	ands	r3, r2
 80013ce:	d151      	bne.n	8001474 <HAL_ADC_ConfigChannel+0x1ac>
 80013d0:	683b      	ldr	r3, [r7, #0]
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	2380      	movs	r3, #128	; 0x80
 80013d6:	009b      	lsls	r3, r3, #2
 80013d8:	4013      	ands	r3, r2
 80013da:	d149      	bne.n	8001470 <HAL_ADC_ConfigChannel+0x1a8>
 80013dc:	683b      	ldr	r3, [r7, #0]
 80013de:	681a      	ldr	r2, [r3, #0]
 80013e0:	2380      	movs	r3, #128	; 0x80
 80013e2:	00db      	lsls	r3, r3, #3
 80013e4:	4013      	ands	r3, r2
 80013e6:	d141      	bne.n	800146c <HAL_ADC_ConfigChannel+0x1a4>
 80013e8:	683b      	ldr	r3, [r7, #0]
 80013ea:	681a      	ldr	r2, [r3, #0]
 80013ec:	2380      	movs	r3, #128	; 0x80
 80013ee:	011b      	lsls	r3, r3, #4
 80013f0:	4013      	ands	r3, r2
 80013f2:	d139      	bne.n	8001468 <HAL_ADC_ConfigChannel+0x1a0>
 80013f4:	683b      	ldr	r3, [r7, #0]
 80013f6:	681a      	ldr	r2, [r3, #0]
 80013f8:	2380      	movs	r3, #128	; 0x80
 80013fa:	015b      	lsls	r3, r3, #5
 80013fc:	4013      	ands	r3, r2
 80013fe:	d131      	bne.n	8001464 <HAL_ADC_ConfigChannel+0x19c>
 8001400:	683b      	ldr	r3, [r7, #0]
 8001402:	681a      	ldr	r2, [r3, #0]
 8001404:	2380      	movs	r3, #128	; 0x80
 8001406:	019b      	lsls	r3, r3, #6
 8001408:	4013      	ands	r3, r2
 800140a:	d129      	bne.n	8001460 <HAL_ADC_ConfigChannel+0x198>
 800140c:	683b      	ldr	r3, [r7, #0]
 800140e:	681a      	ldr	r2, [r3, #0]
 8001410:	2380      	movs	r3, #128	; 0x80
 8001412:	01db      	lsls	r3, r3, #7
 8001414:	4013      	ands	r3, r2
 8001416:	d121      	bne.n	800145c <HAL_ADC_ConfigChannel+0x194>
 8001418:	683b      	ldr	r3, [r7, #0]
 800141a:	681a      	ldr	r2, [r3, #0]
 800141c:	2380      	movs	r3, #128	; 0x80
 800141e:	021b      	lsls	r3, r3, #8
 8001420:	4013      	ands	r3, r2
 8001422:	d119      	bne.n	8001458 <HAL_ADC_ConfigChannel+0x190>
 8001424:	683b      	ldr	r3, [r7, #0]
 8001426:	681a      	ldr	r2, [r3, #0]
 8001428:	2380      	movs	r3, #128	; 0x80
 800142a:	025b      	lsls	r3, r3, #9
 800142c:	4013      	ands	r3, r2
 800142e:	d111      	bne.n	8001454 <HAL_ADC_ConfigChannel+0x18c>
 8001430:	683b      	ldr	r3, [r7, #0]
 8001432:	681a      	ldr	r2, [r3, #0]
 8001434:	2380      	movs	r3, #128	; 0x80
 8001436:	029b      	lsls	r3, r3, #10
 8001438:	4013      	ands	r3, r2
 800143a:	d109      	bne.n	8001450 <HAL_ADC_ConfigChannel+0x188>
 800143c:	683b      	ldr	r3, [r7, #0]
 800143e:	681a      	ldr	r2, [r3, #0]
 8001440:	2380      	movs	r3, #128	; 0x80
 8001442:	02db      	lsls	r3, r3, #11
 8001444:	4013      	ands	r3, r2
 8001446:	d001      	beq.n	800144c <HAL_ADC_ConfigChannel+0x184>
 8001448:	2312      	movs	r3, #18
 800144a:	e024      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 800144c:	2300      	movs	r3, #0
 800144e:	e022      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001450:	2311      	movs	r3, #17
 8001452:	e020      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001454:	2310      	movs	r3, #16
 8001456:	e01e      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001458:	230f      	movs	r3, #15
 800145a:	e01c      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 800145c:	230e      	movs	r3, #14
 800145e:	e01a      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001460:	230d      	movs	r3, #13
 8001462:	e018      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001464:	230c      	movs	r3, #12
 8001466:	e016      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001468:	230b      	movs	r3, #11
 800146a:	e014      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 800146c:	230a      	movs	r3, #10
 800146e:	e012      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001470:	2309      	movs	r3, #9
 8001472:	e010      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001474:	2308      	movs	r3, #8
 8001476:	e00e      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001478:	2307      	movs	r3, #7
 800147a:	e00c      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 800147c:	2306      	movs	r3, #6
 800147e:	e00a      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001480:	2305      	movs	r3, #5
 8001482:	e008      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001484:	2304      	movs	r3, #4
 8001486:	e006      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001488:	2303      	movs	r3, #3
 800148a:	e004      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 800148c:	2302      	movs	r3, #2
 800148e:	e002      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001490:	2301      	movs	r3, #1
 8001492:	e000      	b.n	8001496 <HAL_ADC_ConfigChannel+0x1ce>
 8001494:	2300      	movs	r3, #0
 8001496:	683a      	ldr	r2, [r7, #0]
 8001498:	6852      	ldr	r2, [r2, #4]
 800149a:	201f      	movs	r0, #31
 800149c:	4002      	ands	r2, r0
 800149e:	4093      	lsls	r3, r2
 80014a0:	000a      	movs	r2, r1
 80014a2:	431a      	orrs	r2, r3
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 80014a8:	683b      	ldr	r3, [r7, #0]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	089b      	lsrs	r3, r3, #2
 80014ae:	1c5a      	adds	r2, r3, #1
 80014b0:	687b      	ldr	r3, [r7, #4]
 80014b2:	69db      	ldr	r3, [r3, #28]
 80014b4:	429a      	cmp	r2, r3
 80014b6:	d808      	bhi.n	80014ca <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	6818      	ldr	r0, [r3, #0]
 80014bc:	683b      	ldr	r3, [r7, #0]
 80014be:	6859      	ldr	r1, [r3, #4]
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	001a      	movs	r2, r3
 80014c6:	f7ff fc3a 	bl	8000d3e <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	6818      	ldr	r0, [r3, #0]
 80014ce:	683b      	ldr	r3, [r7, #0]
 80014d0:	6819      	ldr	r1, [r3, #0]
 80014d2:	683b      	ldr	r3, [r7, #0]
 80014d4:	689b      	ldr	r3, [r3, #8]
 80014d6:	001a      	movs	r2, r3
 80014d8:	f7ff fc74 	bl	8000dc4 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80014dc:	683b      	ldr	r3, [r7, #0]
 80014de:	681b      	ldr	r3, [r3, #0]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	db00      	blt.n	80014e6 <HAL_ADC_ConfigChannel+0x21e>
 80014e4:	e0bc      	b.n	8001660 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80014e6:	4b50      	ldr	r3, [pc, #320]	; (8001628 <HAL_ADC_ConfigChannel+0x360>)
 80014e8:	0018      	movs	r0, r3
 80014ea:	f7ff fbe7 	bl	8000cbc <LL_ADC_GetCommonPathInternalCh>
 80014ee:	0003      	movs	r3, r0
 80014f0:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 80014f2:	683b      	ldr	r3, [r7, #0]
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	4a4d      	ldr	r2, [pc, #308]	; (800162c <HAL_ADC_ConfigChannel+0x364>)
 80014f8:	4293      	cmp	r3, r2
 80014fa:	d122      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 80014fc:	693a      	ldr	r2, [r7, #16]
 80014fe:	2380      	movs	r3, #128	; 0x80
 8001500:	041b      	lsls	r3, r3, #16
 8001502:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001504:	d11d      	bne.n	8001542 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001506:	693b      	ldr	r3, [r7, #16]
 8001508:	2280      	movs	r2, #128	; 0x80
 800150a:	0412      	lsls	r2, r2, #16
 800150c:	4313      	orrs	r3, r2
 800150e:	4a46      	ldr	r2, [pc, #280]	; (8001628 <HAL_ADC_ConfigChannel+0x360>)
 8001510:	0019      	movs	r1, r3
 8001512:	0010      	movs	r0, r2
 8001514:	f7ff fbbe 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001518:	4b45      	ldr	r3, [pc, #276]	; (8001630 <HAL_ADC_ConfigChannel+0x368>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	4945      	ldr	r1, [pc, #276]	; (8001634 <HAL_ADC_ConfigChannel+0x36c>)
 800151e:	0018      	movs	r0, r3
 8001520:	f7fe fdf0 	bl	8000104 <__udivsi3>
 8001524:	0003      	movs	r3, r0
 8001526:	1c5a      	adds	r2, r3, #1
 8001528:	0013      	movs	r3, r2
 800152a:	005b      	lsls	r3, r3, #1
 800152c:	189b      	adds	r3, r3, r2
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001532:	e002      	b.n	800153a <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001534:	68fb      	ldr	r3, [r7, #12]
 8001536:	3b01      	subs	r3, #1
 8001538:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	2b00      	cmp	r3, #0
 800153e:	d1f9      	bne.n	8001534 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001540:	e08e      	b.n	8001660 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4a3c      	ldr	r2, [pc, #240]	; (8001638 <HAL_ADC_ConfigChannel+0x370>)
 8001548:	4293      	cmp	r3, r2
 800154a:	d10e      	bne.n	800156a <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800154c:	693a      	ldr	r2, [r7, #16]
 800154e:	2380      	movs	r3, #128	; 0x80
 8001550:	045b      	lsls	r3, r3, #17
 8001552:	4013      	ands	r3, r2
 8001554:	d109      	bne.n	800156a <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001556:	693b      	ldr	r3, [r7, #16]
 8001558:	2280      	movs	r2, #128	; 0x80
 800155a:	0452      	lsls	r2, r2, #17
 800155c:	4313      	orrs	r3, r2
 800155e:	4a32      	ldr	r2, [pc, #200]	; (8001628 <HAL_ADC_ConfigChannel+0x360>)
 8001560:	0019      	movs	r1, r3
 8001562:	0010      	movs	r0, r2
 8001564:	f7ff fb96 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
 8001568:	e07a      	b.n	8001660 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800156a:	683b      	ldr	r3, [r7, #0]
 800156c:	681b      	ldr	r3, [r3, #0]
 800156e:	4a33      	ldr	r2, [pc, #204]	; (800163c <HAL_ADC_ConfigChannel+0x374>)
 8001570:	4293      	cmp	r3, r2
 8001572:	d000      	beq.n	8001576 <HAL_ADC_ConfigChannel+0x2ae>
 8001574:	e074      	b.n	8001660 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001576:	693a      	ldr	r2, [r7, #16]
 8001578:	2380      	movs	r3, #128	; 0x80
 800157a:	03db      	lsls	r3, r3, #15
 800157c:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 800157e:	d000      	beq.n	8001582 <HAL_ADC_ConfigChannel+0x2ba>
 8001580:	e06e      	b.n	8001660 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001582:	693b      	ldr	r3, [r7, #16]
 8001584:	2280      	movs	r2, #128	; 0x80
 8001586:	03d2      	lsls	r2, r2, #15
 8001588:	4313      	orrs	r3, r2
 800158a:	4a27      	ldr	r2, [pc, #156]	; (8001628 <HAL_ADC_ConfigChannel+0x360>)
 800158c:	0019      	movs	r1, r3
 800158e:	0010      	movs	r0, r2
 8001590:	f7ff fb80 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
 8001594:	e064      	b.n	8001660 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	691a      	ldr	r2, [r3, #16]
 800159a:	2380      	movs	r3, #128	; 0x80
 800159c:	061b      	lsls	r3, r3, #24
 800159e:	429a      	cmp	r2, r3
 80015a0:	d004      	beq.n	80015ac <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 80015a6:	4a1f      	ldr	r2, [pc, #124]	; (8001624 <HAL_ADC_ConfigChannel+0x35c>)
 80015a8:	4293      	cmp	r3, r2
 80015aa:	d107      	bne.n	80015bc <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 80015ac:	687b      	ldr	r3, [r7, #4]
 80015ae:	681a      	ldr	r2, [r3, #0]
 80015b0:	683b      	ldr	r3, [r7, #0]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	0019      	movs	r1, r3
 80015b6:	0010      	movs	r0, r2
 80015b8:	f7ff fbf2 	bl	8000da0 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	681b      	ldr	r3, [r3, #0]
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	da4d      	bge.n	8001660 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80015c4:	4b18      	ldr	r3, [pc, #96]	; (8001628 <HAL_ADC_ConfigChannel+0x360>)
 80015c6:	0018      	movs	r0, r3
 80015c8:	f7ff fb78 	bl	8000cbc <LL_ADC_GetCommonPathInternalCh>
 80015cc:	0003      	movs	r3, r0
 80015ce:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015d0:	683b      	ldr	r3, [r7, #0]
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	4a15      	ldr	r2, [pc, #84]	; (800162c <HAL_ADC_ConfigChannel+0x364>)
 80015d6:	4293      	cmp	r3, r2
 80015d8:	d108      	bne.n	80015ec <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015da:	693b      	ldr	r3, [r7, #16]
 80015dc:	4a18      	ldr	r2, [pc, #96]	; (8001640 <HAL_ADC_ConfigChannel+0x378>)
 80015de:	4013      	ands	r3, r2
 80015e0:	4a11      	ldr	r2, [pc, #68]	; (8001628 <HAL_ADC_ConfigChannel+0x360>)
 80015e2:	0019      	movs	r1, r3
 80015e4:	0010      	movs	r0, r2
 80015e6:	f7ff fb55 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
 80015ea:	e039      	b.n	8001660 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a11      	ldr	r2, [pc, #68]	; (8001638 <HAL_ADC_ConfigChannel+0x370>)
 80015f2:	4293      	cmp	r3, r2
 80015f4:	d108      	bne.n	8001608 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	4a12      	ldr	r2, [pc, #72]	; (8001644 <HAL_ADC_ConfigChannel+0x37c>)
 80015fa:	4013      	ands	r3, r2
 80015fc:	4a0a      	ldr	r2, [pc, #40]	; (8001628 <HAL_ADC_ConfigChannel+0x360>)
 80015fe:	0019      	movs	r1, r3
 8001600:	0010      	movs	r0, r2
 8001602:	f7ff fb47 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
 8001606:	e02b      	b.n	8001660 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8001608:	683b      	ldr	r3, [r7, #0]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a0b      	ldr	r2, [pc, #44]	; (800163c <HAL_ADC_ConfigChannel+0x374>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d126      	bne.n	8001660 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001612:	693b      	ldr	r3, [r7, #16]
 8001614:	4a0c      	ldr	r2, [pc, #48]	; (8001648 <HAL_ADC_ConfigChannel+0x380>)
 8001616:	4013      	ands	r3, r2
 8001618:	4a03      	ldr	r2, [pc, #12]	; (8001628 <HAL_ADC_ConfigChannel+0x360>)
 800161a:	0019      	movs	r1, r3
 800161c:	0010      	movs	r0, r2
 800161e:	f7ff fb39 	bl	8000c94 <LL_ADC_SetCommonPathInternalCh>
 8001622:	e01d      	b.n	8001660 <HAL_ADC_ConfigChannel+0x398>
 8001624:	80000004 	.word	0x80000004
 8001628:	40012708 	.word	0x40012708
 800162c:	b0001000 	.word	0xb0001000
 8001630:	20000000 	.word	0x20000000
 8001634:	00030d40 	.word	0x00030d40
 8001638:	b8004000 	.word	0xb8004000
 800163c:	b4002000 	.word	0xb4002000
 8001640:	ff7fffff 	.word	0xff7fffff
 8001644:	feffffff 	.word	0xfeffffff
 8001648:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001650:	2220      	movs	r2, #32
 8001652:	431a      	orrs	r2, r3
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001658:	2317      	movs	r3, #23
 800165a:	18fb      	adds	r3, r7, r3
 800165c:	2201      	movs	r2, #1
 800165e:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 8001660:	687b      	ldr	r3, [r7, #4]
 8001662:	2254      	movs	r2, #84	; 0x54
 8001664:	2100      	movs	r1, #0
 8001666:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 8001668:	2317      	movs	r3, #23
 800166a:	18fb      	adds	r3, r7, r3
 800166c:	781b      	ldrb	r3, [r3, #0]
}
 800166e:	0018      	movs	r0, r3
 8001670:	46bd      	mov	sp, r7
 8001672:	b006      	add	sp, #24
 8001674:	bd80      	pop	{r7, pc}
 8001676:	46c0      	nop			; (mov r8, r8)

08001678 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8001678:	b580      	push	{r7, lr}
 800167a:	b084      	sub	sp, #16
 800167c:	af00      	add	r7, sp, #0
 800167e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8001680:	2300      	movs	r3, #0
 8001682:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	0018      	movs	r0, r3
 800168a:	f7ff fbf1 	bl	8000e70 <LL_ADC_IsEnabled>
 800168e:	1e03      	subs	r3, r0, #0
 8001690:	d000      	beq.n	8001694 <ADC_Enable+0x1c>
 8001692:	e069      	b.n	8001768 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	689b      	ldr	r3, [r3, #8]
 800169a:	4a36      	ldr	r2, [pc, #216]	; (8001774 <ADC_Enable+0xfc>)
 800169c:	4013      	ands	r3, r2
 800169e:	d00d      	beq.n	80016bc <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80016a4:	2210      	movs	r2, #16
 80016a6:	431a      	orrs	r2, r3
 80016a8:	687b      	ldr	r3, [r7, #4]
 80016aa:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80016b0:	2201      	movs	r2, #1
 80016b2:	431a      	orrs	r2, r3
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 80016b8:	2301      	movs	r3, #1
 80016ba:	e056      	b.n	800176a <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	0018      	movs	r0, r3
 80016c2:	f7ff fbc3 	bl	8000e4c <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 80016c6:	4b2c      	ldr	r3, [pc, #176]	; (8001778 <ADC_Enable+0x100>)
 80016c8:	0018      	movs	r0, r3
 80016ca:	f7ff faf7 	bl	8000cbc <LL_ADC_GetCommonPathInternalCh>
 80016ce:	0002      	movs	r2, r0
 80016d0:	2380      	movs	r3, #128	; 0x80
 80016d2:	041b      	lsls	r3, r3, #16
 80016d4:	4013      	ands	r3, r2
 80016d6:	d00f      	beq.n	80016f8 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80016d8:	4b28      	ldr	r3, [pc, #160]	; (800177c <ADC_Enable+0x104>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4928      	ldr	r1, [pc, #160]	; (8001780 <ADC_Enable+0x108>)
 80016de:	0018      	movs	r0, r3
 80016e0:	f7fe fd10 	bl	8000104 <__udivsi3>
 80016e4:	0003      	movs	r3, r0
 80016e6:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 80016e8:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016ea:	e002      	b.n	80016f2 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 80016ec:	68bb      	ldr	r3, [r7, #8]
 80016ee:	3b01      	subs	r3, #1
 80016f0:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 80016f2:	68bb      	ldr	r3, [r7, #8]
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d1f9      	bne.n	80016ec <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	7e5b      	ldrb	r3, [r3, #25]
 80016fc:	2b01      	cmp	r3, #1
 80016fe:	d033      	beq.n	8001768 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8001700:	f7ff faa8 	bl	8000c54 <HAL_GetTick>
 8001704:	0003      	movs	r3, r0
 8001706:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001708:	e027      	b.n	800175a <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800170a:	687b      	ldr	r3, [r7, #4]
 800170c:	681b      	ldr	r3, [r3, #0]
 800170e:	0018      	movs	r0, r3
 8001710:	f7ff fbae 	bl	8000e70 <LL_ADC_IsEnabled>
 8001714:	1e03      	subs	r3, r0, #0
 8001716:	d104      	bne.n	8001722 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	681b      	ldr	r3, [r3, #0]
 800171c:	0018      	movs	r0, r3
 800171e:	f7ff fb95 	bl	8000e4c <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8001722:	f7ff fa97 	bl	8000c54 <HAL_GetTick>
 8001726:	0002      	movs	r2, r0
 8001728:	68fb      	ldr	r3, [r7, #12]
 800172a:	1ad3      	subs	r3, r2, r3
 800172c:	2b02      	cmp	r3, #2
 800172e:	d914      	bls.n	800175a <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	2201      	movs	r2, #1
 8001738:	4013      	ands	r3, r2
 800173a:	2b01      	cmp	r3, #1
 800173c:	d00d      	beq.n	800175a <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001742:	2210      	movs	r2, #16
 8001744:	431a      	orrs	r2, r3
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800174e:	2201      	movs	r2, #1
 8001750:	431a      	orrs	r2, r3
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 8001756:	2301      	movs	r3, #1
 8001758:	e007      	b.n	800176a <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	681b      	ldr	r3, [r3, #0]
 8001760:	2201      	movs	r2, #1
 8001762:	4013      	ands	r3, r2
 8001764:	2b01      	cmp	r3, #1
 8001766:	d1d0      	bne.n	800170a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8001768:	2300      	movs	r3, #0
}
 800176a:	0018      	movs	r0, r3
 800176c:	46bd      	mov	sp, r7
 800176e:	b004      	add	sp, #16
 8001770:	bd80      	pop	{r7, pc}
 8001772:	46c0      	nop			; (mov r8, r8)
 8001774:	80000017 	.word	0x80000017
 8001778:	40012708 	.word	0x40012708
 800177c:	20000000 	.word	0x20000000
 8001780:	00030d40 	.word	0x00030d40

08001784 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
 800178a:	0002      	movs	r2, r0
 800178c:	1dfb      	adds	r3, r7, #7
 800178e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8001790:	1dfb      	adds	r3, r7, #7
 8001792:	781b      	ldrb	r3, [r3, #0]
 8001794:	2b7f      	cmp	r3, #127	; 0x7f
 8001796:	d809      	bhi.n	80017ac <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001798:	1dfb      	adds	r3, r7, #7
 800179a:	781b      	ldrb	r3, [r3, #0]
 800179c:	001a      	movs	r2, r3
 800179e:	231f      	movs	r3, #31
 80017a0:	401a      	ands	r2, r3
 80017a2:	4b04      	ldr	r3, [pc, #16]	; (80017b4 <__NVIC_EnableIRQ+0x30>)
 80017a4:	2101      	movs	r1, #1
 80017a6:	4091      	lsls	r1, r2
 80017a8:	000a      	movs	r2, r1
 80017aa:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 80017ac:	46c0      	nop			; (mov r8, r8)
 80017ae:	46bd      	mov	sp, r7
 80017b0:	b002      	add	sp, #8
 80017b2:	bd80      	pop	{r7, pc}
 80017b4:	e000e100 	.word	0xe000e100

080017b8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80017b8:	b590      	push	{r4, r7, lr}
 80017ba:	b083      	sub	sp, #12
 80017bc:	af00      	add	r7, sp, #0
 80017be:	0002      	movs	r2, r0
 80017c0:	6039      	str	r1, [r7, #0]
 80017c2:	1dfb      	adds	r3, r7, #7
 80017c4:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 80017c6:	1dfb      	adds	r3, r7, #7
 80017c8:	781b      	ldrb	r3, [r3, #0]
 80017ca:	2b7f      	cmp	r3, #127	; 0x7f
 80017cc:	d828      	bhi.n	8001820 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80017ce:	4a2f      	ldr	r2, [pc, #188]	; (800188c <__NVIC_SetPriority+0xd4>)
 80017d0:	1dfb      	adds	r3, r7, #7
 80017d2:	781b      	ldrb	r3, [r3, #0]
 80017d4:	b25b      	sxtb	r3, r3
 80017d6:	089b      	lsrs	r3, r3, #2
 80017d8:	33c0      	adds	r3, #192	; 0xc0
 80017da:	009b      	lsls	r3, r3, #2
 80017dc:	589b      	ldr	r3, [r3, r2]
 80017de:	1dfa      	adds	r2, r7, #7
 80017e0:	7812      	ldrb	r2, [r2, #0]
 80017e2:	0011      	movs	r1, r2
 80017e4:	2203      	movs	r2, #3
 80017e6:	400a      	ands	r2, r1
 80017e8:	00d2      	lsls	r2, r2, #3
 80017ea:	21ff      	movs	r1, #255	; 0xff
 80017ec:	4091      	lsls	r1, r2
 80017ee:	000a      	movs	r2, r1
 80017f0:	43d2      	mvns	r2, r2
 80017f2:	401a      	ands	r2, r3
 80017f4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80017f6:	683b      	ldr	r3, [r7, #0]
 80017f8:	019b      	lsls	r3, r3, #6
 80017fa:	22ff      	movs	r2, #255	; 0xff
 80017fc:	401a      	ands	r2, r3
 80017fe:	1dfb      	adds	r3, r7, #7
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	0018      	movs	r0, r3
 8001804:	2303      	movs	r3, #3
 8001806:	4003      	ands	r3, r0
 8001808:	00db      	lsls	r3, r3, #3
 800180a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800180c:	481f      	ldr	r0, [pc, #124]	; (800188c <__NVIC_SetPriority+0xd4>)
 800180e:	1dfb      	adds	r3, r7, #7
 8001810:	781b      	ldrb	r3, [r3, #0]
 8001812:	b25b      	sxtb	r3, r3
 8001814:	089b      	lsrs	r3, r3, #2
 8001816:	430a      	orrs	r2, r1
 8001818:	33c0      	adds	r3, #192	; 0xc0
 800181a:	009b      	lsls	r3, r3, #2
 800181c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800181e:	e031      	b.n	8001884 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001820:	4a1b      	ldr	r2, [pc, #108]	; (8001890 <__NVIC_SetPriority+0xd8>)
 8001822:	1dfb      	adds	r3, r7, #7
 8001824:	781b      	ldrb	r3, [r3, #0]
 8001826:	0019      	movs	r1, r3
 8001828:	230f      	movs	r3, #15
 800182a:	400b      	ands	r3, r1
 800182c:	3b08      	subs	r3, #8
 800182e:	089b      	lsrs	r3, r3, #2
 8001830:	3306      	adds	r3, #6
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	18d3      	adds	r3, r2, r3
 8001836:	3304      	adds	r3, #4
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	1dfa      	adds	r2, r7, #7
 800183c:	7812      	ldrb	r2, [r2, #0]
 800183e:	0011      	movs	r1, r2
 8001840:	2203      	movs	r2, #3
 8001842:	400a      	ands	r2, r1
 8001844:	00d2      	lsls	r2, r2, #3
 8001846:	21ff      	movs	r1, #255	; 0xff
 8001848:	4091      	lsls	r1, r2
 800184a:	000a      	movs	r2, r1
 800184c:	43d2      	mvns	r2, r2
 800184e:	401a      	ands	r2, r3
 8001850:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8001852:	683b      	ldr	r3, [r7, #0]
 8001854:	019b      	lsls	r3, r3, #6
 8001856:	22ff      	movs	r2, #255	; 0xff
 8001858:	401a      	ands	r2, r3
 800185a:	1dfb      	adds	r3, r7, #7
 800185c:	781b      	ldrb	r3, [r3, #0]
 800185e:	0018      	movs	r0, r3
 8001860:	2303      	movs	r3, #3
 8001862:	4003      	ands	r3, r0
 8001864:	00db      	lsls	r3, r3, #3
 8001866:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 8001868:	4809      	ldr	r0, [pc, #36]	; (8001890 <__NVIC_SetPriority+0xd8>)
 800186a:	1dfb      	adds	r3, r7, #7
 800186c:	781b      	ldrb	r3, [r3, #0]
 800186e:	001c      	movs	r4, r3
 8001870:	230f      	movs	r3, #15
 8001872:	4023      	ands	r3, r4
 8001874:	3b08      	subs	r3, #8
 8001876:	089b      	lsrs	r3, r3, #2
 8001878:	430a      	orrs	r2, r1
 800187a:	3306      	adds	r3, #6
 800187c:	009b      	lsls	r3, r3, #2
 800187e:	18c3      	adds	r3, r0, r3
 8001880:	3304      	adds	r3, #4
 8001882:	601a      	str	r2, [r3, #0]
}
 8001884:	46c0      	nop			; (mov r8, r8)
 8001886:	46bd      	mov	sp, r7
 8001888:	b003      	add	sp, #12
 800188a:	bd90      	pop	{r4, r7, pc}
 800188c:	e000e100 	.word	0xe000e100
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	1e5a      	subs	r2, r3, #1
 80018a0:	2380      	movs	r3, #128	; 0x80
 80018a2:	045b      	lsls	r3, r3, #17
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d301      	bcc.n	80018ac <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018a8:	2301      	movs	r3, #1
 80018aa:	e010      	b.n	80018ce <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018ac:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <SysTick_Config+0x44>)
 80018ae:	687a      	ldr	r2, [r7, #4]
 80018b0:	3a01      	subs	r2, #1
 80018b2:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018b4:	2301      	movs	r3, #1
 80018b6:	425b      	negs	r3, r3
 80018b8:	2103      	movs	r1, #3
 80018ba:	0018      	movs	r0, r3
 80018bc:	f7ff ff7c 	bl	80017b8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018c0:	4b05      	ldr	r3, [pc, #20]	; (80018d8 <SysTick_Config+0x44>)
 80018c2:	2200      	movs	r2, #0
 80018c4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018c6:	4b04      	ldr	r3, [pc, #16]	; (80018d8 <SysTick_Config+0x44>)
 80018c8:	2207      	movs	r2, #7
 80018ca:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018cc:	2300      	movs	r3, #0
}
 80018ce:	0018      	movs	r0, r3
 80018d0:	46bd      	mov	sp, r7
 80018d2:	b002      	add	sp, #8
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	46c0      	nop			; (mov r8, r8)
 80018d8:	e000e010 	.word	0xe000e010

080018dc <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b084      	sub	sp, #16
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	60b9      	str	r1, [r7, #8]
 80018e4:	607a      	str	r2, [r7, #4]
 80018e6:	210f      	movs	r1, #15
 80018e8:	187b      	adds	r3, r7, r1
 80018ea:	1c02      	adds	r2, r0, #0
 80018ec:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 80018ee:	68ba      	ldr	r2, [r7, #8]
 80018f0:	187b      	adds	r3, r7, r1
 80018f2:	781b      	ldrb	r3, [r3, #0]
 80018f4:	b25b      	sxtb	r3, r3
 80018f6:	0011      	movs	r1, r2
 80018f8:	0018      	movs	r0, r3
 80018fa:	f7ff ff5d 	bl	80017b8 <__NVIC_SetPriority>
}
 80018fe:	46c0      	nop			; (mov r8, r8)
 8001900:	46bd      	mov	sp, r7
 8001902:	b004      	add	sp, #16
 8001904:	bd80      	pop	{r7, pc}

08001906 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001906:	b580      	push	{r7, lr}
 8001908:	b082      	sub	sp, #8
 800190a:	af00      	add	r7, sp, #0
 800190c:	0002      	movs	r2, r0
 800190e:	1dfb      	adds	r3, r7, #7
 8001910:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001912:	1dfb      	adds	r3, r7, #7
 8001914:	781b      	ldrb	r3, [r3, #0]
 8001916:	b25b      	sxtb	r3, r3
 8001918:	0018      	movs	r0, r3
 800191a:	f7ff ff33 	bl	8001784 <__NVIC_EnableIRQ>
}
 800191e:	46c0      	nop			; (mov r8, r8)
 8001920:	46bd      	mov	sp, r7
 8001922:	b002      	add	sp, #8
 8001924:	bd80      	pop	{r7, pc}

08001926 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001926:	b580      	push	{r7, lr}
 8001928:	b082      	sub	sp, #8
 800192a:	af00      	add	r7, sp, #0
 800192c:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	0018      	movs	r0, r3
 8001932:	f7ff ffaf 	bl	8001894 <SysTick_Config>
 8001936:	0003      	movs	r3, r0
}
 8001938:	0018      	movs	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	b002      	add	sp, #8
 800193e:	bd80      	pop	{r7, pc}

08001940 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001940:	b580      	push	{r7, lr}
 8001942:	b086      	sub	sp, #24
 8001944:	af00      	add	r7, sp, #0
 8001946:	6078      	str	r0, [r7, #4]
 8001948:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800194a:	2300      	movs	r3, #0
 800194c:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800194e:	e14d      	b.n	8001bec <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	2101      	movs	r1, #1
 8001956:	697a      	ldr	r2, [r7, #20]
 8001958:	4091      	lsls	r1, r2
 800195a:	000a      	movs	r2, r1
 800195c:	4013      	ands	r3, r2
 800195e:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	2b00      	cmp	r3, #0
 8001964:	d100      	bne.n	8001968 <HAL_GPIO_Init+0x28>
 8001966:	e13e      	b.n	8001be6 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8001968:	683b      	ldr	r3, [r7, #0]
 800196a:	685b      	ldr	r3, [r3, #4]
 800196c:	2203      	movs	r2, #3
 800196e:	4013      	ands	r3, r2
 8001970:	2b01      	cmp	r3, #1
 8001972:	d005      	beq.n	8001980 <HAL_GPIO_Init+0x40>
 8001974:	683b      	ldr	r3, [r7, #0]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	2203      	movs	r2, #3
 800197a:	4013      	ands	r3, r2
 800197c:	2b02      	cmp	r3, #2
 800197e:	d130      	bne.n	80019e2 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	689b      	ldr	r3, [r3, #8]
 8001984:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8001986:	697b      	ldr	r3, [r7, #20]
 8001988:	005b      	lsls	r3, r3, #1
 800198a:	2203      	movs	r2, #3
 800198c:	409a      	lsls	r2, r3
 800198e:	0013      	movs	r3, r2
 8001990:	43da      	mvns	r2, r3
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4013      	ands	r3, r2
 8001996:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8001998:	683b      	ldr	r3, [r7, #0]
 800199a:	68da      	ldr	r2, [r3, #12]
 800199c:	697b      	ldr	r3, [r7, #20]
 800199e:	005b      	lsls	r3, r3, #1
 80019a0:	409a      	lsls	r2, r3
 80019a2:	0013      	movs	r3, r2
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	4313      	orrs	r3, r2
 80019a8:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80019aa:	687b      	ldr	r3, [r7, #4]
 80019ac:	693a      	ldr	r2, [r7, #16]
 80019ae:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80019b0:	687b      	ldr	r3, [r7, #4]
 80019b2:	685b      	ldr	r3, [r3, #4]
 80019b4:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 80019b6:	2201      	movs	r2, #1
 80019b8:	697b      	ldr	r3, [r7, #20]
 80019ba:	409a      	lsls	r2, r3
 80019bc:	0013      	movs	r3, r2
 80019be:	43da      	mvns	r2, r3
 80019c0:	693b      	ldr	r3, [r7, #16]
 80019c2:	4013      	ands	r3, r2
 80019c4:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80019c6:	683b      	ldr	r3, [r7, #0]
 80019c8:	685b      	ldr	r3, [r3, #4]
 80019ca:	091b      	lsrs	r3, r3, #4
 80019cc:	2201      	movs	r2, #1
 80019ce:	401a      	ands	r2, r3
 80019d0:	697b      	ldr	r3, [r7, #20]
 80019d2:	409a      	lsls	r2, r3
 80019d4:	0013      	movs	r3, r2
 80019d6:	693a      	ldr	r2, [r7, #16]
 80019d8:	4313      	orrs	r3, r2
 80019da:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 80019dc:	687b      	ldr	r3, [r7, #4]
 80019de:	693a      	ldr	r2, [r7, #16]
 80019e0:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80019e2:	683b      	ldr	r3, [r7, #0]
 80019e4:	685b      	ldr	r3, [r3, #4]
 80019e6:	2203      	movs	r2, #3
 80019e8:	4013      	ands	r3, r2
 80019ea:	2b03      	cmp	r3, #3
 80019ec:	d017      	beq.n	8001a1e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	68db      	ldr	r3, [r3, #12]
 80019f2:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 80019f4:	697b      	ldr	r3, [r7, #20]
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	2203      	movs	r2, #3
 80019fa:	409a      	lsls	r2, r3
 80019fc:	0013      	movs	r3, r2
 80019fe:	43da      	mvns	r2, r3
 8001a00:	693b      	ldr	r3, [r7, #16]
 8001a02:	4013      	ands	r3, r2
 8001a04:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8001a06:	683b      	ldr	r3, [r7, #0]
 8001a08:	689a      	ldr	r2, [r3, #8]
 8001a0a:	697b      	ldr	r3, [r7, #20]
 8001a0c:	005b      	lsls	r3, r3, #1
 8001a0e:	409a      	lsls	r2, r3
 8001a10:	0013      	movs	r3, r2
 8001a12:	693a      	ldr	r2, [r7, #16]
 8001a14:	4313      	orrs	r3, r2
 8001a16:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	693a      	ldr	r2, [r7, #16]
 8001a1c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001a1e:	683b      	ldr	r3, [r7, #0]
 8001a20:	685b      	ldr	r3, [r3, #4]
 8001a22:	2203      	movs	r2, #3
 8001a24:	4013      	ands	r3, r2
 8001a26:	2b02      	cmp	r3, #2
 8001a28:	d123      	bne.n	8001a72 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 8001a2a:	697b      	ldr	r3, [r7, #20]
 8001a2c:	08da      	lsrs	r2, r3, #3
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	3208      	adds	r2, #8
 8001a32:	0092      	lsls	r2, r2, #2
 8001a34:	58d3      	ldr	r3, [r2, r3]
 8001a36:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 8001a38:	697b      	ldr	r3, [r7, #20]
 8001a3a:	2207      	movs	r2, #7
 8001a3c:	4013      	ands	r3, r2
 8001a3e:	009b      	lsls	r3, r3, #2
 8001a40:	220f      	movs	r2, #15
 8001a42:	409a      	lsls	r2, r3
 8001a44:	0013      	movs	r3, r2
 8001a46:	43da      	mvns	r2, r3
 8001a48:	693b      	ldr	r3, [r7, #16]
 8001a4a:	4013      	ands	r3, r2
 8001a4c:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 8001a4e:	683b      	ldr	r3, [r7, #0]
 8001a50:	691a      	ldr	r2, [r3, #16]
 8001a52:	697b      	ldr	r3, [r7, #20]
 8001a54:	2107      	movs	r1, #7
 8001a56:	400b      	ands	r3, r1
 8001a58:	009b      	lsls	r3, r3, #2
 8001a5a:	409a      	lsls	r2, r3
 8001a5c:	0013      	movs	r3, r2
 8001a5e:	693a      	ldr	r2, [r7, #16]
 8001a60:	4313      	orrs	r3, r2
 8001a62:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	08da      	lsrs	r2, r3, #3
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	3208      	adds	r2, #8
 8001a6c:	0092      	lsls	r2, r2, #2
 8001a6e:	6939      	ldr	r1, [r7, #16]
 8001a70:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a78:	697b      	ldr	r3, [r7, #20]
 8001a7a:	005b      	lsls	r3, r3, #1
 8001a7c:	2203      	movs	r2, #3
 8001a7e:	409a      	lsls	r2, r3
 8001a80:	0013      	movs	r3, r2
 8001a82:	43da      	mvns	r2, r3
 8001a84:	693b      	ldr	r3, [r7, #16]
 8001a86:	4013      	ands	r3, r2
 8001a88:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a8a:	683b      	ldr	r3, [r7, #0]
 8001a8c:	685b      	ldr	r3, [r3, #4]
 8001a8e:	2203      	movs	r2, #3
 8001a90:	401a      	ands	r2, r3
 8001a92:	697b      	ldr	r3, [r7, #20]
 8001a94:	005b      	lsls	r3, r3, #1
 8001a96:	409a      	lsls	r2, r3
 8001a98:	0013      	movs	r3, r2
 8001a9a:	693a      	ldr	r2, [r7, #16]
 8001a9c:	4313      	orrs	r3, r2
 8001a9e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	693a      	ldr	r2, [r7, #16]
 8001aa4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001aa6:	683b      	ldr	r3, [r7, #0]
 8001aa8:	685a      	ldr	r2, [r3, #4]
 8001aaa:	23c0      	movs	r3, #192	; 0xc0
 8001aac:	029b      	lsls	r3, r3, #10
 8001aae:	4013      	ands	r3, r2
 8001ab0:	d100      	bne.n	8001ab4 <HAL_GPIO_Init+0x174>
 8001ab2:	e098      	b.n	8001be6 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8001ab4:	4a53      	ldr	r2, [pc, #332]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	089b      	lsrs	r3, r3, #2
 8001aba:	3318      	adds	r3, #24
 8001abc:	009b      	lsls	r3, r3, #2
 8001abe:	589b      	ldr	r3, [r3, r2]
 8001ac0:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8001ac2:	697b      	ldr	r3, [r7, #20]
 8001ac4:	2203      	movs	r2, #3
 8001ac6:	4013      	ands	r3, r2
 8001ac8:	00db      	lsls	r3, r3, #3
 8001aca:	220f      	movs	r2, #15
 8001acc:	409a      	lsls	r2, r3
 8001ace:	0013      	movs	r3, r2
 8001ad0:	43da      	mvns	r2, r3
 8001ad2:	693b      	ldr	r3, [r7, #16]
 8001ad4:	4013      	ands	r3, r2
 8001ad6:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8001ad8:	687a      	ldr	r2, [r7, #4]
 8001ada:	23a0      	movs	r3, #160	; 0xa0
 8001adc:	05db      	lsls	r3, r3, #23
 8001ade:	429a      	cmp	r2, r3
 8001ae0:	d019      	beq.n	8001b16 <HAL_GPIO_Init+0x1d6>
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	4a48      	ldr	r2, [pc, #288]	; (8001c08 <HAL_GPIO_Init+0x2c8>)
 8001ae6:	4293      	cmp	r3, r2
 8001ae8:	d013      	beq.n	8001b12 <HAL_GPIO_Init+0x1d2>
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	4a47      	ldr	r2, [pc, #284]	; (8001c0c <HAL_GPIO_Init+0x2cc>)
 8001aee:	4293      	cmp	r3, r2
 8001af0:	d00d      	beq.n	8001b0e <HAL_GPIO_Init+0x1ce>
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4a46      	ldr	r2, [pc, #280]	; (8001c10 <HAL_GPIO_Init+0x2d0>)
 8001af6:	4293      	cmp	r3, r2
 8001af8:	d007      	beq.n	8001b0a <HAL_GPIO_Init+0x1ca>
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	4a45      	ldr	r2, [pc, #276]	; (8001c14 <HAL_GPIO_Init+0x2d4>)
 8001afe:	4293      	cmp	r3, r2
 8001b00:	d101      	bne.n	8001b06 <HAL_GPIO_Init+0x1c6>
 8001b02:	2304      	movs	r3, #4
 8001b04:	e008      	b.n	8001b18 <HAL_GPIO_Init+0x1d8>
 8001b06:	2305      	movs	r3, #5
 8001b08:	e006      	b.n	8001b18 <HAL_GPIO_Init+0x1d8>
 8001b0a:	2303      	movs	r3, #3
 8001b0c:	e004      	b.n	8001b18 <HAL_GPIO_Init+0x1d8>
 8001b0e:	2302      	movs	r3, #2
 8001b10:	e002      	b.n	8001b18 <HAL_GPIO_Init+0x1d8>
 8001b12:	2301      	movs	r3, #1
 8001b14:	e000      	b.n	8001b18 <HAL_GPIO_Init+0x1d8>
 8001b16:	2300      	movs	r3, #0
 8001b18:	697a      	ldr	r2, [r7, #20]
 8001b1a:	2103      	movs	r1, #3
 8001b1c:	400a      	ands	r2, r1
 8001b1e:	00d2      	lsls	r2, r2, #3
 8001b20:	4093      	lsls	r3, r2
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4313      	orrs	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 8001b28:	4936      	ldr	r1, [pc, #216]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b2a:	697b      	ldr	r3, [r7, #20]
 8001b2c:	089b      	lsrs	r3, r3, #2
 8001b2e:	3318      	adds	r3, #24
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	693a      	ldr	r2, [r7, #16]
 8001b34:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001b36:	4b33      	ldr	r3, [pc, #204]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b3c:	68fb      	ldr	r3, [r7, #12]
 8001b3e:	43da      	mvns	r2, r3
 8001b40:	693b      	ldr	r3, [r7, #16]
 8001b42:	4013      	ands	r3, r2
 8001b44:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	685a      	ldr	r2, [r3, #4]
 8001b4a:	2380      	movs	r3, #128	; 0x80
 8001b4c:	035b      	lsls	r3, r3, #13
 8001b4e:	4013      	ands	r3, r2
 8001b50:	d003      	beq.n	8001b5a <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 8001b52:	693a      	ldr	r2, [r7, #16]
 8001b54:	68fb      	ldr	r3, [r7, #12]
 8001b56:	4313      	orrs	r3, r2
 8001b58:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b5a:	4b2a      	ldr	r3, [pc, #168]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b5c:	693a      	ldr	r2, [r7, #16]
 8001b5e:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 8001b60:	4b28      	ldr	r3, [pc, #160]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b62:	685b      	ldr	r3, [r3, #4]
 8001b64:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b66:	68fb      	ldr	r3, [r7, #12]
 8001b68:	43da      	mvns	r2, r3
 8001b6a:	693b      	ldr	r3, [r7, #16]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b70:	683b      	ldr	r3, [r7, #0]
 8001b72:	685a      	ldr	r2, [r3, #4]
 8001b74:	2380      	movs	r3, #128	; 0x80
 8001b76:	039b      	lsls	r3, r3, #14
 8001b78:	4013      	ands	r3, r2
 8001b7a:	d003      	beq.n	8001b84 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 8001b7c:	693a      	ldr	r2, [r7, #16]
 8001b7e:	68fb      	ldr	r3, [r7, #12]
 8001b80:	4313      	orrs	r3, r2
 8001b82:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b84:	4b1f      	ldr	r3, [pc, #124]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b86:	693a      	ldr	r2, [r7, #16]
 8001b88:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b8a:	4a1e      	ldr	r2, [pc, #120]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001b8c:	2384      	movs	r3, #132	; 0x84
 8001b8e:	58d3      	ldr	r3, [r2, r3]
 8001b90:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	43da      	mvns	r2, r3
 8001b96:	693b      	ldr	r3, [r7, #16]
 8001b98:	4013      	ands	r3, r2
 8001b9a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	685a      	ldr	r2, [r3, #4]
 8001ba0:	2380      	movs	r3, #128	; 0x80
 8001ba2:	029b      	lsls	r3, r3, #10
 8001ba4:	4013      	ands	r3, r2
 8001ba6:	d003      	beq.n	8001bb0 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001ba8:	693a      	ldr	r2, [r7, #16]
 8001baa:	68fb      	ldr	r3, [r7, #12]
 8001bac:	4313      	orrs	r3, r2
 8001bae:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001bb0:	4914      	ldr	r1, [pc, #80]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001bb2:	2284      	movs	r2, #132	; 0x84
 8001bb4:	693b      	ldr	r3, [r7, #16]
 8001bb6:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8001bb8:	4a12      	ldr	r2, [pc, #72]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001bba:	2380      	movs	r3, #128	; 0x80
 8001bbc:	58d3      	ldr	r3, [r2, r3]
 8001bbe:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001bc0:	68fb      	ldr	r3, [r7, #12]
 8001bc2:	43da      	mvns	r2, r3
 8001bc4:	693b      	ldr	r3, [r7, #16]
 8001bc6:	4013      	ands	r3, r2
 8001bc8:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001bca:	683b      	ldr	r3, [r7, #0]
 8001bcc:	685a      	ldr	r2, [r3, #4]
 8001bce:	2380      	movs	r3, #128	; 0x80
 8001bd0:	025b      	lsls	r3, r3, #9
 8001bd2:	4013      	ands	r3, r2
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8001bd6:	693a      	ldr	r2, [r7, #16]
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	4313      	orrs	r3, r2
 8001bdc:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001bde:	4909      	ldr	r1, [pc, #36]	; (8001c04 <HAL_GPIO_Init+0x2c4>)
 8001be0:	2280      	movs	r2, #128	; 0x80
 8001be2:	693b      	ldr	r3, [r7, #16]
 8001be4:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8001be6:	697b      	ldr	r3, [r7, #20]
 8001be8:	3301      	adds	r3, #1
 8001bea:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	681a      	ldr	r2, [r3, #0]
 8001bf0:	697b      	ldr	r3, [r7, #20]
 8001bf2:	40da      	lsrs	r2, r3
 8001bf4:	1e13      	subs	r3, r2, #0
 8001bf6:	d000      	beq.n	8001bfa <HAL_GPIO_Init+0x2ba>
 8001bf8:	e6aa      	b.n	8001950 <HAL_GPIO_Init+0x10>
  }
}
 8001bfa:	46c0      	nop			; (mov r8, r8)
 8001bfc:	46c0      	nop			; (mov r8, r8)
 8001bfe:	46bd      	mov	sp, r7
 8001c00:	b006      	add	sp, #24
 8001c02:	bd80      	pop	{r7, pc}
 8001c04:	40021800 	.word	0x40021800
 8001c08:	50000400 	.word	0x50000400
 8001c0c:	50000800 	.word	0x50000800
 8001c10:	50000c00 	.word	0x50000c00
 8001c14:	50001000 	.word	0x50001000

08001c18 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001c18:	b580      	push	{r7, lr}
 8001c1a:	b082      	sub	sp, #8
 8001c1c:	af00      	add	r7, sp, #0
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	0008      	movs	r0, r1
 8001c22:	0011      	movs	r1, r2
 8001c24:	1cbb      	adds	r3, r7, #2
 8001c26:	1c02      	adds	r2, r0, #0
 8001c28:	801a      	strh	r2, [r3, #0]
 8001c2a:	1c7b      	adds	r3, r7, #1
 8001c2c:	1c0a      	adds	r2, r1, #0
 8001c2e:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001c30:	1c7b      	adds	r3, r7, #1
 8001c32:	781b      	ldrb	r3, [r3, #0]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d004      	beq.n	8001c42 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001c38:	1cbb      	adds	r3, r7, #2
 8001c3a:	881a      	ldrh	r2, [r3, #0]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001c40:	e003      	b.n	8001c4a <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001c42:	1cbb      	adds	r3, r7, #2
 8001c44:	881a      	ldrh	r2, [r3, #0]
 8001c46:	687b      	ldr	r3, [r7, #4]
 8001c48:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c4a:	46c0      	nop			; (mov r8, r8)
 8001c4c:	46bd      	mov	sp, r7
 8001c4e:	b002      	add	sp, #8
 8001c50:	bd80      	pop	{r7, pc}
	...

08001c54 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8001c54:	b580      	push	{r7, lr}
 8001c56:	b084      	sub	sp, #16
 8001c58:	af00      	add	r7, sp, #0
 8001c5a:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8001c5c:	4b19      	ldr	r3, [pc, #100]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a19      	ldr	r2, [pc, #100]	; (8001cc8 <HAL_PWREx_ControlVoltageScaling+0x74>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	0019      	movs	r1, r3
 8001c66:	4b17      	ldr	r3, [pc, #92]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001c68:	687a      	ldr	r2, [r7, #4]
 8001c6a:	430a      	orrs	r2, r1
 8001c6c:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8001c6e:	687a      	ldr	r2, [r7, #4]
 8001c70:	2380      	movs	r3, #128	; 0x80
 8001c72:	009b      	lsls	r3, r3, #2
 8001c74:	429a      	cmp	r2, r3
 8001c76:	d11f      	bne.n	8001cb8 <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 8001c78:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <HAL_PWREx_ControlVoltageScaling+0x78>)
 8001c7a:	681a      	ldr	r2, [r3, #0]
 8001c7c:	0013      	movs	r3, r2
 8001c7e:	005b      	lsls	r3, r3, #1
 8001c80:	189b      	adds	r3, r3, r2
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	4912      	ldr	r1, [pc, #72]	; (8001cd0 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 8001c86:	0018      	movs	r0, r3
 8001c88:	f7fe fa3c 	bl	8000104 <__udivsi3>
 8001c8c:	0003      	movs	r3, r0
 8001c8e:	3301      	adds	r3, #1
 8001c90:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001c92:	e008      	b.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d003      	beq.n	8001ca2 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	3b01      	subs	r3, #1
 8001c9e:	60fb      	str	r3, [r7, #12]
 8001ca0:	e001      	b.n	8001ca6 <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8001ca2:	2303      	movs	r3, #3
 8001ca4:	e009      	b.n	8001cba <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8001ca6:	4b07      	ldr	r3, [pc, #28]	; (8001cc4 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8001ca8:	695a      	ldr	r2, [r3, #20]
 8001caa:	2380      	movs	r3, #128	; 0x80
 8001cac:	00db      	lsls	r3, r3, #3
 8001cae:	401a      	ands	r2, r3
 8001cb0:	2380      	movs	r3, #128	; 0x80
 8001cb2:	00db      	lsls	r3, r3, #3
 8001cb4:	429a      	cmp	r2, r3
 8001cb6:	d0ed      	beq.n	8001c94 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 8001cb8:	2300      	movs	r3, #0
}
 8001cba:	0018      	movs	r0, r3
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	b004      	add	sp, #16
 8001cc0:	bd80      	pop	{r7, pc}
 8001cc2:	46c0      	nop			; (mov r8, r8)
 8001cc4:	40007000 	.word	0x40007000
 8001cc8:	fffff9ff 	.word	0xfffff9ff
 8001ccc:	20000000 	.word	0x20000000
 8001cd0:	000f4240 	.word	0x000f4240

08001cd4 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b088      	sub	sp, #32
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d102      	bne.n	8001ce8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	f000 fb50 	bl	8002388 <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	2201      	movs	r2, #1
 8001cee:	4013      	ands	r3, r2
 8001cf0:	d100      	bne.n	8001cf4 <HAL_RCC_OscConfig+0x20>
 8001cf2:	e07c      	b.n	8001dee <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001cf4:	4bc3      	ldr	r3, [pc, #780]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001cf6:	689b      	ldr	r3, [r3, #8]
 8001cf8:	2238      	movs	r2, #56	; 0x38
 8001cfa:	4013      	ands	r3, r2
 8001cfc:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001cfe:	4bc1      	ldr	r3, [pc, #772]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d00:	68db      	ldr	r3, [r3, #12]
 8001d02:	2203      	movs	r2, #3
 8001d04:	4013      	ands	r3, r2
 8001d06:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 8001d08:	69bb      	ldr	r3, [r7, #24]
 8001d0a:	2b10      	cmp	r3, #16
 8001d0c:	d102      	bne.n	8001d14 <HAL_RCC_OscConfig+0x40>
 8001d0e:	697b      	ldr	r3, [r7, #20]
 8001d10:	2b03      	cmp	r3, #3
 8001d12:	d002      	beq.n	8001d1a <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 8001d14:	69bb      	ldr	r3, [r7, #24]
 8001d16:	2b08      	cmp	r3, #8
 8001d18:	d10b      	bne.n	8001d32 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d1a:	4bba      	ldr	r3, [pc, #744]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d1c:	681a      	ldr	r2, [r3, #0]
 8001d1e:	2380      	movs	r3, #128	; 0x80
 8001d20:	029b      	lsls	r3, r3, #10
 8001d22:	4013      	ands	r3, r2
 8001d24:	d062      	beq.n	8001dec <HAL_RCC_OscConfig+0x118>
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	685b      	ldr	r3, [r3, #4]
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d15e      	bne.n	8001dec <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 8001d2e:	2301      	movs	r3, #1
 8001d30:	e32a      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d32:	687b      	ldr	r3, [r7, #4]
 8001d34:	685a      	ldr	r2, [r3, #4]
 8001d36:	2380      	movs	r3, #128	; 0x80
 8001d38:	025b      	lsls	r3, r3, #9
 8001d3a:	429a      	cmp	r2, r3
 8001d3c:	d107      	bne.n	8001d4e <HAL_RCC_OscConfig+0x7a>
 8001d3e:	4bb1      	ldr	r3, [pc, #708]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d40:	681a      	ldr	r2, [r3, #0]
 8001d42:	4bb0      	ldr	r3, [pc, #704]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d44:	2180      	movs	r1, #128	; 0x80
 8001d46:	0249      	lsls	r1, r1, #9
 8001d48:	430a      	orrs	r2, r1
 8001d4a:	601a      	str	r2, [r3, #0]
 8001d4c:	e020      	b.n	8001d90 <HAL_RCC_OscConfig+0xbc>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	23a0      	movs	r3, #160	; 0xa0
 8001d54:	02db      	lsls	r3, r3, #11
 8001d56:	429a      	cmp	r2, r3
 8001d58:	d10e      	bne.n	8001d78 <HAL_RCC_OscConfig+0xa4>
 8001d5a:	4baa      	ldr	r3, [pc, #680]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d5c:	681a      	ldr	r2, [r3, #0]
 8001d5e:	4ba9      	ldr	r3, [pc, #676]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d60:	2180      	movs	r1, #128	; 0x80
 8001d62:	02c9      	lsls	r1, r1, #11
 8001d64:	430a      	orrs	r2, r1
 8001d66:	601a      	str	r2, [r3, #0]
 8001d68:	4ba6      	ldr	r3, [pc, #664]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d6a:	681a      	ldr	r2, [r3, #0]
 8001d6c:	4ba5      	ldr	r3, [pc, #660]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d6e:	2180      	movs	r1, #128	; 0x80
 8001d70:	0249      	lsls	r1, r1, #9
 8001d72:	430a      	orrs	r2, r1
 8001d74:	601a      	str	r2, [r3, #0]
 8001d76:	e00b      	b.n	8001d90 <HAL_RCC_OscConfig+0xbc>
 8001d78:	4ba2      	ldr	r3, [pc, #648]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d7a:	681a      	ldr	r2, [r3, #0]
 8001d7c:	4ba1      	ldr	r3, [pc, #644]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d7e:	49a2      	ldr	r1, [pc, #648]	; (8002008 <HAL_RCC_OscConfig+0x334>)
 8001d80:	400a      	ands	r2, r1
 8001d82:	601a      	str	r2, [r3, #0]
 8001d84:	4b9f      	ldr	r3, [pc, #636]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d86:	681a      	ldr	r2, [r3, #0]
 8001d88:	4b9e      	ldr	r3, [pc, #632]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001d8a:	49a0      	ldr	r1, [pc, #640]	; (800200c <HAL_RCC_OscConfig+0x338>)
 8001d8c:	400a      	ands	r2, r1
 8001d8e:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	685b      	ldr	r3, [r3, #4]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d014      	beq.n	8001dc2 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001d98:	f7fe ff5c 	bl	8000c54 <HAL_GetTick>
 8001d9c:	0003      	movs	r3, r0
 8001d9e:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001da0:	e008      	b.n	8001db4 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001da2:	f7fe ff57 	bl	8000c54 <HAL_GetTick>
 8001da6:	0002      	movs	r2, r0
 8001da8:	693b      	ldr	r3, [r7, #16]
 8001daa:	1ad3      	subs	r3, r2, r3
 8001dac:	2b64      	cmp	r3, #100	; 0x64
 8001dae:	d901      	bls.n	8001db4 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8001db0:	2303      	movs	r3, #3
 8001db2:	e2e9      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8001db4:	4b93      	ldr	r3, [pc, #588]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	2380      	movs	r3, #128	; 0x80
 8001dba:	029b      	lsls	r3, r3, #10
 8001dbc:	4013      	ands	r3, r2
 8001dbe:	d0f0      	beq.n	8001da2 <HAL_RCC_OscConfig+0xce>
 8001dc0:	e015      	b.n	8001dee <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001dc2:	f7fe ff47 	bl	8000c54 <HAL_GetTick>
 8001dc6:	0003      	movs	r3, r0
 8001dc8:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dca:	e008      	b.n	8001dde <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001dcc:	f7fe ff42 	bl	8000c54 <HAL_GetTick>
 8001dd0:	0002      	movs	r2, r0
 8001dd2:	693b      	ldr	r3, [r7, #16]
 8001dd4:	1ad3      	subs	r3, r2, r3
 8001dd6:	2b64      	cmp	r3, #100	; 0x64
 8001dd8:	d901      	bls.n	8001dde <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 8001dda:	2303      	movs	r3, #3
 8001ddc:	e2d4      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8001dde:	4b89      	ldr	r3, [pc, #548]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	2380      	movs	r3, #128	; 0x80
 8001de4:	029b      	lsls	r3, r3, #10
 8001de6:	4013      	ands	r3, r2
 8001de8:	d1f0      	bne.n	8001dcc <HAL_RCC_OscConfig+0xf8>
 8001dea:	e000      	b.n	8001dee <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001dec:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	2202      	movs	r2, #2
 8001df4:	4013      	ands	r3, r2
 8001df6:	d100      	bne.n	8001dfa <HAL_RCC_OscConfig+0x126>
 8001df8:	e099      	b.n	8001f2e <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8001dfa:	4b82      	ldr	r3, [pc, #520]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001dfc:	689b      	ldr	r3, [r3, #8]
 8001dfe:	2238      	movs	r2, #56	; 0x38
 8001e00:	4013      	ands	r3, r2
 8001e02:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8001e04:	4b7f      	ldr	r3, [pc, #508]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001e06:	68db      	ldr	r3, [r3, #12]
 8001e08:	2203      	movs	r2, #3
 8001e0a:	4013      	ands	r3, r2
 8001e0c:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 8001e0e:	69bb      	ldr	r3, [r7, #24]
 8001e10:	2b10      	cmp	r3, #16
 8001e12:	d102      	bne.n	8001e1a <HAL_RCC_OscConfig+0x146>
 8001e14:	697b      	ldr	r3, [r7, #20]
 8001e16:	2b02      	cmp	r3, #2
 8001e18:	d002      	beq.n	8001e20 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d135      	bne.n	8001e8c <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001e20:	4b78      	ldr	r3, [pc, #480]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001e22:	681a      	ldr	r2, [r3, #0]
 8001e24:	2380      	movs	r3, #128	; 0x80
 8001e26:	00db      	lsls	r3, r3, #3
 8001e28:	4013      	ands	r3, r2
 8001e2a:	d005      	beq.n	8001e38 <HAL_RCC_OscConfig+0x164>
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	68db      	ldr	r3, [r3, #12]
 8001e30:	2b00      	cmp	r3, #0
 8001e32:	d101      	bne.n	8001e38 <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 8001e34:	2301      	movs	r3, #1
 8001e36:	e2a7      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e38:	4b72      	ldr	r3, [pc, #456]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001e3a:	685b      	ldr	r3, [r3, #4]
 8001e3c:	4a74      	ldr	r2, [pc, #464]	; (8002010 <HAL_RCC_OscConfig+0x33c>)
 8001e3e:	4013      	ands	r3, r2
 8001e40:	0019      	movs	r1, r3
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	695b      	ldr	r3, [r3, #20]
 8001e46:	021a      	lsls	r2, r3, #8
 8001e48:	4b6e      	ldr	r3, [pc, #440]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001e4a:	430a      	orrs	r2, r1
 8001e4c:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e4e:	69bb      	ldr	r3, [r7, #24]
 8001e50:	2b00      	cmp	r3, #0
 8001e52:	d112      	bne.n	8001e7a <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e54:	4b6b      	ldr	r3, [pc, #428]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001e56:	681b      	ldr	r3, [r3, #0]
 8001e58:	4a6e      	ldr	r2, [pc, #440]	; (8002014 <HAL_RCC_OscConfig+0x340>)
 8001e5a:	4013      	ands	r3, r2
 8001e5c:	0019      	movs	r1, r3
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	691a      	ldr	r2, [r3, #16]
 8001e62:	4b68      	ldr	r3, [pc, #416]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001e64:	430a      	orrs	r2, r1
 8001e66:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 8001e68:	4b66      	ldr	r3, [pc, #408]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001e6a:	681b      	ldr	r3, [r3, #0]
 8001e6c:	0adb      	lsrs	r3, r3, #11
 8001e6e:	2207      	movs	r2, #7
 8001e70:	4013      	ands	r3, r2
 8001e72:	4a69      	ldr	r2, [pc, #420]	; (8002018 <HAL_RCC_OscConfig+0x344>)
 8001e74:	40da      	lsrs	r2, r3
 8001e76:	4b69      	ldr	r3, [pc, #420]	; (800201c <HAL_RCC_OscConfig+0x348>)
 8001e78:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8001e7a:	4b69      	ldr	r3, [pc, #420]	; (8002020 <HAL_RCC_OscConfig+0x34c>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	0018      	movs	r0, r3
 8001e80:	f7fe fe8c 	bl	8000b9c <HAL_InitTick>
 8001e84:	1e03      	subs	r3, r0, #0
 8001e86:	d051      	beq.n	8001f2c <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 8001e88:	2301      	movs	r3, #1
 8001e8a:	e27d      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d030      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8001e94:	4b5b      	ldr	r3, [pc, #364]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001e96:	681b      	ldr	r3, [r3, #0]
 8001e98:	4a5e      	ldr	r2, [pc, #376]	; (8002014 <HAL_RCC_OscConfig+0x340>)
 8001e9a:	4013      	ands	r3, r2
 8001e9c:	0019      	movs	r1, r3
 8001e9e:	687b      	ldr	r3, [r7, #4]
 8001ea0:	691a      	ldr	r2, [r3, #16]
 8001ea2:	4b58      	ldr	r3, [pc, #352]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001ea4:	430a      	orrs	r2, r1
 8001ea6:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 8001ea8:	4b56      	ldr	r3, [pc, #344]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001eaa:	681a      	ldr	r2, [r3, #0]
 8001eac:	4b55      	ldr	r3, [pc, #340]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001eae:	2180      	movs	r1, #128	; 0x80
 8001eb0:	0049      	lsls	r1, r1, #1
 8001eb2:	430a      	orrs	r2, r1
 8001eb4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001eb6:	f7fe fecd 	bl	8000c54 <HAL_GetTick>
 8001eba:	0003      	movs	r3, r0
 8001ebc:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ebe:	e008      	b.n	8001ed2 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ec0:	f7fe fec8 	bl	8000c54 <HAL_GetTick>
 8001ec4:	0002      	movs	r2, r0
 8001ec6:	693b      	ldr	r3, [r7, #16]
 8001ec8:	1ad3      	subs	r3, r2, r3
 8001eca:	2b02      	cmp	r3, #2
 8001ecc:	d901      	bls.n	8001ed2 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8001ece:	2303      	movs	r3, #3
 8001ed0:	e25a      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8001ed2:	4b4c      	ldr	r3, [pc, #304]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001ed4:	681a      	ldr	r2, [r3, #0]
 8001ed6:	2380      	movs	r3, #128	; 0x80
 8001ed8:	00db      	lsls	r3, r3, #3
 8001eda:	4013      	ands	r3, r2
 8001edc:	d0f0      	beq.n	8001ec0 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ede:	4b49      	ldr	r3, [pc, #292]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001ee0:	685b      	ldr	r3, [r3, #4]
 8001ee2:	4a4b      	ldr	r2, [pc, #300]	; (8002010 <HAL_RCC_OscConfig+0x33c>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	0019      	movs	r1, r3
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	695b      	ldr	r3, [r3, #20]
 8001eec:	021a      	lsls	r2, r3, #8
 8001eee:	4b45      	ldr	r3, [pc, #276]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001ef0:	430a      	orrs	r2, r1
 8001ef2:	605a      	str	r2, [r3, #4]
 8001ef4:	e01b      	b.n	8001f2e <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 8001ef6:	4b43      	ldr	r3, [pc, #268]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001ef8:	681a      	ldr	r2, [r3, #0]
 8001efa:	4b42      	ldr	r3, [pc, #264]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001efc:	4949      	ldr	r1, [pc, #292]	; (8002024 <HAL_RCC_OscConfig+0x350>)
 8001efe:	400a      	ands	r2, r1
 8001f00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f02:	f7fe fea7 	bl	8000c54 <HAL_GetTick>
 8001f06:	0003      	movs	r3, r0
 8001f08:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f0a:	e008      	b.n	8001f1e <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f0c:	f7fe fea2 	bl	8000c54 <HAL_GetTick>
 8001f10:	0002      	movs	r2, r0
 8001f12:	693b      	ldr	r3, [r7, #16]
 8001f14:	1ad3      	subs	r3, r2, r3
 8001f16:	2b02      	cmp	r3, #2
 8001f18:	d901      	bls.n	8001f1e <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 8001f1a:	2303      	movs	r3, #3
 8001f1c:	e234      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8001f1e:	4b39      	ldr	r3, [pc, #228]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001f20:	681a      	ldr	r2, [r3, #0]
 8001f22:	2380      	movs	r3, #128	; 0x80
 8001f24:	00db      	lsls	r3, r3, #3
 8001f26:	4013      	ands	r3, r2
 8001f28:	d1f0      	bne.n	8001f0c <HAL_RCC_OscConfig+0x238>
 8001f2a:	e000      	b.n	8001f2e <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8001f2c:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	2208      	movs	r2, #8
 8001f34:	4013      	ands	r3, r2
 8001f36:	d047      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8001f38:	4b32      	ldr	r3, [pc, #200]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001f3a:	689b      	ldr	r3, [r3, #8]
 8001f3c:	2238      	movs	r2, #56	; 0x38
 8001f3e:	4013      	ands	r3, r2
 8001f40:	2b18      	cmp	r3, #24
 8001f42:	d10a      	bne.n	8001f5a <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 8001f44:	4b2f      	ldr	r3, [pc, #188]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001f46:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f48:	2202      	movs	r2, #2
 8001f4a:	4013      	ands	r3, r2
 8001f4c:	d03c      	beq.n	8001fc8 <HAL_RCC_OscConfig+0x2f4>
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	699b      	ldr	r3, [r3, #24]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d138      	bne.n	8001fc8 <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 8001f56:	2301      	movs	r3, #1
 8001f58:	e216      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	699b      	ldr	r3, [r3, #24]
 8001f5e:	2b00      	cmp	r3, #0
 8001f60:	d019      	beq.n	8001f96 <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8001f62:	4b28      	ldr	r3, [pc, #160]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001f64:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f66:	4b27      	ldr	r3, [pc, #156]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001f68:	2101      	movs	r1, #1
 8001f6a:	430a      	orrs	r2, r1
 8001f6c:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001f6e:	f7fe fe71 	bl	8000c54 <HAL_GetTick>
 8001f72:	0003      	movs	r3, r0
 8001f74:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f76:	e008      	b.n	8001f8a <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f78:	f7fe fe6c 	bl	8000c54 <HAL_GetTick>
 8001f7c:	0002      	movs	r2, r0
 8001f7e:	693b      	ldr	r3, [r7, #16]
 8001f80:	1ad3      	subs	r3, r2, r3
 8001f82:	2b02      	cmp	r3, #2
 8001f84:	d901      	bls.n	8001f8a <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 8001f86:	2303      	movs	r3, #3
 8001f88:	e1fe      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8001f8a:	4b1e      	ldr	r3, [pc, #120]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001f8c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001f8e:	2202      	movs	r2, #2
 8001f90:	4013      	ands	r3, r2
 8001f92:	d0f1      	beq.n	8001f78 <HAL_RCC_OscConfig+0x2a4>
 8001f94:	e018      	b.n	8001fc8 <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 8001f96:	4b1b      	ldr	r3, [pc, #108]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001f98:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001f9a:	4b1a      	ldr	r3, [pc, #104]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001f9c:	2101      	movs	r1, #1
 8001f9e:	438a      	bics	r2, r1
 8001fa0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001fa2:	f7fe fe57 	bl	8000c54 <HAL_GetTick>
 8001fa6:	0003      	movs	r3, r0
 8001fa8:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001faa:	e008      	b.n	8001fbe <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001fac:	f7fe fe52 	bl	8000c54 <HAL_GetTick>
 8001fb0:	0002      	movs	r2, r0
 8001fb2:	693b      	ldr	r3, [r7, #16]
 8001fb4:	1ad3      	subs	r3, r2, r3
 8001fb6:	2b02      	cmp	r3, #2
 8001fb8:	d901      	bls.n	8001fbe <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 8001fba:	2303      	movs	r3, #3
 8001fbc:	e1e4      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8001fbe:	4b11      	ldr	r3, [pc, #68]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001fc2:	2202      	movs	r2, #2
 8001fc4:	4013      	ands	r3, r2
 8001fc6:	d1f1      	bne.n	8001fac <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	2204      	movs	r2, #4
 8001fce:	4013      	ands	r3, r2
 8001fd0:	d100      	bne.n	8001fd4 <HAL_RCC_OscConfig+0x300>
 8001fd2:	e0c7      	b.n	8002164 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fd4:	231f      	movs	r3, #31
 8001fd6:	18fb      	adds	r3, r7, r3
 8001fd8:	2200      	movs	r2, #0
 8001fda:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001fde:	689b      	ldr	r3, [r3, #8]
 8001fe0:	2238      	movs	r2, #56	; 0x38
 8001fe2:	4013      	ands	r3, r2
 8001fe4:	2b20      	cmp	r3, #32
 8001fe6:	d11f      	bne.n	8002028 <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 8001fe8:	4b06      	ldr	r3, [pc, #24]	; (8002004 <HAL_RCC_OscConfig+0x330>)
 8001fea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001fec:	2202      	movs	r2, #2
 8001fee:	4013      	ands	r3, r2
 8001ff0:	d100      	bne.n	8001ff4 <HAL_RCC_OscConfig+0x320>
 8001ff2:	e0b7      	b.n	8002164 <HAL_RCC_OscConfig+0x490>
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	689b      	ldr	r3, [r3, #8]
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d000      	beq.n	8001ffe <HAL_RCC_OscConfig+0x32a>
 8001ffc:	e0b2      	b.n	8002164 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 8001ffe:	2301      	movs	r3, #1
 8002000:	e1c2      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
 8002002:	46c0      	nop			; (mov r8, r8)
 8002004:	40021000 	.word	0x40021000
 8002008:	fffeffff 	.word	0xfffeffff
 800200c:	fffbffff 	.word	0xfffbffff
 8002010:	ffff80ff 	.word	0xffff80ff
 8002014:	ffffc7ff 	.word	0xffffc7ff
 8002018:	00f42400 	.word	0x00f42400
 800201c:	20000000 	.word	0x20000000
 8002020:	20000004 	.word	0x20000004
 8002024:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8002028:	4bb5      	ldr	r3, [pc, #724]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 800202a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800202c:	2380      	movs	r3, #128	; 0x80
 800202e:	055b      	lsls	r3, r3, #21
 8002030:	4013      	ands	r3, r2
 8002032:	d101      	bne.n	8002038 <HAL_RCC_OscConfig+0x364>
 8002034:	2301      	movs	r3, #1
 8002036:	e000      	b.n	800203a <HAL_RCC_OscConfig+0x366>
 8002038:	2300      	movs	r3, #0
 800203a:	2b00      	cmp	r3, #0
 800203c:	d011      	beq.n	8002062 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 800203e:	4bb0      	ldr	r3, [pc, #704]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 8002040:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002042:	4baf      	ldr	r3, [pc, #700]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 8002044:	2180      	movs	r1, #128	; 0x80
 8002046:	0549      	lsls	r1, r1, #21
 8002048:	430a      	orrs	r2, r1
 800204a:	63da      	str	r2, [r3, #60]	; 0x3c
 800204c:	4bac      	ldr	r3, [pc, #688]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 800204e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002050:	2380      	movs	r3, #128	; 0x80
 8002052:	055b      	lsls	r3, r3, #21
 8002054:	4013      	ands	r3, r2
 8002056:	60fb      	str	r3, [r7, #12]
 8002058:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 800205a:	231f      	movs	r3, #31
 800205c:	18fb      	adds	r3, r7, r3
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002062:	4ba8      	ldr	r3, [pc, #672]	; (8002304 <HAL_RCC_OscConfig+0x630>)
 8002064:	681a      	ldr	r2, [r3, #0]
 8002066:	2380      	movs	r3, #128	; 0x80
 8002068:	005b      	lsls	r3, r3, #1
 800206a:	4013      	ands	r3, r2
 800206c:	d11a      	bne.n	80020a4 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 800206e:	4ba5      	ldr	r3, [pc, #660]	; (8002304 <HAL_RCC_OscConfig+0x630>)
 8002070:	681a      	ldr	r2, [r3, #0]
 8002072:	4ba4      	ldr	r3, [pc, #656]	; (8002304 <HAL_RCC_OscConfig+0x630>)
 8002074:	2180      	movs	r1, #128	; 0x80
 8002076:	0049      	lsls	r1, r1, #1
 8002078:	430a      	orrs	r2, r1
 800207a:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 800207c:	f7fe fdea 	bl	8000c54 <HAL_GetTick>
 8002080:	0003      	movs	r3, r0
 8002082:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002084:	e008      	b.n	8002098 <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002086:	f7fe fde5 	bl	8000c54 <HAL_GetTick>
 800208a:	0002      	movs	r2, r0
 800208c:	693b      	ldr	r3, [r7, #16]
 800208e:	1ad3      	subs	r3, r2, r3
 8002090:	2b02      	cmp	r3, #2
 8002092:	d901      	bls.n	8002098 <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8002094:	2303      	movs	r3, #3
 8002096:	e177      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002098:	4b9a      	ldr	r3, [pc, #616]	; (8002304 <HAL_RCC_OscConfig+0x630>)
 800209a:	681a      	ldr	r2, [r3, #0]
 800209c:	2380      	movs	r3, #128	; 0x80
 800209e:	005b      	lsls	r3, r3, #1
 80020a0:	4013      	ands	r3, r2
 80020a2:	d0f0      	beq.n	8002086 <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	689b      	ldr	r3, [r3, #8]
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d106      	bne.n	80020ba <HAL_RCC_OscConfig+0x3e6>
 80020ac:	4b94      	ldr	r3, [pc, #592]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80020ae:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020b0:	4b93      	ldr	r3, [pc, #588]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80020b2:	2101      	movs	r1, #1
 80020b4:	430a      	orrs	r2, r1
 80020b6:	65da      	str	r2, [r3, #92]	; 0x5c
 80020b8:	e01c      	b.n	80020f4 <HAL_RCC_OscConfig+0x420>
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	689b      	ldr	r3, [r3, #8]
 80020be:	2b05      	cmp	r3, #5
 80020c0:	d10c      	bne.n	80020dc <HAL_RCC_OscConfig+0x408>
 80020c2:	4b8f      	ldr	r3, [pc, #572]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80020c4:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020c6:	4b8e      	ldr	r3, [pc, #568]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80020c8:	2104      	movs	r1, #4
 80020ca:	430a      	orrs	r2, r1
 80020cc:	65da      	str	r2, [r3, #92]	; 0x5c
 80020ce:	4b8c      	ldr	r3, [pc, #560]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80020d0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020d2:	4b8b      	ldr	r3, [pc, #556]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80020d4:	2101      	movs	r1, #1
 80020d6:	430a      	orrs	r2, r1
 80020d8:	65da      	str	r2, [r3, #92]	; 0x5c
 80020da:	e00b      	b.n	80020f4 <HAL_RCC_OscConfig+0x420>
 80020dc:	4b88      	ldr	r3, [pc, #544]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80020de:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020e0:	4b87      	ldr	r3, [pc, #540]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80020e2:	2101      	movs	r1, #1
 80020e4:	438a      	bics	r2, r1
 80020e6:	65da      	str	r2, [r3, #92]	; 0x5c
 80020e8:	4b85      	ldr	r3, [pc, #532]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80020ea:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80020ec:	4b84      	ldr	r3, [pc, #528]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80020ee:	2104      	movs	r1, #4
 80020f0:	438a      	bics	r2, r1
 80020f2:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80020f4:	687b      	ldr	r3, [r7, #4]
 80020f6:	689b      	ldr	r3, [r3, #8]
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d014      	beq.n	8002126 <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020fc:	f7fe fdaa 	bl	8000c54 <HAL_GetTick>
 8002100:	0003      	movs	r3, r0
 8002102:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002104:	e009      	b.n	800211a <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002106:	f7fe fda5 	bl	8000c54 <HAL_GetTick>
 800210a:	0002      	movs	r2, r0
 800210c:	693b      	ldr	r3, [r7, #16]
 800210e:	1ad3      	subs	r3, r2, r3
 8002110:	4a7d      	ldr	r2, [pc, #500]	; (8002308 <HAL_RCC_OscConfig+0x634>)
 8002112:	4293      	cmp	r3, r2
 8002114:	d901      	bls.n	800211a <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e136      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800211a:	4b79      	ldr	r3, [pc, #484]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 800211c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800211e:	2202      	movs	r2, #2
 8002120:	4013      	ands	r3, r2
 8002122:	d0f0      	beq.n	8002106 <HAL_RCC_OscConfig+0x432>
 8002124:	e013      	b.n	800214e <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002126:	f7fe fd95 	bl	8000c54 <HAL_GetTick>
 800212a:	0003      	movs	r3, r0
 800212c:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800212e:	e009      	b.n	8002144 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002130:	f7fe fd90 	bl	8000c54 <HAL_GetTick>
 8002134:	0002      	movs	r2, r0
 8002136:	693b      	ldr	r3, [r7, #16]
 8002138:	1ad3      	subs	r3, r2, r3
 800213a:	4a73      	ldr	r2, [pc, #460]	; (8002308 <HAL_RCC_OscConfig+0x634>)
 800213c:	4293      	cmp	r3, r2
 800213e:	d901      	bls.n	8002144 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 8002140:	2303      	movs	r3, #3
 8002142:	e121      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8002144:	4b6e      	ldr	r3, [pc, #440]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 8002146:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002148:	2202      	movs	r2, #2
 800214a:	4013      	ands	r3, r2
 800214c:	d1f0      	bne.n	8002130 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 800214e:	231f      	movs	r3, #31
 8002150:	18fb      	adds	r3, r7, r3
 8002152:	781b      	ldrb	r3, [r3, #0]
 8002154:	2b01      	cmp	r3, #1
 8002156:	d105      	bne.n	8002164 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 8002158:	4b69      	ldr	r3, [pc, #420]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 800215a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800215c:	4b68      	ldr	r3, [pc, #416]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 800215e:	496b      	ldr	r1, [pc, #428]	; (800230c <HAL_RCC_OscConfig+0x638>)
 8002160:	400a      	ands	r2, r1
 8002162:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	2220      	movs	r2, #32
 800216a:	4013      	ands	r3, r2
 800216c:	d039      	beq.n	80021e2 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	69db      	ldr	r3, [r3, #28]
 8002172:	2b00      	cmp	r3, #0
 8002174:	d01b      	beq.n	80021ae <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8002176:	4b62      	ldr	r3, [pc, #392]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 8002178:	681a      	ldr	r2, [r3, #0]
 800217a:	4b61      	ldr	r3, [pc, #388]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 800217c:	2180      	movs	r1, #128	; 0x80
 800217e:	03c9      	lsls	r1, r1, #15
 8002180:	430a      	orrs	r2, r1
 8002182:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002184:	f7fe fd66 	bl	8000c54 <HAL_GetTick>
 8002188:	0003      	movs	r3, r0
 800218a:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800218e:	f7fe fd61 	bl	8000c54 <HAL_GetTick>
 8002192:	0002      	movs	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b02      	cmp	r3, #2
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e0f3      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 80021a0:	4b57      	ldr	r3, [pc, #348]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80021a2:	681a      	ldr	r2, [r3, #0]
 80021a4:	2380      	movs	r3, #128	; 0x80
 80021a6:	041b      	lsls	r3, r3, #16
 80021a8:	4013      	ands	r3, r2
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x4ba>
 80021ac:	e019      	b.n	80021e2 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80021ae:	4b54      	ldr	r3, [pc, #336]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80021b0:	681a      	ldr	r2, [r3, #0]
 80021b2:	4b53      	ldr	r3, [pc, #332]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80021b4:	4956      	ldr	r1, [pc, #344]	; (8002310 <HAL_RCC_OscConfig+0x63c>)
 80021b6:	400a      	ands	r2, r1
 80021b8:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80021ba:	f7fe fd4b 	bl	8000c54 <HAL_GetTick>
 80021be:	0003      	movs	r3, r0
 80021c0:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80021c2:	e008      	b.n	80021d6 <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80021c4:	f7fe fd46 	bl	8000c54 <HAL_GetTick>
 80021c8:	0002      	movs	r2, r0
 80021ca:	693b      	ldr	r3, [r7, #16]
 80021cc:	1ad3      	subs	r3, r2, r3
 80021ce:	2b02      	cmp	r3, #2
 80021d0:	d901      	bls.n	80021d6 <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 80021d2:	2303      	movs	r3, #3
 80021d4:	e0d8      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 80021d6:	4b4a      	ldr	r3, [pc, #296]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	2380      	movs	r3, #128	; 0x80
 80021dc:	041b      	lsls	r3, r3, #16
 80021de:	4013      	ands	r3, r2
 80021e0:	d1f0      	bne.n	80021c4 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6a1b      	ldr	r3, [r3, #32]
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d100      	bne.n	80021ec <HAL_RCC_OscConfig+0x518>
 80021ea:	e0cc      	b.n	8002386 <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80021ec:	4b44      	ldr	r3, [pc, #272]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	2238      	movs	r2, #56	; 0x38
 80021f2:	4013      	ands	r3, r2
 80021f4:	2b10      	cmp	r3, #16
 80021f6:	d100      	bne.n	80021fa <HAL_RCC_OscConfig+0x526>
 80021f8:	e07b      	b.n	80022f2 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6a1b      	ldr	r3, [r3, #32]
 80021fe:	2b02      	cmp	r3, #2
 8002200:	d156      	bne.n	80022b0 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002202:	4b3f      	ldr	r3, [pc, #252]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 8002204:	681a      	ldr	r2, [r3, #0]
 8002206:	4b3e      	ldr	r3, [pc, #248]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 8002208:	4942      	ldr	r1, [pc, #264]	; (8002314 <HAL_RCC_OscConfig+0x640>)
 800220a:	400a      	ands	r2, r1
 800220c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800220e:	f7fe fd21 	bl	8000c54 <HAL_GetTick>
 8002212:	0003      	movs	r3, r0
 8002214:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8002216:	e008      	b.n	800222a <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002218:	f7fe fd1c 	bl	8000c54 <HAL_GetTick>
 800221c:	0002      	movs	r2, r0
 800221e:	693b      	ldr	r3, [r7, #16]
 8002220:	1ad3      	subs	r3, r2, r3
 8002222:	2b02      	cmp	r3, #2
 8002224:	d901      	bls.n	800222a <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 8002226:	2303      	movs	r3, #3
 8002228:	e0ae      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800222a:	4b35      	ldr	r3, [pc, #212]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 800222c:	681a      	ldr	r2, [r3, #0]
 800222e:	2380      	movs	r3, #128	; 0x80
 8002230:	049b      	lsls	r3, r3, #18
 8002232:	4013      	ands	r3, r2
 8002234:	d1f0      	bne.n	8002218 <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002236:	4b32      	ldr	r3, [pc, #200]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 8002238:	68db      	ldr	r3, [r3, #12]
 800223a:	4a37      	ldr	r2, [pc, #220]	; (8002318 <HAL_RCC_OscConfig+0x644>)
 800223c:	4013      	ands	r3, r2
 800223e:	0019      	movs	r1, r3
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002248:	431a      	orrs	r2, r3
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800224e:	021b      	lsls	r3, r3, #8
 8002250:	431a      	orrs	r2, r3
 8002252:	687b      	ldr	r3, [r7, #4]
 8002254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002256:	431a      	orrs	r2, r3
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800225c:	431a      	orrs	r2, r3
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002262:	431a      	orrs	r2, r3
 8002264:	4b26      	ldr	r3, [pc, #152]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 8002266:	430a      	orrs	r2, r1
 8002268:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800226a:	4b25      	ldr	r3, [pc, #148]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 800226c:	681a      	ldr	r2, [r3, #0]
 800226e:	4b24      	ldr	r3, [pc, #144]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 8002270:	2180      	movs	r1, #128	; 0x80
 8002272:	0449      	lsls	r1, r1, #17
 8002274:	430a      	orrs	r2, r1
 8002276:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 8002278:	4b21      	ldr	r3, [pc, #132]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 800227a:	68da      	ldr	r2, [r3, #12]
 800227c:	4b20      	ldr	r3, [pc, #128]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 800227e:	2180      	movs	r1, #128	; 0x80
 8002280:	0549      	lsls	r1, r1, #21
 8002282:	430a      	orrs	r2, r1
 8002284:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002286:	f7fe fce5 	bl	8000c54 <HAL_GetTick>
 800228a:	0003      	movs	r3, r0
 800228c:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800228e:	e008      	b.n	80022a2 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002290:	f7fe fce0 	bl	8000c54 <HAL_GetTick>
 8002294:	0002      	movs	r2, r0
 8002296:	693b      	ldr	r3, [r7, #16]
 8002298:	1ad3      	subs	r3, r2, r3
 800229a:	2b02      	cmp	r3, #2
 800229c:	d901      	bls.n	80022a2 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 800229e:	2303      	movs	r3, #3
 80022a0:	e072      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80022a2:	4b17      	ldr	r3, [pc, #92]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80022a4:	681a      	ldr	r2, [r3, #0]
 80022a6:	2380      	movs	r3, #128	; 0x80
 80022a8:	049b      	lsls	r3, r3, #18
 80022aa:	4013      	ands	r3, r2
 80022ac:	d0f0      	beq.n	8002290 <HAL_RCC_OscConfig+0x5bc>
 80022ae:	e06a      	b.n	8002386 <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022b0:	4b13      	ldr	r3, [pc, #76]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80022b2:	681a      	ldr	r2, [r3, #0]
 80022b4:	4b12      	ldr	r3, [pc, #72]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80022b6:	4917      	ldr	r1, [pc, #92]	; (8002314 <HAL_RCC_OscConfig+0x640>)
 80022b8:	400a      	ands	r2, r1
 80022ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022bc:	f7fe fcca 	bl	8000c54 <HAL_GetTick>
 80022c0:	0003      	movs	r3, r0
 80022c2:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022c4:	e008      	b.n	80022d8 <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022c6:	f7fe fcc5 	bl	8000c54 <HAL_GetTick>
 80022ca:	0002      	movs	r2, r0
 80022cc:	693b      	ldr	r3, [r7, #16]
 80022ce:	1ad3      	subs	r3, r2, r3
 80022d0:	2b02      	cmp	r3, #2
 80022d2:	d901      	bls.n	80022d8 <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 80022d4:	2303      	movs	r3, #3
 80022d6:	e057      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80022d8:	4b09      	ldr	r3, [pc, #36]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80022da:	681a      	ldr	r2, [r3, #0]
 80022dc:	2380      	movs	r3, #128	; 0x80
 80022de:	049b      	lsls	r3, r3, #18
 80022e0:	4013      	ands	r3, r2
 80022e2:	d1f0      	bne.n	80022c6 <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 80022e4:	4b06      	ldr	r3, [pc, #24]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80022e6:	68da      	ldr	r2, [r3, #12]
 80022e8:	4b05      	ldr	r3, [pc, #20]	; (8002300 <HAL_RCC_OscConfig+0x62c>)
 80022ea:	490c      	ldr	r1, [pc, #48]	; (800231c <HAL_RCC_OscConfig+0x648>)
 80022ec:	400a      	ands	r2, r1
 80022ee:	60da      	str	r2, [r3, #12]
 80022f0:	e049      	b.n	8002386 <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	6a1b      	ldr	r3, [r3, #32]
 80022f6:	2b01      	cmp	r3, #1
 80022f8:	d112      	bne.n	8002320 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e044      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
 80022fe:	46c0      	nop			; (mov r8, r8)
 8002300:	40021000 	.word	0x40021000
 8002304:	40007000 	.word	0x40007000
 8002308:	00001388 	.word	0x00001388
 800230c:	efffffff 	.word	0xefffffff
 8002310:	ffbfffff 	.word	0xffbfffff
 8002314:	feffffff 	.word	0xfeffffff
 8002318:	11c1808c 	.word	0x11c1808c
 800231c:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 8002320:	4b1b      	ldr	r3, [pc, #108]	; (8002390 <HAL_RCC_OscConfig+0x6bc>)
 8002322:	68db      	ldr	r3, [r3, #12]
 8002324:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002326:	697b      	ldr	r3, [r7, #20]
 8002328:	2203      	movs	r2, #3
 800232a:	401a      	ands	r2, r3
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	429a      	cmp	r2, r3
 8002332:	d126      	bne.n	8002382 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002334:	697b      	ldr	r3, [r7, #20]
 8002336:	2270      	movs	r2, #112	; 0x70
 8002338:	401a      	ands	r2, r3
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800233e:	429a      	cmp	r2, r3
 8002340:	d11f      	bne.n	8002382 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002342:	697a      	ldr	r2, [r7, #20]
 8002344:	23fe      	movs	r3, #254	; 0xfe
 8002346:	01db      	lsls	r3, r3, #7
 8002348:	401a      	ands	r2, r3
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800234e:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8002350:	429a      	cmp	r2, r3
 8002352:	d116      	bne.n	8002382 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002354:	697a      	ldr	r2, [r7, #20]
 8002356:	23f8      	movs	r3, #248	; 0xf8
 8002358:	039b      	lsls	r3, r3, #14
 800235a:	401a      	ands	r2, r3
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8002360:	429a      	cmp	r2, r3
 8002362:	d10e      	bne.n	8002382 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8002364:	697a      	ldr	r2, [r7, #20]
 8002366:	23e0      	movs	r3, #224	; 0xe0
 8002368:	051b      	lsls	r3, r3, #20
 800236a:	401a      	ands	r2, r3
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8002370:	429a      	cmp	r2, r3
 8002372:	d106      	bne.n	8002382 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8002374:	697b      	ldr	r3, [r7, #20]
 8002376:	0f5b      	lsrs	r3, r3, #29
 8002378:	075a      	lsls	r2, r3, #29
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 800237e:	429a      	cmp	r2, r3
 8002380:	d001      	beq.n	8002386 <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8002382:	2301      	movs	r3, #1
 8002384:	e000      	b.n	8002388 <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 8002386:	2300      	movs	r3, #0
}
 8002388:	0018      	movs	r0, r3
 800238a:	46bd      	mov	sp, r7
 800238c:	b008      	add	sp, #32
 800238e:	bd80      	pop	{r7, pc}
 8002390:	40021000 	.word	0x40021000

08002394 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b084      	sub	sp, #16
 8002398:	af00      	add	r7, sp, #0
 800239a:	6078      	str	r0, [r7, #4]
 800239c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d101      	bne.n	80023a8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e0e9      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023a8:	4b76      	ldr	r3, [pc, #472]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	2207      	movs	r2, #7
 80023ae:	4013      	ands	r3, r2
 80023b0:	683a      	ldr	r2, [r7, #0]
 80023b2:	429a      	cmp	r2, r3
 80023b4:	d91e      	bls.n	80023f4 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023b6:	4b73      	ldr	r3, [pc, #460]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	2207      	movs	r2, #7
 80023bc:	4393      	bics	r3, r2
 80023be:	0019      	movs	r1, r3
 80023c0:	4b70      	ldr	r3, [pc, #448]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023c2:	683a      	ldr	r2, [r7, #0]
 80023c4:	430a      	orrs	r2, r1
 80023c6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80023c8:	f7fe fc44 	bl	8000c54 <HAL_GetTick>
 80023cc:	0003      	movs	r3, r0
 80023ce:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023d0:	e009      	b.n	80023e6 <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80023d2:	f7fe fc3f 	bl	8000c54 <HAL_GetTick>
 80023d6:	0002      	movs	r2, r0
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	4a6a      	ldr	r2, [pc, #424]	; (8002588 <HAL_RCC_ClockConfig+0x1f4>)
 80023de:	4293      	cmp	r3, r2
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e0ca      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80023e6:	4b67      	ldr	r3, [pc, #412]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	2207      	movs	r2, #7
 80023ec:	4013      	ands	r3, r2
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d1ee      	bne.n	80023d2 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	2202      	movs	r2, #2
 80023fa:	4013      	ands	r3, r2
 80023fc:	d015      	beq.n	800242a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2204      	movs	r2, #4
 8002404:	4013      	ands	r3, r2
 8002406:	d006      	beq.n	8002416 <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 8002408:	4b60      	ldr	r3, [pc, #384]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800240a:	689a      	ldr	r2, [r3, #8]
 800240c:	4b5f      	ldr	r3, [pc, #380]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800240e:	21e0      	movs	r1, #224	; 0xe0
 8002410:	01c9      	lsls	r1, r1, #7
 8002412:	430a      	orrs	r2, r1
 8002414:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002416:	4b5d      	ldr	r3, [pc, #372]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002418:	689b      	ldr	r3, [r3, #8]
 800241a:	4a5d      	ldr	r2, [pc, #372]	; (8002590 <HAL_RCC_ClockConfig+0x1fc>)
 800241c:	4013      	ands	r3, r2
 800241e:	0019      	movs	r1, r3
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	689a      	ldr	r2, [r3, #8]
 8002424:	4b59      	ldr	r3, [pc, #356]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002426:	430a      	orrs	r2, r1
 8002428:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2201      	movs	r2, #1
 8002430:	4013      	ands	r3, r2
 8002432:	d057      	beq.n	80024e4 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002434:	687b      	ldr	r3, [r7, #4]
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	2b01      	cmp	r3, #1
 800243a:	d107      	bne.n	800244c <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800243c:	4b53      	ldr	r3, [pc, #332]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800243e:	681a      	ldr	r2, [r3, #0]
 8002440:	2380      	movs	r3, #128	; 0x80
 8002442:	029b      	lsls	r3, r3, #10
 8002444:	4013      	ands	r3, r2
 8002446:	d12b      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002448:	2301      	movs	r3, #1
 800244a:	e097      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	685b      	ldr	r3, [r3, #4]
 8002450:	2b02      	cmp	r3, #2
 8002452:	d107      	bne.n	8002464 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8002454:	4b4d      	ldr	r3, [pc, #308]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002456:	681a      	ldr	r2, [r3, #0]
 8002458:	2380      	movs	r3, #128	; 0x80
 800245a:	049b      	lsls	r3, r3, #18
 800245c:	4013      	ands	r3, r2
 800245e:	d11f      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e08b      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	685b      	ldr	r3, [r3, #4]
 8002468:	2b00      	cmp	r3, #0
 800246a:	d107      	bne.n	800247c <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800246c:	4b47      	ldr	r3, [pc, #284]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800246e:	681a      	ldr	r2, [r3, #0]
 8002470:	2380      	movs	r3, #128	; 0x80
 8002472:	00db      	lsls	r3, r3, #3
 8002474:	4013      	ands	r3, r2
 8002476:	d113      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8002478:	2301      	movs	r3, #1
 800247a:	e07f      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 800247c:	687b      	ldr	r3, [r7, #4]
 800247e:	685b      	ldr	r3, [r3, #4]
 8002480:	2b03      	cmp	r3, #3
 8002482:	d106      	bne.n	8002492 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8002484:	4b41      	ldr	r3, [pc, #260]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002486:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002488:	2202      	movs	r2, #2
 800248a:	4013      	ands	r3, r2
 800248c:	d108      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e074      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8002492:	4b3e      	ldr	r3, [pc, #248]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002494:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002496:	2202      	movs	r2, #2
 8002498:	4013      	ands	r3, r2
 800249a:	d101      	bne.n	80024a0 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800249c:	2301      	movs	r3, #1
 800249e:	e06d      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80024a0:	4b3a      	ldr	r3, [pc, #232]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	2207      	movs	r2, #7
 80024a6:	4393      	bics	r3, r2
 80024a8:	0019      	movs	r1, r3
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	685a      	ldr	r2, [r3, #4]
 80024ae:	4b37      	ldr	r3, [pc, #220]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 80024b0:	430a      	orrs	r2, r1
 80024b2:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80024b4:	f7fe fbce 	bl	8000c54 <HAL_GetTick>
 80024b8:	0003      	movs	r3, r0
 80024ba:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024bc:	e009      	b.n	80024d2 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024be:	f7fe fbc9 	bl	8000c54 <HAL_GetTick>
 80024c2:	0002      	movs	r2, r0
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	1ad3      	subs	r3, r2, r3
 80024c8:	4a2f      	ldr	r2, [pc, #188]	; (8002588 <HAL_RCC_ClockConfig+0x1f4>)
 80024ca:	4293      	cmp	r3, r2
 80024cc:	d901      	bls.n	80024d2 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 80024ce:	2303      	movs	r3, #3
 80024d0:	e054      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024d2:	4b2e      	ldr	r3, [pc, #184]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	2238      	movs	r2, #56	; 0x38
 80024d8:	401a      	ands	r2, r3
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	685b      	ldr	r3, [r3, #4]
 80024de:	00db      	lsls	r3, r3, #3
 80024e0:	429a      	cmp	r2, r3
 80024e2:	d1ec      	bne.n	80024be <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024e4:	4b27      	ldr	r3, [pc, #156]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	2207      	movs	r2, #7
 80024ea:	4013      	ands	r3, r2
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d21e      	bcs.n	8002530 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024f2:	4b24      	ldr	r3, [pc, #144]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	2207      	movs	r2, #7
 80024f8:	4393      	bics	r3, r2
 80024fa:	0019      	movs	r1, r3
 80024fc:	4b21      	ldr	r3, [pc, #132]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 80024fe:	683a      	ldr	r2, [r7, #0]
 8002500:	430a      	orrs	r2, r1
 8002502:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8002504:	f7fe fba6 	bl	8000c54 <HAL_GetTick>
 8002508:	0003      	movs	r3, r0
 800250a:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800250c:	e009      	b.n	8002522 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800250e:	f7fe fba1 	bl	8000c54 <HAL_GetTick>
 8002512:	0002      	movs	r2, r0
 8002514:	68fb      	ldr	r3, [r7, #12]
 8002516:	1ad3      	subs	r3, r2, r3
 8002518:	4a1b      	ldr	r2, [pc, #108]	; (8002588 <HAL_RCC_ClockConfig+0x1f4>)
 800251a:	4293      	cmp	r3, r2
 800251c:	d901      	bls.n	8002522 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 800251e:	2303      	movs	r3, #3
 8002520:	e02c      	b.n	800257c <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8002522:	4b18      	ldr	r3, [pc, #96]	; (8002584 <HAL_RCC_ClockConfig+0x1f0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	2207      	movs	r2, #7
 8002528:	4013      	ands	r3, r2
 800252a:	683a      	ldr	r2, [r7, #0]
 800252c:	429a      	cmp	r2, r3
 800252e:	d1ee      	bne.n	800250e <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	2204      	movs	r2, #4
 8002536:	4013      	ands	r3, r2
 8002538:	d009      	beq.n	800254e <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 800253a:	4b14      	ldr	r3, [pc, #80]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	4a15      	ldr	r2, [pc, #84]	; (8002594 <HAL_RCC_ClockConfig+0x200>)
 8002540:	4013      	ands	r3, r2
 8002542:	0019      	movs	r1, r3
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	68da      	ldr	r2, [r3, #12]
 8002548:	4b10      	ldr	r3, [pc, #64]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 800254a:	430a      	orrs	r2, r1
 800254c:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 800254e:	f000 f829 	bl	80025a4 <HAL_RCC_GetSysClockFreq>
 8002552:	0001      	movs	r1, r0
 8002554:	4b0d      	ldr	r3, [pc, #52]	; (800258c <HAL_RCC_ClockConfig+0x1f8>)
 8002556:	689b      	ldr	r3, [r3, #8]
 8002558:	0a1b      	lsrs	r3, r3, #8
 800255a:	220f      	movs	r2, #15
 800255c:	401a      	ands	r2, r3
 800255e:	4b0e      	ldr	r3, [pc, #56]	; (8002598 <HAL_RCC_ClockConfig+0x204>)
 8002560:	0092      	lsls	r2, r2, #2
 8002562:	58d3      	ldr	r3, [r2, r3]
 8002564:	221f      	movs	r2, #31
 8002566:	4013      	ands	r3, r2
 8002568:	000a      	movs	r2, r1
 800256a:	40da      	lsrs	r2, r3
 800256c:	4b0b      	ldr	r3, [pc, #44]	; (800259c <HAL_RCC_ClockConfig+0x208>)
 800256e:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8002570:	4b0b      	ldr	r3, [pc, #44]	; (80025a0 <HAL_RCC_ClockConfig+0x20c>)
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	0018      	movs	r0, r3
 8002576:	f7fe fb11 	bl	8000b9c <HAL_InitTick>
 800257a:	0003      	movs	r3, r0
}
 800257c:	0018      	movs	r0, r3
 800257e:	46bd      	mov	sp, r7
 8002580:	b004      	add	sp, #16
 8002582:	bd80      	pop	{r7, pc}
 8002584:	40022000 	.word	0x40022000
 8002588:	00001388 	.word	0x00001388
 800258c:	40021000 	.word	0x40021000
 8002590:	fffff0ff 	.word	0xfffff0ff
 8002594:	ffff8fff 	.word	0xffff8fff
 8002598:	0800402c 	.word	0x0800402c
 800259c:	20000000 	.word	0x20000000
 80025a0:	20000004 	.word	0x20000004

080025a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025a4:	b580      	push	{r7, lr}
 80025a6:	b086      	sub	sp, #24
 80025a8:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80025aa:	4b3c      	ldr	r3, [pc, #240]	; (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025ac:	689b      	ldr	r3, [r3, #8]
 80025ae:	2238      	movs	r2, #56	; 0x38
 80025b0:	4013      	ands	r3, r2
 80025b2:	d10f      	bne.n	80025d4 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 80025b4:	4b39      	ldr	r3, [pc, #228]	; (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	0adb      	lsrs	r3, r3, #11
 80025ba:	2207      	movs	r2, #7
 80025bc:	4013      	ands	r3, r2
 80025be:	2201      	movs	r2, #1
 80025c0:	409a      	lsls	r2, r3
 80025c2:	0013      	movs	r3, r2
 80025c4:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 80025c6:	6839      	ldr	r1, [r7, #0]
 80025c8:	4835      	ldr	r0, [pc, #212]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 80025ca:	f7fd fd9b 	bl	8000104 <__udivsi3>
 80025ce:	0003      	movs	r3, r0
 80025d0:	613b      	str	r3, [r7, #16]
 80025d2:	e05d      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80025d4:	4b31      	ldr	r3, [pc, #196]	; (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025d6:	689b      	ldr	r3, [r3, #8]
 80025d8:	2238      	movs	r2, #56	; 0x38
 80025da:	4013      	ands	r3, r2
 80025dc:	2b08      	cmp	r3, #8
 80025de:	d102      	bne.n	80025e6 <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80025e0:	4b30      	ldr	r3, [pc, #192]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x100>)
 80025e2:	613b      	str	r3, [r7, #16]
 80025e4:	e054      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025e6:	4b2d      	ldr	r3, [pc, #180]	; (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025e8:	689b      	ldr	r3, [r3, #8]
 80025ea:	2238      	movs	r2, #56	; 0x38
 80025ec:	4013      	ands	r3, r2
 80025ee:	2b10      	cmp	r3, #16
 80025f0:	d138      	bne.n	8002664 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 80025f2:	4b2a      	ldr	r3, [pc, #168]	; (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	2203      	movs	r2, #3
 80025f8:	4013      	ands	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80025fc:	4b27      	ldr	r3, [pc, #156]	; (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 80025fe:	68db      	ldr	r3, [r3, #12]
 8002600:	091b      	lsrs	r3, r3, #4
 8002602:	2207      	movs	r2, #7
 8002604:	4013      	ands	r3, r2
 8002606:	3301      	adds	r3, #1
 8002608:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2b03      	cmp	r3, #3
 800260e:	d10d      	bne.n	800262c <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8002610:	68b9      	ldr	r1, [r7, #8]
 8002612:	4824      	ldr	r0, [pc, #144]	; (80026a4 <HAL_RCC_GetSysClockFreq+0x100>)
 8002614:	f7fd fd76 	bl	8000104 <__udivsi3>
 8002618:	0003      	movs	r3, r0
 800261a:	0019      	movs	r1, r3
 800261c:	4b1f      	ldr	r3, [pc, #124]	; (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 800261e:	68db      	ldr	r3, [r3, #12]
 8002620:	0a1b      	lsrs	r3, r3, #8
 8002622:	227f      	movs	r2, #127	; 0x7f
 8002624:	4013      	ands	r3, r2
 8002626:	434b      	muls	r3, r1
 8002628:	617b      	str	r3, [r7, #20]
        break;
 800262a:	e00d      	b.n	8002648 <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 800262c:	68b9      	ldr	r1, [r7, #8]
 800262e:	481c      	ldr	r0, [pc, #112]	; (80026a0 <HAL_RCC_GetSysClockFreq+0xfc>)
 8002630:	f7fd fd68 	bl	8000104 <__udivsi3>
 8002634:	0003      	movs	r3, r0
 8002636:	0019      	movs	r1, r3
 8002638:	4b18      	ldr	r3, [pc, #96]	; (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 800263a:	68db      	ldr	r3, [r3, #12]
 800263c:	0a1b      	lsrs	r3, r3, #8
 800263e:	227f      	movs	r2, #127	; 0x7f
 8002640:	4013      	ands	r3, r2
 8002642:	434b      	muls	r3, r1
 8002644:	617b      	str	r3, [r7, #20]
        break;
 8002646:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 800264a:	68db      	ldr	r3, [r3, #12]
 800264c:	0f5b      	lsrs	r3, r3, #29
 800264e:	2207      	movs	r2, #7
 8002650:	4013      	ands	r3, r2
 8002652:	3301      	adds	r3, #1
 8002654:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8002656:	6879      	ldr	r1, [r7, #4]
 8002658:	6978      	ldr	r0, [r7, #20]
 800265a:	f7fd fd53 	bl	8000104 <__udivsi3>
 800265e:	0003      	movs	r3, r0
 8002660:	613b      	str	r3, [r7, #16]
 8002662:	e015      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8002664:	4b0d      	ldr	r3, [pc, #52]	; (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 8002666:	689b      	ldr	r3, [r3, #8]
 8002668:	2238      	movs	r2, #56	; 0x38
 800266a:	4013      	ands	r3, r2
 800266c:	2b20      	cmp	r3, #32
 800266e:	d103      	bne.n	8002678 <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8002670:	2380      	movs	r3, #128	; 0x80
 8002672:	021b      	lsls	r3, r3, #8
 8002674:	613b      	str	r3, [r7, #16]
 8002676:	e00b      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8002678:	4b08      	ldr	r3, [pc, #32]	; (800269c <HAL_RCC_GetSysClockFreq+0xf8>)
 800267a:	689b      	ldr	r3, [r3, #8]
 800267c:	2238      	movs	r2, #56	; 0x38
 800267e:	4013      	ands	r3, r2
 8002680:	2b18      	cmp	r3, #24
 8002682:	d103      	bne.n	800268c <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8002684:	23fa      	movs	r3, #250	; 0xfa
 8002686:	01db      	lsls	r3, r3, #7
 8002688:	613b      	str	r3, [r7, #16]
 800268a:	e001      	b.n	8002690 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 800268c:	2300      	movs	r3, #0
 800268e:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8002690:	693b      	ldr	r3, [r7, #16]
}
 8002692:	0018      	movs	r0, r3
 8002694:	46bd      	mov	sp, r7
 8002696:	b006      	add	sp, #24
 8002698:	bd80      	pop	{r7, pc}
 800269a:	46c0      	nop			; (mov r8, r8)
 800269c:	40021000 	.word	0x40021000
 80026a0:	00f42400 	.word	0x00f42400
 80026a4:	007a1200 	.word	0x007a1200

080026a8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80026a8:	b580      	push	{r7, lr}
 80026aa:	b086      	sub	sp, #24
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 80026b0:	2313      	movs	r3, #19
 80026b2:	18fb      	adds	r3, r7, r3
 80026b4:	2200      	movs	r2, #0
 80026b6:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80026b8:	2312      	movs	r3, #18
 80026ba:	18fb      	adds	r3, r7, r3
 80026bc:	2200      	movs	r2, #0
 80026be:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	681a      	ldr	r2, [r3, #0]
 80026c4:	2380      	movs	r3, #128	; 0x80
 80026c6:	029b      	lsls	r3, r3, #10
 80026c8:	4013      	ands	r3, r2
 80026ca:	d100      	bne.n	80026ce <HAL_RCCEx_PeriphCLKConfig+0x26>
 80026cc:	e0ad      	b.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026ce:	2011      	movs	r0, #17
 80026d0:	183b      	adds	r3, r7, r0
 80026d2:	2200      	movs	r2, #0
 80026d4:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4b47      	ldr	r3, [pc, #284]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026d8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	055b      	lsls	r3, r3, #21
 80026de:	4013      	ands	r3, r2
 80026e0:	d110      	bne.n	8002704 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b44      	ldr	r3, [pc, #272]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026e6:	4b43      	ldr	r3, [pc, #268]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026e8:	2180      	movs	r1, #128	; 0x80
 80026ea:	0549      	lsls	r1, r1, #21
 80026ec:	430a      	orrs	r2, r1
 80026ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80026f0:	4b40      	ldr	r3, [pc, #256]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80026f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80026f4:	2380      	movs	r3, #128	; 0x80
 80026f6:	055b      	lsls	r3, r3, #21
 80026f8:	4013      	ands	r3, r2
 80026fa:	60bb      	str	r3, [r7, #8]
 80026fc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fe:	183b      	adds	r3, r7, r0
 8002700:	2201      	movs	r2, #1
 8002702:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002704:	4b3c      	ldr	r3, [pc, #240]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002706:	681a      	ldr	r2, [r3, #0]
 8002708:	4b3b      	ldr	r3, [pc, #236]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 800270a:	2180      	movs	r1, #128	; 0x80
 800270c:	0049      	lsls	r1, r1, #1
 800270e:	430a      	orrs	r2, r1
 8002710:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8002712:	f7fe fa9f 	bl	8000c54 <HAL_GetTick>
 8002716:	0003      	movs	r3, r0
 8002718:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 800271a:	e00b      	b.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271c:	f7fe fa9a 	bl	8000c54 <HAL_GetTick>
 8002720:	0002      	movs	r2, r0
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	2b02      	cmp	r3, #2
 8002728:	d904      	bls.n	8002734 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 800272a:	2313      	movs	r3, #19
 800272c:	18fb      	adds	r3, r7, r3
 800272e:	2203      	movs	r2, #3
 8002730:	701a      	strb	r2, [r3, #0]
        break;
 8002732:	e005      	b.n	8002740 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8002734:	4b30      	ldr	r3, [pc, #192]	; (80027f8 <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	2380      	movs	r3, #128	; 0x80
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	4013      	ands	r3, r2
 800273e:	d0ed      	beq.n	800271c <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8002740:	2313      	movs	r3, #19
 8002742:	18fb      	adds	r3, r7, r3
 8002744:	781b      	ldrb	r3, [r3, #0]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d15e      	bne.n	8002808 <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800274a:	4b2a      	ldr	r3, [pc, #168]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800274c:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800274e:	23c0      	movs	r3, #192	; 0xc0
 8002750:	009b      	lsls	r3, r3, #2
 8002752:	4013      	ands	r3, r2
 8002754:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8002756:	697b      	ldr	r3, [r7, #20]
 8002758:	2b00      	cmp	r3, #0
 800275a:	d019      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	429a      	cmp	r2, r3
 8002764:	d014      	beq.n	8002790 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8002766:	4b23      	ldr	r3, [pc, #140]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002768:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800276a:	4a24      	ldr	r2, [pc, #144]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 800276c:	4013      	ands	r3, r2
 800276e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8002770:	4b20      	ldr	r3, [pc, #128]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002772:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002774:	4b1f      	ldr	r3, [pc, #124]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002776:	2180      	movs	r1, #128	; 0x80
 8002778:	0249      	lsls	r1, r1, #9
 800277a:	430a      	orrs	r2, r1
 800277c:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 800277e:	4b1d      	ldr	r3, [pc, #116]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002780:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8002782:	4b1c      	ldr	r3, [pc, #112]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8002784:	491e      	ldr	r1, [pc, #120]	; (8002800 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8002786:	400a      	ands	r2, r1
 8002788:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 800278a:	4b1a      	ldr	r3, [pc, #104]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 800278c:	697a      	ldr	r2, [r7, #20]
 800278e:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8002790:	697b      	ldr	r3, [r7, #20]
 8002792:	2201      	movs	r2, #1
 8002794:	4013      	ands	r3, r2
 8002796:	d016      	beq.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002798:	f7fe fa5c 	bl	8000c54 <HAL_GetTick>
 800279c:	0003      	movs	r3, r0
 800279e:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027a0:	e00c      	b.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027a2:	f7fe fa57 	bl	8000c54 <HAL_GetTick>
 80027a6:	0002      	movs	r2, r0
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1ad3      	subs	r3, r2, r3
 80027ac:	4a15      	ldr	r2, [pc, #84]	; (8002804 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 80027ae:	4293      	cmp	r3, r2
 80027b0:	d904      	bls.n	80027bc <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 80027b2:	2313      	movs	r3, #19
 80027b4:	18fb      	adds	r3, r7, r3
 80027b6:	2203      	movs	r2, #3
 80027b8:	701a      	strb	r2, [r3, #0]
            break;
 80027ba:	e004      	b.n	80027c6 <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80027bc:	4b0d      	ldr	r3, [pc, #52]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027be:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027c0:	2202      	movs	r2, #2
 80027c2:	4013      	ands	r3, r2
 80027c4:	d0ed      	beq.n	80027a2 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 80027c6:	2313      	movs	r3, #19
 80027c8:	18fb      	adds	r3, r7, r3
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b00      	cmp	r3, #0
 80027ce:	d10a      	bne.n	80027e6 <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80027d4:	4a09      	ldr	r2, [pc, #36]	; (80027fc <HAL_RCCEx_PeriphCLKConfig+0x154>)
 80027d6:	4013      	ands	r3, r2
 80027d8:	0019      	movs	r1, r3
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80027de:	4b05      	ldr	r3, [pc, #20]	; (80027f4 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 80027e0:	430a      	orrs	r2, r1
 80027e2:	65da      	str	r2, [r3, #92]	; 0x5c
 80027e4:	e016      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80027e6:	2312      	movs	r3, #18
 80027e8:	18fb      	adds	r3, r7, r3
 80027ea:	2213      	movs	r2, #19
 80027ec:	18ba      	adds	r2, r7, r2
 80027ee:	7812      	ldrb	r2, [r2, #0]
 80027f0:	701a      	strb	r2, [r3, #0]
 80027f2:	e00f      	b.n	8002814 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 80027f4:	40021000 	.word	0x40021000
 80027f8:	40007000 	.word	0x40007000
 80027fc:	fffffcff 	.word	0xfffffcff
 8002800:	fffeffff 	.word	0xfffeffff
 8002804:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8002808:	2312      	movs	r3, #18
 800280a:	18fb      	adds	r3, r7, r3
 800280c:	2213      	movs	r2, #19
 800280e:	18ba      	adds	r2, r7, r2
 8002810:	7812      	ldrb	r2, [r2, #0]
 8002812:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002814:	2311      	movs	r3, #17
 8002816:	18fb      	adds	r3, r7, r3
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	2b01      	cmp	r3, #1
 800281c:	d105      	bne.n	800282a <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800281e:	4bb6      	ldr	r3, [pc, #728]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002820:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8002822:	4bb5      	ldr	r3, [pc, #724]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002824:	49b5      	ldr	r1, [pc, #724]	; (8002afc <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8002826:	400a      	ands	r2, r1
 8002828:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	2201      	movs	r2, #1
 8002830:	4013      	ands	r3, r2
 8002832:	d009      	beq.n	8002848 <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002834:	4bb0      	ldr	r3, [pc, #704]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002836:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002838:	2203      	movs	r2, #3
 800283a:	4393      	bics	r3, r2
 800283c:	0019      	movs	r1, r3
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	685a      	ldr	r2, [r3, #4]
 8002842:	4bad      	ldr	r3, [pc, #692]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002844:	430a      	orrs	r2, r1
 8002846:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	2202      	movs	r2, #2
 800284e:	4013      	ands	r3, r2
 8002850:	d009      	beq.n	8002866 <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002852:	4ba9      	ldr	r3, [pc, #676]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002854:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002856:	220c      	movs	r2, #12
 8002858:	4393      	bics	r3, r2
 800285a:	0019      	movs	r1, r3
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689a      	ldr	r2, [r3, #8]
 8002860:	4ba5      	ldr	r3, [pc, #660]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002862:	430a      	orrs	r2, r1
 8002864:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	2204      	movs	r2, #4
 800286c:	4013      	ands	r3, r2
 800286e:	d009      	beq.n	8002884 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002870:	4ba1      	ldr	r3, [pc, #644]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002874:	2230      	movs	r2, #48	; 0x30
 8002876:	4393      	bics	r3, r2
 8002878:	0019      	movs	r1, r3
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	68da      	ldr	r2, [r3, #12]
 800287e:	4b9e      	ldr	r3, [pc, #632]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002880:	430a      	orrs	r2, r1
 8002882:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	2210      	movs	r2, #16
 800288a:	4013      	ands	r3, r2
 800288c:	d009      	beq.n	80028a2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 800288e:	4b9a      	ldr	r3, [pc, #616]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002890:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002892:	4a9b      	ldr	r2, [pc, #620]	; (8002b00 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8002894:	4013      	ands	r3, r2
 8002896:	0019      	movs	r1, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	691a      	ldr	r2, [r3, #16]
 800289c:	4b96      	ldr	r3, [pc, #600]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800289e:	430a      	orrs	r2, r1
 80028a0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	681a      	ldr	r2, [r3, #0]
 80028a6:	2380      	movs	r3, #128	; 0x80
 80028a8:	015b      	lsls	r3, r3, #5
 80028aa:	4013      	ands	r3, r2
 80028ac:	d009      	beq.n	80028c2 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 80028ae:	4b92      	ldr	r3, [pc, #584]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028b2:	4a94      	ldr	r2, [pc, #592]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 80028b4:	4013      	ands	r3, r2
 80028b6:	0019      	movs	r1, r3
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	695a      	ldr	r2, [r3, #20]
 80028bc:	4b8e      	ldr	r3, [pc, #568]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028be:	430a      	orrs	r2, r1
 80028c0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681a      	ldr	r2, [r3, #0]
 80028c6:	2380      	movs	r3, #128	; 0x80
 80028c8:	009b      	lsls	r3, r3, #2
 80028ca:	4013      	ands	r3, r2
 80028cc:	d009      	beq.n	80028e2 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80028ce:	4b8a      	ldr	r3, [pc, #552]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028d2:	4a8d      	ldr	r2, [pc, #564]	; (8002b08 <HAL_RCCEx_PeriphCLKConfig+0x460>)
 80028d4:	4013      	ands	r3, r2
 80028d6:	0019      	movs	r1, r3
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80028dc:	4b86      	ldr	r3, [pc, #536]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028de:	430a      	orrs	r2, r1
 80028e0:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	2380      	movs	r3, #128	; 0x80
 80028e8:	00db      	lsls	r3, r3, #3
 80028ea:	4013      	ands	r3, r2
 80028ec:	d009      	beq.n	8002902 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 80028ee:	4b82      	ldr	r3, [pc, #520]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028f0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80028f2:	4a86      	ldr	r2, [pc, #536]	; (8002b0c <HAL_RCCEx_PeriphCLKConfig+0x464>)
 80028f4:	4013      	ands	r3, r2
 80028f6:	0019      	movs	r1, r3
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80028fc:	4b7e      	ldr	r3, [pc, #504]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80028fe:	430a      	orrs	r2, r1
 8002900:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	681b      	ldr	r3, [r3, #0]
 8002906:	2220      	movs	r2, #32
 8002908:	4013      	ands	r3, r2
 800290a:	d009      	beq.n	8002920 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 800290c:	4b7a      	ldr	r3, [pc, #488]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800290e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002910:	4a7f      	ldr	r2, [pc, #508]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002912:	4013      	ands	r3, r2
 8002914:	0019      	movs	r1, r3
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	699a      	ldr	r2, [r3, #24]
 800291a:	4b77      	ldr	r3, [pc, #476]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800291c:	430a      	orrs	r2, r1
 800291e:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	2240      	movs	r2, #64	; 0x40
 8002926:	4013      	ands	r3, r2
 8002928:	d009      	beq.n	800293e <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800292a:	4b73      	ldr	r3, [pc, #460]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800292c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800292e:	4a79      	ldr	r2, [pc, #484]	; (8002b14 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8002930:	4013      	ands	r3, r2
 8002932:	0019      	movs	r1, r3
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	69da      	ldr	r2, [r3, #28]
 8002938:	4b6f      	ldr	r3, [pc, #444]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800293a:	430a      	orrs	r2, r1
 800293c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	681a      	ldr	r2, [r3, #0]
 8002942:	2380      	movs	r3, #128	; 0x80
 8002944:	01db      	lsls	r3, r3, #7
 8002946:	4013      	ands	r3, r2
 8002948:	d015      	beq.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 800294a:	4b6b      	ldr	r3, [pc, #428]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800294c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800294e:	009b      	lsls	r3, r3, #2
 8002950:	0899      	lsrs	r1, r3, #2
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002956:	4b68      	ldr	r3, [pc, #416]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002958:	430a      	orrs	r2, r1
 800295a:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002960:	2380      	movs	r3, #128	; 0x80
 8002962:	05db      	lsls	r3, r3, #23
 8002964:	429a      	cmp	r2, r3
 8002966:	d106      	bne.n	8002976 <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002968:	4b63      	ldr	r3, [pc, #396]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800296a:	68da      	ldr	r2, [r3, #12]
 800296c:	4b62      	ldr	r3, [pc, #392]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 800296e:	2180      	movs	r1, #128	; 0x80
 8002970:	0249      	lsls	r1, r1, #9
 8002972:	430a      	orrs	r2, r1
 8002974:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681a      	ldr	r2, [r3, #0]
 800297a:	2380      	movs	r3, #128	; 0x80
 800297c:	031b      	lsls	r3, r3, #12
 800297e:	4013      	ands	r3, r2
 8002980:	d009      	beq.n	8002996 <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002982:	4b5d      	ldr	r3, [pc, #372]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002984:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002986:	2240      	movs	r2, #64	; 0x40
 8002988:	4393      	bics	r3, r2
 800298a:	0019      	movs	r1, r3
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002990:	4b59      	ldr	r3, [pc, #356]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002992:	430a      	orrs	r2, r1
 8002994:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681a      	ldr	r2, [r3, #0]
 800299a:	2380      	movs	r3, #128	; 0x80
 800299c:	039b      	lsls	r3, r3, #14
 800299e:	4013      	ands	r3, r2
 80029a0:	d016      	beq.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 80029a2:	4b55      	ldr	r3, [pc, #340]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029a4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029a6:	4a5c      	ldr	r2, [pc, #368]	; (8002b18 <HAL_RCCEx_PeriphCLKConfig+0x470>)
 80029a8:	4013      	ands	r3, r2
 80029aa:	0019      	movs	r1, r3
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029b0:	4b51      	ldr	r3, [pc, #324]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029b2:	430a      	orrs	r2, r1
 80029b4:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80029ba:	2380      	movs	r3, #128	; 0x80
 80029bc:	03db      	lsls	r3, r3, #15
 80029be:	429a      	cmp	r2, r3
 80029c0:	d106      	bne.n	80029d0 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029c2:	4b4d      	ldr	r3, [pc, #308]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029c4:	68da      	ldr	r2, [r3, #12]
 80029c6:	4b4c      	ldr	r3, [pc, #304]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029c8:	2180      	movs	r1, #128	; 0x80
 80029ca:	0449      	lsls	r1, r1, #17
 80029cc:	430a      	orrs	r2, r1
 80029ce:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	681a      	ldr	r2, [r3, #0]
 80029d4:	2380      	movs	r3, #128	; 0x80
 80029d6:	03db      	lsls	r3, r3, #15
 80029d8:	4013      	ands	r3, r2
 80029da:	d016      	beq.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 80029dc:	4b46      	ldr	r3, [pc, #280]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80029e0:	4a4e      	ldr	r2, [pc, #312]	; (8002b1c <HAL_RCCEx_PeriphCLKConfig+0x474>)
 80029e2:	4013      	ands	r3, r2
 80029e4:	0019      	movs	r1, r3
 80029e6:	687b      	ldr	r3, [r7, #4]
 80029e8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029ea:	4b43      	ldr	r3, [pc, #268]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029ec:	430a      	orrs	r2, r1
 80029ee:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80029f4:	2380      	movs	r3, #128	; 0x80
 80029f6:	045b      	lsls	r3, r3, #17
 80029f8:	429a      	cmp	r2, r3
 80029fa:	d106      	bne.n	8002a0a <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 80029fc:	4b3e      	ldr	r3, [pc, #248]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 80029fe:	68da      	ldr	r2, [r3, #12]
 8002a00:	4b3d      	ldr	r3, [pc, #244]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a02:	2180      	movs	r1, #128	; 0x80
 8002a04:	0449      	lsls	r1, r1, #17
 8002a06:	430a      	orrs	r2, r1
 8002a08:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681a      	ldr	r2, [r3, #0]
 8002a0e:	2380      	movs	r3, #128	; 0x80
 8002a10:	011b      	lsls	r3, r3, #4
 8002a12:	4013      	ands	r3, r2
 8002a14:	d014      	beq.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8002a16:	4b38      	ldr	r3, [pc, #224]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a1a:	2203      	movs	r2, #3
 8002a1c:	4393      	bics	r3, r2
 8002a1e:	0019      	movs	r1, r3
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6a1a      	ldr	r2, [r3, #32]
 8002a24:	4b34      	ldr	r3, [pc, #208]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a26:	430a      	orrs	r2, r1
 8002a28:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	6a1b      	ldr	r3, [r3, #32]
 8002a2e:	2b01      	cmp	r3, #1
 8002a30:	d106      	bne.n	8002a40 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a32:	4b31      	ldr	r3, [pc, #196]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a34:	68da      	ldr	r2, [r3, #12]
 8002a36:	4b30      	ldr	r3, [pc, #192]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a38:	2180      	movs	r1, #128	; 0x80
 8002a3a:	0249      	lsls	r1, r1, #9
 8002a3c:	430a      	orrs	r2, r1
 8002a3e:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681a      	ldr	r2, [r3, #0]
 8002a44:	2380      	movs	r3, #128	; 0x80
 8002a46:	019b      	lsls	r3, r3, #6
 8002a48:	4013      	ands	r3, r2
 8002a4a:	d014      	beq.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8002a4c:	4b2a      	ldr	r3, [pc, #168]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a50:	220c      	movs	r2, #12
 8002a52:	4393      	bics	r3, r2
 8002a54:	0019      	movs	r1, r3
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002a5a:	4b27      	ldr	r3, [pc, #156]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a5c:	430a      	orrs	r2, r1
 8002a5e:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8002a60:	687b      	ldr	r3, [r7, #4]
 8002a62:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a64:	2b04      	cmp	r3, #4
 8002a66:	d106      	bne.n	8002a76 <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8002a68:	4b23      	ldr	r3, [pc, #140]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a6a:	68da      	ldr	r2, [r3, #12]
 8002a6c:	4b22      	ldr	r3, [pc, #136]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a6e:	2180      	movs	r1, #128	; 0x80
 8002a70:	0249      	lsls	r1, r1, #9
 8002a72:	430a      	orrs	r2, r1
 8002a74:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	2380      	movs	r3, #128	; 0x80
 8002a7c:	045b      	lsls	r3, r3, #17
 8002a7e:	4013      	ands	r3, r2
 8002a80:	d016      	beq.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8002a82:	4b1d      	ldr	r3, [pc, #116]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002a86:	4a22      	ldr	r2, [pc, #136]	; (8002b10 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8002a88:	4013      	ands	r3, r2
 8002a8a:	0019      	movs	r1, r3
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a90:	4b19      	ldr	r3, [pc, #100]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002a92:	430a      	orrs	r2, r1
 8002a94:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8002a96:	687b      	ldr	r3, [r7, #4]
 8002a98:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002a9a:	2380      	movs	r3, #128	; 0x80
 8002a9c:	019b      	lsls	r3, r3, #6
 8002a9e:	429a      	cmp	r2, r3
 8002aa0:	d106      	bne.n	8002ab0 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002aa2:	4b15      	ldr	r3, [pc, #84]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aa4:	68da      	ldr	r2, [r3, #12]
 8002aa6:	4b14      	ldr	r3, [pc, #80]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002aa8:	2180      	movs	r1, #128	; 0x80
 8002aaa:	0449      	lsls	r1, r1, #17
 8002aac:	430a      	orrs	r2, r1
 8002aae:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	2380      	movs	r3, #128	; 0x80
 8002ab6:	049b      	lsls	r3, r3, #18
 8002ab8:	4013      	ands	r3, r2
 8002aba:	d016      	beq.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8002abc:	4b0e      	ldr	r3, [pc, #56]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002abe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002ac0:	4a10      	ldr	r2, [pc, #64]	; (8002b04 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8002ac2:	4013      	ands	r3, r2
 8002ac4:	0019      	movs	r1, r3
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002aca:	4b0b      	ldr	r3, [pc, #44]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002acc:	430a      	orrs	r2, r1
 8002ace:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8002ad4:	2380      	movs	r3, #128	; 0x80
 8002ad6:	005b      	lsls	r3, r3, #1
 8002ad8:	429a      	cmp	r2, r3
 8002ada:	d106      	bne.n	8002aea <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8002adc:	4b06      	ldr	r3, [pc, #24]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ade:	68da      	ldr	r2, [r3, #12]
 8002ae0:	4b05      	ldr	r3, [pc, #20]	; (8002af8 <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8002ae2:	2180      	movs	r1, #128	; 0x80
 8002ae4:	0449      	lsls	r1, r1, #17
 8002ae6:	430a      	orrs	r2, r1
 8002ae8:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8002aea:	2312      	movs	r3, #18
 8002aec:	18fb      	adds	r3, r7, r3
 8002aee:	781b      	ldrb	r3, [r3, #0]
}
 8002af0:	0018      	movs	r0, r3
 8002af2:	46bd      	mov	sp, r7
 8002af4:	b006      	add	sp, #24
 8002af6:	bd80      	pop	{r7, pc}
 8002af8:	40021000 	.word	0x40021000
 8002afc:	efffffff 	.word	0xefffffff
 8002b00:	fffff3ff 	.word	0xfffff3ff
 8002b04:	fffffcff 	.word	0xfffffcff
 8002b08:	fff3ffff 	.word	0xfff3ffff
 8002b0c:	ffcfffff 	.word	0xffcfffff
 8002b10:	ffffcfff 	.word	0xffffcfff
 8002b14:	ffff3fff 	.word	0xffff3fff
 8002b18:	ffbfffff 	.word	0xffbfffff
 8002b1c:	feffffff 	.word	0xfeffffff

08002b20 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002b20:	b580      	push	{r7, lr}
 8002b22:	b082      	sub	sp, #8
 8002b24:	af00      	add	r7, sp, #0
 8002b26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d101      	bne.n	8002b32 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002b2e:	2301      	movs	r3, #1
 8002b30:	e04a      	b.n	8002bc8 <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	223d      	movs	r2, #61	; 0x3d
 8002b36:	5c9b      	ldrb	r3, [r3, r2]
 8002b38:	b2db      	uxtb	r3, r3
 8002b3a:	2b00      	cmp	r3, #0
 8002b3c:	d107      	bne.n	8002b4e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b3e:	687b      	ldr	r3, [r7, #4]
 8002b40:	223c      	movs	r2, #60	; 0x3c
 8002b42:	2100      	movs	r1, #0
 8002b44:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	0018      	movs	r0, r3
 8002b4a:	f7fd ff23 	bl	8000994 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	223d      	movs	r2, #61	; 0x3d
 8002b52:	2102      	movs	r1, #2
 8002b54:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	3304      	adds	r3, #4
 8002b5e:	0019      	movs	r1, r3
 8002b60:	0010      	movs	r0, r2
 8002b62:	f000 fce5 	bl	8003530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2248      	movs	r2, #72	; 0x48
 8002b6a:	2101      	movs	r1, #1
 8002b6c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	223e      	movs	r2, #62	; 0x3e
 8002b72:	2101      	movs	r1, #1
 8002b74:	5499      	strb	r1, [r3, r2]
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	223f      	movs	r2, #63	; 0x3f
 8002b7a:	2101      	movs	r1, #1
 8002b7c:	5499      	strb	r1, [r3, r2]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2240      	movs	r2, #64	; 0x40
 8002b82:	2101      	movs	r1, #1
 8002b84:	5499      	strb	r1, [r3, r2]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	2241      	movs	r2, #65	; 0x41
 8002b8a:	2101      	movs	r1, #1
 8002b8c:	5499      	strb	r1, [r3, r2]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	2242      	movs	r2, #66	; 0x42
 8002b92:	2101      	movs	r1, #1
 8002b94:	5499      	strb	r1, [r3, r2]
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	2243      	movs	r2, #67	; 0x43
 8002b9a:	2101      	movs	r1, #1
 8002b9c:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	2244      	movs	r2, #68	; 0x44
 8002ba2:	2101      	movs	r1, #1
 8002ba4:	5499      	strb	r1, [r3, r2]
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	2245      	movs	r2, #69	; 0x45
 8002baa:	2101      	movs	r1, #1
 8002bac:	5499      	strb	r1, [r3, r2]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2246      	movs	r2, #70	; 0x46
 8002bb2:	2101      	movs	r1, #1
 8002bb4:	5499      	strb	r1, [r3, r2]
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2247      	movs	r2, #71	; 0x47
 8002bba:	2101      	movs	r1, #1
 8002bbc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	223d      	movs	r2, #61	; 0x3d
 8002bc2:	2101      	movs	r1, #1
 8002bc4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002bc6:	2300      	movs	r3, #0
}
 8002bc8:	0018      	movs	r0, r3
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	b002      	add	sp, #8
 8002bce:	bd80      	pop	{r7, pc}

08002bd0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	223d      	movs	r2, #61	; 0x3d
 8002bdc:	5c9b      	ldrb	r3, [r3, r2]
 8002bde:	b2db      	uxtb	r3, r3
 8002be0:	2b01      	cmp	r3, #1
 8002be2:	d001      	beq.n	8002be8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002be4:	2301      	movs	r3, #1
 8002be6:	e047      	b.n	8002c78 <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	223d      	movs	r2, #61	; 0x3d
 8002bec:	2102      	movs	r1, #2
 8002bee:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	68da      	ldr	r2, [r3, #12]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2101      	movs	r1, #1
 8002bfc:	430a      	orrs	r2, r1
 8002bfe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	4a1e      	ldr	r2, [pc, #120]	; (8002c80 <HAL_TIM_Base_Start_IT+0xb0>)
 8002c06:	4293      	cmp	r3, r2
 8002c08:	d014      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x64>
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	681a      	ldr	r2, [r3, #0]
 8002c0e:	2380      	movs	r3, #128	; 0x80
 8002c10:	05db      	lsls	r3, r3, #23
 8002c12:	429a      	cmp	r2, r3
 8002c14:	d00e      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x64>
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4a1a      	ldr	r2, [pc, #104]	; (8002c84 <HAL_TIM_Base_Start_IT+0xb4>)
 8002c1c:	4293      	cmp	r3, r2
 8002c1e:	d009      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x64>
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a18      	ldr	r2, [pc, #96]	; (8002c88 <HAL_TIM_Base_Start_IT+0xb8>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d004      	beq.n	8002c34 <HAL_TIM_Base_Start_IT+0x64>
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	4a17      	ldr	r2, [pc, #92]	; (8002c8c <HAL_TIM_Base_Start_IT+0xbc>)
 8002c30:	4293      	cmp	r3, r2
 8002c32:	d116      	bne.n	8002c62 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	4a15      	ldr	r2, [pc, #84]	; (8002c90 <HAL_TIM_Base_Start_IT+0xc0>)
 8002c3c:	4013      	ands	r3, r2
 8002c3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c40:	68fb      	ldr	r3, [r7, #12]
 8002c42:	2b06      	cmp	r3, #6
 8002c44:	d016      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0xa4>
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	2380      	movs	r3, #128	; 0x80
 8002c4a:	025b      	lsls	r3, r3, #9
 8002c4c:	429a      	cmp	r2, r3
 8002c4e:	d011      	beq.n	8002c74 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	681a      	ldr	r2, [r3, #0]
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	2101      	movs	r1, #1
 8002c5c:	430a      	orrs	r2, r1
 8002c5e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c60:	e008      	b.n	8002c74 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	681a      	ldr	r2, [r3, #0]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	2101      	movs	r1, #1
 8002c6e:	430a      	orrs	r2, r1
 8002c70:	601a      	str	r2, [r3, #0]
 8002c72:	e000      	b.n	8002c76 <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c74:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002c76:	2300      	movs	r3, #0
}
 8002c78:	0018      	movs	r0, r3
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	b004      	add	sp, #16
 8002c7e:	bd80      	pop	{r7, pc}
 8002c80:	40012c00 	.word	0x40012c00
 8002c84:	40000400 	.word	0x40000400
 8002c88:	40000800 	.word	0x40000800
 8002c8c:	40014000 	.word	0x40014000
 8002c90:	00010007 	.word	0x00010007

08002c94 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002c94:	b580      	push	{r7, lr}
 8002c96:	b082      	sub	sp, #8
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	2b00      	cmp	r3, #0
 8002ca0:	d101      	bne.n	8002ca6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002ca2:	2301      	movs	r3, #1
 8002ca4:	e04a      	b.n	8002d3c <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	223d      	movs	r2, #61	; 0x3d
 8002caa:	5c9b      	ldrb	r3, [r3, r2]
 8002cac:	b2db      	uxtb	r3, r3
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d107      	bne.n	8002cc2 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	223c      	movs	r2, #60	; 0x3c
 8002cb6:	2100      	movs	r1, #0
 8002cb8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	0018      	movs	r0, r3
 8002cbe:	f000 f841 	bl	8002d44 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	223d      	movs	r2, #61	; 0x3d
 8002cc6:	2102      	movs	r1, #2
 8002cc8:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681a      	ldr	r2, [r3, #0]
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	3304      	adds	r3, #4
 8002cd2:	0019      	movs	r1, r3
 8002cd4:	0010      	movs	r0, r2
 8002cd6:	f000 fc2b 	bl	8003530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	2248      	movs	r2, #72	; 0x48
 8002cde:	2101      	movs	r1, #1
 8002ce0:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	223e      	movs	r2, #62	; 0x3e
 8002ce6:	2101      	movs	r1, #1
 8002ce8:	5499      	strb	r1, [r3, r2]
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	223f      	movs	r2, #63	; 0x3f
 8002cee:	2101      	movs	r1, #1
 8002cf0:	5499      	strb	r1, [r3, r2]
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2240      	movs	r2, #64	; 0x40
 8002cf6:	2101      	movs	r1, #1
 8002cf8:	5499      	strb	r1, [r3, r2]
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	2241      	movs	r2, #65	; 0x41
 8002cfe:	2101      	movs	r1, #1
 8002d00:	5499      	strb	r1, [r3, r2]
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2242      	movs	r2, #66	; 0x42
 8002d06:	2101      	movs	r1, #1
 8002d08:	5499      	strb	r1, [r3, r2]
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	2243      	movs	r2, #67	; 0x43
 8002d0e:	2101      	movs	r1, #1
 8002d10:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	2244      	movs	r2, #68	; 0x44
 8002d16:	2101      	movs	r1, #1
 8002d18:	5499      	strb	r1, [r3, r2]
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	2245      	movs	r2, #69	; 0x45
 8002d1e:	2101      	movs	r1, #1
 8002d20:	5499      	strb	r1, [r3, r2]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2246      	movs	r2, #70	; 0x46
 8002d26:	2101      	movs	r1, #1
 8002d28:	5499      	strb	r1, [r3, r2]
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2247      	movs	r2, #71	; 0x47
 8002d2e:	2101      	movs	r1, #1
 8002d30:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	223d      	movs	r2, #61	; 0x3d
 8002d36:	2101      	movs	r1, #1
 8002d38:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	0018      	movs	r0, r3
 8002d3e:	46bd      	mov	sp, r7
 8002d40:	b002      	add	sp, #8
 8002d42:	bd80      	pop	{r7, pc}

08002d44 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002d44:	b580      	push	{r7, lr}
 8002d46:	b082      	sub	sp, #8
 8002d48:	af00      	add	r7, sp, #0
 8002d4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002d4c:	46c0      	nop			; (mov r8, r8)
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	b002      	add	sp, #8
 8002d52:	bd80      	pop	{r7, pc}

08002d54 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d54:	b580      	push	{r7, lr}
 8002d56:	b084      	sub	sp, #16
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	6078      	str	r0, [r7, #4]
 8002d5c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	d108      	bne.n	8002d76 <HAL_TIM_PWM_Start+0x22>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	223e      	movs	r2, #62	; 0x3e
 8002d68:	5c9b      	ldrb	r3, [r3, r2]
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	3b01      	subs	r3, #1
 8002d6e:	1e5a      	subs	r2, r3, #1
 8002d70:	4193      	sbcs	r3, r2
 8002d72:	b2db      	uxtb	r3, r3
 8002d74:	e037      	b.n	8002de6 <HAL_TIM_PWM_Start+0x92>
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	2b04      	cmp	r3, #4
 8002d7a:	d108      	bne.n	8002d8e <HAL_TIM_PWM_Start+0x3a>
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	223f      	movs	r2, #63	; 0x3f
 8002d80:	5c9b      	ldrb	r3, [r3, r2]
 8002d82:	b2db      	uxtb	r3, r3
 8002d84:	3b01      	subs	r3, #1
 8002d86:	1e5a      	subs	r2, r3, #1
 8002d88:	4193      	sbcs	r3, r2
 8002d8a:	b2db      	uxtb	r3, r3
 8002d8c:	e02b      	b.n	8002de6 <HAL_TIM_PWM_Start+0x92>
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b08      	cmp	r3, #8
 8002d92:	d108      	bne.n	8002da6 <HAL_TIM_PWM_Start+0x52>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	2240      	movs	r2, #64	; 0x40
 8002d98:	5c9b      	ldrb	r3, [r3, r2]
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	3b01      	subs	r3, #1
 8002d9e:	1e5a      	subs	r2, r3, #1
 8002da0:	4193      	sbcs	r3, r2
 8002da2:	b2db      	uxtb	r3, r3
 8002da4:	e01f      	b.n	8002de6 <HAL_TIM_PWM_Start+0x92>
 8002da6:	683b      	ldr	r3, [r7, #0]
 8002da8:	2b0c      	cmp	r3, #12
 8002daa:	d108      	bne.n	8002dbe <HAL_TIM_PWM_Start+0x6a>
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	2241      	movs	r2, #65	; 0x41
 8002db0:	5c9b      	ldrb	r3, [r3, r2]
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	3b01      	subs	r3, #1
 8002db6:	1e5a      	subs	r2, r3, #1
 8002db8:	4193      	sbcs	r3, r2
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	e013      	b.n	8002de6 <HAL_TIM_PWM_Start+0x92>
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	2b10      	cmp	r3, #16
 8002dc2:	d108      	bne.n	8002dd6 <HAL_TIM_PWM_Start+0x82>
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	2242      	movs	r2, #66	; 0x42
 8002dc8:	5c9b      	ldrb	r3, [r3, r2]
 8002dca:	b2db      	uxtb	r3, r3
 8002dcc:	3b01      	subs	r3, #1
 8002dce:	1e5a      	subs	r2, r3, #1
 8002dd0:	4193      	sbcs	r3, r2
 8002dd2:	b2db      	uxtb	r3, r3
 8002dd4:	e007      	b.n	8002de6 <HAL_TIM_PWM_Start+0x92>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	2243      	movs	r2, #67	; 0x43
 8002dda:	5c9b      	ldrb	r3, [r3, r2]
 8002ddc:	b2db      	uxtb	r3, r3
 8002dde:	3b01      	subs	r3, #1
 8002de0:	1e5a      	subs	r2, r3, #1
 8002de2:	4193      	sbcs	r3, r2
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d001      	beq.n	8002dee <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 8002dea:	2301      	movs	r3, #1
 8002dec:	e090      	b.n	8002f10 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	2b00      	cmp	r3, #0
 8002df2:	d104      	bne.n	8002dfe <HAL_TIM_PWM_Start+0xaa>
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	223e      	movs	r2, #62	; 0x3e
 8002df8:	2102      	movs	r1, #2
 8002dfa:	5499      	strb	r1, [r3, r2]
 8002dfc:	e023      	b.n	8002e46 <HAL_TIM_PWM_Start+0xf2>
 8002dfe:	683b      	ldr	r3, [r7, #0]
 8002e00:	2b04      	cmp	r3, #4
 8002e02:	d104      	bne.n	8002e0e <HAL_TIM_PWM_Start+0xba>
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	223f      	movs	r2, #63	; 0x3f
 8002e08:	2102      	movs	r1, #2
 8002e0a:	5499      	strb	r1, [r3, r2]
 8002e0c:	e01b      	b.n	8002e46 <HAL_TIM_PWM_Start+0xf2>
 8002e0e:	683b      	ldr	r3, [r7, #0]
 8002e10:	2b08      	cmp	r3, #8
 8002e12:	d104      	bne.n	8002e1e <HAL_TIM_PWM_Start+0xca>
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	2240      	movs	r2, #64	; 0x40
 8002e18:	2102      	movs	r1, #2
 8002e1a:	5499      	strb	r1, [r3, r2]
 8002e1c:	e013      	b.n	8002e46 <HAL_TIM_PWM_Start+0xf2>
 8002e1e:	683b      	ldr	r3, [r7, #0]
 8002e20:	2b0c      	cmp	r3, #12
 8002e22:	d104      	bne.n	8002e2e <HAL_TIM_PWM_Start+0xda>
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	2241      	movs	r2, #65	; 0x41
 8002e28:	2102      	movs	r1, #2
 8002e2a:	5499      	strb	r1, [r3, r2]
 8002e2c:	e00b      	b.n	8002e46 <HAL_TIM_PWM_Start+0xf2>
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	2b10      	cmp	r3, #16
 8002e32:	d104      	bne.n	8002e3e <HAL_TIM_PWM_Start+0xea>
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	2242      	movs	r2, #66	; 0x42
 8002e38:	2102      	movs	r1, #2
 8002e3a:	5499      	strb	r1, [r3, r2]
 8002e3c:	e003      	b.n	8002e46 <HAL_TIM_PWM_Start+0xf2>
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2243      	movs	r2, #67	; 0x43
 8002e42:	2102      	movs	r1, #2
 8002e44:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	6839      	ldr	r1, [r7, #0]
 8002e4c:	2201      	movs	r2, #1
 8002e4e:	0018      	movs	r0, r3
 8002e50:	f000 ff66 	bl	8003d20 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4a2f      	ldr	r2, [pc, #188]	; (8002f18 <HAL_TIM_PWM_Start+0x1c4>)
 8002e5a:	4293      	cmp	r3, r2
 8002e5c:	d00e      	beq.n	8002e7c <HAL_TIM_PWM_Start+0x128>
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4a2e      	ldr	r2, [pc, #184]	; (8002f1c <HAL_TIM_PWM_Start+0x1c8>)
 8002e64:	4293      	cmp	r3, r2
 8002e66:	d009      	beq.n	8002e7c <HAL_TIM_PWM_Start+0x128>
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	4a2c      	ldr	r2, [pc, #176]	; (8002f20 <HAL_TIM_PWM_Start+0x1cc>)
 8002e6e:	4293      	cmp	r3, r2
 8002e70:	d004      	beq.n	8002e7c <HAL_TIM_PWM_Start+0x128>
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	4a2b      	ldr	r2, [pc, #172]	; (8002f24 <HAL_TIM_PWM_Start+0x1d0>)
 8002e78:	4293      	cmp	r3, r2
 8002e7a:	d101      	bne.n	8002e80 <HAL_TIM_PWM_Start+0x12c>
 8002e7c:	2301      	movs	r3, #1
 8002e7e:	e000      	b.n	8002e82 <HAL_TIM_PWM_Start+0x12e>
 8002e80:	2300      	movs	r3, #0
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	d008      	beq.n	8002e98 <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2180      	movs	r1, #128	; 0x80
 8002e92:	0209      	lsls	r1, r1, #8
 8002e94:	430a      	orrs	r2, r1
 8002e96:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4a1e      	ldr	r2, [pc, #120]	; (8002f18 <HAL_TIM_PWM_Start+0x1c4>)
 8002e9e:	4293      	cmp	r3, r2
 8002ea0:	d014      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x178>
 8002ea2:	687b      	ldr	r3, [r7, #4]
 8002ea4:	681a      	ldr	r2, [r3, #0]
 8002ea6:	2380      	movs	r3, #128	; 0x80
 8002ea8:	05db      	lsls	r3, r3, #23
 8002eaa:	429a      	cmp	r2, r3
 8002eac:	d00e      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x178>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a1d      	ldr	r2, [pc, #116]	; (8002f28 <HAL_TIM_PWM_Start+0x1d4>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x178>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a1b      	ldr	r2, [pc, #108]	; (8002f2c <HAL_TIM_PWM_Start+0x1d8>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_TIM_PWM_Start+0x178>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <HAL_TIM_PWM_Start+0x1c8>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d116      	bne.n	8002efa <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	4a17      	ldr	r2, [pc, #92]	; (8002f30 <HAL_TIM_PWM_Start+0x1dc>)
 8002ed4:	4013      	ands	r3, r2
 8002ed6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	68fb      	ldr	r3, [r7, #12]
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d016      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x1b8>
 8002ede:	68fa      	ldr	r2, [r7, #12]
 8002ee0:	2380      	movs	r3, #128	; 0x80
 8002ee2:	025b      	lsls	r3, r3, #9
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	d011      	beq.n	8002f0c <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	681b      	ldr	r3, [r3, #0]
 8002eec:	681a      	ldr	r2, [r3, #0]
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	2101      	movs	r1, #1
 8002ef4:	430a      	orrs	r2, r1
 8002ef6:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ef8:	e008      	b.n	8002f0c <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	681a      	ldr	r2, [r3, #0]
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	681b      	ldr	r3, [r3, #0]
 8002f04:	2101      	movs	r1, #1
 8002f06:	430a      	orrs	r2, r1
 8002f08:	601a      	str	r2, [r3, #0]
 8002f0a:	e000      	b.n	8002f0e <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002f0c:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 8002f0e:	2300      	movs	r3, #0
}
 8002f10:	0018      	movs	r0, r3
 8002f12:	46bd      	mov	sp, r7
 8002f14:	b004      	add	sp, #16
 8002f16:	bd80      	pop	{r7, pc}
 8002f18:	40012c00 	.word	0x40012c00
 8002f1c:	40014000 	.word	0x40014000
 8002f20:	40014400 	.word	0x40014400
 8002f24:	40014800 	.word	0x40014800
 8002f28:	40000400 	.word	0x40000400
 8002f2c:	40000800 	.word	0x40000800
 8002f30:	00010007 	.word	0x00010007

08002f34 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f34:	b580      	push	{r7, lr}
 8002f36:	b084      	sub	sp, #16
 8002f38:	af00      	add	r7, sp, #0
 8002f3a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	681b      	ldr	r3, [r3, #0]
 8002f40:	68db      	ldr	r3, [r3, #12]
 8002f42:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	691b      	ldr	r3, [r3, #16]
 8002f4a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f4c:	68bb      	ldr	r3, [r7, #8]
 8002f4e:	2202      	movs	r2, #2
 8002f50:	4013      	ands	r3, r2
 8002f52:	d021      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	2202      	movs	r2, #2
 8002f58:	4013      	ands	r3, r2
 8002f5a:	d01d      	beq.n	8002f98 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	2203      	movs	r2, #3
 8002f62:	4252      	negs	r2, r2
 8002f64:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	2201      	movs	r2, #1
 8002f6a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	699b      	ldr	r3, [r3, #24]
 8002f72:	2203      	movs	r2, #3
 8002f74:	4013      	ands	r3, r2
 8002f76:	d004      	beq.n	8002f82 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	0018      	movs	r0, r3
 8002f7c:	f000 fac0 	bl	8003500 <HAL_TIM_IC_CaptureCallback>
 8002f80:	e007      	b.n	8002f92 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	0018      	movs	r0, r3
 8002f86:	f000 fab3 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	0018      	movs	r0, r3
 8002f8e:	f000 fabf 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f92:	687b      	ldr	r3, [r7, #4]
 8002f94:	2200      	movs	r2, #0
 8002f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f98:	68bb      	ldr	r3, [r7, #8]
 8002f9a:	2204      	movs	r2, #4
 8002f9c:	4013      	ands	r3, r2
 8002f9e:	d022      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	2204      	movs	r2, #4
 8002fa4:	4013      	ands	r3, r2
 8002fa6:	d01e      	beq.n	8002fe6 <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2205      	movs	r2, #5
 8002fae:	4252      	negs	r2, r2
 8002fb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	2202      	movs	r2, #2
 8002fb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	699a      	ldr	r2, [r3, #24]
 8002fbe:	23c0      	movs	r3, #192	; 0xc0
 8002fc0:	009b      	lsls	r3, r3, #2
 8002fc2:	4013      	ands	r3, r2
 8002fc4:	d004      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	0018      	movs	r0, r3
 8002fca:	f000 fa99 	bl	8003500 <HAL_TIM_IC_CaptureCallback>
 8002fce:	e007      	b.n	8002fe0 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	0018      	movs	r0, r3
 8002fd4:	f000 fa8c 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	0018      	movs	r0, r3
 8002fdc:	f000 fa98 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	2200      	movs	r2, #0
 8002fe4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fe6:	68bb      	ldr	r3, [r7, #8]
 8002fe8:	2208      	movs	r2, #8
 8002fea:	4013      	ands	r3, r2
 8002fec:	d021      	beq.n	8003032 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	2208      	movs	r2, #8
 8002ff2:	4013      	ands	r3, r2
 8002ff4:	d01d      	beq.n	8003032 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	2209      	movs	r2, #9
 8002ffc:	4252      	negs	r2, r2
 8002ffe:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	2204      	movs	r2, #4
 8003004:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	69db      	ldr	r3, [r3, #28]
 800300c:	2203      	movs	r2, #3
 800300e:	4013      	ands	r3, r2
 8003010:	d004      	beq.n	800301c <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	0018      	movs	r0, r3
 8003016:	f000 fa73 	bl	8003500 <HAL_TIM_IC_CaptureCallback>
 800301a:	e007      	b.n	800302c <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	0018      	movs	r0, r3
 8003020:	f000 fa66 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003024:	687b      	ldr	r3, [r7, #4]
 8003026:	0018      	movs	r0, r3
 8003028:	f000 fa72 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	2200      	movs	r2, #0
 8003030:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003032:	68bb      	ldr	r3, [r7, #8]
 8003034:	2210      	movs	r2, #16
 8003036:	4013      	ands	r3, r2
 8003038:	d022      	beq.n	8003080 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	2210      	movs	r2, #16
 800303e:	4013      	ands	r3, r2
 8003040:	d01e      	beq.n	8003080 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	2211      	movs	r2, #17
 8003048:	4252      	negs	r2, r2
 800304a:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	2208      	movs	r2, #8
 8003050:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	69da      	ldr	r2, [r3, #28]
 8003058:	23c0      	movs	r3, #192	; 0xc0
 800305a:	009b      	lsls	r3, r3, #2
 800305c:	4013      	ands	r3, r2
 800305e:	d004      	beq.n	800306a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	0018      	movs	r0, r3
 8003064:	f000 fa4c 	bl	8003500 <HAL_TIM_IC_CaptureCallback>
 8003068:	e007      	b.n	800307a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	0018      	movs	r0, r3
 800306e:	f000 fa3f 	bl	80034f0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	0018      	movs	r0, r3
 8003076:	f000 fa4b 	bl	8003510 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	2200      	movs	r2, #0
 800307e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003080:	68bb      	ldr	r3, [r7, #8]
 8003082:	2201      	movs	r2, #1
 8003084:	4013      	ands	r3, r2
 8003086:	d00c      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	2201      	movs	r2, #1
 800308c:	4013      	ands	r3, r2
 800308e:	d008      	beq.n	80030a2 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	2202      	movs	r2, #2
 8003096:	4252      	negs	r2, r2
 8003098:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	0018      	movs	r0, r3
 800309e:	f7fd fb77 	bl	8000790 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030a2:	68bb      	ldr	r3, [r7, #8]
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	4013      	ands	r3, r2
 80030a8:	d104      	bne.n	80030b4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 80030aa:	68ba      	ldr	r2, [r7, #8]
 80030ac:	2380      	movs	r3, #128	; 0x80
 80030ae:	019b      	lsls	r3, r3, #6
 80030b0:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 80030b2:	d00b      	beq.n	80030cc <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	2280      	movs	r2, #128	; 0x80
 80030b8:	4013      	ands	r3, r2
 80030ba:	d007      	beq.n	80030cc <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a1e      	ldr	r2, [pc, #120]	; (800313c <HAL_TIM_IRQHandler+0x208>)
 80030c2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	0018      	movs	r0, r3
 80030c8:	f000 ff68 	bl	8003f9c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 80030cc:	68ba      	ldr	r2, [r7, #8]
 80030ce:	2380      	movs	r3, #128	; 0x80
 80030d0:	005b      	lsls	r3, r3, #1
 80030d2:	4013      	ands	r3, r2
 80030d4:	d00b      	beq.n	80030ee <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	2280      	movs	r2, #128	; 0x80
 80030da:	4013      	ands	r3, r2
 80030dc:	d007      	beq.n	80030ee <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	4a17      	ldr	r2, [pc, #92]	; (8003140 <HAL_TIM_IRQHandler+0x20c>)
 80030e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	0018      	movs	r0, r3
 80030ea:	f000 ff5f 	bl	8003fac <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030ee:	68bb      	ldr	r3, [r7, #8]
 80030f0:	2240      	movs	r2, #64	; 0x40
 80030f2:	4013      	ands	r3, r2
 80030f4:	d00c      	beq.n	8003110 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	2240      	movs	r2, #64	; 0x40
 80030fa:	4013      	ands	r3, r2
 80030fc:	d008      	beq.n	8003110 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	681b      	ldr	r3, [r3, #0]
 8003102:	2241      	movs	r2, #65	; 0x41
 8003104:	4252      	negs	r2, r2
 8003106:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	0018      	movs	r0, r3
 800310c:	f000 fa08 	bl	8003520 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003110:	68bb      	ldr	r3, [r7, #8]
 8003112:	2220      	movs	r2, #32
 8003114:	4013      	ands	r3, r2
 8003116:	d00c      	beq.n	8003132 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	2220      	movs	r2, #32
 800311c:	4013      	ands	r3, r2
 800311e:	d008      	beq.n	8003132 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	2221      	movs	r2, #33	; 0x21
 8003126:	4252      	negs	r2, r2
 8003128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	0018      	movs	r0, r3
 800312e:	f000 ff2d 	bl	8003f8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003132:	46c0      	nop			; (mov r8, r8)
 8003134:	46bd      	mov	sp, r7
 8003136:	b004      	add	sp, #16
 8003138:	bd80      	pop	{r7, pc}
 800313a:	46c0      	nop			; (mov r8, r8)
 800313c:	ffffdf7f 	.word	0xffffdf7f
 8003140:	fffffeff 	.word	0xfffffeff

08003144 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003144:	b580      	push	{r7, lr}
 8003146:	b086      	sub	sp, #24
 8003148:	af00      	add	r7, sp, #0
 800314a:	60f8      	str	r0, [r7, #12]
 800314c:	60b9      	str	r1, [r7, #8]
 800314e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003150:	2317      	movs	r3, #23
 8003152:	18fb      	adds	r3, r7, r3
 8003154:	2200      	movs	r2, #0
 8003156:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003158:	68fb      	ldr	r3, [r7, #12]
 800315a:	223c      	movs	r2, #60	; 0x3c
 800315c:	5c9b      	ldrb	r3, [r3, r2]
 800315e:	2b01      	cmp	r3, #1
 8003160:	d101      	bne.n	8003166 <HAL_TIM_PWM_ConfigChannel+0x22>
 8003162:	2302      	movs	r3, #2
 8003164:	e0e5      	b.n	8003332 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 8003166:	68fb      	ldr	r3, [r7, #12]
 8003168:	223c      	movs	r2, #60	; 0x3c
 800316a:	2101      	movs	r1, #1
 800316c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2b14      	cmp	r3, #20
 8003172:	d900      	bls.n	8003176 <HAL_TIM_PWM_ConfigChannel+0x32>
 8003174:	e0d1      	b.n	800331a <HAL_TIM_PWM_ConfigChannel+0x1d6>
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	009a      	lsls	r2, r3, #2
 800317a:	4b70      	ldr	r3, [pc, #448]	; (800333c <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 800317c:	18d3      	adds	r3, r2, r3
 800317e:	681b      	ldr	r3, [r3, #0]
 8003180:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003182:	68fb      	ldr	r3, [r7, #12]
 8003184:	681b      	ldr	r3, [r3, #0]
 8003186:	68ba      	ldr	r2, [r7, #8]
 8003188:	0011      	movs	r1, r2
 800318a:	0018      	movs	r0, r3
 800318c:	f000 fa68 	bl	8003660 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	699a      	ldr	r2, [r3, #24]
 8003196:	68fb      	ldr	r3, [r7, #12]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	2108      	movs	r1, #8
 800319c:	430a      	orrs	r2, r1
 800319e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	699a      	ldr	r2, [r3, #24]
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	2104      	movs	r1, #4
 80031ac:	438a      	bics	r2, r1
 80031ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80031b0:	68fb      	ldr	r3, [r7, #12]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	6999      	ldr	r1, [r3, #24]
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	691a      	ldr	r2, [r3, #16]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	430a      	orrs	r2, r1
 80031c0:	619a      	str	r2, [r3, #24]
      break;
 80031c2:	e0af      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	68ba      	ldr	r2, [r7, #8]
 80031ca:	0011      	movs	r1, r2
 80031cc:	0018      	movs	r0, r3
 80031ce:	f000 fad1 	bl	8003774 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	699a      	ldr	r2, [r3, #24]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2180      	movs	r1, #128	; 0x80
 80031de:	0109      	lsls	r1, r1, #4
 80031e0:	430a      	orrs	r2, r1
 80031e2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	699a      	ldr	r2, [r3, #24]
 80031ea:	68fb      	ldr	r3, [r7, #12]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	4954      	ldr	r1, [pc, #336]	; (8003340 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80031f0:	400a      	ands	r2, r1
 80031f2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80031f4:	68fb      	ldr	r3, [r7, #12]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6999      	ldr	r1, [r3, #24]
 80031fa:	68bb      	ldr	r3, [r7, #8]
 80031fc:	691b      	ldr	r3, [r3, #16]
 80031fe:	021a      	lsls	r2, r3, #8
 8003200:	68fb      	ldr	r3, [r7, #12]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	430a      	orrs	r2, r1
 8003206:	619a      	str	r2, [r3, #24]
      break;
 8003208:	e08c      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	68ba      	ldr	r2, [r7, #8]
 8003210:	0011      	movs	r1, r2
 8003212:	0018      	movs	r0, r3
 8003214:	f000 fb32 	bl	800387c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	69da      	ldr	r2, [r3, #28]
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	2108      	movs	r1, #8
 8003224:	430a      	orrs	r2, r1
 8003226:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003228:	68fb      	ldr	r3, [r7, #12]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	69da      	ldr	r2, [r3, #28]
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	2104      	movs	r1, #4
 8003234:	438a      	bics	r2, r1
 8003236:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003238:	68fb      	ldr	r3, [r7, #12]
 800323a:	681b      	ldr	r3, [r3, #0]
 800323c:	69d9      	ldr	r1, [r3, #28]
 800323e:	68bb      	ldr	r3, [r7, #8]
 8003240:	691a      	ldr	r2, [r3, #16]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	430a      	orrs	r2, r1
 8003248:	61da      	str	r2, [r3, #28]
      break;
 800324a:	e06b      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800324c:	68fb      	ldr	r3, [r7, #12]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	68ba      	ldr	r2, [r7, #8]
 8003252:	0011      	movs	r1, r2
 8003254:	0018      	movs	r0, r3
 8003256:	f000 fb99 	bl	800398c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	69da      	ldr	r2, [r3, #28]
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	2180      	movs	r1, #128	; 0x80
 8003266:	0109      	lsls	r1, r1, #4
 8003268:	430a      	orrs	r2, r1
 800326a:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	69da      	ldr	r2, [r3, #28]
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	681b      	ldr	r3, [r3, #0]
 8003276:	4932      	ldr	r1, [pc, #200]	; (8003340 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003278:	400a      	ands	r2, r1
 800327a:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	69d9      	ldr	r1, [r3, #28]
 8003282:	68bb      	ldr	r3, [r7, #8]
 8003284:	691b      	ldr	r3, [r3, #16]
 8003286:	021a      	lsls	r2, r3, #8
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	430a      	orrs	r2, r1
 800328e:	61da      	str	r2, [r3, #28]
      break;
 8003290:	e048      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	68ba      	ldr	r2, [r7, #8]
 8003298:	0011      	movs	r1, r2
 800329a:	0018      	movs	r0, r3
 800329c:	f000 fbe0 	bl	8003a60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032a6:	68fb      	ldr	r3, [r7, #12]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	2108      	movs	r1, #8
 80032ac:	430a      	orrs	r2, r1
 80032ae:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	681b      	ldr	r3, [r3, #0]
 80032b4:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032b6:	68fb      	ldr	r3, [r7, #12]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	2104      	movs	r1, #4
 80032bc:	438a      	bics	r2, r1
 80032be:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	691a      	ldr	r2, [r3, #16]
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	430a      	orrs	r2, r1
 80032d0:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80032d2:	e027      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80032d4:	68fb      	ldr	r3, [r7, #12]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	68ba      	ldr	r2, [r7, #8]
 80032da:	0011      	movs	r1, r2
 80032dc:	0018      	movs	r0, r3
 80032de:	f000 fc1f 	bl	8003b20 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80032e2:	68fb      	ldr	r3, [r7, #12]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	2180      	movs	r1, #128	; 0x80
 80032ee:	0109      	lsls	r1, r1, #4
 80032f0:	430a      	orrs	r2, r1
 80032f2:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	4910      	ldr	r1, [pc, #64]	; (8003340 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8003300:	400a      	ands	r2, r1
 8003302:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800330a:	68bb      	ldr	r3, [r7, #8]
 800330c:	691b      	ldr	r3, [r3, #16]
 800330e:	021a      	lsls	r2, r3, #8
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	430a      	orrs	r2, r1
 8003316:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8003318:	e004      	b.n	8003324 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 800331a:	2317      	movs	r3, #23
 800331c:	18fb      	adds	r3, r7, r3
 800331e:	2201      	movs	r2, #1
 8003320:	701a      	strb	r2, [r3, #0]
      break;
 8003322:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	223c      	movs	r2, #60	; 0x3c
 8003328:	2100      	movs	r1, #0
 800332a:	5499      	strb	r1, [r3, r2]

  return status;
 800332c:	2317      	movs	r3, #23
 800332e:	18fb      	adds	r3, r7, r3
 8003330:	781b      	ldrb	r3, [r3, #0]
}
 8003332:	0018      	movs	r0, r3
 8003334:	46bd      	mov	sp, r7
 8003336:	b006      	add	sp, #24
 8003338:	bd80      	pop	{r7, pc}
 800333a:	46c0      	nop			; (mov r8, r8)
 800333c:	0800406c 	.word	0x0800406c
 8003340:	fffffbff 	.word	0xfffffbff

08003344 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b084      	sub	sp, #16
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
 800334c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800334e:	230f      	movs	r3, #15
 8003350:	18fb      	adds	r3, r7, r3
 8003352:	2200      	movs	r2, #0
 8003354:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	223c      	movs	r2, #60	; 0x3c
 800335a:	5c9b      	ldrb	r3, [r3, r2]
 800335c:	2b01      	cmp	r3, #1
 800335e:	d101      	bne.n	8003364 <HAL_TIM_ConfigClockSource+0x20>
 8003360:	2302      	movs	r3, #2
 8003362:	e0bc      	b.n	80034de <HAL_TIM_ConfigClockSource+0x19a>
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	223c      	movs	r2, #60	; 0x3c
 8003368:	2101      	movs	r1, #1
 800336a:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	223d      	movs	r2, #61	; 0x3d
 8003370:	2102      	movs	r1, #2
 8003372:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	689b      	ldr	r3, [r3, #8]
 800337a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800337c:	68bb      	ldr	r3, [r7, #8]
 800337e:	4a5a      	ldr	r2, [pc, #360]	; (80034e8 <HAL_TIM_ConfigClockSource+0x1a4>)
 8003380:	4013      	ands	r3, r2
 8003382:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003384:	68bb      	ldr	r3, [r7, #8]
 8003386:	4a59      	ldr	r2, [pc, #356]	; (80034ec <HAL_TIM_ConfigClockSource+0x1a8>)
 8003388:	4013      	ands	r3, r2
 800338a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	68ba      	ldr	r2, [r7, #8]
 8003392:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2280      	movs	r2, #128	; 0x80
 800339a:	0192      	lsls	r2, r2, #6
 800339c:	4293      	cmp	r3, r2
 800339e:	d040      	beq.n	8003422 <HAL_TIM_ConfigClockSource+0xde>
 80033a0:	2280      	movs	r2, #128	; 0x80
 80033a2:	0192      	lsls	r2, r2, #6
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d900      	bls.n	80033aa <HAL_TIM_ConfigClockSource+0x66>
 80033a8:	e088      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
 80033aa:	2280      	movs	r2, #128	; 0x80
 80033ac:	0152      	lsls	r2, r2, #5
 80033ae:	4293      	cmp	r3, r2
 80033b0:	d100      	bne.n	80033b4 <HAL_TIM_ConfigClockSource+0x70>
 80033b2:	e088      	b.n	80034c6 <HAL_TIM_ConfigClockSource+0x182>
 80033b4:	2280      	movs	r2, #128	; 0x80
 80033b6:	0152      	lsls	r2, r2, #5
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d900      	bls.n	80033be <HAL_TIM_ConfigClockSource+0x7a>
 80033bc:	e07e      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
 80033be:	2b70      	cmp	r3, #112	; 0x70
 80033c0:	d018      	beq.n	80033f4 <HAL_TIM_ConfigClockSource+0xb0>
 80033c2:	d900      	bls.n	80033c6 <HAL_TIM_ConfigClockSource+0x82>
 80033c4:	e07a      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
 80033c6:	2b60      	cmp	r3, #96	; 0x60
 80033c8:	d04f      	beq.n	800346a <HAL_TIM_ConfigClockSource+0x126>
 80033ca:	d900      	bls.n	80033ce <HAL_TIM_ConfigClockSource+0x8a>
 80033cc:	e076      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
 80033ce:	2b50      	cmp	r3, #80	; 0x50
 80033d0:	d03b      	beq.n	800344a <HAL_TIM_ConfigClockSource+0x106>
 80033d2:	d900      	bls.n	80033d6 <HAL_TIM_ConfigClockSource+0x92>
 80033d4:	e072      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
 80033d6:	2b40      	cmp	r3, #64	; 0x40
 80033d8:	d057      	beq.n	800348a <HAL_TIM_ConfigClockSource+0x146>
 80033da:	d900      	bls.n	80033de <HAL_TIM_ConfigClockSource+0x9a>
 80033dc:	e06e      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
 80033de:	2b30      	cmp	r3, #48	; 0x30
 80033e0:	d063      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x166>
 80033e2:	d86b      	bhi.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
 80033e4:	2b20      	cmp	r3, #32
 80033e6:	d060      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x166>
 80033e8:	d868      	bhi.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d05d      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x166>
 80033ee:	2b10      	cmp	r3, #16
 80033f0:	d05b      	beq.n	80034aa <HAL_TIM_ConfigClockSource+0x166>
 80033f2:	e063      	b.n	80034bc <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80033f8:	683b      	ldr	r3, [r7, #0]
 80033fa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80033fc:	683b      	ldr	r3, [r7, #0]
 80033fe:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003400:	683b      	ldr	r3, [r7, #0]
 8003402:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003404:	f000 fc6c 	bl	8003ce0 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	689b      	ldr	r3, [r3, #8]
 800340e:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003410:	68bb      	ldr	r3, [r7, #8]
 8003412:	2277      	movs	r2, #119	; 0x77
 8003414:	4313      	orrs	r3, r2
 8003416:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	68ba      	ldr	r2, [r7, #8]
 800341e:	609a      	str	r2, [r3, #8]
      break;
 8003420:	e052      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003432:	f000 fc55 	bl	8003ce0 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	689a      	ldr	r2, [r3, #8]
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	681b      	ldr	r3, [r3, #0]
 8003440:	2180      	movs	r1, #128	; 0x80
 8003442:	01c9      	lsls	r1, r1, #7
 8003444:	430a      	orrs	r2, r1
 8003446:	609a      	str	r2, [r3, #8]
      break;
 8003448:	e03e      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003452:	683b      	ldr	r3, [r7, #0]
 8003454:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003456:	001a      	movs	r2, r3
 8003458:	f000 fbc6 	bl	8003be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	2150      	movs	r1, #80	; 0x50
 8003462:	0018      	movs	r0, r3
 8003464:	f000 fc20 	bl	8003ca8 <TIM_ITRx_SetConfig>
      break;
 8003468:	e02e      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003476:	001a      	movs	r2, r3
 8003478:	f000 fbe4 	bl	8003c44 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	2160      	movs	r1, #96	; 0x60
 8003482:	0018      	movs	r0, r3
 8003484:	f000 fc10 	bl	8003ca8 <TIM_ITRx_SetConfig>
      break;
 8003488:	e01e      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800348e:	683b      	ldr	r3, [r7, #0]
 8003490:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003496:	001a      	movs	r2, r3
 8003498:	f000 fba6 	bl	8003be8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	2140      	movs	r1, #64	; 0x40
 80034a2:	0018      	movs	r0, r3
 80034a4:	f000 fc00 	bl	8003ca8 <TIM_ITRx_SetConfig>
      break;
 80034a8:	e00e      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	0019      	movs	r1, r3
 80034b4:	0010      	movs	r0, r2
 80034b6:	f000 fbf7 	bl	8003ca8 <TIM_ITRx_SetConfig>
      break;
 80034ba:	e005      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 80034bc:	230f      	movs	r3, #15
 80034be:	18fb      	adds	r3, r7, r3
 80034c0:	2201      	movs	r2, #1
 80034c2:	701a      	strb	r2, [r3, #0]
      break;
 80034c4:	e000      	b.n	80034c8 <HAL_TIM_ConfigClockSource+0x184>
      break;
 80034c6:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	223d      	movs	r2, #61	; 0x3d
 80034cc:	2101      	movs	r1, #1
 80034ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	223c      	movs	r2, #60	; 0x3c
 80034d4:	2100      	movs	r1, #0
 80034d6:	5499      	strb	r1, [r3, r2]

  return status;
 80034d8:	230f      	movs	r3, #15
 80034da:	18fb      	adds	r3, r7, r3
 80034dc:	781b      	ldrb	r3, [r3, #0]
}
 80034de:	0018      	movs	r0, r3
 80034e0:	46bd      	mov	sp, r7
 80034e2:	b004      	add	sp, #16
 80034e4:	bd80      	pop	{r7, pc}
 80034e6:	46c0      	nop			; (mov r8, r8)
 80034e8:	ffceff88 	.word	0xffceff88
 80034ec:	ffff00ff 	.word	0xffff00ff

080034f0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034f0:	b580      	push	{r7, lr}
 80034f2:	b082      	sub	sp, #8
 80034f4:	af00      	add	r7, sp, #0
 80034f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80034f8:	46c0      	nop			; (mov r8, r8)
 80034fa:	46bd      	mov	sp, r7
 80034fc:	b002      	add	sp, #8
 80034fe:	bd80      	pop	{r7, pc}

08003500 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003500:	b580      	push	{r7, lr}
 8003502:	b082      	sub	sp, #8
 8003504:	af00      	add	r7, sp, #0
 8003506:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003508:	46c0      	nop			; (mov r8, r8)
 800350a:	46bd      	mov	sp, r7
 800350c:	b002      	add	sp, #8
 800350e:	bd80      	pop	{r7, pc}

08003510 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b082      	sub	sp, #8
 8003514:	af00      	add	r7, sp, #0
 8003516:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003518:	46c0      	nop			; (mov r8, r8)
 800351a:	46bd      	mov	sp, r7
 800351c:	b002      	add	sp, #8
 800351e:	bd80      	pop	{r7, pc}

08003520 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003520:	b580      	push	{r7, lr}
 8003522:	b082      	sub	sp, #8
 8003524:	af00      	add	r7, sp, #0
 8003526:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003528:	46c0      	nop			; (mov r8, r8)
 800352a:	46bd      	mov	sp, r7
 800352c:	b002      	add	sp, #8
 800352e:	bd80      	pop	{r7, pc}

08003530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003530:	b580      	push	{r7, lr}
 8003532:	b084      	sub	sp, #16
 8003534:	af00      	add	r7, sp, #0
 8003536:	6078      	str	r0, [r7, #4]
 8003538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	4a3f      	ldr	r2, [pc, #252]	; (8003640 <TIM_Base_SetConfig+0x110>)
 8003544:	4293      	cmp	r3, r2
 8003546:	d00c      	beq.n	8003562 <TIM_Base_SetConfig+0x32>
 8003548:	687a      	ldr	r2, [r7, #4]
 800354a:	2380      	movs	r3, #128	; 0x80
 800354c:	05db      	lsls	r3, r3, #23
 800354e:	429a      	cmp	r2, r3
 8003550:	d007      	beq.n	8003562 <TIM_Base_SetConfig+0x32>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a3b      	ldr	r2, [pc, #236]	; (8003644 <TIM_Base_SetConfig+0x114>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d003      	beq.n	8003562 <TIM_Base_SetConfig+0x32>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a3a      	ldr	r2, [pc, #232]	; (8003648 <TIM_Base_SetConfig+0x118>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d108      	bne.n	8003574 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	2270      	movs	r2, #112	; 0x70
 8003566:	4393      	bics	r3, r2
 8003568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800356a:	683b      	ldr	r3, [r7, #0]
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	68fa      	ldr	r2, [r7, #12]
 8003570:	4313      	orrs	r3, r2
 8003572:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	4a32      	ldr	r2, [pc, #200]	; (8003640 <TIM_Base_SetConfig+0x110>)
 8003578:	4293      	cmp	r3, r2
 800357a:	d01c      	beq.n	80035b6 <TIM_Base_SetConfig+0x86>
 800357c:	687a      	ldr	r2, [r7, #4]
 800357e:	2380      	movs	r3, #128	; 0x80
 8003580:	05db      	lsls	r3, r3, #23
 8003582:	429a      	cmp	r2, r3
 8003584:	d017      	beq.n	80035b6 <TIM_Base_SetConfig+0x86>
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	4a2e      	ldr	r2, [pc, #184]	; (8003644 <TIM_Base_SetConfig+0x114>)
 800358a:	4293      	cmp	r3, r2
 800358c:	d013      	beq.n	80035b6 <TIM_Base_SetConfig+0x86>
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	4a2d      	ldr	r2, [pc, #180]	; (8003648 <TIM_Base_SetConfig+0x118>)
 8003592:	4293      	cmp	r3, r2
 8003594:	d00f      	beq.n	80035b6 <TIM_Base_SetConfig+0x86>
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	4a2c      	ldr	r2, [pc, #176]	; (800364c <TIM_Base_SetConfig+0x11c>)
 800359a:	4293      	cmp	r3, r2
 800359c:	d00b      	beq.n	80035b6 <TIM_Base_SetConfig+0x86>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	4a2b      	ldr	r2, [pc, #172]	; (8003650 <TIM_Base_SetConfig+0x120>)
 80035a2:	4293      	cmp	r3, r2
 80035a4:	d007      	beq.n	80035b6 <TIM_Base_SetConfig+0x86>
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	4a2a      	ldr	r2, [pc, #168]	; (8003654 <TIM_Base_SetConfig+0x124>)
 80035aa:	4293      	cmp	r3, r2
 80035ac:	d003      	beq.n	80035b6 <TIM_Base_SetConfig+0x86>
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	4a29      	ldr	r2, [pc, #164]	; (8003658 <TIM_Base_SetConfig+0x128>)
 80035b2:	4293      	cmp	r3, r2
 80035b4:	d108      	bne.n	80035c8 <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	4a28      	ldr	r2, [pc, #160]	; (800365c <TIM_Base_SetConfig+0x12c>)
 80035ba:	4013      	ands	r3, r2
 80035bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80035be:	683b      	ldr	r3, [r7, #0]
 80035c0:	68db      	ldr	r3, [r3, #12]
 80035c2:	68fa      	ldr	r2, [r7, #12]
 80035c4:	4313      	orrs	r3, r2
 80035c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	2280      	movs	r2, #128	; 0x80
 80035cc:	4393      	bics	r3, r2
 80035ce:	001a      	movs	r2, r3
 80035d0:	683b      	ldr	r3, [r7, #0]
 80035d2:	695b      	ldr	r3, [r3, #20]
 80035d4:	4313      	orrs	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	68fa      	ldr	r2, [r7, #12]
 80035dc:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80035de:	683b      	ldr	r3, [r7, #0]
 80035e0:	689a      	ldr	r2, [r3, #8]
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80035e6:	683b      	ldr	r3, [r7, #0]
 80035e8:	681a      	ldr	r2, [r3, #0]
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a13      	ldr	r2, [pc, #76]	; (8003640 <TIM_Base_SetConfig+0x110>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d00b      	beq.n	800360e <TIM_Base_SetConfig+0xde>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a15      	ldr	r2, [pc, #84]	; (8003650 <TIM_Base_SetConfig+0x120>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d007      	beq.n	800360e <TIM_Base_SetConfig+0xde>
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	4a14      	ldr	r2, [pc, #80]	; (8003654 <TIM_Base_SetConfig+0x124>)
 8003602:	4293      	cmp	r3, r2
 8003604:	d003      	beq.n	800360e <TIM_Base_SetConfig+0xde>
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	4a13      	ldr	r2, [pc, #76]	; (8003658 <TIM_Base_SetConfig+0x128>)
 800360a:	4293      	cmp	r3, r2
 800360c:	d103      	bne.n	8003616 <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	691a      	ldr	r2, [r3, #16]
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2201      	movs	r2, #1
 800361a:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	691b      	ldr	r3, [r3, #16]
 8003620:	2201      	movs	r2, #1
 8003622:	4013      	ands	r3, r2
 8003624:	2b01      	cmp	r3, #1
 8003626:	d106      	bne.n	8003636 <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	691b      	ldr	r3, [r3, #16]
 800362c:	2201      	movs	r2, #1
 800362e:	4393      	bics	r3, r2
 8003630:	001a      	movs	r2, r3
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	611a      	str	r2, [r3, #16]
  }
}
 8003636:	46c0      	nop			; (mov r8, r8)
 8003638:	46bd      	mov	sp, r7
 800363a:	b004      	add	sp, #16
 800363c:	bd80      	pop	{r7, pc}
 800363e:	46c0      	nop			; (mov r8, r8)
 8003640:	40012c00 	.word	0x40012c00
 8003644:	40000400 	.word	0x40000400
 8003648:	40000800 	.word	0x40000800
 800364c:	40002000 	.word	0x40002000
 8003650:	40014000 	.word	0x40014000
 8003654:	40014400 	.word	0x40014400
 8003658:	40014800 	.word	0x40014800
 800365c:	fffffcff 	.word	0xfffffcff

08003660 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b086      	sub	sp, #24
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
 8003668:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	6a1b      	ldr	r3, [r3, #32]
 800366e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	6a1b      	ldr	r3, [r3, #32]
 8003674:	2201      	movs	r2, #1
 8003676:	4393      	bics	r3, r2
 8003678:	001a      	movs	r2, r3
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	4a32      	ldr	r2, [pc, #200]	; (8003758 <TIM_OC1_SetConfig+0xf8>)
 800368e:	4013      	ands	r3, r2
 8003690:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	2203      	movs	r2, #3
 8003696:	4393      	bics	r3, r2
 8003698:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	68fa      	ldr	r2, [r7, #12]
 80036a0:	4313      	orrs	r3, r2
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036a4:	697b      	ldr	r3, [r7, #20]
 80036a6:	2202      	movs	r2, #2
 80036a8:	4393      	bics	r3, r2
 80036aa:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036ac:	683b      	ldr	r3, [r7, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	697a      	ldr	r2, [r7, #20]
 80036b2:	4313      	orrs	r3, r2
 80036b4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a28      	ldr	r2, [pc, #160]	; (800375c <TIM_OC1_SetConfig+0xfc>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d00b      	beq.n	80036d6 <TIM_OC1_SetConfig+0x76>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a27      	ldr	r2, [pc, #156]	; (8003760 <TIM_OC1_SetConfig+0x100>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d007      	beq.n	80036d6 <TIM_OC1_SetConfig+0x76>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a26      	ldr	r2, [pc, #152]	; (8003764 <TIM_OC1_SetConfig+0x104>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d003      	beq.n	80036d6 <TIM_OC1_SetConfig+0x76>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a25      	ldr	r2, [pc, #148]	; (8003768 <TIM_OC1_SetConfig+0x108>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d10c      	bne.n	80036f0 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036d6:	697b      	ldr	r3, [r7, #20]
 80036d8:	2208      	movs	r2, #8
 80036da:	4393      	bics	r3, r2
 80036dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	68db      	ldr	r3, [r3, #12]
 80036e2:	697a      	ldr	r2, [r7, #20]
 80036e4:	4313      	orrs	r3, r2
 80036e6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036e8:	697b      	ldr	r3, [r7, #20]
 80036ea:	2204      	movs	r2, #4
 80036ec:	4393      	bics	r3, r2
 80036ee:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	4a1a      	ldr	r2, [pc, #104]	; (800375c <TIM_OC1_SetConfig+0xfc>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d00b      	beq.n	8003710 <TIM_OC1_SetConfig+0xb0>
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	4a19      	ldr	r2, [pc, #100]	; (8003760 <TIM_OC1_SetConfig+0x100>)
 80036fc:	4293      	cmp	r3, r2
 80036fe:	d007      	beq.n	8003710 <TIM_OC1_SetConfig+0xb0>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	4a18      	ldr	r2, [pc, #96]	; (8003764 <TIM_OC1_SetConfig+0x104>)
 8003704:	4293      	cmp	r3, r2
 8003706:	d003      	beq.n	8003710 <TIM_OC1_SetConfig+0xb0>
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	4a17      	ldr	r2, [pc, #92]	; (8003768 <TIM_OC1_SetConfig+0x108>)
 800370c:	4293      	cmp	r3, r2
 800370e:	d111      	bne.n	8003734 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4a16      	ldr	r2, [pc, #88]	; (800376c <TIM_OC1_SetConfig+0x10c>)
 8003714:	4013      	ands	r3, r2
 8003716:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003718:	693b      	ldr	r3, [r7, #16]
 800371a:	4a15      	ldr	r2, [pc, #84]	; (8003770 <TIM_OC1_SetConfig+0x110>)
 800371c:	4013      	ands	r3, r2
 800371e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8003720:	683b      	ldr	r3, [r7, #0]
 8003722:	695b      	ldr	r3, [r3, #20]
 8003724:	693a      	ldr	r2, [r7, #16]
 8003726:	4313      	orrs	r3, r2
 8003728:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	699b      	ldr	r3, [r3, #24]
 800372e:	693a      	ldr	r2, [r7, #16]
 8003730:	4313      	orrs	r3, r2
 8003732:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	693a      	ldr	r2, [r7, #16]
 8003738:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	68fa      	ldr	r2, [r7, #12]
 800373e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	685a      	ldr	r2, [r3, #4]
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	697a      	ldr	r2, [r7, #20]
 800374c:	621a      	str	r2, [r3, #32]
}
 800374e:	46c0      	nop			; (mov r8, r8)
 8003750:	46bd      	mov	sp, r7
 8003752:	b006      	add	sp, #24
 8003754:	bd80      	pop	{r7, pc}
 8003756:	46c0      	nop			; (mov r8, r8)
 8003758:	fffeff8f 	.word	0xfffeff8f
 800375c:	40012c00 	.word	0x40012c00
 8003760:	40014000 	.word	0x40014000
 8003764:	40014400 	.word	0x40014400
 8003768:	40014800 	.word	0x40014800
 800376c:	fffffeff 	.word	0xfffffeff
 8003770:	fffffdff 	.word	0xfffffdff

08003774 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003774:	b580      	push	{r7, lr}
 8003776:	b086      	sub	sp, #24
 8003778:	af00      	add	r7, sp, #0
 800377a:	6078      	str	r0, [r7, #4]
 800377c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	6a1b      	ldr	r3, [r3, #32]
 8003782:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	6a1b      	ldr	r3, [r3, #32]
 8003788:	2210      	movs	r2, #16
 800378a:	4393      	bics	r3, r2
 800378c:	001a      	movs	r2, r3
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	699b      	ldr	r3, [r3, #24]
 800379c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	4a2e      	ldr	r2, [pc, #184]	; (800385c <TIM_OC2_SetConfig+0xe8>)
 80037a2:	4013      	ands	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	4a2d      	ldr	r2, [pc, #180]	; (8003860 <TIM_OC2_SetConfig+0xec>)
 80037aa:	4013      	ands	r3, r2
 80037ac:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	021b      	lsls	r3, r3, #8
 80037b4:	68fa      	ldr	r2, [r7, #12]
 80037b6:	4313      	orrs	r3, r2
 80037b8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80037ba:	697b      	ldr	r3, [r7, #20]
 80037bc:	2220      	movs	r2, #32
 80037be:	4393      	bics	r3, r2
 80037c0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	689b      	ldr	r3, [r3, #8]
 80037c6:	011b      	lsls	r3, r3, #4
 80037c8:	697a      	ldr	r2, [r7, #20]
 80037ca:	4313      	orrs	r3, r2
 80037cc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	4a24      	ldr	r2, [pc, #144]	; (8003864 <TIM_OC2_SetConfig+0xf0>)
 80037d2:	4293      	cmp	r3, r2
 80037d4:	d10d      	bne.n	80037f2 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037d6:	697b      	ldr	r3, [r7, #20]
 80037d8:	2280      	movs	r2, #128	; 0x80
 80037da:	4393      	bics	r3, r2
 80037dc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037de:	683b      	ldr	r3, [r7, #0]
 80037e0:	68db      	ldr	r3, [r3, #12]
 80037e2:	011b      	lsls	r3, r3, #4
 80037e4:	697a      	ldr	r2, [r7, #20]
 80037e6:	4313      	orrs	r3, r2
 80037e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037ea:	697b      	ldr	r3, [r7, #20]
 80037ec:	2240      	movs	r2, #64	; 0x40
 80037ee:	4393      	bics	r3, r2
 80037f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	4a1b      	ldr	r2, [pc, #108]	; (8003864 <TIM_OC2_SetConfig+0xf0>)
 80037f6:	4293      	cmp	r3, r2
 80037f8:	d00b      	beq.n	8003812 <TIM_OC2_SetConfig+0x9e>
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	4a1a      	ldr	r2, [pc, #104]	; (8003868 <TIM_OC2_SetConfig+0xf4>)
 80037fe:	4293      	cmp	r3, r2
 8003800:	d007      	beq.n	8003812 <TIM_OC2_SetConfig+0x9e>
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	4a19      	ldr	r2, [pc, #100]	; (800386c <TIM_OC2_SetConfig+0xf8>)
 8003806:	4293      	cmp	r3, r2
 8003808:	d003      	beq.n	8003812 <TIM_OC2_SetConfig+0x9e>
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	4a18      	ldr	r2, [pc, #96]	; (8003870 <TIM_OC2_SetConfig+0xfc>)
 800380e:	4293      	cmp	r3, r2
 8003810:	d113      	bne.n	800383a <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	4a17      	ldr	r2, [pc, #92]	; (8003874 <TIM_OC2_SetConfig+0x100>)
 8003816:	4013      	ands	r3, r2
 8003818:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800381a:	693b      	ldr	r3, [r7, #16]
 800381c:	4a16      	ldr	r2, [pc, #88]	; (8003878 <TIM_OC2_SetConfig+0x104>)
 800381e:	4013      	ands	r3, r2
 8003820:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	695b      	ldr	r3, [r3, #20]
 8003826:	009b      	lsls	r3, r3, #2
 8003828:	693a      	ldr	r2, [r7, #16]
 800382a:	4313      	orrs	r3, r2
 800382c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800382e:	683b      	ldr	r3, [r7, #0]
 8003830:	699b      	ldr	r3, [r3, #24]
 8003832:	009b      	lsls	r3, r3, #2
 8003834:	693a      	ldr	r2, [r7, #16]
 8003836:	4313      	orrs	r3, r2
 8003838:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	693a      	ldr	r2, [r7, #16]
 800383e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	68fa      	ldr	r2, [r7, #12]
 8003844:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003846:	683b      	ldr	r3, [r7, #0]
 8003848:	685a      	ldr	r2, [r3, #4]
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	697a      	ldr	r2, [r7, #20]
 8003852:	621a      	str	r2, [r3, #32]
}
 8003854:	46c0      	nop			; (mov r8, r8)
 8003856:	46bd      	mov	sp, r7
 8003858:	b006      	add	sp, #24
 800385a:	bd80      	pop	{r7, pc}
 800385c:	feff8fff 	.word	0xfeff8fff
 8003860:	fffffcff 	.word	0xfffffcff
 8003864:	40012c00 	.word	0x40012c00
 8003868:	40014000 	.word	0x40014000
 800386c:	40014400 	.word	0x40014400
 8003870:	40014800 	.word	0x40014800
 8003874:	fffffbff 	.word	0xfffffbff
 8003878:	fffff7ff 	.word	0xfffff7ff

0800387c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	b086      	sub	sp, #24
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
 8003884:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	6a1b      	ldr	r3, [r3, #32]
 800388a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	6a1b      	ldr	r3, [r3, #32]
 8003890:	4a33      	ldr	r2, [pc, #204]	; (8003960 <TIM_OC3_SetConfig+0xe4>)
 8003892:	401a      	ands	r2, r3
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	685b      	ldr	r3, [r3, #4]
 800389c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	69db      	ldr	r3, [r3, #28]
 80038a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	4a2f      	ldr	r2, [pc, #188]	; (8003964 <TIM_OC3_SetConfig+0xe8>)
 80038a8:	4013      	ands	r3, r2
 80038aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	2203      	movs	r2, #3
 80038b0:	4393      	bics	r3, r2
 80038b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80038b4:	683b      	ldr	r3, [r7, #0]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	68fa      	ldr	r2, [r7, #12]
 80038ba:	4313      	orrs	r3, r2
 80038bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80038be:	697b      	ldr	r3, [r7, #20]
 80038c0:	4a29      	ldr	r2, [pc, #164]	; (8003968 <TIM_OC3_SetConfig+0xec>)
 80038c2:	4013      	ands	r3, r2
 80038c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80038c6:	683b      	ldr	r3, [r7, #0]
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	021b      	lsls	r3, r3, #8
 80038cc:	697a      	ldr	r2, [r7, #20]
 80038ce:	4313      	orrs	r3, r2
 80038d0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	4a25      	ldr	r2, [pc, #148]	; (800396c <TIM_OC3_SetConfig+0xf0>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d10d      	bne.n	80038f6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80038da:	697b      	ldr	r3, [r7, #20]
 80038dc:	4a24      	ldr	r2, [pc, #144]	; (8003970 <TIM_OC3_SetConfig+0xf4>)
 80038de:	4013      	ands	r3, r2
 80038e0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80038e2:	683b      	ldr	r3, [r7, #0]
 80038e4:	68db      	ldr	r3, [r3, #12]
 80038e6:	021b      	lsls	r3, r3, #8
 80038e8:	697a      	ldr	r2, [r7, #20]
 80038ea:	4313      	orrs	r3, r2
 80038ec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80038ee:	697b      	ldr	r3, [r7, #20]
 80038f0:	4a20      	ldr	r2, [pc, #128]	; (8003974 <TIM_OC3_SetConfig+0xf8>)
 80038f2:	4013      	ands	r3, r2
 80038f4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a1c      	ldr	r2, [pc, #112]	; (800396c <TIM_OC3_SetConfig+0xf0>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d00b      	beq.n	8003916 <TIM_OC3_SetConfig+0x9a>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	4a1d      	ldr	r2, [pc, #116]	; (8003978 <TIM_OC3_SetConfig+0xfc>)
 8003902:	4293      	cmp	r3, r2
 8003904:	d007      	beq.n	8003916 <TIM_OC3_SetConfig+0x9a>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a1c      	ldr	r2, [pc, #112]	; (800397c <TIM_OC3_SetConfig+0x100>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d003      	beq.n	8003916 <TIM_OC3_SetConfig+0x9a>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a1b      	ldr	r2, [pc, #108]	; (8003980 <TIM_OC3_SetConfig+0x104>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d113      	bne.n	800393e <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8003916:	693b      	ldr	r3, [r7, #16]
 8003918:	4a1a      	ldr	r2, [pc, #104]	; (8003984 <TIM_OC3_SetConfig+0x108>)
 800391a:	4013      	ands	r3, r2
 800391c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800391e:	693b      	ldr	r3, [r7, #16]
 8003920:	4a19      	ldr	r2, [pc, #100]	; (8003988 <TIM_OC3_SetConfig+0x10c>)
 8003922:	4013      	ands	r3, r2
 8003924:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8003926:	683b      	ldr	r3, [r7, #0]
 8003928:	695b      	ldr	r3, [r3, #20]
 800392a:	011b      	lsls	r3, r3, #4
 800392c:	693a      	ldr	r2, [r7, #16]
 800392e:	4313      	orrs	r3, r2
 8003930:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	699b      	ldr	r3, [r3, #24]
 8003936:	011b      	lsls	r3, r3, #4
 8003938:	693a      	ldr	r2, [r7, #16]
 800393a:	4313      	orrs	r3, r2
 800393c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	693a      	ldr	r2, [r7, #16]
 8003942:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	68fa      	ldr	r2, [r7, #12]
 8003948:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	685a      	ldr	r2, [r3, #4]
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	697a      	ldr	r2, [r7, #20]
 8003956:	621a      	str	r2, [r3, #32]
}
 8003958:	46c0      	nop			; (mov r8, r8)
 800395a:	46bd      	mov	sp, r7
 800395c:	b006      	add	sp, #24
 800395e:	bd80      	pop	{r7, pc}
 8003960:	fffffeff 	.word	0xfffffeff
 8003964:	fffeff8f 	.word	0xfffeff8f
 8003968:	fffffdff 	.word	0xfffffdff
 800396c:	40012c00 	.word	0x40012c00
 8003970:	fffff7ff 	.word	0xfffff7ff
 8003974:	fffffbff 	.word	0xfffffbff
 8003978:	40014000 	.word	0x40014000
 800397c:	40014400 	.word	0x40014400
 8003980:	40014800 	.word	0x40014800
 8003984:	ffffefff 	.word	0xffffefff
 8003988:	ffffdfff 	.word	0xffffdfff

0800398c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800398c:	b580      	push	{r7, lr}
 800398e:	b086      	sub	sp, #24
 8003990:	af00      	add	r7, sp, #0
 8003992:	6078      	str	r0, [r7, #4]
 8003994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	6a1b      	ldr	r3, [r3, #32]
 800399a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6a1b      	ldr	r3, [r3, #32]
 80039a0:	4a26      	ldr	r2, [pc, #152]	; (8003a3c <TIM_OC4_SetConfig+0xb0>)
 80039a2:	401a      	ands	r2, r3
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69db      	ldr	r3, [r3, #28]
 80039b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039b4:	68fb      	ldr	r3, [r7, #12]
 80039b6:	4a22      	ldr	r2, [pc, #136]	; (8003a40 <TIM_OC4_SetConfig+0xb4>)
 80039b8:	4013      	ands	r3, r2
 80039ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	4a21      	ldr	r2, [pc, #132]	; (8003a44 <TIM_OC4_SetConfig+0xb8>)
 80039c0:	4013      	ands	r3, r2
 80039c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039c4:	683b      	ldr	r3, [r7, #0]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	021b      	lsls	r3, r3, #8
 80039ca:	68fa      	ldr	r2, [r7, #12]
 80039cc:	4313      	orrs	r3, r2
 80039ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039d0:	693b      	ldr	r3, [r7, #16]
 80039d2:	4a1d      	ldr	r2, [pc, #116]	; (8003a48 <TIM_OC4_SetConfig+0xbc>)
 80039d4:	4013      	ands	r3, r2
 80039d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	689b      	ldr	r3, [r3, #8]
 80039dc:	031b      	lsls	r3, r3, #12
 80039de:	693a      	ldr	r2, [r7, #16]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	4a19      	ldr	r2, [pc, #100]	; (8003a4c <TIM_OC4_SetConfig+0xc0>)
 80039e8:	4293      	cmp	r3, r2
 80039ea:	d00b      	beq.n	8003a04 <TIM_OC4_SetConfig+0x78>
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	4a18      	ldr	r2, [pc, #96]	; (8003a50 <TIM_OC4_SetConfig+0xc4>)
 80039f0:	4293      	cmp	r3, r2
 80039f2:	d007      	beq.n	8003a04 <TIM_OC4_SetConfig+0x78>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	4a17      	ldr	r2, [pc, #92]	; (8003a54 <TIM_OC4_SetConfig+0xc8>)
 80039f8:	4293      	cmp	r3, r2
 80039fa:	d003      	beq.n	8003a04 <TIM_OC4_SetConfig+0x78>
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	4a16      	ldr	r2, [pc, #88]	; (8003a58 <TIM_OC4_SetConfig+0xcc>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d109      	bne.n	8003a18 <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a04:	697b      	ldr	r3, [r7, #20]
 8003a06:	4a15      	ldr	r2, [pc, #84]	; (8003a5c <TIM_OC4_SetConfig+0xd0>)
 8003a08:	4013      	ands	r3, r2
 8003a0a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a0c:	683b      	ldr	r3, [r7, #0]
 8003a0e:	695b      	ldr	r3, [r3, #20]
 8003a10:	019b      	lsls	r3, r3, #6
 8003a12:	697a      	ldr	r2, [r7, #20]
 8003a14:	4313      	orrs	r3, r2
 8003a16:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	697a      	ldr	r2, [r7, #20]
 8003a1c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	68fa      	ldr	r2, [r7, #12]
 8003a22:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a24:	683b      	ldr	r3, [r7, #0]
 8003a26:	685a      	ldr	r2, [r3, #4]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	621a      	str	r2, [r3, #32]
}
 8003a32:	46c0      	nop			; (mov r8, r8)
 8003a34:	46bd      	mov	sp, r7
 8003a36:	b006      	add	sp, #24
 8003a38:	bd80      	pop	{r7, pc}
 8003a3a:	46c0      	nop			; (mov r8, r8)
 8003a3c:	ffffefff 	.word	0xffffefff
 8003a40:	feff8fff 	.word	0xfeff8fff
 8003a44:	fffffcff 	.word	0xfffffcff
 8003a48:	ffffdfff 	.word	0xffffdfff
 8003a4c:	40012c00 	.word	0x40012c00
 8003a50:	40014000 	.word	0x40014000
 8003a54:	40014400 	.word	0x40014400
 8003a58:	40014800 	.word	0x40014800
 8003a5c:	ffffbfff 	.word	0xffffbfff

08003a60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b086      	sub	sp, #24
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
 8003a68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	6a1b      	ldr	r3, [r3, #32]
 8003a6e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8003a70:	687b      	ldr	r3, [r7, #4]
 8003a72:	6a1b      	ldr	r3, [r3, #32]
 8003a74:	4a23      	ldr	r2, [pc, #140]	; (8003b04 <TIM_OC5_SetConfig+0xa4>)
 8003a76:	401a      	ands	r2, r3
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	685b      	ldr	r3, [r3, #4]
 8003a80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003a86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	4a1f      	ldr	r2, [pc, #124]	; (8003b08 <TIM_OC5_SetConfig+0xa8>)
 8003a8c:	4013      	ands	r3, r2
 8003a8e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003a90:	683b      	ldr	r3, [r7, #0]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	68fa      	ldr	r2, [r7, #12]
 8003a96:	4313      	orrs	r3, r2
 8003a98:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8003a9a:	693b      	ldr	r3, [r7, #16]
 8003a9c:	4a1b      	ldr	r2, [pc, #108]	; (8003b0c <TIM_OC5_SetConfig+0xac>)
 8003a9e:	4013      	ands	r3, r2
 8003aa0:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8003aa2:	683b      	ldr	r3, [r7, #0]
 8003aa4:	689b      	ldr	r3, [r3, #8]
 8003aa6:	041b      	lsls	r3, r3, #16
 8003aa8:	693a      	ldr	r2, [r7, #16]
 8003aaa:	4313      	orrs	r3, r2
 8003aac:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a17      	ldr	r2, [pc, #92]	; (8003b10 <TIM_OC5_SetConfig+0xb0>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d00b      	beq.n	8003ace <TIM_OC5_SetConfig+0x6e>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a16      	ldr	r2, [pc, #88]	; (8003b14 <TIM_OC5_SetConfig+0xb4>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d007      	beq.n	8003ace <TIM_OC5_SetConfig+0x6e>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a15      	ldr	r2, [pc, #84]	; (8003b18 <TIM_OC5_SetConfig+0xb8>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d003      	beq.n	8003ace <TIM_OC5_SetConfig+0x6e>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a14      	ldr	r2, [pc, #80]	; (8003b1c <TIM_OC5_SetConfig+0xbc>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d109      	bne.n	8003ae2 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8003ace:	697b      	ldr	r3, [r7, #20]
 8003ad0:	4a0c      	ldr	r2, [pc, #48]	; (8003b04 <TIM_OC5_SetConfig+0xa4>)
 8003ad2:	4013      	ands	r3, r2
 8003ad4:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8003ad6:	683b      	ldr	r3, [r7, #0]
 8003ad8:	695b      	ldr	r3, [r3, #20]
 8003ada:	021b      	lsls	r3, r3, #8
 8003adc:	697a      	ldr	r2, [r7, #20]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	685a      	ldr	r2, [r3, #4]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	693a      	ldr	r2, [r7, #16]
 8003afa:	621a      	str	r2, [r3, #32]
}
 8003afc:	46c0      	nop			; (mov r8, r8)
 8003afe:	46bd      	mov	sp, r7
 8003b00:	b006      	add	sp, #24
 8003b02:	bd80      	pop	{r7, pc}
 8003b04:	fffeffff 	.word	0xfffeffff
 8003b08:	fffeff8f 	.word	0xfffeff8f
 8003b0c:	fffdffff 	.word	0xfffdffff
 8003b10:	40012c00 	.word	0x40012c00
 8003b14:	40014000 	.word	0x40014000
 8003b18:	40014400 	.word	0x40014400
 8003b1c:	40014800 	.word	0x40014800

08003b20 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
 8003b28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	6a1b      	ldr	r3, [r3, #32]
 8003b2e:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	6a1b      	ldr	r3, [r3, #32]
 8003b34:	4a24      	ldr	r2, [pc, #144]	; (8003bc8 <TIM_OC6_SetConfig+0xa8>)
 8003b36:	401a      	ands	r2, r3
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	685b      	ldr	r3, [r3, #4]
 8003b40:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8003b42:	687b      	ldr	r3, [r7, #4]
 8003b44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	4a20      	ldr	r2, [pc, #128]	; (8003bcc <TIM_OC6_SetConfig+0xac>)
 8003b4c:	4013      	ands	r3, r2
 8003b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003b50:	683b      	ldr	r3, [r7, #0]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	021b      	lsls	r3, r3, #8
 8003b56:	68fa      	ldr	r2, [r7, #12]
 8003b58:	4313      	orrs	r3, r2
 8003b5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8003b5c:	693b      	ldr	r3, [r7, #16]
 8003b5e:	4a1c      	ldr	r2, [pc, #112]	; (8003bd0 <TIM_OC6_SetConfig+0xb0>)
 8003b60:	4013      	ands	r3, r2
 8003b62:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8003b64:	683b      	ldr	r3, [r7, #0]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	051b      	lsls	r3, r3, #20
 8003b6a:	693a      	ldr	r2, [r7, #16]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	4a18      	ldr	r2, [pc, #96]	; (8003bd4 <TIM_OC6_SetConfig+0xb4>)
 8003b74:	4293      	cmp	r3, r2
 8003b76:	d00b      	beq.n	8003b90 <TIM_OC6_SetConfig+0x70>
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	4a17      	ldr	r2, [pc, #92]	; (8003bd8 <TIM_OC6_SetConfig+0xb8>)
 8003b7c:	4293      	cmp	r3, r2
 8003b7e:	d007      	beq.n	8003b90 <TIM_OC6_SetConfig+0x70>
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	4a16      	ldr	r2, [pc, #88]	; (8003bdc <TIM_OC6_SetConfig+0xbc>)
 8003b84:	4293      	cmp	r3, r2
 8003b86:	d003      	beq.n	8003b90 <TIM_OC6_SetConfig+0x70>
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	4a15      	ldr	r2, [pc, #84]	; (8003be0 <TIM_OC6_SetConfig+0xc0>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d109      	bne.n	8003ba4 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8003b90:	697b      	ldr	r3, [r7, #20]
 8003b92:	4a14      	ldr	r2, [pc, #80]	; (8003be4 <TIM_OC6_SetConfig+0xc4>)
 8003b94:	4013      	ands	r3, r2
 8003b96:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8003b98:	683b      	ldr	r3, [r7, #0]
 8003b9a:	695b      	ldr	r3, [r3, #20]
 8003b9c:	029b      	lsls	r3, r3, #10
 8003b9e:	697a      	ldr	r2, [r7, #20]
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	697a      	ldr	r2, [r7, #20]
 8003ba8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	68fa      	ldr	r2, [r7, #12]
 8003bae:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8003bb0:	683b      	ldr	r3, [r7, #0]
 8003bb2:	685a      	ldr	r2, [r3, #4]
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	693a      	ldr	r2, [r7, #16]
 8003bbc:	621a      	str	r2, [r3, #32]
}
 8003bbe:	46c0      	nop			; (mov r8, r8)
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	b006      	add	sp, #24
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	46c0      	nop			; (mov r8, r8)
 8003bc8:	ffefffff 	.word	0xffefffff
 8003bcc:	feff8fff 	.word	0xfeff8fff
 8003bd0:	ffdfffff 	.word	0xffdfffff
 8003bd4:	40012c00 	.word	0x40012c00
 8003bd8:	40014000 	.word	0x40014000
 8003bdc:	40014400 	.word	0x40014400
 8003be0:	40014800 	.word	0x40014800
 8003be4:	fffbffff 	.word	0xfffbffff

08003be8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be8:	b580      	push	{r7, lr}
 8003bea:	b086      	sub	sp, #24
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	2201      	movs	r2, #1
 8003c00:	4393      	bics	r3, r2
 8003c02:	001a      	movs	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c08:	68fb      	ldr	r3, [r7, #12]
 8003c0a:	699b      	ldr	r3, [r3, #24]
 8003c0c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	22f0      	movs	r2, #240	; 0xf0
 8003c12:	4393      	bics	r3, r2
 8003c14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	011b      	lsls	r3, r3, #4
 8003c1a:	693a      	ldr	r2, [r7, #16]
 8003c1c:	4313      	orrs	r3, r2
 8003c1e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003c20:	697b      	ldr	r3, [r7, #20]
 8003c22:	220a      	movs	r2, #10
 8003c24:	4393      	bics	r3, r2
 8003c26:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003c28:	697a      	ldr	r2, [r7, #20]
 8003c2a:	68bb      	ldr	r3, [r7, #8]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	46c0      	nop			; (mov r8, r8)
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	b006      	add	sp, #24
 8003c42:	bd80      	pop	{r7, pc}

08003c44 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b086      	sub	sp, #24
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	60f8      	str	r0, [r7, #12]
 8003c4c:	60b9      	str	r1, [r7, #8]
 8003c4e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	6a1b      	ldr	r3, [r3, #32]
 8003c54:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	2210      	movs	r2, #16
 8003c5c:	4393      	bics	r3, r2
 8003c5e:	001a      	movs	r2, r3
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	699b      	ldr	r3, [r3, #24]
 8003c68:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c6a:	693b      	ldr	r3, [r7, #16]
 8003c6c:	4a0d      	ldr	r2, [pc, #52]	; (8003ca4 <TIM_TI2_ConfigInputStage+0x60>)
 8003c6e:	4013      	ands	r3, r2
 8003c70:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	031b      	lsls	r3, r3, #12
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	4313      	orrs	r3, r2
 8003c7a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c7c:	697b      	ldr	r3, [r7, #20]
 8003c7e:	22a0      	movs	r2, #160	; 0xa0
 8003c80:	4393      	bics	r3, r2
 8003c82:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c84:	68bb      	ldr	r3, [r7, #8]
 8003c86:	011b      	lsls	r3, r3, #4
 8003c88:	697a      	ldr	r2, [r7, #20]
 8003c8a:	4313      	orrs	r3, r2
 8003c8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	693a      	ldr	r2, [r7, #16]
 8003c92:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	697a      	ldr	r2, [r7, #20]
 8003c98:	621a      	str	r2, [r3, #32]
}
 8003c9a:	46c0      	nop			; (mov r8, r8)
 8003c9c:	46bd      	mov	sp, r7
 8003c9e:	b006      	add	sp, #24
 8003ca0:	bd80      	pop	{r7, pc}
 8003ca2:	46c0      	nop			; (mov r8, r8)
 8003ca4:	ffff0fff 	.word	0xffff0fff

08003ca8 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003ca8:	b580      	push	{r7, lr}
 8003caa:	b084      	sub	sp, #16
 8003cac:	af00      	add	r7, sp, #0
 8003cae:	6078      	str	r0, [r7, #4]
 8003cb0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	689b      	ldr	r3, [r3, #8]
 8003cb6:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	4a08      	ldr	r2, [pc, #32]	; (8003cdc <TIM_ITRx_SetConfig+0x34>)
 8003cbc:	4013      	ands	r3, r2
 8003cbe:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003cc0:	683a      	ldr	r2, [r7, #0]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	4313      	orrs	r3, r2
 8003cc6:	2207      	movs	r2, #7
 8003cc8:	4313      	orrs	r3, r2
 8003cca:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	68fa      	ldr	r2, [r7, #12]
 8003cd0:	609a      	str	r2, [r3, #8]
}
 8003cd2:	46c0      	nop			; (mov r8, r8)
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	b004      	add	sp, #16
 8003cd8:	bd80      	pop	{r7, pc}
 8003cda:	46c0      	nop			; (mov r8, r8)
 8003cdc:	ffcfff8f 	.word	0xffcfff8f

08003ce0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af00      	add	r7, sp, #0
 8003ce6:	60f8      	str	r0, [r7, #12]
 8003ce8:	60b9      	str	r1, [r7, #8]
 8003cea:	607a      	str	r2, [r7, #4]
 8003cec:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003cf4:	697b      	ldr	r3, [r7, #20]
 8003cf6:	4a09      	ldr	r2, [pc, #36]	; (8003d1c <TIM_ETR_SetConfig+0x3c>)
 8003cf8:	4013      	ands	r3, r2
 8003cfa:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	021a      	lsls	r2, r3, #8
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	431a      	orrs	r2, r3
 8003d04:	68bb      	ldr	r3, [r7, #8]
 8003d06:	4313      	orrs	r3, r2
 8003d08:	697a      	ldr	r2, [r7, #20]
 8003d0a:	4313      	orrs	r3, r2
 8003d0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	697a      	ldr	r2, [r7, #20]
 8003d12:	609a      	str	r2, [r3, #8]
}
 8003d14:	46c0      	nop			; (mov r8, r8)
 8003d16:	46bd      	mov	sp, r7
 8003d18:	b006      	add	sp, #24
 8003d1a:	bd80      	pop	{r7, pc}
 8003d1c:	ffff00ff 	.word	0xffff00ff

08003d20 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b086      	sub	sp, #24
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	60f8      	str	r0, [r7, #12]
 8003d28:	60b9      	str	r1, [r7, #8]
 8003d2a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003d2c:	68bb      	ldr	r3, [r7, #8]
 8003d2e:	221f      	movs	r2, #31
 8003d30:	4013      	ands	r3, r2
 8003d32:	2201      	movs	r2, #1
 8003d34:	409a      	lsls	r2, r3
 8003d36:	0013      	movs	r3, r2
 8003d38:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	6a1b      	ldr	r3, [r3, #32]
 8003d3e:	697a      	ldr	r2, [r7, #20]
 8003d40:	43d2      	mvns	r2, r2
 8003d42:	401a      	ands	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	6a1a      	ldr	r2, [r3, #32]
 8003d4c:	68bb      	ldr	r3, [r7, #8]
 8003d4e:	211f      	movs	r1, #31
 8003d50:	400b      	ands	r3, r1
 8003d52:	6879      	ldr	r1, [r7, #4]
 8003d54:	4099      	lsls	r1, r3
 8003d56:	000b      	movs	r3, r1
 8003d58:	431a      	orrs	r2, r3
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	621a      	str	r2, [r3, #32]
}
 8003d5e:	46c0      	nop			; (mov r8, r8)
 8003d60:	46bd      	mov	sp, r7
 8003d62:	b006      	add	sp, #24
 8003d64:	bd80      	pop	{r7, pc}
	...

08003d68 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003d68:	b580      	push	{r7, lr}
 8003d6a:	b084      	sub	sp, #16
 8003d6c:	af00      	add	r7, sp, #0
 8003d6e:	6078      	str	r0, [r7, #4]
 8003d70:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	223c      	movs	r2, #60	; 0x3c
 8003d76:	5c9b      	ldrb	r3, [r3, r2]
 8003d78:	2b01      	cmp	r3, #1
 8003d7a:	d101      	bne.n	8003d80 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003d7c:	2302      	movs	r3, #2
 8003d7e:	e05a      	b.n	8003e36 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	223c      	movs	r2, #60	; 0x3c
 8003d84:	2101      	movs	r1, #1
 8003d86:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	223d      	movs	r2, #61	; 0x3d
 8003d8c:	2102      	movs	r1, #2
 8003d8e:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	685b      	ldr	r3, [r3, #4]
 8003d96:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	689b      	ldr	r3, [r3, #8]
 8003d9e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	4a26      	ldr	r2, [pc, #152]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003da6:	4293      	cmp	r3, r2
 8003da8:	d108      	bne.n	8003dbc <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	4a25      	ldr	r2, [pc, #148]	; (8003e44 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003dae:	4013      	ands	r3, r2
 8003db0:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003db2:	683b      	ldr	r3, [r7, #0]
 8003db4:	685b      	ldr	r3, [r3, #4]
 8003db6:	68fa      	ldr	r2, [r7, #12]
 8003db8:	4313      	orrs	r3, r2
 8003dba:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	2270      	movs	r2, #112	; 0x70
 8003dc0:	4393      	bics	r3, r2
 8003dc2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003dc4:	683b      	ldr	r3, [r7, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	68fa      	ldr	r2, [r7, #12]
 8003dca:	4313      	orrs	r3, r2
 8003dcc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	681b      	ldr	r3, [r3, #0]
 8003dd2:	68fa      	ldr	r2, [r7, #12]
 8003dd4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	4a19      	ldr	r2, [pc, #100]	; (8003e40 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003ddc:	4293      	cmp	r3, r2
 8003dde:	d014      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	681a      	ldr	r2, [r3, #0]
 8003de4:	2380      	movs	r3, #128	; 0x80
 8003de6:	05db      	lsls	r3, r3, #23
 8003de8:	429a      	cmp	r2, r3
 8003dea:	d00e      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a15      	ldr	r2, [pc, #84]	; (8003e48 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003df2:	4293      	cmp	r3, r2
 8003df4:	d009      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	4a14      	ldr	r2, [pc, #80]	; (8003e4c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003dfc:	4293      	cmp	r3, r2
 8003dfe:	d004      	beq.n	8003e0a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	4a12      	ldr	r2, [pc, #72]	; (8003e50 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003e06:	4293      	cmp	r3, r2
 8003e08:	d10c      	bne.n	8003e24 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e0a:	68bb      	ldr	r3, [r7, #8]
 8003e0c:	2280      	movs	r2, #128	; 0x80
 8003e0e:	4393      	bics	r3, r2
 8003e10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e12:	683b      	ldr	r3, [r7, #0]
 8003e14:	689b      	ldr	r3, [r3, #8]
 8003e16:	68ba      	ldr	r2, [r7, #8]
 8003e18:	4313      	orrs	r3, r2
 8003e1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	68ba      	ldr	r2, [r7, #8]
 8003e22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	223d      	movs	r2, #61	; 0x3d
 8003e28:	2101      	movs	r1, #1
 8003e2a:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	223c      	movs	r2, #60	; 0x3c
 8003e30:	2100      	movs	r1, #0
 8003e32:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003e34:	2300      	movs	r3, #0
}
 8003e36:	0018      	movs	r0, r3
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	b004      	add	sp, #16
 8003e3c:	bd80      	pop	{r7, pc}
 8003e3e:	46c0      	nop			; (mov r8, r8)
 8003e40:	40012c00 	.word	0x40012c00
 8003e44:	ff0fffff 	.word	0xff0fffff
 8003e48:	40000400 	.word	0x40000400
 8003e4c:	40000800 	.word	0x40000800
 8003e50:	40014000 	.word	0x40014000

08003e54 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b084      	sub	sp, #16
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	6078      	str	r0, [r7, #4]
 8003e5c:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8003e5e:	2300      	movs	r3, #0
 8003e60:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	223c      	movs	r2, #60	; 0x3c
 8003e66:	5c9b      	ldrb	r3, [r3, r2]
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d101      	bne.n	8003e70 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8003e6c:	2302      	movs	r3, #2
 8003e6e:	e06f      	b.n	8003f50 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	223c      	movs	r2, #60	; 0x3c
 8003e74:	2101      	movs	r1, #1
 8003e76:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	22ff      	movs	r2, #255	; 0xff
 8003e7c:	4393      	bics	r3, r2
 8003e7e:	001a      	movs	r2, r3
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	68db      	ldr	r3, [r3, #12]
 8003e84:	4313      	orrs	r3, r2
 8003e86:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8003e88:	68fb      	ldr	r3, [r7, #12]
 8003e8a:	4a33      	ldr	r2, [pc, #204]	; (8003f58 <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8003e8c:	401a      	ands	r2, r3
 8003e8e:	683b      	ldr	r3, [r7, #0]
 8003e90:	689b      	ldr	r3, [r3, #8]
 8003e92:	4313      	orrs	r3, r2
 8003e94:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	4a30      	ldr	r2, [pc, #192]	; (8003f5c <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 8003e9a:	401a      	ands	r2, r3
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	685b      	ldr	r3, [r3, #4]
 8003ea0:	4313      	orrs	r3, r2
 8003ea2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	4a2e      	ldr	r2, [pc, #184]	; (8003f60 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 8003ea8:	401a      	ands	r2, r3
 8003eaa:	683b      	ldr	r3, [r7, #0]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4313      	orrs	r3, r2
 8003eb0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	4a2b      	ldr	r2, [pc, #172]	; (8003f64 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 8003eb6:	401a      	ands	r2, r3
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	691b      	ldr	r3, [r3, #16]
 8003ebc:	4313      	orrs	r3, r2
 8003ebe:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	4a29      	ldr	r2, [pc, #164]	; (8003f68 <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8003ec4:	401a      	ands	r2, r3
 8003ec6:	683b      	ldr	r3, [r7, #0]
 8003ec8:	695b      	ldr	r3, [r3, #20]
 8003eca:	4313      	orrs	r3, r2
 8003ecc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	4a26      	ldr	r2, [pc, #152]	; (8003f6c <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8003ed2:	401a      	ands	r2, r3
 8003ed4:	683b      	ldr	r3, [r7, #0]
 8003ed6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ed8:	4313      	orrs	r3, r2
 8003eda:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	4a24      	ldr	r2, [pc, #144]	; (8003f70 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8003ee0:	401a      	ands	r2, r3
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	699b      	ldr	r3, [r3, #24]
 8003ee6:	041b      	lsls	r3, r3, #16
 8003ee8:	4313      	orrs	r3, r2
 8003eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	4a21      	ldr	r2, [pc, #132]	; (8003f74 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8003ef0:	401a      	ands	r2, r3
 8003ef2:	683b      	ldr	r3, [r7, #0]
 8003ef4:	69db      	ldr	r3, [r3, #28]
 8003ef6:	4313      	orrs	r3, r2
 8003ef8:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a1e      	ldr	r2, [pc, #120]	; (8003f78 <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 8003f00:	4293      	cmp	r3, r2
 8003f02:	d11c      	bne.n	8003f3e <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	4a1d      	ldr	r2, [pc, #116]	; (8003f7c <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 8003f08:	401a      	ands	r2, r3
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f0e:	051b      	lsls	r3, r3, #20
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	4a1a      	ldr	r2, [pc, #104]	; (8003f80 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 8003f18:	401a      	ands	r2, r3
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6a1b      	ldr	r3, [r3, #32]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	4a17      	ldr	r2, [pc, #92]	; (8003f84 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 8003f26:	401a      	ands	r2, r3
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f2c:	4313      	orrs	r3, r2
 8003f2e:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	4a15      	ldr	r2, [pc, #84]	; (8003f88 <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 8003f34:	401a      	ands	r2, r3
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f3a:	4313      	orrs	r3, r2
 8003f3c:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	68fa      	ldr	r2, [r7, #12]
 8003f44:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	223c      	movs	r2, #60	; 0x3c
 8003f4a:	2100      	movs	r1, #0
 8003f4c:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8003f4e:	2300      	movs	r3, #0
}
 8003f50:	0018      	movs	r0, r3
 8003f52:	46bd      	mov	sp, r7
 8003f54:	b004      	add	sp, #16
 8003f56:	bd80      	pop	{r7, pc}
 8003f58:	fffffcff 	.word	0xfffffcff
 8003f5c:	fffffbff 	.word	0xfffffbff
 8003f60:	fffff7ff 	.word	0xfffff7ff
 8003f64:	ffffefff 	.word	0xffffefff
 8003f68:	ffffdfff 	.word	0xffffdfff
 8003f6c:	ffffbfff 	.word	0xffffbfff
 8003f70:	fff0ffff 	.word	0xfff0ffff
 8003f74:	efffffff 	.word	0xefffffff
 8003f78:	40012c00 	.word	0x40012c00
 8003f7c:	ff0fffff 	.word	0xff0fffff
 8003f80:	feffffff 	.word	0xfeffffff
 8003f84:	fdffffff 	.word	0xfdffffff
 8003f88:	dfffffff 	.word	0xdfffffff

08003f8c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b580      	push	{r7, lr}
 8003f8e:	b082      	sub	sp, #8
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003f94:	46c0      	nop			; (mov r8, r8)
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b002      	add	sp, #8
 8003f9a:	bd80      	pop	{r7, pc}

08003f9c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	b082      	sub	sp, #8
 8003fa0:	af00      	add	r7, sp, #0
 8003fa2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fa4:	46c0      	nop			; (mov r8, r8)
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	b002      	add	sp, #8
 8003faa:	bd80      	pop	{r7, pc}

08003fac <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003fac:	b580      	push	{r7, lr}
 8003fae:	b082      	sub	sp, #8
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003fb4:	46c0      	nop			; (mov r8, r8)
 8003fb6:	46bd      	mov	sp, r7
 8003fb8:	b002      	add	sp, #8
 8003fba:	bd80      	pop	{r7, pc}

08003fbc <memset>:
 8003fbc:	0003      	movs	r3, r0
 8003fbe:	1882      	adds	r2, r0, r2
 8003fc0:	4293      	cmp	r3, r2
 8003fc2:	d100      	bne.n	8003fc6 <memset+0xa>
 8003fc4:	4770      	bx	lr
 8003fc6:	7019      	strb	r1, [r3, #0]
 8003fc8:	3301      	adds	r3, #1
 8003fca:	e7f9      	b.n	8003fc0 <memset+0x4>

08003fcc <__libc_init_array>:
 8003fcc:	b570      	push	{r4, r5, r6, lr}
 8003fce:	2600      	movs	r6, #0
 8003fd0:	4c0c      	ldr	r4, [pc, #48]	; (8004004 <__libc_init_array+0x38>)
 8003fd2:	4d0d      	ldr	r5, [pc, #52]	; (8004008 <__libc_init_array+0x3c>)
 8003fd4:	1b64      	subs	r4, r4, r5
 8003fd6:	10a4      	asrs	r4, r4, #2
 8003fd8:	42a6      	cmp	r6, r4
 8003fda:	d109      	bne.n	8003ff0 <__libc_init_array+0x24>
 8003fdc:	2600      	movs	r6, #0
 8003fde:	f000 f819 	bl	8004014 <_init>
 8003fe2:	4c0a      	ldr	r4, [pc, #40]	; (800400c <__libc_init_array+0x40>)
 8003fe4:	4d0a      	ldr	r5, [pc, #40]	; (8004010 <__libc_init_array+0x44>)
 8003fe6:	1b64      	subs	r4, r4, r5
 8003fe8:	10a4      	asrs	r4, r4, #2
 8003fea:	42a6      	cmp	r6, r4
 8003fec:	d105      	bne.n	8003ffa <__libc_init_array+0x2e>
 8003fee:	bd70      	pop	{r4, r5, r6, pc}
 8003ff0:	00b3      	lsls	r3, r6, #2
 8003ff2:	58eb      	ldr	r3, [r5, r3]
 8003ff4:	4798      	blx	r3
 8003ff6:	3601      	adds	r6, #1
 8003ff8:	e7ee      	b.n	8003fd8 <__libc_init_array+0xc>
 8003ffa:	00b3      	lsls	r3, r6, #2
 8003ffc:	58eb      	ldr	r3, [r5, r3]
 8003ffe:	4798      	blx	r3
 8004000:	3601      	adds	r6, #1
 8004002:	e7f2      	b.n	8003fea <__libc_init_array+0x1e>
 8004004:	080040c0 	.word	0x080040c0
 8004008:	080040c0 	.word	0x080040c0
 800400c:	080040c4 	.word	0x080040c4
 8004010:	080040c0 	.word	0x080040c0

08004014 <_init>:
 8004014:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004016:	46c0      	nop			; (mov r8, r8)
 8004018:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800401a:	bc08      	pop	{r3}
 800401c:	469e      	mov	lr, r3
 800401e:	4770      	bx	lr

08004020 <_fini>:
 8004020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004022:	46c0      	nop			; (mov r8, r8)
 8004024:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004026:	bc08      	pop	{r3}
 8004028:	469e      	mov	lr, r3
 800402a:	4770      	bx	lr
