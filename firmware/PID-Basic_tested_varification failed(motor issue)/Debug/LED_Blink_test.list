
LED_Blink_test.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000bc  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005414  080000bc  080000bc  000100bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000d4  080054d0  080054d0  000154d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080055a4  080055a4  0002000c  2**0
                  CONTENTS
  4 .ARM          00000000  080055a4  080055a4  0002000c  2**0
                  CONTENTS
  5 .preinit_array 00000000  080055a4  080055a4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055a8  080055a8  000155a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080055ac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000019c  2000000c  080055b8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200001a8  080055b8  000201a8  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020034  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000fea0  00000000  00000000  00020077  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000226e  00000000  00000000  0002ff17  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000010a8  00000000  00000000  00032188  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000d0a  00000000  00000000  00033230  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001d490  00000000  00000000  00033f3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013481  00000000  00000000  000513ca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c2a15  00000000  00000000  0006484b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00003dd4  00000000  00000000  00127260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000009b  00000000  00000000  0012b034  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000bc <__do_global_dtors_aux>:
 80000bc:	b510      	push	{r4, lr}
 80000be:	4c06      	ldr	r4, [pc, #24]	; (80000d8 <__do_global_dtors_aux+0x1c>)
 80000c0:	7823      	ldrb	r3, [r4, #0]
 80000c2:	2b00      	cmp	r3, #0
 80000c4:	d107      	bne.n	80000d6 <__do_global_dtors_aux+0x1a>
 80000c6:	4b05      	ldr	r3, [pc, #20]	; (80000dc <__do_global_dtors_aux+0x20>)
 80000c8:	2b00      	cmp	r3, #0
 80000ca:	d002      	beq.n	80000d2 <__do_global_dtors_aux+0x16>
 80000cc:	4804      	ldr	r0, [pc, #16]	; (80000e0 <__do_global_dtors_aux+0x24>)
 80000ce:	e000      	b.n	80000d2 <__do_global_dtors_aux+0x16>
 80000d0:	bf00      	nop
 80000d2:	2301      	movs	r3, #1
 80000d4:	7023      	strb	r3, [r4, #0]
 80000d6:	bd10      	pop	{r4, pc}
 80000d8:	2000000c 	.word	0x2000000c
 80000dc:	00000000 	.word	0x00000000
 80000e0:	080054b8 	.word	0x080054b8

080000e4 <frame_dummy>:
 80000e4:	4b04      	ldr	r3, [pc, #16]	; (80000f8 <frame_dummy+0x14>)
 80000e6:	b510      	push	{r4, lr}
 80000e8:	2b00      	cmp	r3, #0
 80000ea:	d003      	beq.n	80000f4 <frame_dummy+0x10>
 80000ec:	4903      	ldr	r1, [pc, #12]	; (80000fc <frame_dummy+0x18>)
 80000ee:	4804      	ldr	r0, [pc, #16]	; (8000100 <frame_dummy+0x1c>)
 80000f0:	e000      	b.n	80000f4 <frame_dummy+0x10>
 80000f2:	bf00      	nop
 80000f4:	bd10      	pop	{r4, pc}
 80000f6:	46c0      	nop			; (mov r8, r8)
 80000f8:	00000000 	.word	0x00000000
 80000fc:	20000010 	.word	0x20000010
 8000100:	080054b8 	.word	0x080054b8

08000104 <__udivsi3>:
 8000104:	2200      	movs	r2, #0
 8000106:	0843      	lsrs	r3, r0, #1
 8000108:	428b      	cmp	r3, r1
 800010a:	d374      	bcc.n	80001f6 <__udivsi3+0xf2>
 800010c:	0903      	lsrs	r3, r0, #4
 800010e:	428b      	cmp	r3, r1
 8000110:	d35f      	bcc.n	80001d2 <__udivsi3+0xce>
 8000112:	0a03      	lsrs	r3, r0, #8
 8000114:	428b      	cmp	r3, r1
 8000116:	d344      	bcc.n	80001a2 <__udivsi3+0x9e>
 8000118:	0b03      	lsrs	r3, r0, #12
 800011a:	428b      	cmp	r3, r1
 800011c:	d328      	bcc.n	8000170 <__udivsi3+0x6c>
 800011e:	0c03      	lsrs	r3, r0, #16
 8000120:	428b      	cmp	r3, r1
 8000122:	d30d      	bcc.n	8000140 <__udivsi3+0x3c>
 8000124:	22ff      	movs	r2, #255	; 0xff
 8000126:	0209      	lsls	r1, r1, #8
 8000128:	ba12      	rev	r2, r2
 800012a:	0c03      	lsrs	r3, r0, #16
 800012c:	428b      	cmp	r3, r1
 800012e:	d302      	bcc.n	8000136 <__udivsi3+0x32>
 8000130:	1212      	asrs	r2, r2, #8
 8000132:	0209      	lsls	r1, r1, #8
 8000134:	d065      	beq.n	8000202 <__udivsi3+0xfe>
 8000136:	0b03      	lsrs	r3, r0, #12
 8000138:	428b      	cmp	r3, r1
 800013a:	d319      	bcc.n	8000170 <__udivsi3+0x6c>
 800013c:	e000      	b.n	8000140 <__udivsi3+0x3c>
 800013e:	0a09      	lsrs	r1, r1, #8
 8000140:	0bc3      	lsrs	r3, r0, #15
 8000142:	428b      	cmp	r3, r1
 8000144:	d301      	bcc.n	800014a <__udivsi3+0x46>
 8000146:	03cb      	lsls	r3, r1, #15
 8000148:	1ac0      	subs	r0, r0, r3
 800014a:	4152      	adcs	r2, r2
 800014c:	0b83      	lsrs	r3, r0, #14
 800014e:	428b      	cmp	r3, r1
 8000150:	d301      	bcc.n	8000156 <__udivsi3+0x52>
 8000152:	038b      	lsls	r3, r1, #14
 8000154:	1ac0      	subs	r0, r0, r3
 8000156:	4152      	adcs	r2, r2
 8000158:	0b43      	lsrs	r3, r0, #13
 800015a:	428b      	cmp	r3, r1
 800015c:	d301      	bcc.n	8000162 <__udivsi3+0x5e>
 800015e:	034b      	lsls	r3, r1, #13
 8000160:	1ac0      	subs	r0, r0, r3
 8000162:	4152      	adcs	r2, r2
 8000164:	0b03      	lsrs	r3, r0, #12
 8000166:	428b      	cmp	r3, r1
 8000168:	d301      	bcc.n	800016e <__udivsi3+0x6a>
 800016a:	030b      	lsls	r3, r1, #12
 800016c:	1ac0      	subs	r0, r0, r3
 800016e:	4152      	adcs	r2, r2
 8000170:	0ac3      	lsrs	r3, r0, #11
 8000172:	428b      	cmp	r3, r1
 8000174:	d301      	bcc.n	800017a <__udivsi3+0x76>
 8000176:	02cb      	lsls	r3, r1, #11
 8000178:	1ac0      	subs	r0, r0, r3
 800017a:	4152      	adcs	r2, r2
 800017c:	0a83      	lsrs	r3, r0, #10
 800017e:	428b      	cmp	r3, r1
 8000180:	d301      	bcc.n	8000186 <__udivsi3+0x82>
 8000182:	028b      	lsls	r3, r1, #10
 8000184:	1ac0      	subs	r0, r0, r3
 8000186:	4152      	adcs	r2, r2
 8000188:	0a43      	lsrs	r3, r0, #9
 800018a:	428b      	cmp	r3, r1
 800018c:	d301      	bcc.n	8000192 <__udivsi3+0x8e>
 800018e:	024b      	lsls	r3, r1, #9
 8000190:	1ac0      	subs	r0, r0, r3
 8000192:	4152      	adcs	r2, r2
 8000194:	0a03      	lsrs	r3, r0, #8
 8000196:	428b      	cmp	r3, r1
 8000198:	d301      	bcc.n	800019e <__udivsi3+0x9a>
 800019a:	020b      	lsls	r3, r1, #8
 800019c:	1ac0      	subs	r0, r0, r3
 800019e:	4152      	adcs	r2, r2
 80001a0:	d2cd      	bcs.n	800013e <__udivsi3+0x3a>
 80001a2:	09c3      	lsrs	r3, r0, #7
 80001a4:	428b      	cmp	r3, r1
 80001a6:	d301      	bcc.n	80001ac <__udivsi3+0xa8>
 80001a8:	01cb      	lsls	r3, r1, #7
 80001aa:	1ac0      	subs	r0, r0, r3
 80001ac:	4152      	adcs	r2, r2
 80001ae:	0983      	lsrs	r3, r0, #6
 80001b0:	428b      	cmp	r3, r1
 80001b2:	d301      	bcc.n	80001b8 <__udivsi3+0xb4>
 80001b4:	018b      	lsls	r3, r1, #6
 80001b6:	1ac0      	subs	r0, r0, r3
 80001b8:	4152      	adcs	r2, r2
 80001ba:	0943      	lsrs	r3, r0, #5
 80001bc:	428b      	cmp	r3, r1
 80001be:	d301      	bcc.n	80001c4 <__udivsi3+0xc0>
 80001c0:	014b      	lsls	r3, r1, #5
 80001c2:	1ac0      	subs	r0, r0, r3
 80001c4:	4152      	adcs	r2, r2
 80001c6:	0903      	lsrs	r3, r0, #4
 80001c8:	428b      	cmp	r3, r1
 80001ca:	d301      	bcc.n	80001d0 <__udivsi3+0xcc>
 80001cc:	010b      	lsls	r3, r1, #4
 80001ce:	1ac0      	subs	r0, r0, r3
 80001d0:	4152      	adcs	r2, r2
 80001d2:	08c3      	lsrs	r3, r0, #3
 80001d4:	428b      	cmp	r3, r1
 80001d6:	d301      	bcc.n	80001dc <__udivsi3+0xd8>
 80001d8:	00cb      	lsls	r3, r1, #3
 80001da:	1ac0      	subs	r0, r0, r3
 80001dc:	4152      	adcs	r2, r2
 80001de:	0883      	lsrs	r3, r0, #2
 80001e0:	428b      	cmp	r3, r1
 80001e2:	d301      	bcc.n	80001e8 <__udivsi3+0xe4>
 80001e4:	008b      	lsls	r3, r1, #2
 80001e6:	1ac0      	subs	r0, r0, r3
 80001e8:	4152      	adcs	r2, r2
 80001ea:	0843      	lsrs	r3, r0, #1
 80001ec:	428b      	cmp	r3, r1
 80001ee:	d301      	bcc.n	80001f4 <__udivsi3+0xf0>
 80001f0:	004b      	lsls	r3, r1, #1
 80001f2:	1ac0      	subs	r0, r0, r3
 80001f4:	4152      	adcs	r2, r2
 80001f6:	1a41      	subs	r1, r0, r1
 80001f8:	d200      	bcs.n	80001fc <__udivsi3+0xf8>
 80001fa:	4601      	mov	r1, r0
 80001fc:	4152      	adcs	r2, r2
 80001fe:	4610      	mov	r0, r2
 8000200:	4770      	bx	lr
 8000202:	e7ff      	b.n	8000204 <__udivsi3+0x100>
 8000204:	b501      	push	{r0, lr}
 8000206:	2000      	movs	r0, #0
 8000208:	f000 f806 	bl	8000218 <__aeabi_idiv0>
 800020c:	bd02      	pop	{r1, pc}
 800020e:	46c0      	nop			; (mov r8, r8)

08000210 <__aeabi_uidivmod>:
 8000210:	2900      	cmp	r1, #0
 8000212:	d0f7      	beq.n	8000204 <__udivsi3+0x100>
 8000214:	e776      	b.n	8000104 <__udivsi3>
 8000216:	4770      	bx	lr

08000218 <__aeabi_idiv0>:
 8000218:	4770      	bx	lr
 800021a:	46c0      	nop			; (mov r8, r8)

0800021c <__aeabi_f2iz>:
 800021c:	0241      	lsls	r1, r0, #9
 800021e:	0042      	lsls	r2, r0, #1
 8000220:	0fc3      	lsrs	r3, r0, #31
 8000222:	0a49      	lsrs	r1, r1, #9
 8000224:	2000      	movs	r0, #0
 8000226:	0e12      	lsrs	r2, r2, #24
 8000228:	2a7e      	cmp	r2, #126	; 0x7e
 800022a:	dd03      	ble.n	8000234 <__aeabi_f2iz+0x18>
 800022c:	2a9d      	cmp	r2, #157	; 0x9d
 800022e:	dd02      	ble.n	8000236 <__aeabi_f2iz+0x1a>
 8000230:	4a09      	ldr	r2, [pc, #36]	; (8000258 <__aeabi_f2iz+0x3c>)
 8000232:	1898      	adds	r0, r3, r2
 8000234:	4770      	bx	lr
 8000236:	2080      	movs	r0, #128	; 0x80
 8000238:	0400      	lsls	r0, r0, #16
 800023a:	4301      	orrs	r1, r0
 800023c:	2a95      	cmp	r2, #149	; 0x95
 800023e:	dc07      	bgt.n	8000250 <__aeabi_f2iz+0x34>
 8000240:	2096      	movs	r0, #150	; 0x96
 8000242:	1a82      	subs	r2, r0, r2
 8000244:	40d1      	lsrs	r1, r2
 8000246:	4248      	negs	r0, r1
 8000248:	2b00      	cmp	r3, #0
 800024a:	d1f3      	bne.n	8000234 <__aeabi_f2iz+0x18>
 800024c:	0008      	movs	r0, r1
 800024e:	e7f1      	b.n	8000234 <__aeabi_f2iz+0x18>
 8000250:	3a96      	subs	r2, #150	; 0x96
 8000252:	4091      	lsls	r1, r2
 8000254:	e7f7      	b.n	8000246 <__aeabi_f2iz+0x2a>
 8000256:	46c0      	nop			; (mov r8, r8)
 8000258:	7fffffff 	.word	0x7fffffff

0800025c <__aeabi_ddiv>:
 800025c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800025e:	4657      	mov	r7, sl
 8000260:	464e      	mov	r6, r9
 8000262:	4645      	mov	r5, r8
 8000264:	46de      	mov	lr, fp
 8000266:	b5e0      	push	{r5, r6, r7, lr}
 8000268:	030c      	lsls	r4, r1, #12
 800026a:	001f      	movs	r7, r3
 800026c:	004b      	lsls	r3, r1, #1
 800026e:	4681      	mov	r9, r0
 8000270:	4692      	mov	sl, r2
 8000272:	0005      	movs	r5, r0
 8000274:	b085      	sub	sp, #20
 8000276:	0b24      	lsrs	r4, r4, #12
 8000278:	0d5b      	lsrs	r3, r3, #21
 800027a:	0fce      	lsrs	r6, r1, #31
 800027c:	2b00      	cmp	r3, #0
 800027e:	d100      	bne.n	8000282 <__aeabi_ddiv+0x26>
 8000280:	e152      	b.n	8000528 <__aeabi_ddiv+0x2cc>
 8000282:	4ad2      	ldr	r2, [pc, #840]	; (80005cc <__aeabi_ddiv+0x370>)
 8000284:	4293      	cmp	r3, r2
 8000286:	d100      	bne.n	800028a <__aeabi_ddiv+0x2e>
 8000288:	e16e      	b.n	8000568 <__aeabi_ddiv+0x30c>
 800028a:	0f42      	lsrs	r2, r0, #29
 800028c:	00e4      	lsls	r4, r4, #3
 800028e:	4314      	orrs	r4, r2
 8000290:	2280      	movs	r2, #128	; 0x80
 8000292:	0412      	lsls	r2, r2, #16
 8000294:	4322      	orrs	r2, r4
 8000296:	4690      	mov	r8, r2
 8000298:	4acd      	ldr	r2, [pc, #820]	; (80005d0 <__aeabi_ddiv+0x374>)
 800029a:	00c5      	lsls	r5, r0, #3
 800029c:	4693      	mov	fp, r2
 800029e:	449b      	add	fp, r3
 80002a0:	2300      	movs	r3, #0
 80002a2:	4699      	mov	r9, r3
 80002a4:	9300      	str	r3, [sp, #0]
 80002a6:	033c      	lsls	r4, r7, #12
 80002a8:	007b      	lsls	r3, r7, #1
 80002aa:	4650      	mov	r0, sl
 80002ac:	0b24      	lsrs	r4, r4, #12
 80002ae:	0d5b      	lsrs	r3, r3, #21
 80002b0:	0fff      	lsrs	r7, r7, #31
 80002b2:	2b00      	cmp	r3, #0
 80002b4:	d100      	bne.n	80002b8 <__aeabi_ddiv+0x5c>
 80002b6:	e11a      	b.n	80004ee <__aeabi_ddiv+0x292>
 80002b8:	4ac4      	ldr	r2, [pc, #784]	; (80005cc <__aeabi_ddiv+0x370>)
 80002ba:	4293      	cmp	r3, r2
 80002bc:	d100      	bne.n	80002c0 <__aeabi_ddiv+0x64>
 80002be:	e15e      	b.n	800057e <__aeabi_ddiv+0x322>
 80002c0:	0f42      	lsrs	r2, r0, #29
 80002c2:	00e4      	lsls	r4, r4, #3
 80002c4:	4322      	orrs	r2, r4
 80002c6:	2480      	movs	r4, #128	; 0x80
 80002c8:	0424      	lsls	r4, r4, #16
 80002ca:	4314      	orrs	r4, r2
 80002cc:	4ac0      	ldr	r2, [pc, #768]	; (80005d0 <__aeabi_ddiv+0x374>)
 80002ce:	00c1      	lsls	r1, r0, #3
 80002d0:	4694      	mov	ip, r2
 80002d2:	465a      	mov	r2, fp
 80002d4:	4463      	add	r3, ip
 80002d6:	1ad3      	subs	r3, r2, r3
 80002d8:	469b      	mov	fp, r3
 80002da:	2000      	movs	r0, #0
 80002dc:	0033      	movs	r3, r6
 80002de:	407b      	eors	r3, r7
 80002e0:	469a      	mov	sl, r3
 80002e2:	464b      	mov	r3, r9
 80002e4:	2b0f      	cmp	r3, #15
 80002e6:	d827      	bhi.n	8000338 <__aeabi_ddiv+0xdc>
 80002e8:	4aba      	ldr	r2, [pc, #744]	; (80005d4 <__aeabi_ddiv+0x378>)
 80002ea:	009b      	lsls	r3, r3, #2
 80002ec:	58d3      	ldr	r3, [r2, r3]
 80002ee:	469f      	mov	pc, r3
 80002f0:	46b2      	mov	sl, r6
 80002f2:	9b00      	ldr	r3, [sp, #0]
 80002f4:	2b02      	cmp	r3, #2
 80002f6:	d016      	beq.n	8000326 <__aeabi_ddiv+0xca>
 80002f8:	2b03      	cmp	r3, #3
 80002fa:	d100      	bne.n	80002fe <__aeabi_ddiv+0xa2>
 80002fc:	e287      	b.n	800080e <__aeabi_ddiv+0x5b2>
 80002fe:	2b01      	cmp	r3, #1
 8000300:	d000      	beq.n	8000304 <__aeabi_ddiv+0xa8>
 8000302:	e0d5      	b.n	80004b0 <__aeabi_ddiv+0x254>
 8000304:	2300      	movs	r3, #0
 8000306:	2200      	movs	r2, #0
 8000308:	2500      	movs	r5, #0
 800030a:	051b      	lsls	r3, r3, #20
 800030c:	4313      	orrs	r3, r2
 800030e:	4652      	mov	r2, sl
 8000310:	07d2      	lsls	r2, r2, #31
 8000312:	4313      	orrs	r3, r2
 8000314:	0028      	movs	r0, r5
 8000316:	0019      	movs	r1, r3
 8000318:	b005      	add	sp, #20
 800031a:	bcf0      	pop	{r4, r5, r6, r7}
 800031c:	46bb      	mov	fp, r7
 800031e:	46b2      	mov	sl, r6
 8000320:	46a9      	mov	r9, r5
 8000322:	46a0      	mov	r8, r4
 8000324:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000326:	2200      	movs	r2, #0
 8000328:	2500      	movs	r5, #0
 800032a:	4ba8      	ldr	r3, [pc, #672]	; (80005cc <__aeabi_ddiv+0x370>)
 800032c:	e7ed      	b.n	800030a <__aeabi_ddiv+0xae>
 800032e:	46ba      	mov	sl, r7
 8000330:	46a0      	mov	r8, r4
 8000332:	000d      	movs	r5, r1
 8000334:	9000      	str	r0, [sp, #0]
 8000336:	e7dc      	b.n	80002f2 <__aeabi_ddiv+0x96>
 8000338:	4544      	cmp	r4, r8
 800033a:	d200      	bcs.n	800033e <__aeabi_ddiv+0xe2>
 800033c:	e1c4      	b.n	80006c8 <__aeabi_ddiv+0x46c>
 800033e:	d100      	bne.n	8000342 <__aeabi_ddiv+0xe6>
 8000340:	e1bf      	b.n	80006c2 <__aeabi_ddiv+0x466>
 8000342:	2301      	movs	r3, #1
 8000344:	425b      	negs	r3, r3
 8000346:	469c      	mov	ip, r3
 8000348:	002e      	movs	r6, r5
 800034a:	4640      	mov	r0, r8
 800034c:	2500      	movs	r5, #0
 800034e:	44e3      	add	fp, ip
 8000350:	0223      	lsls	r3, r4, #8
 8000352:	0e0c      	lsrs	r4, r1, #24
 8000354:	431c      	orrs	r4, r3
 8000356:	0c1b      	lsrs	r3, r3, #16
 8000358:	4699      	mov	r9, r3
 800035a:	0423      	lsls	r3, r4, #16
 800035c:	020a      	lsls	r2, r1, #8
 800035e:	0c1f      	lsrs	r7, r3, #16
 8000360:	4649      	mov	r1, r9
 8000362:	9200      	str	r2, [sp, #0]
 8000364:	9701      	str	r7, [sp, #4]
 8000366:	f7ff ff53 	bl	8000210 <__aeabi_uidivmod>
 800036a:	0002      	movs	r2, r0
 800036c:	437a      	muls	r2, r7
 800036e:	040b      	lsls	r3, r1, #16
 8000370:	0c31      	lsrs	r1, r6, #16
 8000372:	4680      	mov	r8, r0
 8000374:	4319      	orrs	r1, r3
 8000376:	428a      	cmp	r2, r1
 8000378:	d907      	bls.n	800038a <__aeabi_ddiv+0x12e>
 800037a:	2301      	movs	r3, #1
 800037c:	425b      	negs	r3, r3
 800037e:	469c      	mov	ip, r3
 8000380:	1909      	adds	r1, r1, r4
 8000382:	44e0      	add	r8, ip
 8000384:	428c      	cmp	r4, r1
 8000386:	d800      	bhi.n	800038a <__aeabi_ddiv+0x12e>
 8000388:	e201      	b.n	800078e <__aeabi_ddiv+0x532>
 800038a:	1a88      	subs	r0, r1, r2
 800038c:	4649      	mov	r1, r9
 800038e:	f7ff ff3f 	bl	8000210 <__aeabi_uidivmod>
 8000392:	9a01      	ldr	r2, [sp, #4]
 8000394:	0436      	lsls	r6, r6, #16
 8000396:	4342      	muls	r2, r0
 8000398:	0409      	lsls	r1, r1, #16
 800039a:	0c36      	lsrs	r6, r6, #16
 800039c:	0003      	movs	r3, r0
 800039e:	430e      	orrs	r6, r1
 80003a0:	42b2      	cmp	r2, r6
 80003a2:	d904      	bls.n	80003ae <__aeabi_ddiv+0x152>
 80003a4:	1936      	adds	r6, r6, r4
 80003a6:	3b01      	subs	r3, #1
 80003a8:	42b4      	cmp	r4, r6
 80003aa:	d800      	bhi.n	80003ae <__aeabi_ddiv+0x152>
 80003ac:	e1e9      	b.n	8000782 <__aeabi_ddiv+0x526>
 80003ae:	1ab0      	subs	r0, r6, r2
 80003b0:	4642      	mov	r2, r8
 80003b2:	9e00      	ldr	r6, [sp, #0]
 80003b4:	0412      	lsls	r2, r2, #16
 80003b6:	431a      	orrs	r2, r3
 80003b8:	0c33      	lsrs	r3, r6, #16
 80003ba:	001f      	movs	r7, r3
 80003bc:	0c11      	lsrs	r1, r2, #16
 80003be:	4690      	mov	r8, r2
 80003c0:	9302      	str	r3, [sp, #8]
 80003c2:	0413      	lsls	r3, r2, #16
 80003c4:	0432      	lsls	r2, r6, #16
 80003c6:	0c16      	lsrs	r6, r2, #16
 80003c8:	0032      	movs	r2, r6
 80003ca:	0c1b      	lsrs	r3, r3, #16
 80003cc:	435a      	muls	r2, r3
 80003ce:	9603      	str	r6, [sp, #12]
 80003d0:	437b      	muls	r3, r7
 80003d2:	434e      	muls	r6, r1
 80003d4:	4379      	muls	r1, r7
 80003d6:	0c17      	lsrs	r7, r2, #16
 80003d8:	46bc      	mov	ip, r7
 80003da:	199b      	adds	r3, r3, r6
 80003dc:	4463      	add	r3, ip
 80003de:	429e      	cmp	r6, r3
 80003e0:	d903      	bls.n	80003ea <__aeabi_ddiv+0x18e>
 80003e2:	2680      	movs	r6, #128	; 0x80
 80003e4:	0276      	lsls	r6, r6, #9
 80003e6:	46b4      	mov	ip, r6
 80003e8:	4461      	add	r1, ip
 80003ea:	0c1e      	lsrs	r6, r3, #16
 80003ec:	1871      	adds	r1, r6, r1
 80003ee:	0416      	lsls	r6, r2, #16
 80003f0:	041b      	lsls	r3, r3, #16
 80003f2:	0c36      	lsrs	r6, r6, #16
 80003f4:	199e      	adds	r6, r3, r6
 80003f6:	4288      	cmp	r0, r1
 80003f8:	d302      	bcc.n	8000400 <__aeabi_ddiv+0x1a4>
 80003fa:	d112      	bne.n	8000422 <__aeabi_ddiv+0x1c6>
 80003fc:	42b5      	cmp	r5, r6
 80003fe:	d210      	bcs.n	8000422 <__aeabi_ddiv+0x1c6>
 8000400:	4643      	mov	r3, r8
 8000402:	1e5a      	subs	r2, r3, #1
 8000404:	9b00      	ldr	r3, [sp, #0]
 8000406:	469c      	mov	ip, r3
 8000408:	4465      	add	r5, ip
 800040a:	001f      	movs	r7, r3
 800040c:	429d      	cmp	r5, r3
 800040e:	419b      	sbcs	r3, r3
 8000410:	425b      	negs	r3, r3
 8000412:	191b      	adds	r3, r3, r4
 8000414:	18c0      	adds	r0, r0, r3
 8000416:	4284      	cmp	r4, r0
 8000418:	d200      	bcs.n	800041c <__aeabi_ddiv+0x1c0>
 800041a:	e19e      	b.n	800075a <__aeabi_ddiv+0x4fe>
 800041c:	d100      	bne.n	8000420 <__aeabi_ddiv+0x1c4>
 800041e:	e199      	b.n	8000754 <__aeabi_ddiv+0x4f8>
 8000420:	4690      	mov	r8, r2
 8000422:	1bae      	subs	r6, r5, r6
 8000424:	42b5      	cmp	r5, r6
 8000426:	41ad      	sbcs	r5, r5
 8000428:	1a40      	subs	r0, r0, r1
 800042a:	426d      	negs	r5, r5
 800042c:	1b40      	subs	r0, r0, r5
 800042e:	4284      	cmp	r4, r0
 8000430:	d100      	bne.n	8000434 <__aeabi_ddiv+0x1d8>
 8000432:	e1d2      	b.n	80007da <__aeabi_ddiv+0x57e>
 8000434:	4649      	mov	r1, r9
 8000436:	f7ff feeb 	bl	8000210 <__aeabi_uidivmod>
 800043a:	9a01      	ldr	r2, [sp, #4]
 800043c:	040b      	lsls	r3, r1, #16
 800043e:	4342      	muls	r2, r0
 8000440:	0c31      	lsrs	r1, r6, #16
 8000442:	0005      	movs	r5, r0
 8000444:	4319      	orrs	r1, r3
 8000446:	428a      	cmp	r2, r1
 8000448:	d900      	bls.n	800044c <__aeabi_ddiv+0x1f0>
 800044a:	e16c      	b.n	8000726 <__aeabi_ddiv+0x4ca>
 800044c:	1a88      	subs	r0, r1, r2
 800044e:	4649      	mov	r1, r9
 8000450:	f7ff fede 	bl	8000210 <__aeabi_uidivmod>
 8000454:	9a01      	ldr	r2, [sp, #4]
 8000456:	0436      	lsls	r6, r6, #16
 8000458:	4342      	muls	r2, r0
 800045a:	0409      	lsls	r1, r1, #16
 800045c:	0c36      	lsrs	r6, r6, #16
 800045e:	0003      	movs	r3, r0
 8000460:	430e      	orrs	r6, r1
 8000462:	42b2      	cmp	r2, r6
 8000464:	d900      	bls.n	8000468 <__aeabi_ddiv+0x20c>
 8000466:	e153      	b.n	8000710 <__aeabi_ddiv+0x4b4>
 8000468:	9803      	ldr	r0, [sp, #12]
 800046a:	1ab6      	subs	r6, r6, r2
 800046c:	0002      	movs	r2, r0
 800046e:	042d      	lsls	r5, r5, #16
 8000470:	431d      	orrs	r5, r3
 8000472:	9f02      	ldr	r7, [sp, #8]
 8000474:	042b      	lsls	r3, r5, #16
 8000476:	0c1b      	lsrs	r3, r3, #16
 8000478:	435a      	muls	r2, r3
 800047a:	437b      	muls	r3, r7
 800047c:	469c      	mov	ip, r3
 800047e:	0c29      	lsrs	r1, r5, #16
 8000480:	4348      	muls	r0, r1
 8000482:	0c13      	lsrs	r3, r2, #16
 8000484:	4484      	add	ip, r0
 8000486:	4463      	add	r3, ip
 8000488:	4379      	muls	r1, r7
 800048a:	4298      	cmp	r0, r3
 800048c:	d903      	bls.n	8000496 <__aeabi_ddiv+0x23a>
 800048e:	2080      	movs	r0, #128	; 0x80
 8000490:	0240      	lsls	r0, r0, #9
 8000492:	4684      	mov	ip, r0
 8000494:	4461      	add	r1, ip
 8000496:	0c18      	lsrs	r0, r3, #16
 8000498:	0412      	lsls	r2, r2, #16
 800049a:	041b      	lsls	r3, r3, #16
 800049c:	0c12      	lsrs	r2, r2, #16
 800049e:	1840      	adds	r0, r0, r1
 80004a0:	189b      	adds	r3, r3, r2
 80004a2:	4286      	cmp	r6, r0
 80004a4:	d200      	bcs.n	80004a8 <__aeabi_ddiv+0x24c>
 80004a6:	e100      	b.n	80006aa <__aeabi_ddiv+0x44e>
 80004a8:	d100      	bne.n	80004ac <__aeabi_ddiv+0x250>
 80004aa:	e0fb      	b.n	80006a4 <__aeabi_ddiv+0x448>
 80004ac:	2301      	movs	r3, #1
 80004ae:	431d      	orrs	r5, r3
 80004b0:	4b49      	ldr	r3, [pc, #292]	; (80005d8 <__aeabi_ddiv+0x37c>)
 80004b2:	445b      	add	r3, fp
 80004b4:	2b00      	cmp	r3, #0
 80004b6:	dc00      	bgt.n	80004ba <__aeabi_ddiv+0x25e>
 80004b8:	e0aa      	b.n	8000610 <__aeabi_ddiv+0x3b4>
 80004ba:	076a      	lsls	r2, r5, #29
 80004bc:	d000      	beq.n	80004c0 <__aeabi_ddiv+0x264>
 80004be:	e13d      	b.n	800073c <__aeabi_ddiv+0x4e0>
 80004c0:	08e9      	lsrs	r1, r5, #3
 80004c2:	4642      	mov	r2, r8
 80004c4:	01d2      	lsls	r2, r2, #7
 80004c6:	d506      	bpl.n	80004d6 <__aeabi_ddiv+0x27a>
 80004c8:	4642      	mov	r2, r8
 80004ca:	4b44      	ldr	r3, [pc, #272]	; (80005dc <__aeabi_ddiv+0x380>)
 80004cc:	401a      	ands	r2, r3
 80004ce:	2380      	movs	r3, #128	; 0x80
 80004d0:	4690      	mov	r8, r2
 80004d2:	00db      	lsls	r3, r3, #3
 80004d4:	445b      	add	r3, fp
 80004d6:	4a42      	ldr	r2, [pc, #264]	; (80005e0 <__aeabi_ddiv+0x384>)
 80004d8:	4293      	cmp	r3, r2
 80004da:	dd00      	ble.n	80004de <__aeabi_ddiv+0x282>
 80004dc:	e723      	b.n	8000326 <__aeabi_ddiv+0xca>
 80004de:	4642      	mov	r2, r8
 80004e0:	055b      	lsls	r3, r3, #21
 80004e2:	0755      	lsls	r5, r2, #29
 80004e4:	0252      	lsls	r2, r2, #9
 80004e6:	430d      	orrs	r5, r1
 80004e8:	0b12      	lsrs	r2, r2, #12
 80004ea:	0d5b      	lsrs	r3, r3, #21
 80004ec:	e70d      	b.n	800030a <__aeabi_ddiv+0xae>
 80004ee:	4651      	mov	r1, sl
 80004f0:	4321      	orrs	r1, r4
 80004f2:	d100      	bne.n	80004f6 <__aeabi_ddiv+0x29a>
 80004f4:	e07c      	b.n	80005f0 <__aeabi_ddiv+0x394>
 80004f6:	2c00      	cmp	r4, #0
 80004f8:	d100      	bne.n	80004fc <__aeabi_ddiv+0x2a0>
 80004fa:	e0fb      	b.n	80006f4 <__aeabi_ddiv+0x498>
 80004fc:	0020      	movs	r0, r4
 80004fe:	f000 fa51 	bl	80009a4 <__clzsi2>
 8000502:	0002      	movs	r2, r0
 8000504:	3a0b      	subs	r2, #11
 8000506:	231d      	movs	r3, #29
 8000508:	1a9b      	subs	r3, r3, r2
 800050a:	4652      	mov	r2, sl
 800050c:	0001      	movs	r1, r0
 800050e:	40da      	lsrs	r2, r3
 8000510:	4653      	mov	r3, sl
 8000512:	3908      	subs	r1, #8
 8000514:	408b      	lsls	r3, r1
 8000516:	408c      	lsls	r4, r1
 8000518:	0019      	movs	r1, r3
 800051a:	4314      	orrs	r4, r2
 800051c:	4b31      	ldr	r3, [pc, #196]	; (80005e4 <__aeabi_ddiv+0x388>)
 800051e:	4458      	add	r0, fp
 8000520:	469b      	mov	fp, r3
 8000522:	4483      	add	fp, r0
 8000524:	2000      	movs	r0, #0
 8000526:	e6d9      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000528:	0003      	movs	r3, r0
 800052a:	4323      	orrs	r3, r4
 800052c:	4698      	mov	r8, r3
 800052e:	d044      	beq.n	80005ba <__aeabi_ddiv+0x35e>
 8000530:	2c00      	cmp	r4, #0
 8000532:	d100      	bne.n	8000536 <__aeabi_ddiv+0x2da>
 8000534:	e0cf      	b.n	80006d6 <__aeabi_ddiv+0x47a>
 8000536:	0020      	movs	r0, r4
 8000538:	f000 fa34 	bl	80009a4 <__clzsi2>
 800053c:	0001      	movs	r1, r0
 800053e:	0002      	movs	r2, r0
 8000540:	390b      	subs	r1, #11
 8000542:	231d      	movs	r3, #29
 8000544:	1a5b      	subs	r3, r3, r1
 8000546:	4649      	mov	r1, r9
 8000548:	0010      	movs	r0, r2
 800054a:	40d9      	lsrs	r1, r3
 800054c:	3808      	subs	r0, #8
 800054e:	4084      	lsls	r4, r0
 8000550:	000b      	movs	r3, r1
 8000552:	464d      	mov	r5, r9
 8000554:	4323      	orrs	r3, r4
 8000556:	4698      	mov	r8, r3
 8000558:	4085      	lsls	r5, r0
 800055a:	4b23      	ldr	r3, [pc, #140]	; (80005e8 <__aeabi_ddiv+0x38c>)
 800055c:	1a9b      	subs	r3, r3, r2
 800055e:	469b      	mov	fp, r3
 8000560:	2300      	movs	r3, #0
 8000562:	4699      	mov	r9, r3
 8000564:	9300      	str	r3, [sp, #0]
 8000566:	e69e      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 8000568:	0002      	movs	r2, r0
 800056a:	4322      	orrs	r2, r4
 800056c:	4690      	mov	r8, r2
 800056e:	d11d      	bne.n	80005ac <__aeabi_ddiv+0x350>
 8000570:	2208      	movs	r2, #8
 8000572:	469b      	mov	fp, r3
 8000574:	2302      	movs	r3, #2
 8000576:	2500      	movs	r5, #0
 8000578:	4691      	mov	r9, r2
 800057a:	9300      	str	r3, [sp, #0]
 800057c:	e693      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 800057e:	4651      	mov	r1, sl
 8000580:	4321      	orrs	r1, r4
 8000582:	d109      	bne.n	8000598 <__aeabi_ddiv+0x33c>
 8000584:	2302      	movs	r3, #2
 8000586:	464a      	mov	r2, r9
 8000588:	431a      	orrs	r2, r3
 800058a:	4b18      	ldr	r3, [pc, #96]	; (80005ec <__aeabi_ddiv+0x390>)
 800058c:	4691      	mov	r9, r2
 800058e:	469c      	mov	ip, r3
 8000590:	2400      	movs	r4, #0
 8000592:	2002      	movs	r0, #2
 8000594:	44e3      	add	fp, ip
 8000596:	e6a1      	b.n	80002dc <__aeabi_ddiv+0x80>
 8000598:	2303      	movs	r3, #3
 800059a:	464a      	mov	r2, r9
 800059c:	431a      	orrs	r2, r3
 800059e:	4b13      	ldr	r3, [pc, #76]	; (80005ec <__aeabi_ddiv+0x390>)
 80005a0:	4691      	mov	r9, r2
 80005a2:	469c      	mov	ip, r3
 80005a4:	4651      	mov	r1, sl
 80005a6:	2003      	movs	r0, #3
 80005a8:	44e3      	add	fp, ip
 80005aa:	e697      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005ac:	220c      	movs	r2, #12
 80005ae:	469b      	mov	fp, r3
 80005b0:	2303      	movs	r3, #3
 80005b2:	46a0      	mov	r8, r4
 80005b4:	4691      	mov	r9, r2
 80005b6:	9300      	str	r3, [sp, #0]
 80005b8:	e675      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005ba:	2304      	movs	r3, #4
 80005bc:	4699      	mov	r9, r3
 80005be:	2300      	movs	r3, #0
 80005c0:	469b      	mov	fp, r3
 80005c2:	3301      	adds	r3, #1
 80005c4:	2500      	movs	r5, #0
 80005c6:	9300      	str	r3, [sp, #0]
 80005c8:	e66d      	b.n	80002a6 <__aeabi_ddiv+0x4a>
 80005ca:	46c0      	nop			; (mov r8, r8)
 80005cc:	000007ff 	.word	0x000007ff
 80005d0:	fffffc01 	.word	0xfffffc01
 80005d4:	080054d0 	.word	0x080054d0
 80005d8:	000003ff 	.word	0x000003ff
 80005dc:	feffffff 	.word	0xfeffffff
 80005e0:	000007fe 	.word	0x000007fe
 80005e4:	000003f3 	.word	0x000003f3
 80005e8:	fffffc0d 	.word	0xfffffc0d
 80005ec:	fffff801 	.word	0xfffff801
 80005f0:	464a      	mov	r2, r9
 80005f2:	2301      	movs	r3, #1
 80005f4:	431a      	orrs	r2, r3
 80005f6:	4691      	mov	r9, r2
 80005f8:	2400      	movs	r4, #0
 80005fa:	2001      	movs	r0, #1
 80005fc:	e66e      	b.n	80002dc <__aeabi_ddiv+0x80>
 80005fe:	2300      	movs	r3, #0
 8000600:	2280      	movs	r2, #128	; 0x80
 8000602:	469a      	mov	sl, r3
 8000604:	2500      	movs	r5, #0
 8000606:	4b88      	ldr	r3, [pc, #544]	; (8000828 <__aeabi_ddiv+0x5cc>)
 8000608:	0312      	lsls	r2, r2, #12
 800060a:	e67e      	b.n	800030a <__aeabi_ddiv+0xae>
 800060c:	2501      	movs	r5, #1
 800060e:	426d      	negs	r5, r5
 8000610:	2201      	movs	r2, #1
 8000612:	1ad2      	subs	r2, r2, r3
 8000614:	2a38      	cmp	r2, #56	; 0x38
 8000616:	dd00      	ble.n	800061a <__aeabi_ddiv+0x3be>
 8000618:	e674      	b.n	8000304 <__aeabi_ddiv+0xa8>
 800061a:	2a1f      	cmp	r2, #31
 800061c:	dc00      	bgt.n	8000620 <__aeabi_ddiv+0x3c4>
 800061e:	e0bd      	b.n	800079c <__aeabi_ddiv+0x540>
 8000620:	211f      	movs	r1, #31
 8000622:	4249      	negs	r1, r1
 8000624:	1acb      	subs	r3, r1, r3
 8000626:	4641      	mov	r1, r8
 8000628:	40d9      	lsrs	r1, r3
 800062a:	000b      	movs	r3, r1
 800062c:	2a20      	cmp	r2, #32
 800062e:	d004      	beq.n	800063a <__aeabi_ddiv+0x3de>
 8000630:	4641      	mov	r1, r8
 8000632:	4a7e      	ldr	r2, [pc, #504]	; (800082c <__aeabi_ddiv+0x5d0>)
 8000634:	445a      	add	r2, fp
 8000636:	4091      	lsls	r1, r2
 8000638:	430d      	orrs	r5, r1
 800063a:	0029      	movs	r1, r5
 800063c:	1e4a      	subs	r2, r1, #1
 800063e:	4191      	sbcs	r1, r2
 8000640:	4319      	orrs	r1, r3
 8000642:	2307      	movs	r3, #7
 8000644:	001d      	movs	r5, r3
 8000646:	2200      	movs	r2, #0
 8000648:	400d      	ands	r5, r1
 800064a:	420b      	tst	r3, r1
 800064c:	d100      	bne.n	8000650 <__aeabi_ddiv+0x3f4>
 800064e:	e0d0      	b.n	80007f2 <__aeabi_ddiv+0x596>
 8000650:	220f      	movs	r2, #15
 8000652:	2300      	movs	r3, #0
 8000654:	400a      	ands	r2, r1
 8000656:	2a04      	cmp	r2, #4
 8000658:	d100      	bne.n	800065c <__aeabi_ddiv+0x400>
 800065a:	e0c7      	b.n	80007ec <__aeabi_ddiv+0x590>
 800065c:	1d0a      	adds	r2, r1, #4
 800065e:	428a      	cmp	r2, r1
 8000660:	4189      	sbcs	r1, r1
 8000662:	4249      	negs	r1, r1
 8000664:	185b      	adds	r3, r3, r1
 8000666:	0011      	movs	r1, r2
 8000668:	021a      	lsls	r2, r3, #8
 800066a:	d400      	bmi.n	800066e <__aeabi_ddiv+0x412>
 800066c:	e0be      	b.n	80007ec <__aeabi_ddiv+0x590>
 800066e:	2301      	movs	r3, #1
 8000670:	2200      	movs	r2, #0
 8000672:	2500      	movs	r5, #0
 8000674:	e649      	b.n	800030a <__aeabi_ddiv+0xae>
 8000676:	2280      	movs	r2, #128	; 0x80
 8000678:	4643      	mov	r3, r8
 800067a:	0312      	lsls	r2, r2, #12
 800067c:	4213      	tst	r3, r2
 800067e:	d008      	beq.n	8000692 <__aeabi_ddiv+0x436>
 8000680:	4214      	tst	r4, r2
 8000682:	d106      	bne.n	8000692 <__aeabi_ddiv+0x436>
 8000684:	4322      	orrs	r2, r4
 8000686:	0312      	lsls	r2, r2, #12
 8000688:	46ba      	mov	sl, r7
 800068a:	000d      	movs	r5, r1
 800068c:	4b66      	ldr	r3, [pc, #408]	; (8000828 <__aeabi_ddiv+0x5cc>)
 800068e:	0b12      	lsrs	r2, r2, #12
 8000690:	e63b      	b.n	800030a <__aeabi_ddiv+0xae>
 8000692:	2280      	movs	r2, #128	; 0x80
 8000694:	4643      	mov	r3, r8
 8000696:	0312      	lsls	r2, r2, #12
 8000698:	431a      	orrs	r2, r3
 800069a:	0312      	lsls	r2, r2, #12
 800069c:	46b2      	mov	sl, r6
 800069e:	4b62      	ldr	r3, [pc, #392]	; (8000828 <__aeabi_ddiv+0x5cc>)
 80006a0:	0b12      	lsrs	r2, r2, #12
 80006a2:	e632      	b.n	800030a <__aeabi_ddiv+0xae>
 80006a4:	2b00      	cmp	r3, #0
 80006a6:	d100      	bne.n	80006aa <__aeabi_ddiv+0x44e>
 80006a8:	e702      	b.n	80004b0 <__aeabi_ddiv+0x254>
 80006aa:	19a6      	adds	r6, r4, r6
 80006ac:	1e6a      	subs	r2, r5, #1
 80006ae:	42a6      	cmp	r6, r4
 80006b0:	d200      	bcs.n	80006b4 <__aeabi_ddiv+0x458>
 80006b2:	e089      	b.n	80007c8 <__aeabi_ddiv+0x56c>
 80006b4:	4286      	cmp	r6, r0
 80006b6:	d200      	bcs.n	80006ba <__aeabi_ddiv+0x45e>
 80006b8:	e09f      	b.n	80007fa <__aeabi_ddiv+0x59e>
 80006ba:	d100      	bne.n	80006be <__aeabi_ddiv+0x462>
 80006bc:	e0af      	b.n	800081e <__aeabi_ddiv+0x5c2>
 80006be:	0015      	movs	r5, r2
 80006c0:	e6f4      	b.n	80004ac <__aeabi_ddiv+0x250>
 80006c2:	42a9      	cmp	r1, r5
 80006c4:	d900      	bls.n	80006c8 <__aeabi_ddiv+0x46c>
 80006c6:	e63c      	b.n	8000342 <__aeabi_ddiv+0xe6>
 80006c8:	4643      	mov	r3, r8
 80006ca:	07de      	lsls	r6, r3, #31
 80006cc:	0858      	lsrs	r0, r3, #1
 80006ce:	086b      	lsrs	r3, r5, #1
 80006d0:	431e      	orrs	r6, r3
 80006d2:	07ed      	lsls	r5, r5, #31
 80006d4:	e63c      	b.n	8000350 <__aeabi_ddiv+0xf4>
 80006d6:	f000 f965 	bl	80009a4 <__clzsi2>
 80006da:	0001      	movs	r1, r0
 80006dc:	0002      	movs	r2, r0
 80006de:	3115      	adds	r1, #21
 80006e0:	3220      	adds	r2, #32
 80006e2:	291c      	cmp	r1, #28
 80006e4:	dc00      	bgt.n	80006e8 <__aeabi_ddiv+0x48c>
 80006e6:	e72c      	b.n	8000542 <__aeabi_ddiv+0x2e6>
 80006e8:	464b      	mov	r3, r9
 80006ea:	3808      	subs	r0, #8
 80006ec:	4083      	lsls	r3, r0
 80006ee:	2500      	movs	r5, #0
 80006f0:	4698      	mov	r8, r3
 80006f2:	e732      	b.n	800055a <__aeabi_ddiv+0x2fe>
 80006f4:	f000 f956 	bl	80009a4 <__clzsi2>
 80006f8:	0003      	movs	r3, r0
 80006fa:	001a      	movs	r2, r3
 80006fc:	3215      	adds	r2, #21
 80006fe:	3020      	adds	r0, #32
 8000700:	2a1c      	cmp	r2, #28
 8000702:	dc00      	bgt.n	8000706 <__aeabi_ddiv+0x4aa>
 8000704:	e6ff      	b.n	8000506 <__aeabi_ddiv+0x2aa>
 8000706:	4654      	mov	r4, sl
 8000708:	3b08      	subs	r3, #8
 800070a:	2100      	movs	r1, #0
 800070c:	409c      	lsls	r4, r3
 800070e:	e705      	b.n	800051c <__aeabi_ddiv+0x2c0>
 8000710:	1936      	adds	r6, r6, r4
 8000712:	3b01      	subs	r3, #1
 8000714:	42b4      	cmp	r4, r6
 8000716:	d900      	bls.n	800071a <__aeabi_ddiv+0x4be>
 8000718:	e6a6      	b.n	8000468 <__aeabi_ddiv+0x20c>
 800071a:	42b2      	cmp	r2, r6
 800071c:	d800      	bhi.n	8000720 <__aeabi_ddiv+0x4c4>
 800071e:	e6a3      	b.n	8000468 <__aeabi_ddiv+0x20c>
 8000720:	1e83      	subs	r3, r0, #2
 8000722:	1936      	adds	r6, r6, r4
 8000724:	e6a0      	b.n	8000468 <__aeabi_ddiv+0x20c>
 8000726:	1909      	adds	r1, r1, r4
 8000728:	3d01      	subs	r5, #1
 800072a:	428c      	cmp	r4, r1
 800072c:	d900      	bls.n	8000730 <__aeabi_ddiv+0x4d4>
 800072e:	e68d      	b.n	800044c <__aeabi_ddiv+0x1f0>
 8000730:	428a      	cmp	r2, r1
 8000732:	d800      	bhi.n	8000736 <__aeabi_ddiv+0x4da>
 8000734:	e68a      	b.n	800044c <__aeabi_ddiv+0x1f0>
 8000736:	1e85      	subs	r5, r0, #2
 8000738:	1909      	adds	r1, r1, r4
 800073a:	e687      	b.n	800044c <__aeabi_ddiv+0x1f0>
 800073c:	220f      	movs	r2, #15
 800073e:	402a      	ands	r2, r5
 8000740:	2a04      	cmp	r2, #4
 8000742:	d100      	bne.n	8000746 <__aeabi_ddiv+0x4ea>
 8000744:	e6bc      	b.n	80004c0 <__aeabi_ddiv+0x264>
 8000746:	1d29      	adds	r1, r5, #4
 8000748:	42a9      	cmp	r1, r5
 800074a:	41ad      	sbcs	r5, r5
 800074c:	426d      	negs	r5, r5
 800074e:	08c9      	lsrs	r1, r1, #3
 8000750:	44a8      	add	r8, r5
 8000752:	e6b6      	b.n	80004c2 <__aeabi_ddiv+0x266>
 8000754:	42af      	cmp	r7, r5
 8000756:	d900      	bls.n	800075a <__aeabi_ddiv+0x4fe>
 8000758:	e662      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 800075a:	4281      	cmp	r1, r0
 800075c:	d804      	bhi.n	8000768 <__aeabi_ddiv+0x50c>
 800075e:	d000      	beq.n	8000762 <__aeabi_ddiv+0x506>
 8000760:	e65e      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 8000762:	42ae      	cmp	r6, r5
 8000764:	d800      	bhi.n	8000768 <__aeabi_ddiv+0x50c>
 8000766:	e65b      	b.n	8000420 <__aeabi_ddiv+0x1c4>
 8000768:	2302      	movs	r3, #2
 800076a:	425b      	negs	r3, r3
 800076c:	469c      	mov	ip, r3
 800076e:	9b00      	ldr	r3, [sp, #0]
 8000770:	44e0      	add	r8, ip
 8000772:	469c      	mov	ip, r3
 8000774:	4465      	add	r5, ip
 8000776:	429d      	cmp	r5, r3
 8000778:	419b      	sbcs	r3, r3
 800077a:	425b      	negs	r3, r3
 800077c:	191b      	adds	r3, r3, r4
 800077e:	18c0      	adds	r0, r0, r3
 8000780:	e64f      	b.n	8000422 <__aeabi_ddiv+0x1c6>
 8000782:	42b2      	cmp	r2, r6
 8000784:	d800      	bhi.n	8000788 <__aeabi_ddiv+0x52c>
 8000786:	e612      	b.n	80003ae <__aeabi_ddiv+0x152>
 8000788:	1e83      	subs	r3, r0, #2
 800078a:	1936      	adds	r6, r6, r4
 800078c:	e60f      	b.n	80003ae <__aeabi_ddiv+0x152>
 800078e:	428a      	cmp	r2, r1
 8000790:	d800      	bhi.n	8000794 <__aeabi_ddiv+0x538>
 8000792:	e5fa      	b.n	800038a <__aeabi_ddiv+0x12e>
 8000794:	1e83      	subs	r3, r0, #2
 8000796:	4698      	mov	r8, r3
 8000798:	1909      	adds	r1, r1, r4
 800079a:	e5f6      	b.n	800038a <__aeabi_ddiv+0x12e>
 800079c:	4b24      	ldr	r3, [pc, #144]	; (8000830 <__aeabi_ddiv+0x5d4>)
 800079e:	0028      	movs	r0, r5
 80007a0:	445b      	add	r3, fp
 80007a2:	4641      	mov	r1, r8
 80007a4:	409d      	lsls	r5, r3
 80007a6:	4099      	lsls	r1, r3
 80007a8:	40d0      	lsrs	r0, r2
 80007aa:	1e6b      	subs	r3, r5, #1
 80007ac:	419d      	sbcs	r5, r3
 80007ae:	4643      	mov	r3, r8
 80007b0:	4301      	orrs	r1, r0
 80007b2:	4329      	orrs	r1, r5
 80007b4:	40d3      	lsrs	r3, r2
 80007b6:	074a      	lsls	r2, r1, #29
 80007b8:	d100      	bne.n	80007bc <__aeabi_ddiv+0x560>
 80007ba:	e755      	b.n	8000668 <__aeabi_ddiv+0x40c>
 80007bc:	220f      	movs	r2, #15
 80007be:	400a      	ands	r2, r1
 80007c0:	2a04      	cmp	r2, #4
 80007c2:	d000      	beq.n	80007c6 <__aeabi_ddiv+0x56a>
 80007c4:	e74a      	b.n	800065c <__aeabi_ddiv+0x400>
 80007c6:	e74f      	b.n	8000668 <__aeabi_ddiv+0x40c>
 80007c8:	0015      	movs	r5, r2
 80007ca:	4286      	cmp	r6, r0
 80007cc:	d000      	beq.n	80007d0 <__aeabi_ddiv+0x574>
 80007ce:	e66d      	b.n	80004ac <__aeabi_ddiv+0x250>
 80007d0:	9a00      	ldr	r2, [sp, #0]
 80007d2:	429a      	cmp	r2, r3
 80007d4:	d000      	beq.n	80007d8 <__aeabi_ddiv+0x57c>
 80007d6:	e669      	b.n	80004ac <__aeabi_ddiv+0x250>
 80007d8:	e66a      	b.n	80004b0 <__aeabi_ddiv+0x254>
 80007da:	4b16      	ldr	r3, [pc, #88]	; (8000834 <__aeabi_ddiv+0x5d8>)
 80007dc:	445b      	add	r3, fp
 80007de:	2b00      	cmp	r3, #0
 80007e0:	dc00      	bgt.n	80007e4 <__aeabi_ddiv+0x588>
 80007e2:	e713      	b.n	800060c <__aeabi_ddiv+0x3b0>
 80007e4:	2501      	movs	r5, #1
 80007e6:	2100      	movs	r1, #0
 80007e8:	44a8      	add	r8, r5
 80007ea:	e66a      	b.n	80004c2 <__aeabi_ddiv+0x266>
 80007ec:	075d      	lsls	r5, r3, #29
 80007ee:	025b      	lsls	r3, r3, #9
 80007f0:	0b1a      	lsrs	r2, r3, #12
 80007f2:	08c9      	lsrs	r1, r1, #3
 80007f4:	2300      	movs	r3, #0
 80007f6:	430d      	orrs	r5, r1
 80007f8:	e587      	b.n	800030a <__aeabi_ddiv+0xae>
 80007fa:	9900      	ldr	r1, [sp, #0]
 80007fc:	3d02      	subs	r5, #2
 80007fe:	004a      	lsls	r2, r1, #1
 8000800:	428a      	cmp	r2, r1
 8000802:	41bf      	sbcs	r7, r7
 8000804:	427f      	negs	r7, r7
 8000806:	193f      	adds	r7, r7, r4
 8000808:	19f6      	adds	r6, r6, r7
 800080a:	9200      	str	r2, [sp, #0]
 800080c:	e7dd      	b.n	80007ca <__aeabi_ddiv+0x56e>
 800080e:	2280      	movs	r2, #128	; 0x80
 8000810:	4643      	mov	r3, r8
 8000812:	0312      	lsls	r2, r2, #12
 8000814:	431a      	orrs	r2, r3
 8000816:	0312      	lsls	r2, r2, #12
 8000818:	4b03      	ldr	r3, [pc, #12]	; (8000828 <__aeabi_ddiv+0x5cc>)
 800081a:	0b12      	lsrs	r2, r2, #12
 800081c:	e575      	b.n	800030a <__aeabi_ddiv+0xae>
 800081e:	9900      	ldr	r1, [sp, #0]
 8000820:	4299      	cmp	r1, r3
 8000822:	d3ea      	bcc.n	80007fa <__aeabi_ddiv+0x59e>
 8000824:	0015      	movs	r5, r2
 8000826:	e7d3      	b.n	80007d0 <__aeabi_ddiv+0x574>
 8000828:	000007ff 	.word	0x000007ff
 800082c:	0000043e 	.word	0x0000043e
 8000830:	0000041e 	.word	0x0000041e
 8000834:	000003ff 	.word	0x000003ff

08000838 <__aeabi_i2d>:
 8000838:	b570      	push	{r4, r5, r6, lr}
 800083a:	2800      	cmp	r0, #0
 800083c:	d016      	beq.n	800086c <__aeabi_i2d+0x34>
 800083e:	17c3      	asrs	r3, r0, #31
 8000840:	18c5      	adds	r5, r0, r3
 8000842:	405d      	eors	r5, r3
 8000844:	0fc4      	lsrs	r4, r0, #31
 8000846:	0028      	movs	r0, r5
 8000848:	f000 f8ac 	bl	80009a4 <__clzsi2>
 800084c:	4b11      	ldr	r3, [pc, #68]	; (8000894 <__aeabi_i2d+0x5c>)
 800084e:	1a1b      	subs	r3, r3, r0
 8000850:	280a      	cmp	r0, #10
 8000852:	dc16      	bgt.n	8000882 <__aeabi_i2d+0x4a>
 8000854:	0002      	movs	r2, r0
 8000856:	002e      	movs	r6, r5
 8000858:	3215      	adds	r2, #21
 800085a:	4096      	lsls	r6, r2
 800085c:	220b      	movs	r2, #11
 800085e:	1a12      	subs	r2, r2, r0
 8000860:	40d5      	lsrs	r5, r2
 8000862:	055b      	lsls	r3, r3, #21
 8000864:	032d      	lsls	r5, r5, #12
 8000866:	0b2d      	lsrs	r5, r5, #12
 8000868:	0d5b      	lsrs	r3, r3, #21
 800086a:	e003      	b.n	8000874 <__aeabi_i2d+0x3c>
 800086c:	2400      	movs	r4, #0
 800086e:	2300      	movs	r3, #0
 8000870:	2500      	movs	r5, #0
 8000872:	2600      	movs	r6, #0
 8000874:	051b      	lsls	r3, r3, #20
 8000876:	432b      	orrs	r3, r5
 8000878:	07e4      	lsls	r4, r4, #31
 800087a:	4323      	orrs	r3, r4
 800087c:	0030      	movs	r0, r6
 800087e:	0019      	movs	r1, r3
 8000880:	bd70      	pop	{r4, r5, r6, pc}
 8000882:	380b      	subs	r0, #11
 8000884:	4085      	lsls	r5, r0
 8000886:	055b      	lsls	r3, r3, #21
 8000888:	032d      	lsls	r5, r5, #12
 800088a:	2600      	movs	r6, #0
 800088c:	0b2d      	lsrs	r5, r5, #12
 800088e:	0d5b      	lsrs	r3, r3, #21
 8000890:	e7f0      	b.n	8000874 <__aeabi_i2d+0x3c>
 8000892:	46c0      	nop			; (mov r8, r8)
 8000894:	0000041e 	.word	0x0000041e

08000898 <__aeabi_d2f>:
 8000898:	0002      	movs	r2, r0
 800089a:	b5f0      	push	{r4, r5, r6, r7, lr}
 800089c:	004b      	lsls	r3, r1, #1
 800089e:	030d      	lsls	r5, r1, #12
 80008a0:	0f40      	lsrs	r0, r0, #29
 80008a2:	0d5b      	lsrs	r3, r3, #21
 80008a4:	0fcc      	lsrs	r4, r1, #31
 80008a6:	0a6d      	lsrs	r5, r5, #9
 80008a8:	493a      	ldr	r1, [pc, #232]	; (8000994 <__aeabi_d2f+0xfc>)
 80008aa:	4305      	orrs	r5, r0
 80008ac:	1c58      	adds	r0, r3, #1
 80008ae:	00d7      	lsls	r7, r2, #3
 80008b0:	4208      	tst	r0, r1
 80008b2:	d00a      	beq.n	80008ca <__aeabi_d2f+0x32>
 80008b4:	4938      	ldr	r1, [pc, #224]	; (8000998 <__aeabi_d2f+0x100>)
 80008b6:	1859      	adds	r1, r3, r1
 80008b8:	29fe      	cmp	r1, #254	; 0xfe
 80008ba:	dd16      	ble.n	80008ea <__aeabi_d2f+0x52>
 80008bc:	20ff      	movs	r0, #255	; 0xff
 80008be:	2200      	movs	r2, #0
 80008c0:	05c0      	lsls	r0, r0, #23
 80008c2:	4310      	orrs	r0, r2
 80008c4:	07e4      	lsls	r4, r4, #31
 80008c6:	4320      	orrs	r0, r4
 80008c8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d106      	bne.n	80008dc <__aeabi_d2f+0x44>
 80008ce:	433d      	orrs	r5, r7
 80008d0:	d026      	beq.n	8000920 <__aeabi_d2f+0x88>
 80008d2:	2205      	movs	r2, #5
 80008d4:	0192      	lsls	r2, r2, #6
 80008d6:	0a52      	lsrs	r2, r2, #9
 80008d8:	b2d8      	uxtb	r0, r3
 80008da:	e7f1      	b.n	80008c0 <__aeabi_d2f+0x28>
 80008dc:	432f      	orrs	r7, r5
 80008de:	d0ed      	beq.n	80008bc <__aeabi_d2f+0x24>
 80008e0:	2280      	movs	r2, #128	; 0x80
 80008e2:	03d2      	lsls	r2, r2, #15
 80008e4:	20ff      	movs	r0, #255	; 0xff
 80008e6:	432a      	orrs	r2, r5
 80008e8:	e7ea      	b.n	80008c0 <__aeabi_d2f+0x28>
 80008ea:	2900      	cmp	r1, #0
 80008ec:	dd1b      	ble.n	8000926 <__aeabi_d2f+0x8e>
 80008ee:	0192      	lsls	r2, r2, #6
 80008f0:	1e50      	subs	r0, r2, #1
 80008f2:	4182      	sbcs	r2, r0
 80008f4:	00ed      	lsls	r5, r5, #3
 80008f6:	0f7f      	lsrs	r7, r7, #29
 80008f8:	432a      	orrs	r2, r5
 80008fa:	433a      	orrs	r2, r7
 80008fc:	0753      	lsls	r3, r2, #29
 80008fe:	d047      	beq.n	8000990 <__aeabi_d2f+0xf8>
 8000900:	230f      	movs	r3, #15
 8000902:	4013      	ands	r3, r2
 8000904:	2b04      	cmp	r3, #4
 8000906:	d000      	beq.n	800090a <__aeabi_d2f+0x72>
 8000908:	3204      	adds	r2, #4
 800090a:	2380      	movs	r3, #128	; 0x80
 800090c:	04db      	lsls	r3, r3, #19
 800090e:	4013      	ands	r3, r2
 8000910:	d03e      	beq.n	8000990 <__aeabi_d2f+0xf8>
 8000912:	1c48      	adds	r0, r1, #1
 8000914:	29fe      	cmp	r1, #254	; 0xfe
 8000916:	d0d1      	beq.n	80008bc <__aeabi_d2f+0x24>
 8000918:	0192      	lsls	r2, r2, #6
 800091a:	0a52      	lsrs	r2, r2, #9
 800091c:	b2c0      	uxtb	r0, r0
 800091e:	e7cf      	b.n	80008c0 <__aeabi_d2f+0x28>
 8000920:	2000      	movs	r0, #0
 8000922:	2200      	movs	r2, #0
 8000924:	e7cc      	b.n	80008c0 <__aeabi_d2f+0x28>
 8000926:	000a      	movs	r2, r1
 8000928:	3217      	adds	r2, #23
 800092a:	db2f      	blt.n	800098c <__aeabi_d2f+0xf4>
 800092c:	2680      	movs	r6, #128	; 0x80
 800092e:	0436      	lsls	r6, r6, #16
 8000930:	432e      	orrs	r6, r5
 8000932:	251e      	movs	r5, #30
 8000934:	1a6d      	subs	r5, r5, r1
 8000936:	2d1f      	cmp	r5, #31
 8000938:	dd11      	ble.n	800095e <__aeabi_d2f+0xc6>
 800093a:	2202      	movs	r2, #2
 800093c:	4252      	negs	r2, r2
 800093e:	1a52      	subs	r2, r2, r1
 8000940:	0031      	movs	r1, r6
 8000942:	40d1      	lsrs	r1, r2
 8000944:	2d20      	cmp	r5, #32
 8000946:	d004      	beq.n	8000952 <__aeabi_d2f+0xba>
 8000948:	4a14      	ldr	r2, [pc, #80]	; (800099c <__aeabi_d2f+0x104>)
 800094a:	4694      	mov	ip, r2
 800094c:	4463      	add	r3, ip
 800094e:	409e      	lsls	r6, r3
 8000950:	4337      	orrs	r7, r6
 8000952:	003a      	movs	r2, r7
 8000954:	1e53      	subs	r3, r2, #1
 8000956:	419a      	sbcs	r2, r3
 8000958:	430a      	orrs	r2, r1
 800095a:	2100      	movs	r1, #0
 800095c:	e7ce      	b.n	80008fc <__aeabi_d2f+0x64>
 800095e:	4a10      	ldr	r2, [pc, #64]	; (80009a0 <__aeabi_d2f+0x108>)
 8000960:	0038      	movs	r0, r7
 8000962:	4694      	mov	ip, r2
 8000964:	4463      	add	r3, ip
 8000966:	4098      	lsls	r0, r3
 8000968:	003a      	movs	r2, r7
 800096a:	1e41      	subs	r1, r0, #1
 800096c:	4188      	sbcs	r0, r1
 800096e:	409e      	lsls	r6, r3
 8000970:	40ea      	lsrs	r2, r5
 8000972:	4330      	orrs	r0, r6
 8000974:	4302      	orrs	r2, r0
 8000976:	2100      	movs	r1, #0
 8000978:	0753      	lsls	r3, r2, #29
 800097a:	d1c1      	bne.n	8000900 <__aeabi_d2f+0x68>
 800097c:	2180      	movs	r1, #128	; 0x80
 800097e:	0013      	movs	r3, r2
 8000980:	04c9      	lsls	r1, r1, #19
 8000982:	2001      	movs	r0, #1
 8000984:	400b      	ands	r3, r1
 8000986:	420a      	tst	r2, r1
 8000988:	d1c6      	bne.n	8000918 <__aeabi_d2f+0x80>
 800098a:	e7a3      	b.n	80008d4 <__aeabi_d2f+0x3c>
 800098c:	2300      	movs	r3, #0
 800098e:	e7a0      	b.n	80008d2 <__aeabi_d2f+0x3a>
 8000990:	000b      	movs	r3, r1
 8000992:	e79f      	b.n	80008d4 <__aeabi_d2f+0x3c>
 8000994:	000007fe 	.word	0x000007fe
 8000998:	fffffc80 	.word	0xfffffc80
 800099c:	fffffca2 	.word	0xfffffca2
 80009a0:	fffffc82 	.word	0xfffffc82

080009a4 <__clzsi2>:
 80009a4:	211c      	movs	r1, #28
 80009a6:	2301      	movs	r3, #1
 80009a8:	041b      	lsls	r3, r3, #16
 80009aa:	4298      	cmp	r0, r3
 80009ac:	d301      	bcc.n	80009b2 <__clzsi2+0xe>
 80009ae:	0c00      	lsrs	r0, r0, #16
 80009b0:	3910      	subs	r1, #16
 80009b2:	0a1b      	lsrs	r3, r3, #8
 80009b4:	4298      	cmp	r0, r3
 80009b6:	d301      	bcc.n	80009bc <__clzsi2+0x18>
 80009b8:	0a00      	lsrs	r0, r0, #8
 80009ba:	3908      	subs	r1, #8
 80009bc:	091b      	lsrs	r3, r3, #4
 80009be:	4298      	cmp	r0, r3
 80009c0:	d301      	bcc.n	80009c6 <__clzsi2+0x22>
 80009c2:	0900      	lsrs	r0, r0, #4
 80009c4:	3904      	subs	r1, #4
 80009c6:	a202      	add	r2, pc, #8	; (adr r2, 80009d0 <__clzsi2+0x2c>)
 80009c8:	5c10      	ldrb	r0, [r2, r0]
 80009ca:	1840      	adds	r0, r0, r1
 80009cc:	4770      	bx	lr
 80009ce:	46c0      	nop			; (mov r8, r8)
 80009d0:	02020304 	.word	0x02020304
 80009d4:	01010101 	.word	0x01010101
	...

080009e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009e4:	f000 fdfa 	bl	80015dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009e8:	f000 f842 	bl	8000a70 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009ec:	f000 fa76 	bl	8000edc <MX_GPIO_Init>
  MX_TIM1_Init();
 80009f0:	f000 f946 	bl	8000c80 <MX_TIM1_Init>
  MX_ADC1_Init();
 80009f4:	f000 f89a 	bl	8000b2c <MX_ADC1_Init>
  MX_TIM3_Init();
 80009f8:	f000 fa18 	bl	8000e2c <MX_TIM3_Init>
  MX_I2C1_Init();
 80009fc:	f000 f900 	bl	8000c00 <MX_I2C1_Init>
//  else
//  {
//	  verify = 4;
//  }

  HAL_TIM_PWM_Start(&htim1, MotorR_PWM);
 8000a00:	4b14      	ldr	r3, [pc, #80]	; (8000a54 <main+0x74>)
 8000a02:	2100      	movs	r1, #0
 8000a04:	0018      	movs	r0, r3
 8000a06:	f003 fbf7 	bl	80041f8 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, MotorL_PWM);
 8000a0a:	4b12      	ldr	r3, [pc, #72]	; (8000a54 <main+0x74>)
 8000a0c:	2104      	movs	r1, #4
 8000a0e:	0018      	movs	r0, r3
 8000a10:	f003 fbf2 	bl	80041f8 <HAL_TIM_PWM_Start>

  HAL_TIM_Base_Start_IT(&htim3);
 8000a14:	4b10      	ldr	r3, [pc, #64]	; (8000a58 <main+0x78>)
 8000a16:	0018      	movs	r0, r3
 8000a18:	f003 fb2c 	bl	8004074 <HAL_TIM_Base_Start_IT>

  HAL_ADC_Start(&hadc1);
 8000a1c:	4b0f      	ldr	r3, [pc, #60]	; (8000a5c <main+0x7c>)
 8000a1e:	0018      	movs	r0, r3
 8000a20:	f001 f944 	bl	8001cac <HAL_ADC_Start>

  sConfigPrivate.Rank = ADC_REGULAR_RANK_1;
 8000a24:	4b0e      	ldr	r3, [pc, #56]	; (8000a60 <main+0x80>)
 8000a26:	2200      	movs	r2, #0
 8000a28:	605a      	str	r2, [r3, #4]
  sConfigPrivate.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a2a:	4b0d      	ldr	r3, [pc, #52]	; (8000a60 <main+0x80>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	609a      	str	r2, [r3, #8]

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  MPU_Accel_Read(&accel_data);
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <main+0x84>)
 8000a32:	0018      	movs	r0, r3
 8000a34:	f000 faee 	bl	8001014 <MPU_Accel_Read>
	  MPU_Gyro_Read(&gyro_data);
 8000a38:	4b0b      	ldr	r3, [pc, #44]	; (8000a68 <main+0x88>)
 8000a3a:	0018      	movs	r0, r3
 8000a3c:	f000 fb60 	bl	8001100 <MPU_Gyro_Read>

	  verify = accel_data.Accel_X;
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <main+0x84>)
 8000a42:	681b      	ldr	r3, [r3, #0]
 8000a44:	1c18      	adds	r0, r3, #0
 8000a46:	f7ff fbe9 	bl	800021c <__aeabi_f2iz>
 8000a4a:	0002      	movs	r2, r0
 8000a4c:	4b07      	ldr	r3, [pc, #28]	; (8000a6c <main+0x8c>)
 8000a4e:	601a      	str	r2, [r3, #0]
  {
 8000a50:	e7ee      	b.n	8000a30 <main+0x50>
 8000a52:	46c0      	nop			; (mov r8, r8)
 8000a54:	200000e0 	.word	0x200000e0
 8000a58:	2000012c 	.word	0x2000012c
 8000a5c:	20000028 	.word	0x20000028
 8000a60:	20000178 	.word	0x20000178
 8000a64:	2000018c 	.word	0x2000018c
 8000a68:	20000198 	.word	0x20000198
 8000a6c:	20000188 	.word	0x20000188

08000a70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000a70:	b590      	push	{r4, r7, lr}
 8000a72:	b095      	sub	sp, #84	; 0x54
 8000a74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000a76:	2414      	movs	r4, #20
 8000a78:	193b      	adds	r3, r7, r4
 8000a7a:	0018      	movs	r0, r3
 8000a7c:	233c      	movs	r3, #60	; 0x3c
 8000a7e:	001a      	movs	r2, r3
 8000a80:	2100      	movs	r1, #0
 8000a82:	f004 fced 	bl	8005460 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000a86:	1d3b      	adds	r3, r7, #4
 8000a88:	0018      	movs	r0, r3
 8000a8a:	2310      	movs	r3, #16
 8000a8c:	001a      	movs	r2, r3
 8000a8e:	2100      	movs	r1, #0
 8000a90:	f004 fce6 	bl	8005460 <memset>

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000a94:	2380      	movs	r3, #128	; 0x80
 8000a96:	009b      	lsls	r3, r3, #2
 8000a98:	0018      	movs	r0, r3
 8000a9a:	f002 fb2d 	bl	80030f8 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000a9e:	193b      	adds	r3, r7, r4
 8000aa0:	2202      	movs	r2, #2
 8000aa2:	601a      	str	r2, [r3, #0]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000aa4:	193b      	adds	r3, r7, r4
 8000aa6:	2280      	movs	r2, #128	; 0x80
 8000aa8:	0052      	lsls	r2, r2, #1
 8000aaa:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSIDiv = RCC_HSI_DIV1;
 8000aac:	0021      	movs	r1, r4
 8000aae:	187b      	adds	r3, r7, r1
 8000ab0:	2200      	movs	r2, #0
 8000ab2:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ab4:	187b      	adds	r3, r7, r1
 8000ab6:	2240      	movs	r2, #64	; 0x40
 8000ab8:	615a      	str	r2, [r3, #20]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000aba:	187b      	adds	r3, r7, r1
 8000abc:	2202      	movs	r2, #2
 8000abe:	621a      	str	r2, [r3, #32]
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ac0:	187b      	adds	r3, r7, r1
 8000ac2:	2202      	movs	r2, #2
 8000ac4:	625a      	str	r2, [r3, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV1;
 8000ac6:	187b      	adds	r3, r7, r1
 8000ac8:	2200      	movs	r2, #0
 8000aca:	629a      	str	r2, [r3, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLN = 8;
 8000acc:	187b      	adds	r3, r7, r1
 8000ace:	2208      	movs	r2, #8
 8000ad0:	62da      	str	r2, [r3, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000ad2:	187b      	adds	r3, r7, r1
 8000ad4:	2280      	movs	r2, #128	; 0x80
 8000ad6:	0292      	lsls	r2, r2, #10
 8000ad8:	631a      	str	r2, [r3, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000ada:	187b      	adds	r3, r7, r1
 8000adc:	2280      	movs	r2, #128	; 0x80
 8000ade:	0492      	lsls	r2, r2, #18
 8000ae0:	635a      	str	r2, [r3, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000ae2:	187b      	adds	r3, r7, r1
 8000ae4:	2280      	movs	r2, #128	; 0x80
 8000ae6:	0592      	lsls	r2, r2, #22
 8000ae8:	639a      	str	r2, [r3, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000aea:	187b      	adds	r3, r7, r1
 8000aec:	0018      	movs	r0, r3
 8000aee:	f002 fb43 	bl	8003178 <HAL_RCC_OscConfig>
 8000af2:	1e03      	subs	r3, r0, #0
 8000af4:	d001      	beq.n	8000afa <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000af6:	f000 fb79 	bl	80011ec <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000afa:	1d3b      	adds	r3, r7, #4
 8000afc:	2207      	movs	r2, #7
 8000afe:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b00:	1d3b      	adds	r3, r7, #4
 8000b02:	2202      	movs	r2, #2
 8000b04:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b06:	1d3b      	adds	r3, r7, #4
 8000b08:	2200      	movs	r2, #0
 8000b0a:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000b0c:	1d3b      	adds	r3, r7, #4
 8000b0e:	2200      	movs	r2, #0
 8000b10:	60da      	str	r2, [r3, #12]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b12:	1d3b      	adds	r3, r7, #4
 8000b14:	2102      	movs	r1, #2
 8000b16:	0018      	movs	r0, r3
 8000b18:	f002 fe8e 	bl	8003838 <HAL_RCC_ClockConfig>
 8000b1c:	1e03      	subs	r3, r0, #0
 8000b1e:	d001      	beq.n	8000b24 <SystemClock_Config+0xb4>
  {
    Error_Handler();
 8000b20:	f000 fb64 	bl	80011ec <Error_Handler>
  }
}
 8000b24:	46c0      	nop			; (mov r8, r8)
 8000b26:	46bd      	mov	sp, r7
 8000b28:	b015      	add	sp, #84	; 0x54
 8000b2a:	bd90      	pop	{r4, r7, pc}

08000b2c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000b2c:	b580      	push	{r7, lr}
 8000b2e:	b084      	sub	sp, #16
 8000b30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000b32:	1d3b      	adds	r3, r7, #4
 8000b34:	0018      	movs	r0, r3
 8000b36:	230c      	movs	r3, #12
 8000b38:	001a      	movs	r2, r3
 8000b3a:	2100      	movs	r1, #0
 8000b3c:	f004 fc90 	bl	8005460 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000b40:	4b2d      	ldr	r3, [pc, #180]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b42:	4a2e      	ldr	r2, [pc, #184]	; (8000bfc <MX_ADC1_Init+0xd0>)
 8000b44:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000b46:	4b2c      	ldr	r3, [pc, #176]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b48:	2280      	movs	r2, #128	; 0x80
 8000b4a:	05d2      	lsls	r2, r2, #23
 8000b4c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000b4e:	4b2a      	ldr	r3, [pc, #168]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b50:	2200      	movs	r2, #0
 8000b52:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000b54:	4b28      	ldr	r3, [pc, #160]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b56:	2200      	movs	r2, #0
 8000b58:	60da      	str	r2, [r3, #12]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000b5a:	4b27      	ldr	r3, [pc, #156]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b5c:	2200      	movs	r2, #0
 8000b5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000b60:	4b25      	ldr	r3, [pc, #148]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b62:	2204      	movs	r2, #4
 8000b64:	615a      	str	r2, [r3, #20]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000b66:	4b24      	ldr	r3, [pc, #144]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b68:	2200      	movs	r2, #0
 8000b6a:	761a      	strb	r2, [r3, #24]
  hadc1.Init.LowPowerAutoPowerOff = DISABLE;
 8000b6c:	4b22      	ldr	r3, [pc, #136]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	765a      	strb	r2, [r3, #25]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000b72:	4b21      	ldr	r3, [pc, #132]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b74:	2200      	movs	r2, #0
 8000b76:	769a      	strb	r2, [r3, #26]
  hadc1.Init.NbrOfConversion = 1;
 8000b78:	4b1f      	ldr	r3, [pc, #124]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b7a:	2201      	movs	r2, #1
 8000b7c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000b7e:	4b1e      	ldr	r3, [pc, #120]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b80:	2220      	movs	r2, #32
 8000b82:	2100      	movs	r1, #0
 8000b84:	5499      	strb	r1, [r3, r2]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000b86:	4b1c      	ldr	r3, [pc, #112]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b88:	2200      	movs	r2, #0
 8000b8a:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000b8c:	4b1a      	ldr	r3, [pc, #104]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b8e:	2200      	movs	r2, #0
 8000b90:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000b92:	4b19      	ldr	r3, [pc, #100]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b94:	222c      	movs	r2, #44	; 0x2c
 8000b96:	2100      	movs	r1, #0
 8000b98:	5499      	strb	r1, [r3, r2]
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000b9a:	4b17      	ldr	r3, [pc, #92]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.SamplingTimeCommon1 = ADC_SAMPLETIME_1CYCLE_5;
 8000ba0:	4b15      	ldr	r3, [pc, #84]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000ba2:	2200      	movs	r2, #0
 8000ba4:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.SamplingTimeCommon2 = ADC_SAMPLETIME_1CYCLE_5;
 8000ba6:	4b14      	ldr	r3, [pc, #80]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000ba8:	2200      	movs	r2, #0
 8000baa:	639a      	str	r2, [r3, #56]	; 0x38
  hadc1.Init.OversamplingMode = DISABLE;
 8000bac:	4b12      	ldr	r3, [pc, #72]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000bae:	223c      	movs	r2, #60	; 0x3c
 8000bb0:	2100      	movs	r1, #0
 8000bb2:	5499      	strb	r1, [r3, r2]
  hadc1.Init.TriggerFrequencyMode = ADC_TRIGGER_FREQ_HIGH;
 8000bb4:	4b10      	ldr	r3, [pc, #64]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	64da      	str	r2, [r3, #76]	; 0x4c
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000bba:	4b0f      	ldr	r3, [pc, #60]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000bbc:	0018      	movs	r0, r3
 8000bbe:	f000 fecd 	bl	800195c <HAL_ADC_Init>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d001      	beq.n	8000bca <MX_ADC1_Init+0x9e>
  {
    Error_Handler();
 8000bc6:	f000 fb11 	bl	80011ec <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000bca:	1d3b      	adds	r3, r7, #4
 8000bcc:	2201      	movs	r2, #1
 8000bce:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000bd0:	1d3b      	adds	r3, r7, #4
 8000bd2:	2200      	movs	r2, #0
 8000bd4:	605a      	str	r2, [r3, #4]
  sConfig.SamplingTime = ADC_SAMPLINGTIME_COMMON_1;
 8000bd6:	1d3b      	adds	r3, r7, #4
 8000bd8:	2200      	movs	r2, #0
 8000bda:	609a      	str	r2, [r3, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000bdc:	1d3a      	adds	r2, r7, #4
 8000bde:	4b06      	ldr	r3, [pc, #24]	; (8000bf8 <MX_ADC1_Init+0xcc>)
 8000be0:	0011      	movs	r1, r2
 8000be2:	0018      	movs	r0, r3
 8000be4:	f001 f8b0 	bl	8001d48 <HAL_ADC_ConfigChannel>
 8000be8:	1e03      	subs	r3, r0, #0
 8000bea:	d001      	beq.n	8000bf0 <MX_ADC1_Init+0xc4>
  {
    Error_Handler();
 8000bec:	f000 fafe 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000bf0:	46c0      	nop			; (mov r8, r8)
 8000bf2:	46bd      	mov	sp, r7
 8000bf4:	b004      	add	sp, #16
 8000bf6:	bd80      	pop	{r7, pc}
 8000bf8:	20000028 	.word	0x20000028
 8000bfc:	40012400 	.word	0x40012400

08000c00 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c00:	b580      	push	{r7, lr}
 8000c02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c04:	4b1b      	ldr	r3, [pc, #108]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c06:	4a1c      	ldr	r2, [pc, #112]	; (8000c78 <MX_I2C1_Init+0x78>)
 8000c08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00602173;
 8000c0a:	4b1a      	ldr	r3, [pc, #104]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c0c:	4a1b      	ldr	r2, [pc, #108]	; (8000c7c <MX_I2C1_Init+0x7c>)
 8000c0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000c10:	4b18      	ldr	r3, [pc, #96]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c12:	2200      	movs	r2, #0
 8000c14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c16:	4b17      	ldr	r3, [pc, #92]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c18:	2201      	movs	r2, #1
 8000c1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c1c:	4b15      	ldr	r3, [pc, #84]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000c22:	4b14      	ldr	r3, [pc, #80]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000c28:	4b12      	ldr	r3, [pc, #72]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c2a:	2200      	movs	r2, #0
 8000c2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c30:	2200      	movs	r2, #0
 8000c32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c34:	4b0f      	ldr	r3, [pc, #60]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c36:	2200      	movs	r2, #0
 8000c38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c3c:	0018      	movs	r0, r3
 8000c3e:	f001 fd49 	bl	80026d4 <HAL_I2C_Init>
 8000c42:	1e03      	subs	r3, r0, #0
 8000c44:	d001      	beq.n	8000c4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000c46:	f000 fad1 	bl	80011ec <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000c4a:	4b0a      	ldr	r3, [pc, #40]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c4c:	2100      	movs	r1, #0
 8000c4e:	0018      	movs	r0, r3
 8000c50:	f002 f9ba 	bl	8002fc8 <HAL_I2CEx_ConfigAnalogFilter>
 8000c54:	1e03      	subs	r3, r0, #0
 8000c56:	d001      	beq.n	8000c5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000c58:	f000 fac8 	bl	80011ec <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000c5c:	4b05      	ldr	r3, [pc, #20]	; (8000c74 <MX_I2C1_Init+0x74>)
 8000c5e:	2100      	movs	r1, #0
 8000c60:	0018      	movs	r0, r3
 8000c62:	f002 f9fd 	bl	8003060 <HAL_I2CEx_ConfigDigitalFilter>
 8000c66:	1e03      	subs	r3, r0, #0
 8000c68:	d001      	beq.n	8000c6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000c6a:	f000 fabf 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000c6e:	46c0      	nop			; (mov r8, r8)
 8000c70:	46bd      	mov	sp, r7
 8000c72:	bd80      	pop	{r7, pc}
 8000c74:	2000008c 	.word	0x2000008c
 8000c78:	40005400 	.word	0x40005400
 8000c7c:	00602173 	.word	0x00602173

08000c80 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c80:	b580      	push	{r7, lr}
 8000c82:	b09c      	sub	sp, #112	; 0x70
 8000c84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c86:	2360      	movs	r3, #96	; 0x60
 8000c88:	18fb      	adds	r3, r7, r3
 8000c8a:	0018      	movs	r0, r3
 8000c8c:	2310      	movs	r3, #16
 8000c8e:	001a      	movs	r2, r3
 8000c90:	2100      	movs	r1, #0
 8000c92:	f004 fbe5 	bl	8005460 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c96:	2354      	movs	r3, #84	; 0x54
 8000c98:	18fb      	adds	r3, r7, r3
 8000c9a:	0018      	movs	r0, r3
 8000c9c:	230c      	movs	r3, #12
 8000c9e:	001a      	movs	r2, r3
 8000ca0:	2100      	movs	r1, #0
 8000ca2:	f004 fbdd 	bl	8005460 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ca6:	2338      	movs	r3, #56	; 0x38
 8000ca8:	18fb      	adds	r3, r7, r3
 8000caa:	0018      	movs	r0, r3
 8000cac:	231c      	movs	r3, #28
 8000cae:	001a      	movs	r2, r3
 8000cb0:	2100      	movs	r1, #0
 8000cb2:	f004 fbd5 	bl	8005460 <memset>
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000cb6:	1d3b      	adds	r3, r7, #4
 8000cb8:	0018      	movs	r0, r3
 8000cba:	2334      	movs	r3, #52	; 0x34
 8000cbc:	001a      	movs	r2, r3
 8000cbe:	2100      	movs	r1, #0
 8000cc0:	f004 fbce 	bl	8005460 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000cc4:	4b56      	ldr	r3, [pc, #344]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000cc6:	4a57      	ldr	r2, [pc, #348]	; (8000e24 <MX_TIM1_Init+0x1a4>)
 8000cc8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 127;
 8000cca:	4b55      	ldr	r3, [pc, #340]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000ccc:	227f      	movs	r2, #127	; 0x7f
 8000cce:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cd0:	4b53      	ldr	r3, [pc, #332]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000cd2:	2200      	movs	r2, #0
 8000cd4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 625;
 8000cd6:	4b52      	ldr	r3, [pc, #328]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000cd8:	4a53      	ldr	r2, [pc, #332]	; (8000e28 <MX_TIM1_Init+0x1a8>)
 8000cda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cdc:	4b50      	ldr	r3, [pc, #320]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000ce2:	4b4f      	ldr	r3, [pc, #316]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ce8:	4b4d      	ldr	r3, [pc, #308]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000cee:	4b4c      	ldr	r3, [pc, #304]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000cf0:	0018      	movs	r0, r3
 8000cf2:	f003 f967 	bl	8003fc4 <HAL_TIM_Base_Init>
 8000cf6:	1e03      	subs	r3, r0, #0
 8000cf8:	d001      	beq.n	8000cfe <MX_TIM1_Init+0x7e>
  {
    Error_Handler();
 8000cfa:	f000 fa77 	bl	80011ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000cfe:	2160      	movs	r1, #96	; 0x60
 8000d00:	187b      	adds	r3, r7, r1
 8000d02:	2280      	movs	r2, #128	; 0x80
 8000d04:	0152      	lsls	r2, r2, #5
 8000d06:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d08:	187a      	adds	r2, r7, r1
 8000d0a:	4b45      	ldr	r3, [pc, #276]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000d0c:	0011      	movs	r1, r2
 8000d0e:	0018      	movs	r0, r3
 8000d10:	f003 fd6a 	bl	80047e8 <HAL_TIM_ConfigClockSource>
 8000d14:	1e03      	subs	r3, r0, #0
 8000d16:	d001      	beq.n	8000d1c <MX_TIM1_Init+0x9c>
  {
    Error_Handler();
 8000d18:	f000 fa68 	bl	80011ec <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8000d1c:	4b40      	ldr	r3, [pc, #256]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000d1e:	0018      	movs	r0, r3
 8000d20:	f003 fa0a 	bl	8004138 <HAL_TIM_PWM_Init>
 8000d24:	1e03      	subs	r3, r0, #0
 8000d26:	d001      	beq.n	8000d2c <MX_TIM1_Init+0xac>
  {
    Error_Handler();
 8000d28:	f000 fa60 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d2c:	2154      	movs	r1, #84	; 0x54
 8000d2e:	187b      	adds	r3, r7, r1
 8000d30:	2200      	movs	r2, #0
 8000d32:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8000d34:	187b      	adds	r3, r7, r1
 8000d36:	2200      	movs	r2, #0
 8000d38:	605a      	str	r2, [r3, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d3a:	187b      	adds	r3, r7, r1
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000d40:	187a      	adds	r2, r7, r1
 8000d42:	4b37      	ldr	r3, [pc, #220]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000d44:	0011      	movs	r1, r2
 8000d46:	0018      	movs	r0, r3
 8000d48:	f004 fa60 	bl	800520c <HAL_TIMEx_MasterConfigSynchronization>
 8000d4c:	1e03      	subs	r3, r0, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM1_Init+0xd4>
  {
    Error_Handler();
 8000d50:	f000 fa4c 	bl	80011ec <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d54:	2138      	movs	r1, #56	; 0x38
 8000d56:	187b      	adds	r3, r7, r1
 8000d58:	2260      	movs	r2, #96	; 0x60
 8000d5a:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 8000d5c:	187b      	adds	r3, r7, r1
 8000d5e:	2200      	movs	r2, #0
 8000d60:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d62:	187b      	adds	r3, r7, r1
 8000d64:	2200      	movs	r2, #0
 8000d66:	609a      	str	r2, [r3, #8]
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8000d68:	187b      	adds	r3, r7, r1
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	60da      	str	r2, [r3, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d6e:	187b      	adds	r3, r7, r1
 8000d70:	2200      	movs	r2, #0
 8000d72:	611a      	str	r2, [r3, #16]
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8000d74:	187b      	adds	r3, r7, r1
 8000d76:	2200      	movs	r2, #0
 8000d78:	615a      	str	r2, [r3, #20]
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8000d7a:	187b      	adds	r3, r7, r1
 8000d7c:	2200      	movs	r2, #0
 8000d7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d80:	1879      	adds	r1, r7, r1
 8000d82:	4b27      	ldr	r3, [pc, #156]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000d84:	2200      	movs	r2, #0
 8000d86:	0018      	movs	r0, r3
 8000d88:	f003 fc2e 	bl	80045e8 <HAL_TIM_PWM_ConfigChannel>
 8000d8c:	1e03      	subs	r3, r0, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_TIM1_Init+0x114>
  {
    Error_Handler();
 8000d90:	f000 fa2c 	bl	80011ec <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000d94:	2338      	movs	r3, #56	; 0x38
 8000d96:	18f9      	adds	r1, r7, r3
 8000d98:	4b21      	ldr	r3, [pc, #132]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000d9a:	2204      	movs	r2, #4
 8000d9c:	0018      	movs	r0, r3
 8000d9e:	f003 fc23 	bl	80045e8 <HAL_TIM_PWM_ConfigChannel>
 8000da2:	1e03      	subs	r3, r0, #0
 8000da4:	d001      	beq.n	8000daa <MX_TIM1_Init+0x12a>
  {
    Error_Handler();
 8000da6:	f000 fa21 	bl	80011ec <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8000db0:	1d3b      	adds	r3, r7, #4
 8000db2:	2200      	movs	r2, #0
 8000db4:	605a      	str	r2, [r3, #4]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8000db6:	1d3b      	adds	r3, r7, #4
 8000db8:	2200      	movs	r2, #0
 8000dba:	609a      	str	r2, [r3, #8]
  sBreakDeadTimeConfig.DeadTime = 0;
 8000dbc:	1d3b      	adds	r3, r7, #4
 8000dbe:	2200      	movs	r2, #0
 8000dc0:	60da      	str	r2, [r3, #12]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8000dc2:	1d3b      	adds	r3, r7, #4
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	611a      	str	r2, [r3, #16]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8000dc8:	1d3b      	adds	r3, r7, #4
 8000dca:	2280      	movs	r2, #128	; 0x80
 8000dcc:	0192      	lsls	r2, r2, #6
 8000dce:	615a      	str	r2, [r3, #20]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8000dd0:	1d3b      	adds	r3, r7, #4
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	619a      	str	r2, [r3, #24]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2200      	movs	r2, #0
 8000dda:	61da      	str	r2, [r3, #28]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8000ddc:	1d3b      	adds	r3, r7, #4
 8000dde:	2200      	movs	r2, #0
 8000de0:	621a      	str	r2, [r3, #32]
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8000de2:	1d3b      	adds	r3, r7, #4
 8000de4:	2280      	movs	r2, #128	; 0x80
 8000de6:	0492      	lsls	r2, r2, #18
 8000de8:	625a      	str	r2, [r3, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Filter = 0;
 8000dea:	1d3b      	adds	r3, r7, #4
 8000dec:	2200      	movs	r2, #0
 8000dee:	629a      	str	r2, [r3, #40]	; 0x28
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8000df0:	1d3b      	adds	r3, r7, #4
 8000df2:	2200      	movs	r2, #0
 8000df4:	62da      	str	r2, [r3, #44]	; 0x2c
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8000df6:	1d3b      	adds	r3, r7, #4
 8000df8:	2200      	movs	r2, #0
 8000dfa:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8000dfc:	1d3a      	adds	r2, r7, #4
 8000dfe:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000e00:	0011      	movs	r1, r2
 8000e02:	0018      	movs	r0, r3
 8000e04:	f004 fa78 	bl	80052f8 <HAL_TIMEx_ConfigBreakDeadTime>
 8000e08:	1e03      	subs	r3, r0, #0
 8000e0a:	d001      	beq.n	8000e10 <MX_TIM1_Init+0x190>
  {
    Error_Handler();
 8000e0c:	f000 f9ee 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8000e10:	4b03      	ldr	r3, [pc, #12]	; (8000e20 <MX_TIM1_Init+0x1a0>)
 8000e12:	0018      	movs	r0, r3
 8000e14:	f000 fb50 	bl	80014b8 <HAL_TIM_MspPostInit>

}
 8000e18:	46c0      	nop			; (mov r8, r8)
 8000e1a:	46bd      	mov	sp, r7
 8000e1c:	b01c      	add	sp, #112	; 0x70
 8000e1e:	bd80      	pop	{r7, pc}
 8000e20:	200000e0 	.word	0x200000e0
 8000e24:	40012c00 	.word	0x40012c00
 8000e28:	00000271 	.word	0x00000271

08000e2c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000e2c:	b580      	push	{r7, lr}
 8000e2e:	b088      	sub	sp, #32
 8000e30:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e32:	2310      	movs	r3, #16
 8000e34:	18fb      	adds	r3, r7, r3
 8000e36:	0018      	movs	r0, r3
 8000e38:	2310      	movs	r3, #16
 8000e3a:	001a      	movs	r2, r3
 8000e3c:	2100      	movs	r1, #0
 8000e3e:	f004 fb0f 	bl	8005460 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e42:	1d3b      	adds	r3, r7, #4
 8000e44:	0018      	movs	r0, r3
 8000e46:	230c      	movs	r3, #12
 8000e48:	001a      	movs	r2, r3
 8000e4a:	2100      	movs	r1, #0
 8000e4c:	f004 fb08 	bl	8005460 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e50:	4b1e      	ldr	r3, [pc, #120]	; (8000ecc <MX_TIM3_Init+0xa0>)
 8000e52:	4a1f      	ldr	r2, [pc, #124]	; (8000ed0 <MX_TIM3_Init+0xa4>)
 8000e54:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 6400-1;
 8000e56:	4b1d      	ldr	r3, [pc, #116]	; (8000ecc <MX_TIM3_Init+0xa0>)
 8000e58:	4a1e      	ldr	r2, [pc, #120]	; (8000ed4 <MX_TIM3_Init+0xa8>)
 8000e5a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e5c:	4b1b      	ldr	r3, [pc, #108]	; (8000ecc <MX_TIM3_Init+0xa0>)
 8000e5e:	2200      	movs	r2, #0
 8000e60:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8000e62:	4b1a      	ldr	r3, [pc, #104]	; (8000ecc <MX_TIM3_Init+0xa0>)
 8000e64:	4a1c      	ldr	r2, [pc, #112]	; (8000ed8 <MX_TIM3_Init+0xac>)
 8000e66:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e68:	4b18      	ldr	r3, [pc, #96]	; (8000ecc <MX_TIM3_Init+0xa0>)
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e6e:	4b17      	ldr	r3, [pc, #92]	; (8000ecc <MX_TIM3_Init+0xa0>)
 8000e70:	2200      	movs	r2, #0
 8000e72:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e74:	4b15      	ldr	r3, [pc, #84]	; (8000ecc <MX_TIM3_Init+0xa0>)
 8000e76:	0018      	movs	r0, r3
 8000e78:	f003 f8a4 	bl	8003fc4 <HAL_TIM_Base_Init>
 8000e7c:	1e03      	subs	r3, r0, #0
 8000e7e:	d001      	beq.n	8000e84 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 8000e80:	f000 f9b4 	bl	80011ec <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e84:	2110      	movs	r1, #16
 8000e86:	187b      	adds	r3, r7, r1
 8000e88:	2280      	movs	r2, #128	; 0x80
 8000e8a:	0152      	lsls	r2, r2, #5
 8000e8c:	601a      	str	r2, [r3, #0]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e8e:	187a      	adds	r2, r7, r1
 8000e90:	4b0e      	ldr	r3, [pc, #56]	; (8000ecc <MX_TIM3_Init+0xa0>)
 8000e92:	0011      	movs	r1, r2
 8000e94:	0018      	movs	r0, r3
 8000e96:	f003 fca7 	bl	80047e8 <HAL_TIM_ConfigClockSource>
 8000e9a:	1e03      	subs	r3, r0, #0
 8000e9c:	d001      	beq.n	8000ea2 <MX_TIM3_Init+0x76>
  {
    Error_Handler();
 8000e9e:	f000 f9a5 	bl	80011ec <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ea2:	1d3b      	adds	r3, r7, #4
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ea8:	1d3b      	adds	r3, r7, #4
 8000eaa:	2200      	movs	r2, #0
 8000eac:	609a      	str	r2, [r3, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000eae:	1d3a      	adds	r2, r7, #4
 8000eb0:	4b06      	ldr	r3, [pc, #24]	; (8000ecc <MX_TIM3_Init+0xa0>)
 8000eb2:	0011      	movs	r1, r2
 8000eb4:	0018      	movs	r0, r3
 8000eb6:	f004 f9a9 	bl	800520c <HAL_TIMEx_MasterConfigSynchronization>
 8000eba:	1e03      	subs	r3, r0, #0
 8000ebc:	d001      	beq.n	8000ec2 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 8000ebe:	f000 f995 	bl	80011ec <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8000ec2:	46c0      	nop			; (mov r8, r8)
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	b008      	add	sp, #32
 8000ec8:	bd80      	pop	{r7, pc}
 8000eca:	46c0      	nop			; (mov r8, r8)
 8000ecc:	2000012c 	.word	0x2000012c
 8000ed0:	40000400 	.word	0x40000400
 8000ed4:	000018ff 	.word	0x000018ff
 8000ed8:	00002710 	.word	0x00002710

08000edc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000edc:	b590      	push	{r4, r7, lr}
 8000ede:	b08b      	sub	sp, #44	; 0x2c
 8000ee0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ee2:	2414      	movs	r4, #20
 8000ee4:	193b      	adds	r3, r7, r4
 8000ee6:	0018      	movs	r0, r3
 8000ee8:	2314      	movs	r3, #20
 8000eea:	001a      	movs	r2, r3
 8000eec:	2100      	movs	r1, #0
 8000eee:	f004 fab7 	bl	8005460 <memset>
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ef2:	4b3a      	ldr	r3, [pc, #232]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000ef4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ef6:	4b39      	ldr	r3, [pc, #228]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000ef8:	2104      	movs	r1, #4
 8000efa:	430a      	orrs	r2, r1
 8000efc:	635a      	str	r2, [r3, #52]	; 0x34
 8000efe:	4b37      	ldr	r3, [pc, #220]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f00:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f02:	2204      	movs	r2, #4
 8000f04:	4013      	ands	r3, r2
 8000f06:	613b      	str	r3, [r7, #16]
 8000f08:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000f0a:	4b34      	ldr	r3, [pc, #208]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f0c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f0e:	4b33      	ldr	r3, [pc, #204]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f10:	2120      	movs	r1, #32
 8000f12:	430a      	orrs	r2, r1
 8000f14:	635a      	str	r2, [r3, #52]	; 0x34
 8000f16:	4b31      	ldr	r3, [pc, #196]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f18:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f1a:	2220      	movs	r2, #32
 8000f1c:	4013      	ands	r3, r2
 8000f1e:	60fb      	str	r3, [r7, #12]
 8000f20:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f22:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f24:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f26:	4b2d      	ldr	r3, [pc, #180]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f28:	2101      	movs	r1, #1
 8000f2a:	430a      	orrs	r2, r1
 8000f2c:	635a      	str	r2, [r3, #52]	; 0x34
 8000f2e:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f32:	2201      	movs	r2, #1
 8000f34:	4013      	ands	r3, r2
 8000f36:	60bb      	str	r3, [r7, #8]
 8000f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f3a:	4b28      	ldr	r3, [pc, #160]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f3c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000f3e:	4b27      	ldr	r3, [pc, #156]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f40:	2102      	movs	r1, #2
 8000f42:	430a      	orrs	r2, r1
 8000f44:	635a      	str	r2, [r3, #52]	; 0x34
 8000f46:	4b25      	ldr	r3, [pc, #148]	; (8000fdc <MX_GPIO_Init+0x100>)
 8000f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000f4a:	2202      	movs	r2, #2
 8000f4c:	4013      	ands	r3, r2
 8000f4e:	607b      	str	r3, [r7, #4]
 8000f50:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, MotorR_B_Pin|MotorR_A_Pin, GPIO_PIN_RESET);
 8000f52:	4b23      	ldr	r3, [pc, #140]	; (8000fe0 <MX_GPIO_Init+0x104>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	210c      	movs	r1, #12
 8000f58:	0018      	movs	r0, r3
 8000f5a:	f001 fb9d 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MotorL_B_Pin|MotorL_A_Pin, GPIO_PIN_RESET);
 8000f5e:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <MX_GPIO_Init+0x108>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	2103      	movs	r1, #3
 8000f64:	0018      	movs	r0, r3
 8000f66:	f001 fb97 	bl	8002698 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : Calibrate_btn_Pin */
  GPIO_InitStruct.Pin = Calibrate_btn_Pin;
 8000f6a:	193b      	adds	r3, r7, r4
 8000f6c:	2280      	movs	r2, #128	; 0x80
 8000f6e:	0192      	lsls	r2, r2, #6
 8000f70:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f72:	193b      	adds	r3, r7, r4
 8000f74:	2200      	movs	r2, #0
 8000f76:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f78:	193b      	adds	r3, r7, r4
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Calibrate_btn_GPIO_Port, &GPIO_InitStruct);
 8000f7e:	193b      	adds	r3, r7, r4
 8000f80:	4a17      	ldr	r2, [pc, #92]	; (8000fe0 <MX_GPIO_Init+0x104>)
 8000f82:	0019      	movs	r1, r3
 8000f84:	0010      	movs	r0, r2
 8000f86:	f001 fa1b 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorR_B_Pin MotorR_A_Pin */
  GPIO_InitStruct.Pin = MotorR_B_Pin|MotorR_A_Pin;
 8000f8a:	193b      	adds	r3, r7, r4
 8000f8c:	220c      	movs	r2, #12
 8000f8e:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f90:	193b      	adds	r3, r7, r4
 8000f92:	2201      	movs	r2, #1
 8000f94:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f96:	193b      	adds	r3, r7, r4
 8000f98:	2200      	movs	r2, #0
 8000f9a:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f9c:	193b      	adds	r3, r7, r4
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000fa2:	193b      	adds	r3, r7, r4
 8000fa4:	4a0e      	ldr	r2, [pc, #56]	; (8000fe0 <MX_GPIO_Init+0x104>)
 8000fa6:	0019      	movs	r1, r3
 8000fa8:	0010      	movs	r0, r2
 8000faa:	f001 fa09 	bl	80023c0 <HAL_GPIO_Init>

  /*Configure GPIO pins : MotorL_B_Pin MotorL_A_Pin */
  GPIO_InitStruct.Pin = MotorL_B_Pin|MotorL_A_Pin;
 8000fae:	0021      	movs	r1, r4
 8000fb0:	187b      	adds	r3, r7, r1
 8000fb2:	2203      	movs	r2, #3
 8000fb4:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fb6:	187b      	adds	r3, r7, r1
 8000fb8:	2201      	movs	r2, #1
 8000fba:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbc:	187b      	adds	r3, r7, r1
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fc2:	187b      	adds	r3, r7, r1
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000fc8:	187b      	adds	r3, r7, r1
 8000fca:	4a06      	ldr	r2, [pc, #24]	; (8000fe4 <MX_GPIO_Init+0x108>)
 8000fcc:	0019      	movs	r1, r3
 8000fce:	0010      	movs	r0, r2
 8000fd0:	f001 f9f6 	bl	80023c0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000fd4:	46c0      	nop			; (mov r8, r8)
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	b00b      	add	sp, #44	; 0x2c
 8000fda:	bd90      	pop	{r4, r7, pc}
 8000fdc:	40021000 	.word	0x40021000
 8000fe0:	50000800 	.word	0x50000800
 8000fe4:	50000400 	.word	0x50000400

08000fe8 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8000fe8:	b580      	push	{r7, lr}
 8000fea:	b082      	sub	sp, #8
 8000fec:	af00      	add	r7, sp, #0
 8000fee:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM3) {
 8000ff0:	687b      	ldr	r3, [r7, #4]
 8000ff2:	681b      	ldr	r3, [r3, #0]
 8000ff4:	4a05      	ldr	r2, [pc, #20]	; (800100c <HAL_TIM_PeriodElapsedCallback+0x24>)
 8000ff6:	4293      	cmp	r3, r2
 8000ff8:	d104      	bne.n	8001004 <HAL_TIM_PeriodElapsedCallback+0x1c>
    millis_counter++;
 8000ffa:	4b05      	ldr	r3, [pc, #20]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8000ffc:	681b      	ldr	r3, [r3, #0]
 8000ffe:	1c5a      	adds	r2, r3, #1
 8001000:	4b03      	ldr	r3, [pc, #12]	; (8001010 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001002:	601a      	str	r2, [r3, #0]
  }
}
 8001004:	46c0      	nop			; (mov r8, r8)
 8001006:	46bd      	mov	sp, r7
 8001008:	b002      	add	sp, #8
 800100a:	bd80      	pop	{r7, pc}
 800100c:	40000400 	.word	0x40000400
 8001010:	20000184 	.word	0x20000184

08001014 <MPU_Accel_Read>:

}

void MPU_Accel_Read(MPU6050_ACCEL_t *Mpu_Accel)

{
 8001014:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001016:	b08b      	sub	sp, #44	; 0x2c
 8001018:	af04      	add	r7, sp, #16
 800101a:	6078      	str	r0, [r7, #4]

        uint8_t Read_Data[6];



        HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, REG_ACCEL_XOUT_H, 1, Read_Data, 6, 1000);
 800101c:	4836      	ldr	r0, [pc, #216]	; (80010f8 <MPU_Accel_Read+0xe4>)
 800101e:	23fa      	movs	r3, #250	; 0xfa
 8001020:	009b      	lsls	r3, r3, #2
 8001022:	9302      	str	r3, [sp, #8]
 8001024:	2306      	movs	r3, #6
 8001026:	9301      	str	r3, [sp, #4]
 8001028:	240c      	movs	r4, #12
 800102a:	193b      	adds	r3, r7, r4
 800102c:	9300      	str	r3, [sp, #0]
 800102e:	2301      	movs	r3, #1
 8001030:	223b      	movs	r2, #59	; 0x3b
 8001032:	21d0      	movs	r1, #208	; 0xd0
 8001034:	f001 fbf4 	bl	8002820 <HAL_I2C_Mem_Read>



        int16_t Accel_X_RAW = (int16_t)(Read_Data[0] << 8 | Read_Data [1]);
 8001038:	0020      	movs	r0, r4
 800103a:	183b      	adds	r3, r7, r0
 800103c:	781b      	ldrb	r3, [r3, #0]
 800103e:	021b      	lsls	r3, r3, #8
 8001040:	b219      	sxth	r1, r3
 8001042:	183b      	adds	r3, r7, r0
 8001044:	785b      	ldrb	r3, [r3, #1]
 8001046:	b21a      	sxth	r2, r3
 8001048:	2416      	movs	r4, #22
 800104a:	193b      	adds	r3, r7, r4
 800104c:	430a      	orrs	r2, r1
 800104e:	801a      	strh	r2, [r3, #0]

        int16_t Accel_Y_RAW = (int16_t)(Read_Data[2] << 8 | Read_Data [3]);
 8001050:	183b      	adds	r3, r7, r0
 8001052:	789b      	ldrb	r3, [r3, #2]
 8001054:	021b      	lsls	r3, r3, #8
 8001056:	b219      	sxth	r1, r3
 8001058:	183b      	adds	r3, r7, r0
 800105a:	78db      	ldrb	r3, [r3, #3]
 800105c:	b21a      	sxth	r2, r3
 800105e:	2514      	movs	r5, #20
 8001060:	197b      	adds	r3, r7, r5
 8001062:	430a      	orrs	r2, r1
 8001064:	801a      	strh	r2, [r3, #0]

        int16_t Accel_Z_RAW = (int16_t)(Read_Data[4] << 8 | Read_Data [5]);
 8001066:	183b      	adds	r3, r7, r0
 8001068:	791b      	ldrb	r3, [r3, #4]
 800106a:	021b      	lsls	r3, r3, #8
 800106c:	b219      	sxth	r1, r3
 800106e:	183b      	adds	r3, r7, r0
 8001070:	795b      	ldrb	r3, [r3, #5]
 8001072:	b21a      	sxth	r2, r3
 8001074:	2612      	movs	r6, #18
 8001076:	19bb      	adds	r3, r7, r6
 8001078:	430a      	orrs	r2, r1
 800107a:	801a      	strh	r2, [r3, #0]



        Mpu_Accel -> Accel_X = (Accel_X_RAW)/16384.0;
 800107c:	193b      	adds	r3, r7, r4
 800107e:	2200      	movs	r2, #0
 8001080:	5e9b      	ldrsh	r3, [r3, r2]
 8001082:	0018      	movs	r0, r3
 8001084:	f7ff fbd8 	bl	8000838 <__aeabi_i2d>
 8001088:	2200      	movs	r2, #0
 800108a:	4b1c      	ldr	r3, [pc, #112]	; (80010fc <MPU_Accel_Read+0xe8>)
 800108c:	f7ff f8e6 	bl	800025c <__aeabi_ddiv>
 8001090:	0002      	movs	r2, r0
 8001092:	000b      	movs	r3, r1
 8001094:	0010      	movs	r0, r2
 8001096:	0019      	movs	r1, r3
 8001098:	f7ff fbfe 	bl	8000898 <__aeabi_d2f>
 800109c:	1c02      	adds	r2, r0, #0
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	601a      	str	r2, [r3, #0]

        Mpu_Accel -> Accel_Y = (Accel_Y_RAW)/16384.0;
 80010a2:	197b      	adds	r3, r7, r5
 80010a4:	2200      	movs	r2, #0
 80010a6:	5e9b      	ldrsh	r3, [r3, r2]
 80010a8:	0018      	movs	r0, r3
 80010aa:	f7ff fbc5 	bl	8000838 <__aeabi_i2d>
 80010ae:	2200      	movs	r2, #0
 80010b0:	4b12      	ldr	r3, [pc, #72]	; (80010fc <MPU_Accel_Read+0xe8>)
 80010b2:	f7ff f8d3 	bl	800025c <__aeabi_ddiv>
 80010b6:	0002      	movs	r2, r0
 80010b8:	000b      	movs	r3, r1
 80010ba:	0010      	movs	r0, r2
 80010bc:	0019      	movs	r1, r3
 80010be:	f7ff fbeb 	bl	8000898 <__aeabi_d2f>
 80010c2:	1c02      	adds	r2, r0, #0
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	605a      	str	r2, [r3, #4]

        Mpu_Accel -> Accel_Z = (Accel_Z_RAW)/16384.0;
 80010c8:	19bb      	adds	r3, r7, r6
 80010ca:	2200      	movs	r2, #0
 80010cc:	5e9b      	ldrsh	r3, [r3, r2]
 80010ce:	0018      	movs	r0, r3
 80010d0:	f7ff fbb2 	bl	8000838 <__aeabi_i2d>
 80010d4:	2200      	movs	r2, #0
 80010d6:	4b09      	ldr	r3, [pc, #36]	; (80010fc <MPU_Accel_Read+0xe8>)
 80010d8:	f7ff f8c0 	bl	800025c <__aeabi_ddiv>
 80010dc:	0002      	movs	r2, r0
 80010de:	000b      	movs	r3, r1
 80010e0:	0010      	movs	r0, r2
 80010e2:	0019      	movs	r1, r3
 80010e4:	f7ff fbd8 	bl	8000898 <__aeabi_d2f>
 80010e8:	1c02      	adds	r2, r0, #0
 80010ea:	687b      	ldr	r3, [r7, #4]
 80010ec:	609a      	str	r2, [r3, #8]

}
 80010ee:	46c0      	nop			; (mov r8, r8)
 80010f0:	46bd      	mov	sp, r7
 80010f2:	b007      	add	sp, #28
 80010f4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80010f6:	46c0      	nop			; (mov r8, r8)
 80010f8:	2000008c 	.word	0x2000008c
 80010fc:	40d00000 	.word	0x40d00000

08001100 <MPU_Gyro_Read>:

void MPU_Gyro_Read(MPU6050_GYRO_t *Mpu_Gyro)

{
 8001100:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001102:	b08b      	sub	sp, #44	; 0x2c
 8001104:	af04      	add	r7, sp, #16
 8001106:	6078      	str	r0, [r7, #4]

        uint8_t Read_Data[6];



        HAL_I2C_Mem_Read (&hi2c1, MPU6050_ADDR, REG_GYRO_XOUT_H, 1, Read_Data, 6, 1000);
 8001108:	4836      	ldr	r0, [pc, #216]	; (80011e4 <MPU_Gyro_Read+0xe4>)
 800110a:	23fa      	movs	r3, #250	; 0xfa
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	9302      	str	r3, [sp, #8]
 8001110:	2306      	movs	r3, #6
 8001112:	9301      	str	r3, [sp, #4]
 8001114:	240c      	movs	r4, #12
 8001116:	193b      	adds	r3, r7, r4
 8001118:	9300      	str	r3, [sp, #0]
 800111a:	2301      	movs	r3, #1
 800111c:	2243      	movs	r2, #67	; 0x43
 800111e:	21d0      	movs	r1, #208	; 0xd0
 8001120:	f001 fb7e 	bl	8002820 <HAL_I2C_Mem_Read>



        int16_t Gyro_X_RAW = (int16_t)(Read_Data[0] << 8 | Read_Data [1]);
 8001124:	0020      	movs	r0, r4
 8001126:	183b      	adds	r3, r7, r0
 8001128:	781b      	ldrb	r3, [r3, #0]
 800112a:	021b      	lsls	r3, r3, #8
 800112c:	b219      	sxth	r1, r3
 800112e:	183b      	adds	r3, r7, r0
 8001130:	785b      	ldrb	r3, [r3, #1]
 8001132:	b21a      	sxth	r2, r3
 8001134:	2416      	movs	r4, #22
 8001136:	193b      	adds	r3, r7, r4
 8001138:	430a      	orrs	r2, r1
 800113a:	801a      	strh	r2, [r3, #0]

        int16_t Gyro_Y_RAW = (int16_t)(Read_Data[2] << 8 | Read_Data [3]);
 800113c:	183b      	adds	r3, r7, r0
 800113e:	789b      	ldrb	r3, [r3, #2]
 8001140:	021b      	lsls	r3, r3, #8
 8001142:	b219      	sxth	r1, r3
 8001144:	183b      	adds	r3, r7, r0
 8001146:	78db      	ldrb	r3, [r3, #3]
 8001148:	b21a      	sxth	r2, r3
 800114a:	2514      	movs	r5, #20
 800114c:	197b      	adds	r3, r7, r5
 800114e:	430a      	orrs	r2, r1
 8001150:	801a      	strh	r2, [r3, #0]

        int16_t Gyro_Z_RAW = (int16_t)(Read_Data[4] << 8 | Read_Data [5]);
 8001152:	183b      	adds	r3, r7, r0
 8001154:	791b      	ldrb	r3, [r3, #4]
 8001156:	021b      	lsls	r3, r3, #8
 8001158:	b219      	sxth	r1, r3
 800115a:	183b      	adds	r3, r7, r0
 800115c:	795b      	ldrb	r3, [r3, #5]
 800115e:	b21a      	sxth	r2, r3
 8001160:	2612      	movs	r6, #18
 8001162:	19bb      	adds	r3, r7, r6
 8001164:	430a      	orrs	r2, r1
 8001166:	801a      	strh	r2, [r3, #0]



        Mpu_Gyro -> Gyro_X = (Gyro_X_RAW)/131.0;
 8001168:	193b      	adds	r3, r7, r4
 800116a:	2200      	movs	r2, #0
 800116c:	5e9b      	ldrsh	r3, [r3, r2]
 800116e:	0018      	movs	r0, r3
 8001170:	f7ff fb62 	bl	8000838 <__aeabi_i2d>
 8001174:	2200      	movs	r2, #0
 8001176:	4b1c      	ldr	r3, [pc, #112]	; (80011e8 <MPU_Gyro_Read+0xe8>)
 8001178:	f7ff f870 	bl	800025c <__aeabi_ddiv>
 800117c:	0002      	movs	r2, r0
 800117e:	000b      	movs	r3, r1
 8001180:	0010      	movs	r0, r2
 8001182:	0019      	movs	r1, r3
 8001184:	f7ff fb88 	bl	8000898 <__aeabi_d2f>
 8001188:	1c02      	adds	r2, r0, #0
 800118a:	687b      	ldr	r3, [r7, #4]
 800118c:	601a      	str	r2, [r3, #0]

        Mpu_Gyro -> Gyro_Y = (Gyro_Y_RAW)/131.0;
 800118e:	197b      	adds	r3, r7, r5
 8001190:	2200      	movs	r2, #0
 8001192:	5e9b      	ldrsh	r3, [r3, r2]
 8001194:	0018      	movs	r0, r3
 8001196:	f7ff fb4f 	bl	8000838 <__aeabi_i2d>
 800119a:	2200      	movs	r2, #0
 800119c:	4b12      	ldr	r3, [pc, #72]	; (80011e8 <MPU_Gyro_Read+0xe8>)
 800119e:	f7ff f85d 	bl	800025c <__aeabi_ddiv>
 80011a2:	0002      	movs	r2, r0
 80011a4:	000b      	movs	r3, r1
 80011a6:	0010      	movs	r0, r2
 80011a8:	0019      	movs	r1, r3
 80011aa:	f7ff fb75 	bl	8000898 <__aeabi_d2f>
 80011ae:	1c02      	adds	r2, r0, #0
 80011b0:	687b      	ldr	r3, [r7, #4]
 80011b2:	605a      	str	r2, [r3, #4]

        Mpu_Gyro -> Gyro_Z = (Gyro_Z_RAW)/131.0;
 80011b4:	19bb      	adds	r3, r7, r6
 80011b6:	2200      	movs	r2, #0
 80011b8:	5e9b      	ldrsh	r3, [r3, r2]
 80011ba:	0018      	movs	r0, r3
 80011bc:	f7ff fb3c 	bl	8000838 <__aeabi_i2d>
 80011c0:	2200      	movs	r2, #0
 80011c2:	4b09      	ldr	r3, [pc, #36]	; (80011e8 <MPU_Gyro_Read+0xe8>)
 80011c4:	f7ff f84a 	bl	800025c <__aeabi_ddiv>
 80011c8:	0002      	movs	r2, r0
 80011ca:	000b      	movs	r3, r1
 80011cc:	0010      	movs	r0, r2
 80011ce:	0019      	movs	r1, r3
 80011d0:	f7ff fb62 	bl	8000898 <__aeabi_d2f>
 80011d4:	1c02      	adds	r2, r0, #0
 80011d6:	687b      	ldr	r3, [r7, #4]
 80011d8:	609a      	str	r2, [r3, #8]

}
 80011da:	46c0      	nop			; (mov r8, r8)
 80011dc:	46bd      	mov	sp, r7
 80011de:	b007      	add	sp, #28
 80011e0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80011e2:	46c0      	nop			; (mov r8, r8)
 80011e4:	2000008c 	.word	0x2000008c
 80011e8:	40606000 	.word	0x40606000

080011ec <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011ec:	b580      	push	{r7, lr}
 80011ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011f0:	b672      	cpsid	i
}
 80011f2:	46c0      	nop			; (mov r8, r8)
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011f4:	e7fe      	b.n	80011f4 <Error_Handler+0x8>
	...

080011f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b082      	sub	sp, #8
 80011fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011fe:	4b11      	ldr	r3, [pc, #68]	; (8001244 <HAL_MspInit+0x4c>)
 8001200:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001202:	4b10      	ldr	r3, [pc, #64]	; (8001244 <HAL_MspInit+0x4c>)
 8001204:	2101      	movs	r1, #1
 8001206:	430a      	orrs	r2, r1
 8001208:	641a      	str	r2, [r3, #64]	; 0x40
 800120a:	4b0e      	ldr	r3, [pc, #56]	; (8001244 <HAL_MspInit+0x4c>)
 800120c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800120e:	2201      	movs	r2, #1
 8001210:	4013      	ands	r3, r2
 8001212:	607b      	str	r3, [r7, #4]
 8001214:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001216:	4b0b      	ldr	r3, [pc, #44]	; (8001244 <HAL_MspInit+0x4c>)
 8001218:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800121a:	4b0a      	ldr	r3, [pc, #40]	; (8001244 <HAL_MspInit+0x4c>)
 800121c:	2180      	movs	r1, #128	; 0x80
 800121e:	0549      	lsls	r1, r1, #21
 8001220:	430a      	orrs	r2, r1
 8001222:	63da      	str	r2, [r3, #60]	; 0x3c
 8001224:	4b07      	ldr	r3, [pc, #28]	; (8001244 <HAL_MspInit+0x4c>)
 8001226:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001228:	2380      	movs	r3, #128	; 0x80
 800122a:	055b      	lsls	r3, r3, #21
 800122c:	4013      	ands	r3, r2
 800122e:	603b      	str	r3, [r7, #0]
 8001230:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_SYSCFG_StrobeDBattpinsConfig(SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE);
 8001232:	23c0      	movs	r3, #192	; 0xc0
 8001234:	00db      	lsls	r3, r3, #3
 8001236:	0018      	movs	r0, r3
 8001238:	f000 fa56 	bl	80016e8 <HAL_SYSCFG_StrobeDBattpinsConfig>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800123c:	46c0      	nop			; (mov r8, r8)
 800123e:	46bd      	mov	sp, r7
 8001240:	b002      	add	sp, #8
 8001242:	bd80      	pop	{r7, pc}
 8001244:	40021000 	.word	0x40021000

08001248 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001248:	b590      	push	{r4, r7, lr}
 800124a:	b08b      	sub	sp, #44	; 0x2c
 800124c:	af00      	add	r7, sp, #0
 800124e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001250:	2414      	movs	r4, #20
 8001252:	193b      	adds	r3, r7, r4
 8001254:	0018      	movs	r0, r3
 8001256:	2314      	movs	r3, #20
 8001258:	001a      	movs	r2, r3
 800125a:	2100      	movs	r1, #0
 800125c:	f004 f900 	bl	8005460 <memset>
  if(hadc->Instance==ADC1)
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	681b      	ldr	r3, [r3, #0]
 8001264:	4a25      	ldr	r2, [pc, #148]	; (80012fc <HAL_ADC_MspInit+0xb4>)
 8001266:	4293      	cmp	r3, r2
 8001268:	d144      	bne.n	80012f4 <HAL_ADC_MspInit+0xac>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC_CLK_ENABLE();
 800126a:	4b25      	ldr	r3, [pc, #148]	; (8001300 <HAL_ADC_MspInit+0xb8>)
 800126c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800126e:	4b24      	ldr	r3, [pc, #144]	; (8001300 <HAL_ADC_MspInit+0xb8>)
 8001270:	2180      	movs	r1, #128	; 0x80
 8001272:	0349      	lsls	r1, r1, #13
 8001274:	430a      	orrs	r2, r1
 8001276:	641a      	str	r2, [r3, #64]	; 0x40
 8001278:	4b21      	ldr	r3, [pc, #132]	; (8001300 <HAL_ADC_MspInit+0xb8>)
 800127a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800127c:	2380      	movs	r3, #128	; 0x80
 800127e:	035b      	lsls	r3, r3, #13
 8001280:	4013      	ands	r3, r2
 8001282:	613b      	str	r3, [r7, #16]
 8001284:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <HAL_ADC_MspInit+0xb8>)
 8001288:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800128a:	4b1d      	ldr	r3, [pc, #116]	; (8001300 <HAL_ADC_MspInit+0xb8>)
 800128c:	2101      	movs	r1, #1
 800128e:	430a      	orrs	r2, r1
 8001290:	635a      	str	r2, [r3, #52]	; 0x34
 8001292:	4b1b      	ldr	r3, [pc, #108]	; (8001300 <HAL_ADC_MspInit+0xb8>)
 8001294:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001296:	2201      	movs	r2, #1
 8001298:	4013      	ands	r3, r2
 800129a:	60fb      	str	r3, [r7, #12]
 800129c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800129e:	4b18      	ldr	r3, [pc, #96]	; (8001300 <HAL_ADC_MspInit+0xb8>)
 80012a0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80012a2:	4b17      	ldr	r3, [pc, #92]	; (8001300 <HAL_ADC_MspInit+0xb8>)
 80012a4:	2102      	movs	r1, #2
 80012a6:	430a      	orrs	r2, r1
 80012a8:	635a      	str	r2, [r3, #52]	; 0x34
 80012aa:	4b15      	ldr	r3, [pc, #84]	; (8001300 <HAL_ADC_MspInit+0xb8>)
 80012ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80012ae:	2202      	movs	r2, #2
 80012b0:	4013      	ands	r3, r2
 80012b2:	60bb      	str	r3, [r7, #8]
 80012b4:	68bb      	ldr	r3, [r7, #8]
    PA5     ------> ADC1_IN5
    PA6     ------> ADC1_IN6
    PA7     ------> ADC1_IN7
    PB2     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = Sensor_0_Pin|Sensor_8_Pin|Sensor_1_Pin|Sensor_2_Pin
 80012b6:	193b      	adds	r3, r7, r4
 80012b8:	22ff      	movs	r2, #255	; 0xff
 80012ba:	601a      	str	r2, [r3, #0]
                          |Sensor_3_Pin|Sensor_4_Pin|Sensor_5_Pin|Sensor_6_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012bc:	193b      	adds	r3, r7, r4
 80012be:	2203      	movs	r2, #3
 80012c0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c2:	193b      	adds	r3, r7, r4
 80012c4:	2200      	movs	r2, #0
 80012c6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80012c8:	193a      	adds	r2, r7, r4
 80012ca:	23a0      	movs	r3, #160	; 0xa0
 80012cc:	05db      	lsls	r3, r3, #23
 80012ce:	0011      	movs	r1, r2
 80012d0:	0018      	movs	r0, r3
 80012d2:	f001 f875 	bl	80023c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = Sensor_7_Pin;
 80012d6:	193b      	adds	r3, r7, r4
 80012d8:	2204      	movs	r2, #4
 80012da:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80012dc:	193b      	adds	r3, r7, r4
 80012de:	2203      	movs	r2, #3
 80012e0:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012e2:	193b      	adds	r3, r7, r4
 80012e4:	2200      	movs	r2, #0
 80012e6:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(Sensor_7_GPIO_Port, &GPIO_InitStruct);
 80012e8:	193b      	adds	r3, r7, r4
 80012ea:	4a06      	ldr	r2, [pc, #24]	; (8001304 <HAL_ADC_MspInit+0xbc>)
 80012ec:	0019      	movs	r1, r3
 80012ee:	0010      	movs	r0, r2
 80012f0:	f001 f866 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80012f4:	46c0      	nop			; (mov r8, r8)
 80012f6:	46bd      	mov	sp, r7
 80012f8:	b00b      	add	sp, #44	; 0x2c
 80012fa:	bd90      	pop	{r4, r7, pc}
 80012fc:	40012400 	.word	0x40012400
 8001300:	40021000 	.word	0x40021000
 8001304:	50000400 	.word	0x50000400

08001308 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001308:	b590      	push	{r4, r7, lr}
 800130a:	b09f      	sub	sp, #124	; 0x7c
 800130c:	af00      	add	r7, sp, #0
 800130e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001310:	2364      	movs	r3, #100	; 0x64
 8001312:	18fb      	adds	r3, r7, r3
 8001314:	0018      	movs	r0, r3
 8001316:	2314      	movs	r3, #20
 8001318:	001a      	movs	r2, r3
 800131a:	2100      	movs	r1, #0
 800131c:	f004 f8a0 	bl	8005460 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001320:	2418      	movs	r4, #24
 8001322:	193b      	adds	r3, r7, r4
 8001324:	0018      	movs	r0, r3
 8001326:	234c      	movs	r3, #76	; 0x4c
 8001328:	001a      	movs	r2, r3
 800132a:	2100      	movs	r1, #0
 800132c:	f004 f898 	bl	8005460 <memset>
  if(hi2c->Instance==I2C1)
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	4a34      	ldr	r2, [pc, #208]	; (8001408 <HAL_I2C_MspInit+0x100>)
 8001336:	4293      	cmp	r3, r2
 8001338:	d162      	bne.n	8001400 <HAL_I2C_MspInit+0xf8>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800133a:	193b      	adds	r3, r7, r4
 800133c:	2220      	movs	r2, #32
 800133e:	601a      	str	r2, [r3, #0]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001340:	193b      	adds	r3, r7, r4
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001346:	193b      	adds	r3, r7, r4
 8001348:	0018      	movs	r0, r3
 800134a:	f002 fbff 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 800134e:	1e03      	subs	r3, r0, #0
 8001350:	d001      	beq.n	8001356 <HAL_I2C_MspInit+0x4e>
    {
      Error_Handler();
 8001352:	f7ff ff4b 	bl	80011ec <Error_Handler>
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001356:	4b2d      	ldr	r3, [pc, #180]	; (800140c <HAL_I2C_MspInit+0x104>)
 8001358:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800135a:	4b2c      	ldr	r3, [pc, #176]	; (800140c <HAL_I2C_MspInit+0x104>)
 800135c:	2101      	movs	r1, #1
 800135e:	430a      	orrs	r2, r1
 8001360:	635a      	str	r2, [r3, #52]	; 0x34
 8001362:	4b2a      	ldr	r3, [pc, #168]	; (800140c <HAL_I2C_MspInit+0x104>)
 8001364:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001366:	2201      	movs	r2, #1
 8001368:	4013      	ands	r3, r2
 800136a:	617b      	str	r3, [r7, #20]
 800136c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800136e:	4b27      	ldr	r3, [pc, #156]	; (800140c <HAL_I2C_MspInit+0x104>)
 8001370:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001372:	4b26      	ldr	r3, [pc, #152]	; (800140c <HAL_I2C_MspInit+0x104>)
 8001374:	2102      	movs	r1, #2
 8001376:	430a      	orrs	r2, r1
 8001378:	635a      	str	r2, [r3, #52]	; 0x34
 800137a:	4b24      	ldr	r3, [pc, #144]	; (800140c <HAL_I2C_MspInit+0x104>)
 800137c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800137e:	2202      	movs	r2, #2
 8001380:	4013      	ands	r3, r2
 8001382:	613b      	str	r3, [r7, #16]
 8001384:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PA10     ------> I2C1_SDA
    PB6     ------> I2C1_SCL
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001386:	2164      	movs	r1, #100	; 0x64
 8001388:	187b      	adds	r3, r7, r1
 800138a:	2280      	movs	r2, #128	; 0x80
 800138c:	00d2      	lsls	r2, r2, #3
 800138e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001390:	000c      	movs	r4, r1
 8001392:	193b      	adds	r3, r7, r4
 8001394:	2212      	movs	r2, #18
 8001396:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001398:	193b      	adds	r3, r7, r4
 800139a:	2200      	movs	r2, #0
 800139c:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800139e:	193b      	adds	r3, r7, r4
 80013a0:	2200      	movs	r2, #0
 80013a2:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80013a4:	193b      	adds	r3, r7, r4
 80013a6:	2206      	movs	r2, #6
 80013a8:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80013aa:	193a      	adds	r2, r7, r4
 80013ac:	23a0      	movs	r3, #160	; 0xa0
 80013ae:	05db      	lsls	r3, r3, #23
 80013b0:	0011      	movs	r1, r2
 80013b2:	0018      	movs	r0, r3
 80013b4:	f001 f804 	bl	80023c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80013b8:	0021      	movs	r1, r4
 80013ba:	187b      	adds	r3, r7, r1
 80013bc:	2240      	movs	r2, #64	; 0x40
 80013be:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80013c0:	187b      	adds	r3, r7, r1
 80013c2:	2212      	movs	r2, #18
 80013c4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c6:	187b      	adds	r3, r7, r1
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013cc:	187b      	adds	r3, r7, r1
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C1;
 80013d2:	187b      	adds	r3, r7, r1
 80013d4:	2206      	movs	r2, #6
 80013d6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80013d8:	187b      	adds	r3, r7, r1
 80013da:	4a0d      	ldr	r2, [pc, #52]	; (8001410 <HAL_I2C_MspInit+0x108>)
 80013dc:	0019      	movs	r1, r3
 80013de:	0010      	movs	r0, r2
 80013e0:	f000 ffee 	bl	80023c0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80013e4:	4b09      	ldr	r3, [pc, #36]	; (800140c <HAL_I2C_MspInit+0x104>)
 80013e6:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013e8:	4b08      	ldr	r3, [pc, #32]	; (800140c <HAL_I2C_MspInit+0x104>)
 80013ea:	2180      	movs	r1, #128	; 0x80
 80013ec:	0389      	lsls	r1, r1, #14
 80013ee:	430a      	orrs	r2, r1
 80013f0:	63da      	str	r2, [r3, #60]	; 0x3c
 80013f2:	4b06      	ldr	r3, [pc, #24]	; (800140c <HAL_I2C_MspInit+0x104>)
 80013f4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80013f6:	2380      	movs	r3, #128	; 0x80
 80013f8:	039b      	lsls	r3, r3, #14
 80013fa:	4013      	ands	r3, r2
 80013fc:	60fb      	str	r3, [r7, #12]
 80013fe:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001400:	46c0      	nop			; (mov r8, r8)
 8001402:	46bd      	mov	sp, r7
 8001404:	b01f      	add	sp, #124	; 0x7c
 8001406:	bd90      	pop	{r4, r7, pc}
 8001408:	40005400 	.word	0x40005400
 800140c:	40021000 	.word	0x40021000
 8001410:	50000400 	.word	0x50000400

08001414 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001414:	b590      	push	{r4, r7, lr}
 8001416:	b099      	sub	sp, #100	; 0x64
 8001418:	af00      	add	r7, sp, #0
 800141a:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800141c:	2414      	movs	r4, #20
 800141e:	193b      	adds	r3, r7, r4
 8001420:	0018      	movs	r0, r3
 8001422:	234c      	movs	r3, #76	; 0x4c
 8001424:	001a      	movs	r2, r3
 8001426:	2100      	movs	r1, #0
 8001428:	f004 f81a 	bl	8005460 <memset>
  if(htim_base->Instance==TIM1)
 800142c:	687b      	ldr	r3, [r7, #4]
 800142e:	681b      	ldr	r3, [r3, #0]
 8001430:	4a1e      	ldr	r2, [pc, #120]	; (80014ac <HAL_TIM_Base_MspInit+0x98>)
 8001432:	4293      	cmp	r3, r2
 8001434:	d11d      	bne.n	8001472 <HAL_TIM_Base_MspInit+0x5e>

  /* USER CODE END TIM1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_TIM1;
 8001436:	193b      	adds	r3, r7, r4
 8001438:	2280      	movs	r2, #128	; 0x80
 800143a:	0392      	lsls	r2, r2, #14
 800143c:	601a      	str	r2, [r3, #0]
    PeriphClkInit.Tim1ClockSelection = RCC_TIM1CLKSOURCE_PCLK1;
 800143e:	193b      	adds	r3, r7, r4
 8001440:	2200      	movs	r2, #0
 8001442:	639a      	str	r2, [r3, #56]	; 0x38
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001444:	193b      	adds	r3, r7, r4
 8001446:	0018      	movs	r0, r3
 8001448:	f002 fb80 	bl	8003b4c <HAL_RCCEx_PeriphCLKConfig>
 800144c:	1e03      	subs	r3, r0, #0
 800144e:	d001      	beq.n	8001454 <HAL_TIM_Base_MspInit+0x40>
    {
      Error_Handler();
 8001450:	f7ff fecc 	bl	80011ec <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001454:	4b16      	ldr	r3, [pc, #88]	; (80014b0 <HAL_TIM_Base_MspInit+0x9c>)
 8001456:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001458:	4b15      	ldr	r3, [pc, #84]	; (80014b0 <HAL_TIM_Base_MspInit+0x9c>)
 800145a:	2180      	movs	r1, #128	; 0x80
 800145c:	0109      	lsls	r1, r1, #4
 800145e:	430a      	orrs	r2, r1
 8001460:	641a      	str	r2, [r3, #64]	; 0x40
 8001462:	4b13      	ldr	r3, [pc, #76]	; (80014b0 <HAL_TIM_Base_MspInit+0x9c>)
 8001464:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001466:	2380      	movs	r3, #128	; 0x80
 8001468:	011b      	lsls	r3, r3, #4
 800146a:	4013      	ands	r3, r2
 800146c:	613b      	str	r3, [r7, #16]
 800146e:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001470:	e018      	b.n	80014a4 <HAL_TIM_Base_MspInit+0x90>
  else if(htim_base->Instance==TIM3)
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	681b      	ldr	r3, [r3, #0]
 8001476:	4a0f      	ldr	r2, [pc, #60]	; (80014b4 <HAL_TIM_Base_MspInit+0xa0>)
 8001478:	4293      	cmp	r3, r2
 800147a:	d113      	bne.n	80014a4 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800147c:	4b0c      	ldr	r3, [pc, #48]	; (80014b0 <HAL_TIM_Base_MspInit+0x9c>)
 800147e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8001480:	4b0b      	ldr	r3, [pc, #44]	; (80014b0 <HAL_TIM_Base_MspInit+0x9c>)
 8001482:	2102      	movs	r1, #2
 8001484:	430a      	orrs	r2, r1
 8001486:	63da      	str	r2, [r3, #60]	; 0x3c
 8001488:	4b09      	ldr	r3, [pc, #36]	; (80014b0 <HAL_TIM_Base_MspInit+0x9c>)
 800148a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800148c:	2202      	movs	r2, #2
 800148e:	4013      	ands	r3, r2
 8001490:	60fb      	str	r3, [r7, #12]
 8001492:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(TIM3_TIM4_IRQn, 0, 0);
 8001494:	2200      	movs	r2, #0
 8001496:	2100      	movs	r1, #0
 8001498:	2010      	movs	r0, #16
 800149a:	f000 ff5f 	bl	800235c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_TIM4_IRQn);
 800149e:	2010      	movs	r0, #16
 80014a0:	f000 ff71 	bl	8002386 <HAL_NVIC_EnableIRQ>
}
 80014a4:	46c0      	nop			; (mov r8, r8)
 80014a6:	46bd      	mov	sp, r7
 80014a8:	b019      	add	sp, #100	; 0x64
 80014aa:	bd90      	pop	{r4, r7, pc}
 80014ac:	40012c00 	.word	0x40012c00
 80014b0:	40021000 	.word	0x40021000
 80014b4:	40000400 	.word	0x40000400

080014b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80014b8:	b590      	push	{r4, r7, lr}
 80014ba:	b089      	sub	sp, #36	; 0x24
 80014bc:	af00      	add	r7, sp, #0
 80014be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014c0:	240c      	movs	r4, #12
 80014c2:	193b      	adds	r3, r7, r4
 80014c4:	0018      	movs	r0, r3
 80014c6:	2314      	movs	r3, #20
 80014c8:	001a      	movs	r2, r3
 80014ca:	2100      	movs	r1, #0
 80014cc:	f003 ffc8 	bl	8005460 <memset>
  if(htim->Instance==TIM1)
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	4a15      	ldr	r2, [pc, #84]	; (800152c <HAL_TIM_MspPostInit+0x74>)
 80014d6:	4293      	cmp	r3, r2
 80014d8:	d123      	bne.n	8001522 <HAL_TIM_MspPostInit+0x6a>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014da:	4b15      	ldr	r3, [pc, #84]	; (8001530 <HAL_TIM_MspPostInit+0x78>)
 80014dc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80014de:	4b14      	ldr	r3, [pc, #80]	; (8001530 <HAL_TIM_MspPostInit+0x78>)
 80014e0:	2101      	movs	r1, #1
 80014e2:	430a      	orrs	r2, r1
 80014e4:	635a      	str	r2, [r3, #52]	; 0x34
 80014e6:	4b12      	ldr	r3, [pc, #72]	; (8001530 <HAL_TIM_MspPostInit+0x78>)
 80014e8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80014ea:	2201      	movs	r2, #1
 80014ec:	4013      	ands	r3, r2
 80014ee:	60bb      	str	r3, [r7, #8]
 80014f0:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = MotorR_PWM_Pin|MotorL_PWM_Pin;
 80014f2:	193b      	adds	r3, r7, r4
 80014f4:	22c0      	movs	r2, #192	; 0xc0
 80014f6:	0092      	lsls	r2, r2, #2
 80014f8:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014fa:	0021      	movs	r1, r4
 80014fc:	187b      	adds	r3, r7, r1
 80014fe:	2202      	movs	r2, #2
 8001500:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001502:	187b      	adds	r3, r7, r1
 8001504:	2200      	movs	r2, #0
 8001506:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001508:	187b      	adds	r3, r7, r1
 800150a:	2200      	movs	r2, #0
 800150c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM1;
 800150e:	187b      	adds	r3, r7, r1
 8001510:	2202      	movs	r2, #2
 8001512:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001514:	187a      	adds	r2, r7, r1
 8001516:	23a0      	movs	r3, #160	; 0xa0
 8001518:	05db      	lsls	r3, r3, #23
 800151a:	0011      	movs	r1, r2
 800151c:	0018      	movs	r0, r3
 800151e:	f000 ff4f 	bl	80023c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001522:	46c0      	nop			; (mov r8, r8)
 8001524:	46bd      	mov	sp, r7
 8001526:	b009      	add	sp, #36	; 0x24
 8001528:	bd90      	pop	{r4, r7, pc}
 800152a:	46c0      	nop			; (mov r8, r8)
 800152c:	40012c00 	.word	0x40012c00
 8001530:	40021000 	.word	0x40021000

08001534 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001534:	b580      	push	{r7, lr}
 8001536:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001538:	e7fe      	b.n	8001538 <NMI_Handler+0x4>

0800153a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800153a:	b580      	push	{r7, lr}
 800153c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800153e:	e7fe      	b.n	800153e <HardFault_Handler+0x4>

08001540 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001540:	b580      	push	{r7, lr}
 8001542:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 8001544:	46c0      	nop			; (mov r8, r8)
 8001546:	46bd      	mov	sp, r7
 8001548:	bd80      	pop	{r7, pc}

0800154a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800154a:	b580      	push	{r7, lr}
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800154e:	46c0      	nop			; (mov r8, r8)
 8001550:	46bd      	mov	sp, r7
 8001552:	bd80      	pop	{r7, pc}

08001554 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001554:	b580      	push	{r7, lr}
 8001556:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001558:	f000 f8aa 	bl	80016b0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800155c:	46c0      	nop			; (mov r8, r8)
 800155e:	46bd      	mov	sp, r7
 8001560:	bd80      	pop	{r7, pc}
	...

08001564 <TIM3_TIM4_IRQHandler>:

/**
  * @brief This function handles TIM3, TIM4 global Interrupt.
  */
void TIM3_TIM4_IRQHandler(void)
{
 8001564:	b580      	push	{r7, lr}
 8001566:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_TIM4_IRQn 0 */

  /* USER CODE END TIM3_TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8001568:	4b03      	ldr	r3, [pc, #12]	; (8001578 <TIM3_TIM4_IRQHandler+0x14>)
 800156a:	0018      	movs	r0, r3
 800156c:	f002 ff34 	bl	80043d8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_TIM4_IRQn 1 */

  /* USER CODE END TIM3_TIM4_IRQn 1 */
}
 8001570:	46c0      	nop			; (mov r8, r8)
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	46c0      	nop			; (mov r8, r8)
 8001578:	2000012c 	.word	0x2000012c

0800157c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800157c:	b580      	push	{r7, lr}
 800157e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001580:	46c0      	nop			; (mov r8, r8)
 8001582:	46bd      	mov	sp, r7
 8001584:	bd80      	pop	{r7, pc}
	...

08001588 <Reset_Handler>:

  .section .text.Reset_Handler
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001588:	480d      	ldr	r0, [pc, #52]	; (80015c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800158a:	4685      	mov	sp, r0

/* Call the clock system initialization function.*/
  bl  SystemInit
 800158c:	f7ff fff6 	bl	800157c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001590:	480c      	ldr	r0, [pc, #48]	; (80015c4 <LoopForever+0x6>)
  ldr r1, =_edata
 8001592:	490d      	ldr	r1, [pc, #52]	; (80015c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001594:	4a0d      	ldr	r2, [pc, #52]	; (80015cc <LoopForever+0xe>)
  movs r3, #0
 8001596:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001598:	e002      	b.n	80015a0 <LoopCopyDataInit>

0800159a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800159a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800159c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800159e:	3304      	adds	r3, #4

080015a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80015a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80015a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80015a4:	d3f9      	bcc.n	800159a <CopyDataInit>

/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80015a6:	4a0a      	ldr	r2, [pc, #40]	; (80015d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80015a8:	4c0a      	ldr	r4, [pc, #40]	; (80015d4 <LoopForever+0x16>)
  movs r3, #0
 80015aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80015ac:	e001      	b.n	80015b2 <LoopFillZerobss>

080015ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80015ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80015b0:	3204      	adds	r2, #4

080015b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80015b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80015b4:	d3fb      	bcc.n	80015ae <FillZerobss>

/* Call static constructors */
  bl __libc_init_array
 80015b6:	f003 ff5b 	bl	8005470 <__libc_init_array>
/* Call the application s entry point.*/
  bl main
 80015ba:	f7ff fa11 	bl	80009e0 <main>

080015be <LoopForever>:

LoopForever:
  b LoopForever
 80015be:	e7fe      	b.n	80015be <LoopForever>
  ldr   r0, =_estack
 80015c0:	20024000 	.word	0x20024000
  ldr r0, =_sdata
 80015c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80015c8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80015cc:	080055ac 	.word	0x080055ac
  ldr r2, =_sbss
 80015d0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80015d4:	200001a8 	.word	0x200001a8

080015d8 <ADC1_COMP_IRQHandler>:
 * @retval None
*/
  .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80015d8:	e7fe      	b.n	80015d8 <ADC1_COMP_IRQHandler>
	...

080015dc <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80015dc:	b580      	push	{r7, lr}
 80015de:	b082      	sub	sp, #8
 80015e0:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80015e2:	1dfb      	adds	r3, r7, #7
 80015e4:	2200      	movs	r2, #0
 80015e6:	701a      	strb	r2, [r3, #0]
#if (INSTRUCTION_CACHE_ENABLE == 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80015e8:	4b0b      	ldr	r3, [pc, #44]	; (8001618 <HAL_Init+0x3c>)
 80015ea:	681a      	ldr	r2, [r3, #0]
 80015ec:	4b0a      	ldr	r3, [pc, #40]	; (8001618 <HAL_Init+0x3c>)
 80015ee:	2180      	movs	r1, #128	; 0x80
 80015f0:	0049      	lsls	r1, r1, #1
 80015f2:	430a      	orrs	r2, r1
 80015f4:	601a      	str	r2, [r3, #0]
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80015f6:	2000      	movs	r0, #0
 80015f8:	f000 f810 	bl	800161c <HAL_InitTick>
 80015fc:	1e03      	subs	r3, r0, #0
 80015fe:	d003      	beq.n	8001608 <HAL_Init+0x2c>
  {
    status = HAL_ERROR;
 8001600:	1dfb      	adds	r3, r7, #7
 8001602:	2201      	movs	r2, #1
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	e001      	b.n	800160c <HAL_Init+0x30>
  }
  else
  {
  /* Init the low level hardware */
  HAL_MspInit();
 8001608:	f7ff fdf6 	bl	80011f8 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800160c:	1dfb      	adds	r3, r7, #7
 800160e:	781b      	ldrb	r3, [r3, #0]
}
 8001610:	0018      	movs	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	b002      	add	sp, #8
 8001616:	bd80      	pop	{r7, pc}
 8001618:	40022000 	.word	0x40022000

0800161c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800161c:	b590      	push	{r4, r7, lr}
 800161e:	b085      	sub	sp, #20
 8001620:	af00      	add	r7, sp, #0
 8001622:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001624:	230f      	movs	r3, #15
 8001626:	18fb      	adds	r3, r7, r3
 8001628:	2200      	movs	r2, #0
 800162a:	701a      	strb	r2, [r3, #0]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/ 
  if ((uint32_t)uwTickFreq != 0U)
 800162c:	4b1d      	ldr	r3, [pc, #116]	; (80016a4 <HAL_InitTick+0x88>)
 800162e:	781b      	ldrb	r3, [r3, #0]
 8001630:	2b00      	cmp	r3, #0
 8001632:	d02b      	beq.n	800168c <HAL_InitTick+0x70>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U /(uint32_t)uwTickFreq)) == 0U)
 8001634:	4b1c      	ldr	r3, [pc, #112]	; (80016a8 <HAL_InitTick+0x8c>)
 8001636:	681c      	ldr	r4, [r3, #0]
 8001638:	4b1a      	ldr	r3, [pc, #104]	; (80016a4 <HAL_InitTick+0x88>)
 800163a:	781b      	ldrb	r3, [r3, #0]
 800163c:	0019      	movs	r1, r3
 800163e:	23fa      	movs	r3, #250	; 0xfa
 8001640:	0098      	lsls	r0, r3, #2
 8001642:	f7fe fd5f 	bl	8000104 <__udivsi3>
 8001646:	0003      	movs	r3, r0
 8001648:	0019      	movs	r1, r3
 800164a:	0020      	movs	r0, r4
 800164c:	f7fe fd5a 	bl	8000104 <__udivsi3>
 8001650:	0003      	movs	r3, r0
 8001652:	0018      	movs	r0, r3
 8001654:	f000 fea7 	bl	80023a6 <HAL_SYSTICK_Config>
 8001658:	1e03      	subs	r3, r0, #0
 800165a:	d112      	bne.n	8001682 <HAL_InitTick+0x66>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	2b03      	cmp	r3, #3
 8001660:	d80a      	bhi.n	8001678 <HAL_InitTick+0x5c>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001662:	6879      	ldr	r1, [r7, #4]
 8001664:	2301      	movs	r3, #1
 8001666:	425b      	negs	r3, r3
 8001668:	2200      	movs	r2, #0
 800166a:	0018      	movs	r0, r3
 800166c:	f000 fe76 	bl	800235c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001670:	4b0e      	ldr	r3, [pc, #56]	; (80016ac <HAL_InitTick+0x90>)
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	601a      	str	r2, [r3, #0]
 8001676:	e00d      	b.n	8001694 <HAL_InitTick+0x78>
      }
      else
      {
        status = HAL_ERROR;
 8001678:	230f      	movs	r3, #15
 800167a:	18fb      	adds	r3, r7, r3
 800167c:	2201      	movs	r2, #1
 800167e:	701a      	strb	r2, [r3, #0]
 8001680:	e008      	b.n	8001694 <HAL_InitTick+0x78>
      }
    }
    else
    {
      status = HAL_ERROR;
 8001682:	230f      	movs	r3, #15
 8001684:	18fb      	adds	r3, r7, r3
 8001686:	2201      	movs	r2, #1
 8001688:	701a      	strb	r2, [r3, #0]
 800168a:	e003      	b.n	8001694 <HAL_InitTick+0x78>
    }
  }
  else
  {
    status = HAL_ERROR;
 800168c:	230f      	movs	r3, #15
 800168e:	18fb      	adds	r3, r7, r3
 8001690:	2201      	movs	r2, #1
 8001692:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return status;
 8001694:	230f      	movs	r3, #15
 8001696:	18fb      	adds	r3, r7, r3
 8001698:	781b      	ldrb	r3, [r3, #0]
}
 800169a:	0018      	movs	r0, r3
 800169c:	46bd      	mov	sp, r7
 800169e:	b005      	add	sp, #20
 80016a0:	bd90      	pop	{r4, r7, pc}
 80016a2:	46c0      	nop			; (mov r8, r8)
 80016a4:	20000008 	.word	0x20000008
 80016a8:	20000000 	.word	0x20000000
 80016ac:	20000004 	.word	0x20000004

080016b0 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80016b4:	4b05      	ldr	r3, [pc, #20]	; (80016cc <HAL_IncTick+0x1c>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	001a      	movs	r2, r3
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_IncTick+0x20>)
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	18d2      	adds	r2, r2, r3
 80016c0:	4b03      	ldr	r3, [pc, #12]	; (80016d0 <HAL_IncTick+0x20>)
 80016c2:	601a      	str	r2, [r3, #0]
}
 80016c4:	46c0      	nop			; (mov r8, r8)
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	46c0      	nop			; (mov r8, r8)
 80016cc:	20000008 	.word	0x20000008
 80016d0:	200001a4 	.word	0x200001a4

080016d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
  return uwTick;
 80016d8:	4b02      	ldr	r3, [pc, #8]	; (80016e4 <HAL_GetTick+0x10>)
 80016da:	681b      	ldr	r3, [r3, #0]
}
 80016dc:	0018      	movs	r0, r3
 80016de:	46bd      	mov	sp, r7
 80016e0:	bd80      	pop	{r7, pc}
 80016e2:	46c0      	nop			; (mov r8, r8)
 80016e4:	200001a4 	.word	0x200001a4

080016e8 <HAL_SYSCFG_StrobeDBattpinsConfig>:
  *         @arg @ref SYSCFG_UCPD1_STROBE
  *         @arg @ref SYSCFG_UCPD2_STROBE
  * @retval None
  */
void HAL_SYSCFG_StrobeDBattpinsConfig(uint32_t ConfigDeadBattery)
{
 80016e8:	b580      	push	{r7, lr}
 80016ea:	b082      	sub	sp, #8
 80016ec:	af00      	add	r7, sp, #0
 80016ee:	6078      	str	r0, [r7, #4]
  assert_param(IS_SYSCFG_DBATT_CONFIG(ConfigDeadBattery));

  /* Change strobe configuration of GPIO depending on UCPDx dead battery settings */
  MODIFY_REG(SYSCFG->CFGR1, (SYSCFG_CFGR1_UCPD1_STROBE | SYSCFG_CFGR1_UCPD2_STROBE), ConfigDeadBattery);
 80016f0:	4b06      	ldr	r3, [pc, #24]	; (800170c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80016f2:	681b      	ldr	r3, [r3, #0]
 80016f4:	4a06      	ldr	r2, [pc, #24]	; (8001710 <HAL_SYSCFG_StrobeDBattpinsConfig+0x28>)
 80016f6:	4013      	ands	r3, r2
 80016f8:	0019      	movs	r1, r3
 80016fa:	4b04      	ldr	r3, [pc, #16]	; (800170c <HAL_SYSCFG_StrobeDBattpinsConfig+0x24>)
 80016fc:	687a      	ldr	r2, [r7, #4]
 80016fe:	430a      	orrs	r2, r1
 8001700:	601a      	str	r2, [r3, #0]
}
 8001702:	46c0      	nop			; (mov r8, r8)
 8001704:	46bd      	mov	sp, r7
 8001706:	b002      	add	sp, #8
 8001708:	bd80      	pop	{r7, pc}
 800170a:	46c0      	nop			; (mov r8, r8)
 800170c:	40010000 	.word	0x40010000
 8001710:	fffff9ff 	.word	0xfffff9ff

08001714 <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
 800171c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a05      	ldr	r2, [pc, #20]	; (8001738 <LL_ADC_SetCommonPathInternalCh+0x24>)
 8001724:	401a      	ands	r2, r3
 8001726:	683b      	ldr	r3, [r7, #0]
 8001728:	431a      	orrs	r2, r3
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	601a      	str	r2, [r3, #0]
}
 800172e:	46c0      	nop			; (mov r8, r8)
 8001730:	46bd      	mov	sp, r7
 8001732:	b002      	add	sp, #8
 8001734:	bd80      	pop	{r7, pc}
 8001736:	46c0      	nop			; (mov r8, r8)
 8001738:	fe3fffff 	.word	0xfe3fffff

0800173c <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(const ADC_Common_TypeDef *ADCxy_COMMON)
{
 800173c:	b580      	push	{r7, lr}
 800173e:	b082      	sub	sp, #8
 8001740:	af00      	add	r7, sp, #0
 8001742:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	681a      	ldr	r2, [r3, #0]
 8001748:	23e0      	movs	r3, #224	; 0xe0
 800174a:	045b      	lsls	r3, r3, #17
 800174c:	4013      	ands	r3, r2
}
 800174e:	0018      	movs	r0, r3
 8001750:	46bd      	mov	sp, r7
 8001752:	b002      	add	sp, #8
 8001754:	bd80      	pop	{r7, pc}

08001756 <LL_ADC_SetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonChannels(ADC_TypeDef *ADCx, uint32_t SamplingTimeY,
                                                          uint32_t SamplingTime)
{
 8001756:	b580      	push	{r7, lr}
 8001758:	b084      	sub	sp, #16
 800175a:	af00      	add	r7, sp, #0
 800175c:	60f8      	str	r0, [r7, #12]
 800175e:	60b9      	str	r1, [r7, #8]
 8001760:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->SMPR,
 8001762:	68fb      	ldr	r3, [r7, #12]
 8001764:	695b      	ldr	r3, [r3, #20]
 8001766:	68ba      	ldr	r2, [r7, #8]
 8001768:	2104      	movs	r1, #4
 800176a:	400a      	ands	r2, r1
 800176c:	2107      	movs	r1, #7
 800176e:	4091      	lsls	r1, r2
 8001770:	000a      	movs	r2, r1
 8001772:	43d2      	mvns	r2, r2
 8001774:	401a      	ands	r2, r3
 8001776:	68bb      	ldr	r3, [r7, #8]
 8001778:	2104      	movs	r1, #4
 800177a:	400b      	ands	r3, r1
 800177c:	6879      	ldr	r1, [r7, #4]
 800177e:	4099      	lsls	r1, r3
 8001780:	000b      	movs	r3, r1
 8001782:	431a      	orrs	r2, r3
 8001784:	68fb      	ldr	r3, [r7, #12]
 8001786:	615a      	str	r2, [r3, #20]
             ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK),
             SamplingTime << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
}
 8001788:	46c0      	nop			; (mov r8, r8)
 800178a:	46bd      	mov	sp, r7
 800178c:	b004      	add	sp, #16
 800178e:	bd80      	pop	{r7, pc}

08001790 <LL_ADC_GetSamplingTimeCommonChannels>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_39CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_79CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_160CYCLES_5
  */
__STATIC_INLINE uint32_t LL_ADC_GetSamplingTimeCommonChannels(const ADC_TypeDef *ADCx, uint32_t SamplingTimeY)
{
 8001790:	b580      	push	{r7, lr}
 8001792:	b082      	sub	sp, #8
 8001794:	af00      	add	r7, sp, #0
 8001796:	6078      	str	r0, [r7, #4]
 8001798:	6039      	str	r1, [r7, #0]
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 800179a:	687b      	ldr	r3, [r7, #4]
 800179c:	695b      	ldr	r3, [r3, #20]
 800179e:	683a      	ldr	r2, [r7, #0]
 80017a0:	2104      	movs	r1, #4
 80017a2:	400a      	ands	r2, r1
 80017a4:	2107      	movs	r1, #7
 80017a6:	4091      	lsls	r1, r2
 80017a8:	000a      	movs	r2, r1
 80017aa:	401a      	ands	r2, r3
                    >> (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK));
 80017ac:	683b      	ldr	r3, [r7, #0]
 80017ae:	2104      	movs	r1, #4
 80017b0:	400b      	ands	r3, r1
  return (uint32_t)((READ_BIT(ADCx->SMPR, ADC_SMPR_SMP1 << (SamplingTimeY & ADC_SAMPLING_TIME_SMP_SHIFT_MASK)))
 80017b2:	40da      	lsrs	r2, r3
 80017b4:	0013      	movs	r3, r2
}
 80017b6:	0018      	movs	r0, r3
 80017b8:	46bd      	mov	sp, r7
 80017ba:	b002      	add	sp, #8
 80017bc:	bd80      	pop	{r7, pc}

080017be <LL_ADC_REG_SetSequencerRanks>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 80017be:	b580      	push	{r7, lr}
 80017c0:	b084      	sub	sp, #16
 80017c2:	af00      	add	r7, sp, #0
 80017c4:	60f8      	str	r0, [r7, #12]
 80017c6:	60b9      	str	r1, [r7, #8]
 80017c8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register depending on parameter "Rank".                               */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->CHSELR,
 80017ca:	68fb      	ldr	r3, [r7, #12]
 80017cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80017ce:	68ba      	ldr	r2, [r7, #8]
 80017d0:	211f      	movs	r1, #31
 80017d2:	400a      	ands	r2, r1
 80017d4:	210f      	movs	r1, #15
 80017d6:	4091      	lsls	r1, r2
 80017d8:	000a      	movs	r2, r1
 80017da:	43d2      	mvns	r2, r2
 80017dc:	401a      	ands	r2, r3
 80017de:	687b      	ldr	r3, [r7, #4]
 80017e0:	0e9b      	lsrs	r3, r3, #26
 80017e2:	210f      	movs	r1, #15
 80017e4:	4019      	ands	r1, r3
 80017e6:	68bb      	ldr	r3, [r7, #8]
 80017e8:	201f      	movs	r0, #31
 80017ea:	4003      	ands	r3, r0
 80017ec:	4099      	lsls	r1, r3
 80017ee:	000b      	movs	r3, r1
 80017f0:	431a      	orrs	r2, r3
 80017f2:	68fb      	ldr	r3, [r7, #12]
 80017f4:	629a      	str	r2, [r3, #40]	; 0x28
             ADC_CHSELR_SQ1 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK_SEQ) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS)
             << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80017f6:	46c0      	nop			; (mov r8, r8)
 80017f8:	46bd      	mov	sp, r7
 80017fa:	b004      	add	sp, #16
 80017fc:	bd80      	pop	{r7, pc}

080017fe <LL_ADC_REG_SetSequencerChAdd>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChAdd(ADC_TypeDef *ADCx, uint32_t Channel)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	6078      	str	r0, [r7, #4]
 8001806:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  SET_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800180c:	683b      	ldr	r3, [r7, #0]
 800180e:	035b      	lsls	r3, r3, #13
 8001810:	0b5b      	lsrs	r3, r3, #13
 8001812:	431a      	orrs	r2, r3
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001818:	46c0      	nop			; (mov r8, r8)
 800181a:	46bd      	mov	sp, r7
 800181c:	b002      	add	sp, #8
 800181e:	bd80      	pop	{r7, pc}

08001820 <LL_ADC_REG_SetSequencerChRem>:
  *             only if sequencer is set in mode "not fully configurable",
  *             refer to function @ref LL_ADC_REG_SetSequencerConfigurable().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerChRem(ADC_TypeDef *ADCx, uint32_t Channel)
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b082      	sub	sp, #8
 8001824:	af00      	add	r7, sp, #0
 8001826:	6078      	str	r0, [r7, #4]
 8001828:	6039      	str	r1, [r7, #0]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  CLEAR_BIT(ADCx->CHSELR, (Channel & ADC_CHANNEL_ID_BITFIELD_MASK));
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800182e:	683a      	ldr	r2, [r7, #0]
 8001830:	0352      	lsls	r2, r2, #13
 8001832:	0b52      	lsrs	r2, r2, #13
 8001834:	43d2      	mvns	r2, r2
 8001836:	401a      	ands	r2, r3
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
}
 800183c:	46c0      	nop			; (mov r8, r8)
 800183e:	46bd      	mov	sp, r7
 8001840:	b002      	add	sp, #8
 8001842:	bd80      	pop	{r7, pc}

08001844 <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_1
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_2
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTimeY)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b084      	sub	sp, #16
 8001848:	af00      	add	r7, sp, #0
 800184a:	60f8      	str	r0, [r7, #12]
 800184c:	60b9      	str	r1, [r7, #8]
 800184e:	607a      	str	r2, [r7, #4]
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  MODIFY_REG(ADCx->SMPR,
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	695b      	ldr	r3, [r3, #20]
 8001854:	68ba      	ldr	r2, [r7, #8]
 8001856:	0212      	lsls	r2, r2, #8
 8001858:	43d2      	mvns	r2, r2
 800185a:	401a      	ands	r2, r3
 800185c:	68bb      	ldr	r3, [r7, #8]
 800185e:	021b      	lsls	r3, r3, #8
 8001860:	6879      	ldr	r1, [r7, #4]
 8001862:	400b      	ands	r3, r1
 8001864:	4904      	ldr	r1, [pc, #16]	; (8001878 <LL_ADC_SetChannelSamplingTime+0x34>)
 8001866:	400b      	ands	r3, r1
 8001868:	431a      	orrs	r2, r3
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	615a      	str	r2, [r3, #20]
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS),
             (Channel << ADC_SMPR_SMPSEL0_BITOFFSET_POS) & (SamplingTimeY & ADC_SAMPLING_TIME_CH_MASK)
            );
}
 800186e:	46c0      	nop			; (mov r8, r8)
 8001870:	46bd      	mov	sp, r7
 8001872:	b004      	add	sp, #16
 8001874:	bd80      	pop	{r7, pc}
 8001876:	46c0      	nop			; (mov r8, r8)
 8001878:	07ffff00 	.word	0x07ffff00

0800187c <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 800187c:	b580      	push	{r7, lr}
 800187e:	b082      	sub	sp, #8
 8001880:	af00      	add	r7, sp, #0
 8001882:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	689b      	ldr	r3, [r3, #8]
 8001888:	4a05      	ldr	r2, [pc, #20]	; (80018a0 <LL_ADC_EnableInternalRegulator+0x24>)
 800188a:	4013      	ands	r3, r2
 800188c:	2280      	movs	r2, #128	; 0x80
 800188e:	0552      	lsls	r2, r2, #21
 8001890:	431a      	orrs	r2, r3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001896:	46c0      	nop			; (mov r8, r8)
 8001898:	46bd      	mov	sp, r7
 800189a:	b002      	add	sp, #8
 800189c:	bd80      	pop	{r7, pc}
 800189e:	46c0      	nop			; (mov r8, r8)
 80018a0:	6fffffe8 	.word	0x6fffffe8

080018a4 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(const ADC_TypeDef *ADCx)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b082      	sub	sp, #8
 80018a8:	af00      	add	r7, sp, #0
 80018aa:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	689a      	ldr	r2, [r3, #8]
 80018b0:	2380      	movs	r3, #128	; 0x80
 80018b2:	055b      	lsls	r3, r3, #21
 80018b4:	401a      	ands	r2, r3
 80018b6:	2380      	movs	r3, #128	; 0x80
 80018b8:	055b      	lsls	r3, r3, #21
 80018ba:	429a      	cmp	r2, r3
 80018bc:	d101      	bne.n	80018c2 <LL_ADC_IsInternalRegulatorEnabled+0x1e>
 80018be:	2301      	movs	r3, #1
 80018c0:	e000      	b.n	80018c4 <LL_ADC_IsInternalRegulatorEnabled+0x20>
 80018c2:	2300      	movs	r3, #0
}
 80018c4:	0018      	movs	r0, r3
 80018c6:	46bd      	mov	sp, r7
 80018c8:	b002      	add	sp, #8
 80018ca:	bd80      	pop	{r7, pc}

080018cc <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	689b      	ldr	r3, [r3, #8]
 80018d8:	4a04      	ldr	r2, [pc, #16]	; (80018ec <LL_ADC_Enable+0x20>)
 80018da:	4013      	ands	r3, r2
 80018dc:	2201      	movs	r2, #1
 80018de:	431a      	orrs	r2, r3
 80018e0:	687b      	ldr	r3, [r7, #4]
 80018e2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80018e4:	46c0      	nop			; (mov r8, r8)
 80018e6:	46bd      	mov	sp, r7
 80018e8:	b002      	add	sp, #8
 80018ea:	bd80      	pop	{r7, pc}
 80018ec:	7fffffe8 	.word	0x7fffffe8

080018f0 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(const ADC_TypeDef *ADCx)
{
 80018f0:	b580      	push	{r7, lr}
 80018f2:	b082      	sub	sp, #8
 80018f4:	af00      	add	r7, sp, #0
 80018f6:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80018f8:	687b      	ldr	r3, [r7, #4]
 80018fa:	689b      	ldr	r3, [r3, #8]
 80018fc:	2201      	movs	r2, #1
 80018fe:	4013      	ands	r3, r2
 8001900:	2b01      	cmp	r3, #1
 8001902:	d101      	bne.n	8001908 <LL_ADC_IsEnabled+0x18>
 8001904:	2301      	movs	r3, #1
 8001906:	e000      	b.n	800190a <LL_ADC_IsEnabled+0x1a>
 8001908:	2300      	movs	r3, #0
}
 800190a:	0018      	movs	r0, r3
 800190c:	46bd      	mov	sp, r7
 800190e:	b002      	add	sp, #8
 8001910:	bd80      	pop	{r7, pc}
	...

08001914 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b082      	sub	sp, #8
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	689b      	ldr	r3, [r3, #8]
 8001920:	4a04      	ldr	r2, [pc, #16]	; (8001934 <LL_ADC_REG_StartConversion+0x20>)
 8001922:	4013      	ands	r3, r2
 8001924:	2204      	movs	r2, #4
 8001926:	431a      	orrs	r2, r3
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 800192c:	46c0      	nop			; (mov r8, r8)
 800192e:	46bd      	mov	sp, r7
 8001930:	b002      	add	sp, #8
 8001932:	bd80      	pop	{r7, pc}
 8001934:	7fffffe8 	.word	0x7fffffe8

08001938 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(const ADC_TypeDef *ADCx)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b082      	sub	sp, #8
 800193c:	af00      	add	r7, sp, #0
 800193e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	689b      	ldr	r3, [r3, #8]
 8001944:	2204      	movs	r2, #4
 8001946:	4013      	ands	r3, r2
 8001948:	2b04      	cmp	r3, #4
 800194a:	d101      	bne.n	8001950 <LL_ADC_REG_IsConversionOngoing+0x18>
 800194c:	2301      	movs	r3, #1
 800194e:	e000      	b.n	8001952 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001950:	2300      	movs	r3, #0
}
 8001952:	0018      	movs	r0, r3
 8001954:	46bd      	mov	sp, r7
 8001956:	b002      	add	sp, #8
 8001958:	bd80      	pop	{r7, pc}
	...

0800195c <HAL_ADC_Init>:
  *         of structure "ADC_InitTypeDef".
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	b088      	sub	sp, #32
 8001960:	af00      	add	r7, sp, #0
 8001962:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001964:	231f      	movs	r3, #31
 8001966:	18fb      	adds	r3, r7, r3
 8001968:	2200      	movs	r2, #0
 800196a:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_cfgr1 = 0UL;
 800196c:	2300      	movs	r3, #0
 800196e:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_cfgr2 = 0UL;
 8001970:	2300      	movs	r3, #0
 8001972:	617b      	str	r3, [r7, #20]
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001974:	2300      	movs	r3, #0
 8001976:	60fb      	str	r3, [r7, #12]

  /* Check ADC handle */
  if (hadc == NULL)
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	2b00      	cmp	r3, #0
 800197c:	d101      	bne.n	8001982 <HAL_ADC_Init+0x26>
  {
    return HAL_ERROR;
 800197e:	2301      	movs	r3, #1
 8001980:	e17f      	b.n	8001c82 <HAL_ADC_Init+0x326>
  /* continuous mode is disabled.                                             */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001986:	2b00      	cmp	r3, #0
 8001988:	d10a      	bne.n	80019a0 <HAL_ADC_Init+0x44>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	0018      	movs	r0, r3
 800198e:	f7ff fc5b 	bl	8001248 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001992:	687b      	ldr	r3, [r7, #4]
 8001994:	2200      	movs	r2, #0
 8001996:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001998:	687b      	ldr	r3, [r7, #4]
 800199a:	2254      	movs	r2, #84	; 0x54
 800199c:	2100      	movs	r1, #0
 800199e:	5499      	strb	r1, [r3, r2]
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019a0:	687b      	ldr	r3, [r7, #4]
 80019a2:	681b      	ldr	r3, [r3, #0]
 80019a4:	0018      	movs	r0, r3
 80019a6:	f7ff ff7d 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 80019aa:	1e03      	subs	r3, r0, #0
 80019ac:	d115      	bne.n	80019da <HAL_ADC_Init+0x7e>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	0018      	movs	r0, r3
 80019b4:	f7ff ff62 	bl	800187c <LL_ADC_EnableInternalRegulator>
    /* Delay for ADC stabilization time */
    /* Wait loop initialization and execution */
    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80019b8:	4bb4      	ldr	r3, [pc, #720]	; (8001c8c <HAL_ADC_Init+0x330>)
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	49b4      	ldr	r1, [pc, #720]	; (8001c90 <HAL_ADC_Init+0x334>)
 80019be:	0018      	movs	r0, r3
 80019c0:	f7fe fba0 	bl	8000104 <__udivsi3>
 80019c4:	0003      	movs	r3, r0
 80019c6:	3301      	adds	r3, #1
 80019c8:	005b      	lsls	r3, r3, #1
 80019ca:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019cc:	e002      	b.n	80019d4 <HAL_ADC_Init+0x78>
    {
      wait_loop_index--;
 80019ce:	68fb      	ldr	r3, [r7, #12]
 80019d0:	3b01      	subs	r3, #1
 80019d2:	60fb      	str	r3, [r7, #12]
    while (wait_loop_index != 0UL)
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d1f9      	bne.n	80019ce <HAL_ADC_Init+0x72>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	0018      	movs	r0, r3
 80019e0:	f7ff ff60 	bl	80018a4 <LL_ADC_IsInternalRegulatorEnabled>
 80019e4:	1e03      	subs	r3, r0, #0
 80019e6:	d10f      	bne.n	8001a08 <HAL_ADC_Init+0xac>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80019e8:	687b      	ldr	r3, [r7, #4]
 80019ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80019ec:	2210      	movs	r2, #16
 80019ee:	431a      	orrs	r2, r3
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80019f8:	2201      	movs	r2, #1
 80019fa:	431a      	orrs	r2, r3
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8001a00:	231f      	movs	r3, #31
 8001a02:	18fb      	adds	r3, r7, r3
 8001a04:	2201      	movs	r2, #1
 8001a06:	701a      	strb	r2, [r3, #0]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	0018      	movs	r0, r3
 8001a0e:	f7ff ff93 	bl	8001938 <LL_ADC_REG_IsConversionOngoing>
 8001a12:	0003      	movs	r3, r0
 8001a14:	613b      	str	r3, [r7, #16]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a1a:	2210      	movs	r2, #16
 8001a1c:	4013      	ands	r3, r2
 8001a1e:	d000      	beq.n	8001a22 <HAL_ADC_Init+0xc6>
 8001a20:	e122      	b.n	8001c68 <HAL_ADC_Init+0x30c>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	2b00      	cmp	r3, #0
 8001a26:	d000      	beq.n	8001a2a <HAL_ADC_Init+0xce>
 8001a28:	e11e      	b.n	8001c68 <HAL_ADC_Init+0x30c>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001a2e:	4a99      	ldr	r2, [pc, #612]	; (8001c94 <HAL_ADC_Init+0x338>)
 8001a30:	4013      	ands	r3, r2
 8001a32:	2202      	movs	r2, #2
 8001a34:	431a      	orrs	r2, r3
 8001a36:	687b      	ldr	r3, [r7, #4]
 8001a38:	659a      	str	r2, [r3, #88]	; 0x58
    /*  - DMA continuous request                                              */
    /*  - Trigger frequency mode                                              */
    /* Note: If low power mode AutoPowerOff is enabled, ADC enable            */
    /*       and disable phases are performed automatically by hardware       */
    /*       (in this case, flag ADC_FLAG_RDY is not set).                    */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001a3a:	687b      	ldr	r3, [r7, #4]
 8001a3c:	681b      	ldr	r3, [r3, #0]
 8001a3e:	0018      	movs	r0, r3
 8001a40:	f7ff ff56 	bl	80018f0 <LL_ADC_IsEnabled>
 8001a44:	1e03      	subs	r3, r0, #0
 8001a46:	d000      	beq.n	8001a4a <HAL_ADC_Init+0xee>
 8001a48:	e0ad      	b.n	8001ba6 <HAL_ADC_Init+0x24a>
      /* without needing to reconfigure all other ADC groups/channels         */
      /* parameters):                                                         */
      /*   - internal measurement paths (VrefInt, ...)                        */
      /*     (set into HAL_ADC_ConfigChannel() )                              */

      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001a4a:	687b      	ldr	r3, [r7, #4]
 8001a4c:	689a      	ldr	r2, [r3, #8]
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a4e:	687b      	ldr	r3, [r7, #4]
 8001a50:	7e1b      	ldrb	r3, [r3, #24]
 8001a52:	039b      	lsls	r3, r3, #14
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001a54:	431a      	orrs	r2, r3
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	7e5b      	ldrb	r3, [r3, #25]
 8001a5a:	03db      	lsls	r3, r3, #15
                    ADC_CFGR1_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)      |
 8001a5c:	431a      	orrs	r2, r3
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	7e9b      	ldrb	r3, [r3, #26]
 8001a62:	035b      	lsls	r3, r3, #13
                    ADC_CFGR1_AUTOOFF((uint32_t)hadc->Init.LowPowerAutoPowerOff)   |
 8001a64:	431a      	orrs	r2, r3
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a66:	687b      	ldr	r3, [r7, #4]
 8001a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d002      	beq.n	8001a74 <HAL_ADC_Init+0x118>
 8001a6e:	2380      	movs	r3, #128	; 0x80
 8001a70:	015b      	lsls	r3, r3, #5
 8001a72:	e000      	b.n	8001a76 <HAL_ADC_Init+0x11a>
 8001a74:	2300      	movs	r3, #0
                    ADC_CFGR1_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)  |
 8001a76:	431a      	orrs	r2, r3
                    hadc->Init.DataAlign                                           |
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
                    ADC_CFGR1_OVERRUN(hadc->Init.Overrun)                          |
 8001a7c:	431a      	orrs	r2, r3
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	691b      	ldr	r3, [r3, #16]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	da04      	bge.n	8001a90 <HAL_ADC_Init+0x134>
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	691b      	ldr	r3, [r3, #16]
 8001a8a:	005b      	lsls	r3, r3, #1
 8001a8c:	085b      	lsrs	r3, r3, #1
 8001a8e:	e001      	b.n	8001a94 <HAL_ADC_Init+0x138>
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	039b      	lsls	r3, r3, #14
                    hadc->Init.DataAlign                                           |
 8001a94:	431a      	orrs	r2, r3
                    ADC_CFGR1_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	212c      	movs	r1, #44	; 0x2c
 8001a9a:	5c5b      	ldrb	r3, [r3, r1]
 8001a9c:	005b      	lsls	r3, r3, #1
                    ADC_SCAN_SEQ_MODE(hadc->Init.ScanConvMode)                     |
 8001a9e:	4313      	orrs	r3, r2
      tmp_cfgr1 |= (hadc->Init.Resolution                                          |
 8001aa0:	69ba      	ldr	r2, [r7, #24]
 8001aa2:	4313      	orrs	r3, r2
 8001aa4:	61bb      	str	r3, [r7, #24]

      /* Update setting of discontinuous mode only if continuous mode is disabled */
      if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	2220      	movs	r2, #32
 8001aaa:	5c9b      	ldrb	r3, [r3, r2]
 8001aac:	2b01      	cmp	r3, #1
 8001aae:	d115      	bne.n	8001adc <HAL_ADC_Init+0x180>
      {
        if (hadc->Init.ContinuousConvMode == DISABLE)
 8001ab0:	687b      	ldr	r3, [r7, #4]
 8001ab2:	7e9b      	ldrb	r3, [r3, #26]
 8001ab4:	2b00      	cmp	r3, #0
 8001ab6:	d105      	bne.n	8001ac4 <HAL_ADC_Init+0x168>
        {
          /* Enable the selected ADC group regular discontinuous mode */
          tmp_cfgr1 |= ADC_CFGR1_DISCEN;
 8001ab8:	69bb      	ldr	r3, [r7, #24]
 8001aba:	2280      	movs	r2, #128	; 0x80
 8001abc:	0252      	lsls	r2, r2, #9
 8001abe:	4313      	orrs	r3, r2
 8001ac0:	61bb      	str	r3, [r7, #24]
 8001ac2:	e00b      	b.n	8001adc <HAL_ADC_Init+0x180>
          /* ADC regular group discontinuous was intended to be enabled,        */
          /* but ADC regular group modes continuous and sequencer discontinuous */
          /* cannot be enabled simultaneously.                                  */

          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ac8:	2220      	movs	r2, #32
 8001aca:	431a      	orrs	r2, r3
 8001acc:	687b      	ldr	r3, [r7, #4]
 8001ace:	659a      	str	r2, [r3, #88]	; 0x58

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ad4:	2201      	movs	r2, #1
 8001ad6:	431a      	orrs	r2, r3
 8001ad8:	687b      	ldr	r3, [r7, #4]
 8001ada:	65da      	str	r2, [r3, #92]	; 0x5c
      /* Enable external trigger if trigger selection is different of software  */
      /* start.                                                                 */
      /* Note: This configuration keeps the hardware feature of parameter       */
      /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
      /*       software start.                                                  */
      if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ae0:	2b00      	cmp	r3, #0
 8001ae2:	d00a      	beq.n	8001afa <HAL_ADC_Init+0x19e>
      {
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001ae4:	687b      	ldr	r3, [r7, #4]
 8001ae6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8001ae8:	23e0      	movs	r3, #224	; 0xe0
 8001aea:	005b      	lsls	r3, r3, #1
 8001aec:	401a      	ands	r2, r3
                      hadc->Init.ExternalTrigConvEdge);
 8001aee:	687b      	ldr	r3, [r7, #4]
 8001af0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        tmp_cfgr1 |= ((hadc->Init.ExternalTrigConv & ADC_CFGR1_EXTSEL) |
 8001af2:	4313      	orrs	r3, r2
 8001af4:	69ba      	ldr	r2, [r7, #24]
 8001af6:	4313      	orrs	r3, r2
 8001af8:	61bb      	str	r3, [r7, #24]
      }

      /* Update ADC configuration register with previous settings */
      MODIFY_REG(hadc->Instance->CFGR1,
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	68db      	ldr	r3, [r3, #12]
 8001b00:	4a65      	ldr	r2, [pc, #404]	; (8001c98 <HAL_ADC_Init+0x33c>)
 8001b02:	4013      	ands	r3, r2
 8001b04:	0019      	movs	r1, r3
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	69ba      	ldr	r2, [r7, #24]
 8001b0c:	430a      	orrs	r2, r1
 8001b0e:	60da      	str	r2, [r3, #12]
                 ADC_CFGR1_ALIGN     |
                 ADC_CFGR1_SCANDIR   |
                 ADC_CFGR1_DMACFG,
                 tmp_cfgr1);

      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	685b      	ldr	r3, [r3, #4]
 8001b14:	0f9b      	lsrs	r3, r3, #30
 8001b16:	079a      	lsls	r2, r3, #30
                    hadc->Init.TriggerFrequencyMode
 8001b18:	687b      	ldr	r3, [r7, #4]
 8001b1a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
      tmp_cfgr2 |= ((hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	697a      	ldr	r2, [r7, #20]
 8001b20:	4313      	orrs	r3, r2
 8001b22:	617b      	str	r3, [r7, #20]
                   );

      if (hadc->Init.OversamplingMode == ENABLE)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	223c      	movs	r2, #60	; 0x3c
 8001b28:	5c9b      	ldrb	r3, [r3, r2]
 8001b2a:	2b01      	cmp	r3, #1
 8001b2c:	d111      	bne.n	8001b52 <HAL_ADC_Init+0x1f6>
      {
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	0f9b      	lsrs	r3, r3, #30
 8001b34:	079a      	lsls	r2, r3, #30
                      hadc->Init.Oversampling.Ratio         |
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
                      (hadc->Init.ClockPrescaler & ADC_CFGR2_CKMODE) |
 8001b3a:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.RightBitShift |
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
                      hadc->Init.Oversampling.Ratio         |
 8001b40:	431a      	orrs	r2, r3
                      hadc->Init.Oversampling.TriggeredMode
 8001b42:	687b      	ldr	r3, [r7, #4]
 8001b44:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                      hadc->Init.Oversampling.RightBitShift |
 8001b46:	431a      	orrs	r2, r3
        tmp_cfgr2 |= (ADC_CFGR2_OVSE |
 8001b48:	697b      	ldr	r3, [r7, #20]
 8001b4a:	4313      	orrs	r3, r2
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	4313      	orrs	r3, r2
 8001b50:	617b      	str	r3, [r7, #20]
                     );
      }

      MODIFY_REG(hadc->Instance->CFGR2,
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	691b      	ldr	r3, [r3, #16]
 8001b58:	4a50      	ldr	r2, [pc, #320]	; (8001c9c <HAL_ADC_Init+0x340>)
 8001b5a:	4013      	ands	r3, r2
 8001b5c:	0019      	movs	r1, r3
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	697a      	ldr	r2, [r7, #20]
 8001b64:	430a      	orrs	r2, r1
 8001b66:	611a      	str	r2, [r3, #16]
                 ADC_CFGR2_TOVS,
                 tmp_cfgr2);

      /* Configuration of ADC clock mode: asynchronous clock source           */
      /* with selectable prescaler.                                           */
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001b68:	687b      	ldr	r3, [r7, #4]
 8001b6a:	685a      	ldr	r2, [r3, #4]
 8001b6c:	23c0      	movs	r3, #192	; 0xc0
 8001b6e:	061b      	lsls	r3, r3, #24
 8001b70:	429a      	cmp	r2, r3
 8001b72:	d018      	beq.n	8001ba6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	685a      	ldr	r2, [r3, #4]
      if (((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV1) &&
 8001b78:	2380      	movs	r3, #128	; 0x80
 8001b7a:	05db      	lsls	r3, r3, #23
 8001b7c:	429a      	cmp	r2, r3
 8001b7e:	d012      	beq.n	8001ba6 <HAL_ADC_Init+0x24a>
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV4))
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	685a      	ldr	r2, [r3, #4]
          ((hadc->Init.ClockPrescaler) != ADC_CLOCK_SYNC_PCLK_DIV2) &&
 8001b84:	2380      	movs	r3, #128	; 0x80
 8001b86:	061b      	lsls	r3, r3, #24
 8001b88:	429a      	cmp	r2, r3
 8001b8a:	d00c      	beq.n	8001ba6 <HAL_ADC_Init+0x24a>
      {
        MODIFY_REG(ADC1_COMMON->CCR,
 8001b8c:	4b44      	ldr	r3, [pc, #272]	; (8001ca0 <HAL_ADC_Init+0x344>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a44      	ldr	r2, [pc, #272]	; (8001ca4 <HAL_ADC_Init+0x348>)
 8001b92:	4013      	ands	r3, r2
 8001b94:	0019      	movs	r1, r3
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	685a      	ldr	r2, [r3, #4]
 8001b9a:	23f0      	movs	r3, #240	; 0xf0
 8001b9c:	039b      	lsls	r3, r3, #14
 8001b9e:	401a      	ands	r2, r3
 8001ba0:	4b3f      	ldr	r3, [pc, #252]	; (8001ca0 <HAL_ADC_Init+0x344>)
 8001ba2:	430a      	orrs	r2, r1
 8001ba4:	601a      	str	r2, [r3, #0]
                   hadc->Init.ClockPrescaler & ADC_CCR_PRESC);
      }
    }

    /* Channel sampling time configuration */
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1, hadc->Init.SamplingTimeCommon1);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	6818      	ldr	r0, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001bae:	001a      	movs	r2, r3
 8001bb0:	2100      	movs	r1, #0
 8001bb2:	f7ff fdd0 	bl	8001756 <LL_ADC_SetSamplingTimeCommonChannels>
    LL_ADC_SetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_2, hadc->Init.SamplingTimeCommon2);
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	6818      	ldr	r0, [r3, #0]
 8001bba:	687b      	ldr	r3, [r7, #4]
 8001bbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001bbe:	493a      	ldr	r1, [pc, #232]	; (8001ca8 <HAL_ADC_Init+0x34c>)
 8001bc0:	001a      	movs	r2, r3
 8001bc2:	f7ff fdc8 	bl	8001756 <LL_ADC_SetSamplingTimeCommonChannels>
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */
    /*   Channels must be configured into each rank using function            */
    /*   "HAL_ADC_ConfigChannel()".                                           */
    if (hadc->Init.ScanConvMode == ADC_SCAN_DISABLE)
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	691b      	ldr	r3, [r3, #16]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_ADC_Init+0x286>
    {
      /* Set sequencer scan length by clearing ranks above rank 1             */
      /* and do not modify rank 1 value.                                      */
      SET_BIT(hadc->Instance->CHSELR,
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	681b      	ldr	r3, [r3, #0]
 8001bd2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	2110      	movs	r1, #16
 8001bda:	4249      	negs	r1, r1
 8001bdc:	430a      	orrs	r2, r1
 8001bde:	629a      	str	r2, [r3, #40]	; 0x28
 8001be0:	e018      	b.n	8001c14 <HAL_ADC_Init+0x2b8>
              ADC_CHSELR_SQ2_TO_SQ8);
    }
    else if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	691a      	ldr	r2, [r3, #16]
 8001be6:	2380      	movs	r3, #128	; 0x80
 8001be8:	039b      	lsls	r3, r3, #14
 8001bea:	429a      	cmp	r2, r3
 8001bec:	d112      	bne.n	8001c14 <HAL_ADC_Init+0x2b8>
      /*          therefore after the first call of "HAL_ADC_Init()",       */
      /*          each rank corresponding to parameter "NbrOfConversion"    */
      /*          must be set using "HAL_ADC_ConfigChannel()".              */
      /*  - Set sequencer scan length by clearing ranks above maximum rank  */
      /*    and do not modify other ranks value.                            */
      MODIFY_REG(hadc->Instance->CHSELR,
 8001bee:	687b      	ldr	r3, [r7, #4]
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	69db      	ldr	r3, [r3, #28]
 8001bf8:	3b01      	subs	r3, #1
 8001bfa:	009b      	lsls	r3, r3, #2
 8001bfc:	221c      	movs	r2, #28
 8001bfe:	4013      	ands	r3, r2
 8001c00:	2210      	movs	r2, #16
 8001c02:	4252      	negs	r2, r2
 8001c04:	409a      	lsls	r2, r3
 8001c06:	0011      	movs	r1, r2
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	430a      	orrs	r2, r1
 8001c12:	629a      	str	r2, [r3, #40]	; 0x28
      /* Nothing to do */
    }

    /* Check back that ADC registers have effectively been configured to      */
    /* ensure of no potential problem of ADC core peripheral clocking.        */
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c14:	687b      	ldr	r3, [r7, #4]
 8001c16:	681b      	ldr	r3, [r3, #0]
 8001c18:	2100      	movs	r1, #0
 8001c1a:	0018      	movs	r0, r3
 8001c1c:	f7ff fdb8 	bl	8001790 <LL_ADC_GetSamplingTimeCommonChannels>
 8001c20:	0002      	movs	r2, r0
        == hadc->Init.SamplingTimeCommon1)
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c26:	429a      	cmp	r2, r3
 8001c28:	d10b      	bne.n	8001c42 <HAL_ADC_Init+0x2e6>
    {
      /* Set ADC error code to none */
      ADC_CLEAR_ERRORCODE(hadc);
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	2200      	movs	r2, #0
 8001c2e:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set the ADC state */
      ADC_STATE_CLR_SET(hadc->State,
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c34:	2203      	movs	r2, #3
 8001c36:	4393      	bics	r3, r2
 8001c38:	2201      	movs	r2, #1
 8001c3a:	431a      	orrs	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	659a      	str	r2, [r3, #88]	; 0x58
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c40:	e01c      	b.n	8001c7c <HAL_ADC_Init+0x320>
                        HAL_ADC_STATE_READY);
    }
    else
    {
      /* Update ADC state machine to error */
      ADC_STATE_CLR_SET(hadc->State,
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c46:	2212      	movs	r2, #18
 8001c48:	4393      	bics	r3, r2
 8001c4a:	2210      	movs	r2, #16
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_BUSY_INTERNAL,
                        HAL_ADC_STATE_ERROR_INTERNAL);

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001c56:	2201      	movs	r2, #1
 8001c58:	431a      	orrs	r2, r3
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	65da      	str	r2, [r3, #92]	; 0x5c

      tmp_hal_status = HAL_ERROR;
 8001c5e:	231f      	movs	r3, #31
 8001c60:	18fb      	adds	r3, r7, r3
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
    if (LL_ADC_GetSamplingTimeCommonChannels(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_1)
 8001c66:	e009      	b.n	8001c7c <HAL_ADC_Init+0x320>

  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001c6c:	2210      	movs	r2, #16
 8001c6e:	431a      	orrs	r2, r3
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 8001c74:	231f      	movs	r3, #31
 8001c76:	18fb      	adds	r3, r7, r3
 8001c78:	2201      	movs	r2, #1
 8001c7a:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001c7c:	231f      	movs	r3, #31
 8001c7e:	18fb      	adds	r3, r7, r3
 8001c80:	781b      	ldrb	r3, [r3, #0]
}
 8001c82:	0018      	movs	r0, r3
 8001c84:	46bd      	mov	sp, r7
 8001c86:	b008      	add	sp, #32
 8001c88:	bd80      	pop	{r7, pc}
 8001c8a:	46c0      	nop			; (mov r8, r8)
 8001c8c:	20000000 	.word	0x20000000
 8001c90:	00030d40 	.word	0x00030d40
 8001c94:	fffffefd 	.word	0xfffffefd
 8001c98:	ffde0201 	.word	0xffde0201
 8001c9c:	1ffffc02 	.word	0x1ffffc02
 8001ca0:	40012708 	.word	0x40012708
 8001ca4:	ffc3ffff 	.word	0xffc3ffff
 8001ca8:	07ffff04 	.word	0x07ffff04

08001cac <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8001cac:	b5b0      	push	{r4, r5, r7, lr}
 8001cae:	b084      	sub	sp, #16
 8001cb0:	af00      	add	r7, sp, #0
 8001cb2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	681b      	ldr	r3, [r3, #0]
 8001cb8:	0018      	movs	r0, r3
 8001cba:	f7ff fe3d 	bl	8001938 <LL_ADC_REG_IsConversionOngoing>
 8001cbe:	1e03      	subs	r3, r0, #0
 8001cc0:	d135      	bne.n	8001d2e <HAL_ADC_Start+0x82>
  {
    __HAL_LOCK(hadc);
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2254      	movs	r2, #84	; 0x54
 8001cc6:	5c9b      	ldrb	r3, [r3, r2]
 8001cc8:	2b01      	cmp	r3, #1
 8001cca:	d101      	bne.n	8001cd0 <HAL_ADC_Start+0x24>
 8001ccc:	2302      	movs	r3, #2
 8001cce:	e035      	b.n	8001d3c <HAL_ADC_Start+0x90>
 8001cd0:	687b      	ldr	r3, [r7, #4]
 8001cd2:	2254      	movs	r2, #84	; 0x54
 8001cd4:	2101      	movs	r1, #1
 8001cd6:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 8001cd8:	250f      	movs	r5, #15
 8001cda:	197c      	adds	r4, r7, r5
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	0018      	movs	r0, r3
 8001ce0:	f000 fa0a 	bl	80020f8 <ADC_Enable>
 8001ce4:	0003      	movs	r3, r0
 8001ce6:	7023      	strb	r3, [r4, #0]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 8001ce8:	197b      	adds	r3, r7, r5
 8001cea:	781b      	ldrb	r3, [r3, #0]
 8001cec:	2b00      	cmp	r3, #0
 8001cee:	d119      	bne.n	8001d24 <HAL_ADC_Start+0x78>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001cf4:	4a13      	ldr	r2, [pc, #76]	; (8001d44 <HAL_ADC_Start+0x98>)
 8001cf6:	4013      	ands	r3, r2
 8001cf8:	2280      	movs	r2, #128	; 0x80
 8001cfa:	0052      	lsls	r2, r2, #1
 8001cfc:	431a      	orrs	r2, r3
 8001cfe:	687b      	ldr	r3, [r7, #4]
 8001d00:	659a      	str	r2, [r3, #88]	; 0x58
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Set ADC error code */
      /* Reset all ADC error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	221c      	movs	r2, #28
 8001d0e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2254      	movs	r2, #84	; 0x54
 8001d14:	2100      	movs	r1, #0
 8001d16:	5499      	strb	r1, [r3, r2]
      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      /* Start ADC group regular conversion */
      LL_ADC_REG_StartConversion(hadc->Instance);
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	0018      	movs	r0, r3
 8001d1e:	f7ff fdf9 	bl	8001914 <LL_ADC_REG_StartConversion>
 8001d22:	e008      	b.n	8001d36 <HAL_ADC_Start+0x8a>
    }
    else
    {
      __HAL_UNLOCK(hadc);
 8001d24:	687b      	ldr	r3, [r7, #4]
 8001d26:	2254      	movs	r2, #84	; 0x54
 8001d28:	2100      	movs	r1, #0
 8001d2a:	5499      	strb	r1, [r3, r2]
 8001d2c:	e003      	b.n	8001d36 <HAL_ADC_Start+0x8a>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001d2e:	230f      	movs	r3, #15
 8001d30:	18fb      	adds	r3, r7, r3
 8001d32:	2202      	movs	r2, #2
 8001d34:	701a      	strb	r2, [r3, #0]
  }

  return tmp_hal_status;
 8001d36:	230f      	movs	r3, #15
 8001d38:	18fb      	adds	r3, r7, r3
 8001d3a:	781b      	ldrb	r3, [r3, #0]
}
 8001d3c:	0018      	movs	r0, r3
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	b004      	add	sp, #16
 8001d42:	bdb0      	pop	{r4, r5, r7, pc}
 8001d44:	fffff0fe 	.word	0xfffff0fe

08001d48 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param pConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, const ADC_ChannelConfTypeDef *pConfig)
{
 8001d48:	b580      	push	{r7, lr}
 8001d4a:	b086      	sub	sp, #24
 8001d4c:	af00      	add	r7, sp, #0
 8001d4e:	6078      	str	r0, [r7, #4]
 8001d50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d52:	2317      	movs	r3, #23
 8001d54:	18fb      	adds	r3, r7, r3
 8001d56:	2200      	movs	r2, #0
 8001d58:	701a      	strb	r2, [r3, #0]
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
    assert_param(IS_ADC_REGULAR_NB_CONV(hadc->Init.NbrOfConversion));

    assert_param(IS_ADC_REGULAR_RANK(pConfig->Rank));
  }

  __HAL_LOCK(hadc);
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	2254      	movs	r2, #84	; 0x54
 8001d62:	5c9b      	ldrb	r3, [r3, r2]
 8001d64:	2b01      	cmp	r3, #1
 8001d66:	d101      	bne.n	8001d6c <HAL_ADC_ConfigChannel+0x24>
 8001d68:	2302      	movs	r3, #2
 8001d6a:	e1c0      	b.n	80020ee <HAL_ADC_ConfigChannel+0x3a6>
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	2254      	movs	r2, #84	; 0x54
 8001d70:	2101      	movs	r1, #1
 8001d72:	5499      	strb	r1, [r3, r2]
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel sampling time                                                 */
  /*  - Management of internal measurement channels: VrefInt/TempSensor/Vbat  */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	0018      	movs	r0, r3
 8001d7a:	f7ff fddd 	bl	8001938 <LL_ADC_REG_IsConversionOngoing>
 8001d7e:	1e03      	subs	r3, r0, #0
 8001d80:	d000      	beq.n	8001d84 <HAL_ADC_ConfigChannel+0x3c>
 8001d82:	e1a3      	b.n	80020cc <HAL_ADC_ConfigChannel+0x384>
    /* If sequencer set to not fully configurable with channel rank set to    */
    /* none, remove the channel from the sequencer.                           */
    /* Otherwise (sequencer set to fully configurable or to to not fully      */
    /* configurable with channel rank to be set), configure the selected      */
    /* channel.                                                               */
    if (pConfig->Rank != ADC_RANK_NONE)
 8001d84:	683b      	ldr	r3, [r7, #0]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	2b02      	cmp	r3, #2
 8001d8a:	d100      	bne.n	8001d8e <HAL_ADC_ConfigChannel+0x46>
 8001d8c:	e143      	b.n	8002016 <HAL_ADC_ConfigChannel+0x2ce>
      /* Note: ADC channel configuration requires few ADC clock cycles        */
      /*       to be ready. Processing of ADC settings in this function       */
      /*       induce that a specific wait time is not necessary.             */
      /*       For more details on ADC channel configuration ready,           */
      /*       refer to function "LL_ADC_IsActiveFlag_CCRDY()".               */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	691a      	ldr	r2, [r3, #16]
 8001d92:	2380      	movs	r3, #128	; 0x80
 8001d94:	061b      	lsls	r3, r3, #24
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d004      	beq.n	8001da4 <HAL_ADC_ConfigChannel+0x5c>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8001d9e:	4ac1      	ldr	r2, [pc, #772]	; (80020a4 <HAL_ADC_ConfigChannel+0x35c>)
 8001da0:	4293      	cmp	r3, r2
 8001da2:	d108      	bne.n	8001db6 <HAL_ADC_ConfigChannel+0x6e>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Set the channel by enabling the corresponding bitfield.            */
        LL_ADC_REG_SetSequencerChAdd(hadc->Instance, pConfig->Channel);
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681a      	ldr	r2, [r3, #0]
 8001da8:	683b      	ldr	r3, [r7, #0]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	0019      	movs	r1, r3
 8001dae:	0010      	movs	r0, r2
 8001db0:	f7ff fd25 	bl	80017fe <LL_ADC_REG_SetSequencerChAdd>
 8001db4:	e0c9      	b.n	8001f4a <HAL_ADC_ConfigChannel+0x202>
      {
        /* Sequencer set to fully configurable:                               */
        /* Set the channel by entering it into the selected rank.             */

        /* Memorize the channel set into variable in HAL ADC handle */
        MODIFY_REG(hadc->ADCGroupRegularSequencerRanks,
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 8001dba:	683b      	ldr	r3, [r7, #0]
 8001dbc:	685b      	ldr	r3, [r3, #4]
 8001dbe:	211f      	movs	r1, #31
 8001dc0:	400b      	ands	r3, r1
 8001dc2:	210f      	movs	r1, #15
 8001dc4:	4099      	lsls	r1, r3
 8001dc6:	000b      	movs	r3, r1
 8001dc8:	43db      	mvns	r3, r3
 8001dca:	4013      	ands	r3, r2
 8001dcc:	0019      	movs	r1, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	681b      	ldr	r3, [r3, #0]
 8001dd2:	035b      	lsls	r3, r3, #13
 8001dd4:	0b5b      	lsrs	r3, r3, #13
 8001dd6:	d105      	bne.n	8001de4 <HAL_ADC_ConfigChannel+0x9c>
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	0e9b      	lsrs	r3, r3, #26
 8001dde:	221f      	movs	r2, #31
 8001de0:	4013      	ands	r3, r2
 8001de2:	e098      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	2201      	movs	r2, #1
 8001dea:	4013      	ands	r3, r2
 8001dec:	d000      	beq.n	8001df0 <HAL_ADC_ConfigChannel+0xa8>
 8001dee:	e091      	b.n	8001f14 <HAL_ADC_ConfigChannel+0x1cc>
 8001df0:	683b      	ldr	r3, [r7, #0]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	2202      	movs	r2, #2
 8001df6:	4013      	ands	r3, r2
 8001df8:	d000      	beq.n	8001dfc <HAL_ADC_ConfigChannel+0xb4>
 8001dfa:	e089      	b.n	8001f10 <HAL_ADC_ConfigChannel+0x1c8>
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	2204      	movs	r2, #4
 8001e02:	4013      	ands	r3, r2
 8001e04:	d000      	beq.n	8001e08 <HAL_ADC_ConfigChannel+0xc0>
 8001e06:	e081      	b.n	8001f0c <HAL_ADC_ConfigChannel+0x1c4>
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	681b      	ldr	r3, [r3, #0]
 8001e0c:	2208      	movs	r2, #8
 8001e0e:	4013      	ands	r3, r2
 8001e10:	d000      	beq.n	8001e14 <HAL_ADC_ConfigChannel+0xcc>
 8001e12:	e079      	b.n	8001f08 <HAL_ADC_ConfigChannel+0x1c0>
 8001e14:	683b      	ldr	r3, [r7, #0]
 8001e16:	681b      	ldr	r3, [r3, #0]
 8001e18:	2210      	movs	r2, #16
 8001e1a:	4013      	ands	r3, r2
 8001e1c:	d000      	beq.n	8001e20 <HAL_ADC_ConfigChannel+0xd8>
 8001e1e:	e071      	b.n	8001f04 <HAL_ADC_ConfigChannel+0x1bc>
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	2220      	movs	r2, #32
 8001e26:	4013      	ands	r3, r2
 8001e28:	d000      	beq.n	8001e2c <HAL_ADC_ConfigChannel+0xe4>
 8001e2a:	e069      	b.n	8001f00 <HAL_ADC_ConfigChannel+0x1b8>
 8001e2c:	683b      	ldr	r3, [r7, #0]
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	2240      	movs	r2, #64	; 0x40
 8001e32:	4013      	ands	r3, r2
 8001e34:	d000      	beq.n	8001e38 <HAL_ADC_ConfigChannel+0xf0>
 8001e36:	e061      	b.n	8001efc <HAL_ADC_ConfigChannel+0x1b4>
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	2280      	movs	r2, #128	; 0x80
 8001e3e:	4013      	ands	r3, r2
 8001e40:	d000      	beq.n	8001e44 <HAL_ADC_ConfigChannel+0xfc>
 8001e42:	e059      	b.n	8001ef8 <HAL_ADC_ConfigChannel+0x1b0>
 8001e44:	683b      	ldr	r3, [r7, #0]
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	2380      	movs	r3, #128	; 0x80
 8001e4a:	005b      	lsls	r3, r3, #1
 8001e4c:	4013      	ands	r3, r2
 8001e4e:	d151      	bne.n	8001ef4 <HAL_ADC_ConfigChannel+0x1ac>
 8001e50:	683b      	ldr	r3, [r7, #0]
 8001e52:	681a      	ldr	r2, [r3, #0]
 8001e54:	2380      	movs	r3, #128	; 0x80
 8001e56:	009b      	lsls	r3, r3, #2
 8001e58:	4013      	ands	r3, r2
 8001e5a:	d149      	bne.n	8001ef0 <HAL_ADC_ConfigChannel+0x1a8>
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	681a      	ldr	r2, [r3, #0]
 8001e60:	2380      	movs	r3, #128	; 0x80
 8001e62:	00db      	lsls	r3, r3, #3
 8001e64:	4013      	ands	r3, r2
 8001e66:	d141      	bne.n	8001eec <HAL_ADC_ConfigChannel+0x1a4>
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	2380      	movs	r3, #128	; 0x80
 8001e6e:	011b      	lsls	r3, r3, #4
 8001e70:	4013      	ands	r3, r2
 8001e72:	d139      	bne.n	8001ee8 <HAL_ADC_ConfigChannel+0x1a0>
 8001e74:	683b      	ldr	r3, [r7, #0]
 8001e76:	681a      	ldr	r2, [r3, #0]
 8001e78:	2380      	movs	r3, #128	; 0x80
 8001e7a:	015b      	lsls	r3, r3, #5
 8001e7c:	4013      	ands	r3, r2
 8001e7e:	d131      	bne.n	8001ee4 <HAL_ADC_ConfigChannel+0x19c>
 8001e80:	683b      	ldr	r3, [r7, #0]
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	2380      	movs	r3, #128	; 0x80
 8001e86:	019b      	lsls	r3, r3, #6
 8001e88:	4013      	ands	r3, r2
 8001e8a:	d129      	bne.n	8001ee0 <HAL_ADC_ConfigChannel+0x198>
 8001e8c:	683b      	ldr	r3, [r7, #0]
 8001e8e:	681a      	ldr	r2, [r3, #0]
 8001e90:	2380      	movs	r3, #128	; 0x80
 8001e92:	01db      	lsls	r3, r3, #7
 8001e94:	4013      	ands	r3, r2
 8001e96:	d121      	bne.n	8001edc <HAL_ADC_ConfigChannel+0x194>
 8001e98:	683b      	ldr	r3, [r7, #0]
 8001e9a:	681a      	ldr	r2, [r3, #0]
 8001e9c:	2380      	movs	r3, #128	; 0x80
 8001e9e:	021b      	lsls	r3, r3, #8
 8001ea0:	4013      	ands	r3, r2
 8001ea2:	d119      	bne.n	8001ed8 <HAL_ADC_ConfigChannel+0x190>
 8001ea4:	683b      	ldr	r3, [r7, #0]
 8001ea6:	681a      	ldr	r2, [r3, #0]
 8001ea8:	2380      	movs	r3, #128	; 0x80
 8001eaa:	025b      	lsls	r3, r3, #9
 8001eac:	4013      	ands	r3, r2
 8001eae:	d111      	bne.n	8001ed4 <HAL_ADC_ConfigChannel+0x18c>
 8001eb0:	683b      	ldr	r3, [r7, #0]
 8001eb2:	681a      	ldr	r2, [r3, #0]
 8001eb4:	2380      	movs	r3, #128	; 0x80
 8001eb6:	029b      	lsls	r3, r3, #10
 8001eb8:	4013      	ands	r3, r2
 8001eba:	d109      	bne.n	8001ed0 <HAL_ADC_ConfigChannel+0x188>
 8001ebc:	683b      	ldr	r3, [r7, #0]
 8001ebe:	681a      	ldr	r2, [r3, #0]
 8001ec0:	2380      	movs	r3, #128	; 0x80
 8001ec2:	02db      	lsls	r3, r3, #11
 8001ec4:	4013      	ands	r3, r2
 8001ec6:	d001      	beq.n	8001ecc <HAL_ADC_ConfigChannel+0x184>
 8001ec8:	2312      	movs	r3, #18
 8001eca:	e024      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ecc:	2300      	movs	r3, #0
 8001ece:	e022      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ed0:	2311      	movs	r3, #17
 8001ed2:	e020      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ed4:	2310      	movs	r3, #16
 8001ed6:	e01e      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ed8:	230f      	movs	r3, #15
 8001eda:	e01c      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001edc:	230e      	movs	r3, #14
 8001ede:	e01a      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ee0:	230d      	movs	r3, #13
 8001ee2:	e018      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ee4:	230c      	movs	r3, #12
 8001ee6:	e016      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ee8:	230b      	movs	r3, #11
 8001eea:	e014      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001eec:	230a      	movs	r3, #10
 8001eee:	e012      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef0:	2309      	movs	r3, #9
 8001ef2:	e010      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef4:	2308      	movs	r3, #8
 8001ef6:	e00e      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001ef8:	2307      	movs	r3, #7
 8001efa:	e00c      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001efc:	2306      	movs	r3, #6
 8001efe:	e00a      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001f00:	2305      	movs	r3, #5
 8001f02:	e008      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001f04:	2304      	movs	r3, #4
 8001f06:	e006      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001f08:	2303      	movs	r3, #3
 8001f0a:	e004      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001f0c:	2302      	movs	r3, #2
 8001f0e:	e002      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001f10:	2301      	movs	r3, #1
 8001f12:	e000      	b.n	8001f16 <HAL_ADC_ConfigChannel+0x1ce>
 8001f14:	2300      	movs	r3, #0
 8001f16:	683a      	ldr	r2, [r7, #0]
 8001f18:	6852      	ldr	r2, [r2, #4]
 8001f1a:	201f      	movs	r0, #31
 8001f1c:	4002      	ands	r2, r0
 8001f1e:	4093      	lsls	r3, r2
 8001f20:	000a      	movs	r2, r1
 8001f22:	431a      	orrs	r2, r3
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	661a      	str	r2, [r3, #96]	; 0x60

        /* If the selected rank is below ADC group regular sequencer length,  */
        /* apply the configuration in ADC register.                           */
        /* Note: Otherwise, configuration is not applied.                     */
        /*       To apply it, parameter'NbrOfConversion' must be increased.   */
        if (((pConfig->Rank >> 2UL) + 1UL) <= hadc->Init.NbrOfConversion)
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	685b      	ldr	r3, [r3, #4]
 8001f2c:	089b      	lsrs	r3, r3, #2
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	69db      	ldr	r3, [r3, #28]
 8001f34:	429a      	cmp	r2, r3
 8001f36:	d808      	bhi.n	8001f4a <HAL_ADC_ConfigChannel+0x202>
        {
          LL_ADC_REG_SetSequencerRanks(hadc->Instance, pConfig->Rank, pConfig->Channel);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	6818      	ldr	r0, [r3, #0]
 8001f3c:	683b      	ldr	r3, [r7, #0]
 8001f3e:	6859      	ldr	r1, [r3, #4]
 8001f40:	683b      	ldr	r3, [r7, #0]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	001a      	movs	r2, r3
 8001f46:	f7ff fc3a 	bl	80017be <LL_ADC_REG_SetSequencerRanks>
        }
      }

      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, pConfig->Channel, pConfig->SamplingTime);
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6818      	ldr	r0, [r3, #0]
 8001f4e:	683b      	ldr	r3, [r7, #0]
 8001f50:	6819      	ldr	r1, [r3, #0]
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	689b      	ldr	r3, [r3, #8]
 8001f56:	001a      	movs	r2, r3
 8001f58:	f7ff fc74 	bl	8001844 <LL_ADC_SetChannelSamplingTime>
      /* internal measurement paths enable: If internal channel selected,     */
      /* enable dedicated internal buffers and path.                          */
      /* Note: these internal measurement paths can be disabled using         */
      /*       HAL_ADC_DeInit() or removing the channel from sequencer with   */
      /*       channel configuration parameter "Rank".                        */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 8001f5c:	683b      	ldr	r3, [r7, #0]
 8001f5e:	681b      	ldr	r3, [r3, #0]
 8001f60:	2b00      	cmp	r3, #0
 8001f62:	db00      	blt.n	8001f66 <HAL_ADC_ConfigChannel+0x21e>
 8001f64:	e0bc      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001f66:	4b50      	ldr	r3, [pc, #320]	; (80020a8 <HAL_ADC_ConfigChannel+0x360>)
 8001f68:	0018      	movs	r0, r3
 8001f6a:	f7ff fbe7 	bl	800173c <LL_ADC_GetCommonPathInternalCh>
 8001f6e:	0003      	movs	r3, r0
 8001f70:	613b      	str	r3, [r7, #16]

        /* If the requested internal measurement path has already been enabled,   */
        /* bypass the configuration processing.                                   */
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	4a4d      	ldr	r2, [pc, #308]	; (80020ac <HAL_ADC_ConfigChannel+0x364>)
 8001f78:	4293      	cmp	r3, r2
 8001f7a:	d122      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x27a>
            ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	2380      	movs	r3, #128	; 0x80
 8001f80:	041b      	lsls	r3, r3, #16
 8001f82:	4013      	ands	r3, r2
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001f84:	d11d      	bne.n	8001fc2 <HAL_ADC_ConfigChannel+0x27a>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001f86:	693b      	ldr	r3, [r7, #16]
 8001f88:	2280      	movs	r2, #128	; 0x80
 8001f8a:	0412      	lsls	r2, r2, #16
 8001f8c:	4313      	orrs	r3, r2
 8001f8e:	4a46      	ldr	r2, [pc, #280]	; (80020a8 <HAL_ADC_ConfigChannel+0x360>)
 8001f90:	0019      	movs	r1, r3
 8001f92:	0010      	movs	r0, r2
 8001f94:	f7ff fbbe 	bl	8001714 <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001f98:	4b45      	ldr	r3, [pc, #276]	; (80020b0 <HAL_ADC_ConfigChannel+0x368>)
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	4945      	ldr	r1, [pc, #276]	; (80020b4 <HAL_ADC_ConfigChannel+0x36c>)
 8001f9e:	0018      	movs	r0, r3
 8001fa0:	f7fe f8b0 	bl	8000104 <__udivsi3>
 8001fa4:	0003      	movs	r3, r0
 8001fa6:	1c5a      	adds	r2, r3, #1
 8001fa8:	0013      	movs	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	189b      	adds	r3, r3, r2
 8001fae:	009b      	lsls	r3, r3, #2
 8001fb0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fb2:	e002      	b.n	8001fba <HAL_ADC_ConfigChannel+0x272>
          {
            wait_loop_index--;
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	3b01      	subs	r3, #1
 8001fb8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8001fba:	68fb      	ldr	r3, [r7, #12]
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	d1f9      	bne.n	8001fb4 <HAL_ADC_ConfigChannel+0x26c>
        if ((pConfig->Channel == ADC_CHANNEL_TEMPSENSOR) &&
 8001fc0:	e08e      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x398>
          }
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VBAT)
 8001fc2:	683b      	ldr	r3, [r7, #0]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a3c      	ldr	r2, [pc, #240]	; (80020b8 <HAL_ADC_ConfigChannel+0x370>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	d10e      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x2a2>
                 && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8001fcc:	693a      	ldr	r2, [r7, #16]
 8001fce:	2380      	movs	r3, #128	; 0x80
 8001fd0:	045b      	lsls	r3, r3, #17
 8001fd2:	4013      	ands	r3, r2
 8001fd4:	d109      	bne.n	8001fea <HAL_ADC_ConfigChannel+0x2a2>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8001fd6:	693b      	ldr	r3, [r7, #16]
 8001fd8:	2280      	movs	r2, #128	; 0x80
 8001fda:	0452      	lsls	r2, r2, #17
 8001fdc:	4313      	orrs	r3, r2
 8001fde:	4a32      	ldr	r2, [pc, #200]	; (80020a8 <HAL_ADC_ConfigChannel+0x360>)
 8001fe0:	0019      	movs	r1, r3
 8001fe2:	0010      	movs	r0, r2
 8001fe4:	f7ff fb96 	bl	8001714 <LL_ADC_SetCommonPathInternalCh>
 8001fe8:	e07a      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x398>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	4a33      	ldr	r2, [pc, #204]	; (80020bc <HAL_ADC_ConfigChannel+0x374>)
 8001ff0:	4293      	cmp	r3, r2
 8001ff2:	d000      	beq.n	8001ff6 <HAL_ADC_ConfigChannel+0x2ae>
 8001ff4:	e074      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x398>
                 ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8001ff6:	693a      	ldr	r2, [r7, #16]
 8001ff8:	2380      	movs	r3, #128	; 0x80
 8001ffa:	03db      	lsls	r3, r3, #15
 8001ffc:	4013      	ands	r3, r2
        else if ((pConfig->Channel == ADC_CHANNEL_VREFINT) &&
 8001ffe:	d000      	beq.n	8002002 <HAL_ADC_ConfigChannel+0x2ba>
 8002000:	e06e      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002002:	693b      	ldr	r3, [r7, #16]
 8002004:	2280      	movs	r2, #128	; 0x80
 8002006:	03d2      	lsls	r2, r2, #15
 8002008:	4313      	orrs	r3, r2
 800200a:	4a27      	ldr	r2, [pc, #156]	; (80020a8 <HAL_ADC_ConfigChannel+0x360>)
 800200c:	0019      	movs	r1, r3
 800200e:	0010      	movs	r0, r2
 8002010:	f7ff fb80 	bl	8001714 <LL_ADC_SetCommonPathInternalCh>
 8002014:	e064      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x398>
      /* Regular sequencer configuration */
      /* Note: Case of sequencer set to fully configurable:                   */
      /*       Sequencer rank cannot be disabled, only affected to            */
      /*       another channel.                                               */
      /*       To remove a rank, use parameter 'NbrOfConversion".             */
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	691a      	ldr	r2, [r3, #16]
 800201a:	2380      	movs	r3, #128	; 0x80
 800201c:	061b      	lsls	r3, r3, #24
 800201e:	429a      	cmp	r2, r3
 8002020:	d004      	beq.n	800202c <HAL_ADC_ConfigChannel+0x2e4>
          (hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED_BACKWARD))
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	691b      	ldr	r3, [r3, #16]
      if ((hadc->Init.ScanConvMode == ADC_SCAN_SEQ_FIXED)       ||
 8002026:	4a1f      	ldr	r2, [pc, #124]	; (80020a4 <HAL_ADC_ConfigChannel+0x35c>)
 8002028:	4293      	cmp	r3, r2
 800202a:	d107      	bne.n	800203c <HAL_ADC_ConfigChannel+0x2f4>
      {
        /* Sequencer set to not fully configurable:                           */
        /* Reset the channel by disabling the corresponding bitfield.         */
        LL_ADC_REG_SetSequencerChRem(hadc->Instance, pConfig->Channel);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681a      	ldr	r2, [r3, #0]
 8002030:	683b      	ldr	r3, [r7, #0]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	0019      	movs	r1, r3
 8002036:	0010      	movs	r0, r2
 8002038:	f7ff fbf2 	bl	8001820 <LL_ADC_REG_SetSequencerChRem>
      }

      /* Management of internal measurement channels: Vbat/VrefInt/TempSensor.  */
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      if (__LL_ADC_IS_CHANNEL_INTERNAL(pConfig->Channel))
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	681b      	ldr	r3, [r3, #0]
 8002040:	2b00      	cmp	r3, #0
 8002042:	da4d      	bge.n	80020e0 <HAL_ADC_ConfigChannel+0x398>
      {
        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002044:	4b18      	ldr	r3, [pc, #96]	; (80020a8 <HAL_ADC_ConfigChannel+0x360>)
 8002046:	0018      	movs	r0, r3
 8002048:	f7ff fb78 	bl	800173c <LL_ADC_GetCommonPathInternalCh>
 800204c:	0003      	movs	r3, r0
 800204e:	613b      	str	r3, [r7, #16]

        if (pConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002050:	683b      	ldr	r3, [r7, #0]
 8002052:	681b      	ldr	r3, [r3, #0]
 8002054:	4a15      	ldr	r2, [pc, #84]	; (80020ac <HAL_ADC_ConfigChannel+0x364>)
 8002056:	4293      	cmp	r3, r2
 8002058:	d108      	bne.n	800206c <HAL_ADC_ConfigChannel+0x324>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800205a:	693b      	ldr	r3, [r7, #16]
 800205c:	4a18      	ldr	r2, [pc, #96]	; (80020c0 <HAL_ADC_ConfigChannel+0x378>)
 800205e:	4013      	ands	r3, r2
 8002060:	4a11      	ldr	r2, [pc, #68]	; (80020a8 <HAL_ADC_ConfigChannel+0x360>)
 8002062:	0019      	movs	r1, r3
 8002064:	0010      	movs	r0, r2
 8002066:	f7ff fb55 	bl	8001714 <LL_ADC_SetCommonPathInternalCh>
 800206a:	e039      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_TEMPSENSOR & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VBAT)
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	681b      	ldr	r3, [r3, #0]
 8002070:	4a11      	ldr	r2, [pc, #68]	; (80020b8 <HAL_ADC_ConfigChannel+0x370>)
 8002072:	4293      	cmp	r3, r2
 8002074:	d108      	bne.n	8002088 <HAL_ADC_ConfigChannel+0x340>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	4a12      	ldr	r2, [pc, #72]	; (80020c4 <HAL_ADC_ConfigChannel+0x37c>)
 800207a:	4013      	ands	r3, r2
 800207c:	4a0a      	ldr	r2, [pc, #40]	; (80020a8 <HAL_ADC_ConfigChannel+0x360>)
 800207e:	0019      	movs	r1, r3
 8002080:	0010      	movs	r0, r2
 8002082:	f7ff fb47 	bl	8001714 <LL_ADC_SetCommonPathInternalCh>
 8002086:	e02b      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x398>
                                         ~LL_ADC_PATH_INTERNAL_VBAT & tmp_config_internal_channel);
        }
        else if (pConfig->Channel == ADC_CHANNEL_VREFINT)
 8002088:	683b      	ldr	r3, [r7, #0]
 800208a:	681b      	ldr	r3, [r3, #0]
 800208c:	4a0b      	ldr	r2, [pc, #44]	; (80020bc <HAL_ADC_ConfigChannel+0x374>)
 800208e:	4293      	cmp	r3, r2
 8002090:	d126      	bne.n	80020e0 <HAL_ADC_ConfigChannel+0x398>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002092:	693b      	ldr	r3, [r7, #16]
 8002094:	4a0c      	ldr	r2, [pc, #48]	; (80020c8 <HAL_ADC_ConfigChannel+0x380>)
 8002096:	4013      	ands	r3, r2
 8002098:	4a03      	ldr	r2, [pc, #12]	; (80020a8 <HAL_ADC_ConfigChannel+0x360>)
 800209a:	0019      	movs	r1, r3
 800209c:	0010      	movs	r0, r2
 800209e:	f7ff fb39 	bl	8001714 <LL_ADC_SetCommonPathInternalCh>
 80020a2:	e01d      	b.n	80020e0 <HAL_ADC_ConfigChannel+0x398>
 80020a4:	80000004 	.word	0x80000004
 80020a8:	40012708 	.word	0x40012708
 80020ac:	b0001000 	.word	0xb0001000
 80020b0:	20000000 	.word	0x20000000
 80020b4:	00030d40 	.word	0x00030d40
 80020b8:	b8004000 	.word	0xb8004000
 80020bc:	b4002000 	.word	0xb4002000
 80020c0:	ff7fffff 	.word	0xff7fffff
 80020c4:	feffffff 	.word	0xfeffffff
 80020c8:	ffbfffff 	.word	0xffbfffff
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020d0:	2220      	movs	r2, #32
 80020d2:	431a      	orrs	r2, r3
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 80020d8:	2317      	movs	r3, #23
 80020da:	18fb      	adds	r3, r7, r3
 80020dc:	2201      	movs	r2, #1
 80020de:	701a      	strb	r2, [r3, #0]
  }

  __HAL_UNLOCK(hadc);
 80020e0:	687b      	ldr	r3, [r7, #4]
 80020e2:	2254      	movs	r2, #84	; 0x54
 80020e4:	2100      	movs	r1, #0
 80020e6:	5499      	strb	r1, [r3, r2]

  return tmp_hal_status;
 80020e8:	2317      	movs	r3, #23
 80020ea:	18fb      	adds	r3, r7, r3
 80020ec:	781b      	ldrb	r3, [r3, #0]
}
 80020ee:	0018      	movs	r0, r3
 80020f0:	46bd      	mov	sp, r7
 80020f2:	b006      	add	sp, #24
 80020f4:	bd80      	pop	{r7, pc}
 80020f6:	46c0      	nop			; (mov r8, r8)

080020f8 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 80020f8:	b580      	push	{r7, lr}
 80020fa:	b084      	sub	sp, #16
 80020fc:	af00      	add	r7, sp, #0
 80020fe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  __IO uint32_t wait_loop_index = 0UL;
 8002100:	2300      	movs	r3, #0
 8002102:	60bb      	str	r3, [r7, #8]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	681b      	ldr	r3, [r3, #0]
 8002108:	0018      	movs	r0, r3
 800210a:	f7ff fbf1 	bl	80018f0 <LL_ADC_IsEnabled>
 800210e:	1e03      	subs	r3, r0, #0
 8002110:	d000      	beq.n	8002114 <ADC_Enable+0x1c>
 8002112:	e069      	b.n	80021e8 <ADC_Enable+0xf0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_ADSTP | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	681b      	ldr	r3, [r3, #0]
 8002118:	689b      	ldr	r3, [r3, #8]
 800211a:	4a36      	ldr	r2, [pc, #216]	; (80021f4 <ADC_Enable+0xfc>)
 800211c:	4013      	ands	r3, r2
 800211e:	d00d      	beq.n	800213c <ADC_Enable+0x44>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002124:	2210      	movs	r2, #16
 8002126:	431a      	orrs	r2, r3
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	659a      	str	r2, [r3, #88]	; 0x58

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002130:	2201      	movs	r2, #1
 8002132:	431a      	orrs	r2, r3
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	65da      	str	r2, [r3, #92]	; 0x5c

      return HAL_ERROR;
 8002138:	2301      	movs	r3, #1
 800213a:	e056      	b.n	80021ea <ADC_Enable+0xf2>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	0018      	movs	r0, r3
 8002142:	f7ff fbc3 	bl	80018cc <LL_ADC_Enable>

    if ((LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) & LL_ADC_PATH_INTERNAL_TEMPSENSOR)
 8002146:	4b2c      	ldr	r3, [pc, #176]	; (80021f8 <ADC_Enable+0x100>)
 8002148:	0018      	movs	r0, r3
 800214a:	f7ff faf7 	bl	800173c <LL_ADC_GetCommonPathInternalCh>
 800214e:	0002      	movs	r2, r0
 8002150:	2380      	movs	r3, #128	; 0x80
 8002152:	041b      	lsls	r3, r3, #16
 8002154:	4013      	ands	r3, r2
 8002156:	d00f      	beq.n	8002178 <ADC_Enable+0x80>
      /* Wait loop initialization and execution */
      /* Note: Variable divided by 2 to compensate partially              */
      /*       CPU processing cycles, scaling in us split to not          */
      /*       exceed 32 bits register capacity and handle low frequency. */
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
                         * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002158:	4b28      	ldr	r3, [pc, #160]	; (80021fc <ADC_Enable+0x104>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4928      	ldr	r1, [pc, #160]	; (8002200 <ADC_Enable+0x108>)
 800215e:	0018      	movs	r0, r3
 8002160:	f7fd ffd0 	bl	8000104 <__udivsi3>
 8002164:	0003      	movs	r3, r0
 8002166:	3301      	adds	r3, #1
      wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_BUFFER_STAB_US / 10UL)
 8002168:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 800216a:	e002      	b.n	8002172 <ADC_Enable+0x7a>
      {
        wait_loop_index--;
 800216c:	68bb      	ldr	r3, [r7, #8]
 800216e:	3b01      	subs	r3, #1
 8002170:	60bb      	str	r3, [r7, #8]
      while (wait_loop_index != 0UL)
 8002172:	68bb      	ldr	r3, [r7, #8]
 8002174:	2b00      	cmp	r3, #0
 8002176:	d1f9      	bne.n	800216c <ADC_Enable+0x74>
      }
    }

    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware and flag ADC ready is not set.     */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	7e5b      	ldrb	r3, [r3, #25]
 800217c:	2b01      	cmp	r3, #1
 800217e:	d033      	beq.n	80021e8 <ADC_Enable+0xf0>
    {
      /* Wait for ADC effectively enabled */
      tickstart = HAL_GetTick();
 8002180:	f7ff faa8 	bl	80016d4 <HAL_GetTick>
 8002184:	0003      	movs	r3, r0
 8002186:	60fb      	str	r3, [r7, #12]

      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002188:	e027      	b.n	80021da <ADC_Enable+0xe2>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	0018      	movs	r0, r3
 8002190:	f7ff fbae 	bl	80018f0 <LL_ADC_IsEnabled>
 8002194:	1e03      	subs	r3, r0, #0
 8002196:	d104      	bne.n	80021a2 <ADC_Enable+0xaa>
        {
          LL_ADC_Enable(hadc->Instance);
 8002198:	687b      	ldr	r3, [r7, #4]
 800219a:	681b      	ldr	r3, [r3, #0]
 800219c:	0018      	movs	r0, r3
 800219e:	f7ff fb95 	bl	80018cc <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 80021a2:	f7ff fa97 	bl	80016d4 <HAL_GetTick>
 80021a6:	0002      	movs	r2, r0
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	1ad3      	subs	r3, r2, r3
 80021ac:	2b02      	cmp	r3, #2
 80021ae:	d914      	bls.n	80021da <ADC_Enable+0xe2>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	2201      	movs	r2, #1
 80021b8:	4013      	ands	r3, r2
 80021ba:	2b01      	cmp	r3, #1
 80021bc:	d00d      	beq.n	80021da <ADC_Enable+0xe2>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021c2:	2210      	movs	r2, #16
 80021c4:	431a      	orrs	r2, r3
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	659a      	str	r2, [r3, #88]	; 0x58

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ce:	2201      	movs	r2, #1
 80021d0:	431a      	orrs	r2, r3
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	65da      	str	r2, [r3, #92]	; 0x5c

            return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e007      	b.n	80021ea <ADC_Enable+0xf2>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2201      	movs	r2, #1
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d1d0      	bne.n	800218a <ADC_Enable+0x92>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 80021e8:	2300      	movs	r3, #0
}
 80021ea:	0018      	movs	r0, r3
 80021ec:	46bd      	mov	sp, r7
 80021ee:	b004      	add	sp, #16
 80021f0:	bd80      	pop	{r7, pc}
 80021f2:	46c0      	nop			; (mov r8, r8)
 80021f4:	80000017 	.word	0x80000017
 80021f8:	40012708 	.word	0x40012708
 80021fc:	20000000 	.word	0x20000000
 8002200:	00030d40 	.word	0x00030d40

08002204 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b082      	sub	sp, #8
 8002208:	af00      	add	r7, sp, #0
 800220a:	0002      	movs	r2, r0
 800220c:	1dfb      	adds	r3, r7, #7
 800220e:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002210:	1dfb      	adds	r3, r7, #7
 8002212:	781b      	ldrb	r3, [r3, #0]
 8002214:	2b7f      	cmp	r3, #127	; 0x7f
 8002216:	d809      	bhi.n	800222c <__NVIC_EnableIRQ+0x28>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002218:	1dfb      	adds	r3, r7, #7
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	001a      	movs	r2, r3
 800221e:	231f      	movs	r3, #31
 8002220:	401a      	ands	r2, r3
 8002222:	4b04      	ldr	r3, [pc, #16]	; (8002234 <__NVIC_EnableIRQ+0x30>)
 8002224:	2101      	movs	r1, #1
 8002226:	4091      	lsls	r1, r2
 8002228:	000a      	movs	r2, r1
 800222a:	601a      	str	r2, [r3, #0]
    __COMPILER_BARRIER();
  }
}
 800222c:	46c0      	nop			; (mov r8, r8)
 800222e:	46bd      	mov	sp, r7
 8002230:	b002      	add	sp, #8
 8002232:	bd80      	pop	{r7, pc}
 8002234:	e000e100 	.word	0xe000e100

08002238 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002238:	b590      	push	{r4, r7, lr}
 800223a:	b083      	sub	sp, #12
 800223c:	af00      	add	r7, sp, #0
 800223e:	0002      	movs	r2, r0
 8002240:	6039      	str	r1, [r7, #0]
 8002242:	1dfb      	adds	r3, r7, #7
 8002244:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8002246:	1dfb      	adds	r3, r7, #7
 8002248:	781b      	ldrb	r3, [r3, #0]
 800224a:	2b7f      	cmp	r3, #127	; 0x7f
 800224c:	d828      	bhi.n	80022a0 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800224e:	4a2f      	ldr	r2, [pc, #188]	; (800230c <__NVIC_SetPriority+0xd4>)
 8002250:	1dfb      	adds	r3, r7, #7
 8002252:	781b      	ldrb	r3, [r3, #0]
 8002254:	b25b      	sxtb	r3, r3
 8002256:	089b      	lsrs	r3, r3, #2
 8002258:	33c0      	adds	r3, #192	; 0xc0
 800225a:	009b      	lsls	r3, r3, #2
 800225c:	589b      	ldr	r3, [r3, r2]
 800225e:	1dfa      	adds	r2, r7, #7
 8002260:	7812      	ldrb	r2, [r2, #0]
 8002262:	0011      	movs	r1, r2
 8002264:	2203      	movs	r2, #3
 8002266:	400a      	ands	r2, r1
 8002268:	00d2      	lsls	r2, r2, #3
 800226a:	21ff      	movs	r1, #255	; 0xff
 800226c:	4091      	lsls	r1, r2
 800226e:	000a      	movs	r2, r1
 8002270:	43d2      	mvns	r2, r2
 8002272:	401a      	ands	r2, r3
 8002274:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 8002276:	683b      	ldr	r3, [r7, #0]
 8002278:	019b      	lsls	r3, r3, #6
 800227a:	22ff      	movs	r2, #255	; 0xff
 800227c:	401a      	ands	r2, r3
 800227e:	1dfb      	adds	r3, r7, #7
 8002280:	781b      	ldrb	r3, [r3, #0]
 8002282:	0018      	movs	r0, r3
 8002284:	2303      	movs	r3, #3
 8002286:	4003      	ands	r3, r0
 8002288:	00db      	lsls	r3, r3, #3
 800228a:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800228c:	481f      	ldr	r0, [pc, #124]	; (800230c <__NVIC_SetPriority+0xd4>)
 800228e:	1dfb      	adds	r3, r7, #7
 8002290:	781b      	ldrb	r3, [r3, #0]
 8002292:	b25b      	sxtb	r3, r3
 8002294:	089b      	lsrs	r3, r3, #2
 8002296:	430a      	orrs	r2, r1
 8002298:	33c0      	adds	r3, #192	; 0xc0
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800229e:	e031      	b.n	8002304 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022a0:	4a1b      	ldr	r2, [pc, #108]	; (8002310 <__NVIC_SetPriority+0xd8>)
 80022a2:	1dfb      	adds	r3, r7, #7
 80022a4:	781b      	ldrb	r3, [r3, #0]
 80022a6:	0019      	movs	r1, r3
 80022a8:	230f      	movs	r3, #15
 80022aa:	400b      	ands	r3, r1
 80022ac:	3b08      	subs	r3, #8
 80022ae:	089b      	lsrs	r3, r3, #2
 80022b0:	3306      	adds	r3, #6
 80022b2:	009b      	lsls	r3, r3, #2
 80022b4:	18d3      	adds	r3, r2, r3
 80022b6:	3304      	adds	r3, #4
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	1dfa      	adds	r2, r7, #7
 80022bc:	7812      	ldrb	r2, [r2, #0]
 80022be:	0011      	movs	r1, r2
 80022c0:	2203      	movs	r2, #3
 80022c2:	400a      	ands	r2, r1
 80022c4:	00d2      	lsls	r2, r2, #3
 80022c6:	21ff      	movs	r1, #255	; 0xff
 80022c8:	4091      	lsls	r1, r2
 80022ca:	000a      	movs	r2, r1
 80022cc:	43d2      	mvns	r2, r2
 80022ce:	401a      	ands	r2, r3
 80022d0:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 80022d2:	683b      	ldr	r3, [r7, #0]
 80022d4:	019b      	lsls	r3, r3, #6
 80022d6:	22ff      	movs	r2, #255	; 0xff
 80022d8:	401a      	ands	r2, r3
 80022da:	1dfb      	adds	r3, r7, #7
 80022dc:	781b      	ldrb	r3, [r3, #0]
 80022de:	0018      	movs	r0, r3
 80022e0:	2303      	movs	r3, #3
 80022e2:	4003      	ands	r3, r0
 80022e4:	00db      	lsls	r3, r3, #3
 80022e6:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 80022e8:	4809      	ldr	r0, [pc, #36]	; (8002310 <__NVIC_SetPriority+0xd8>)
 80022ea:	1dfb      	adds	r3, r7, #7
 80022ec:	781b      	ldrb	r3, [r3, #0]
 80022ee:	001c      	movs	r4, r3
 80022f0:	230f      	movs	r3, #15
 80022f2:	4023      	ands	r3, r4
 80022f4:	3b08      	subs	r3, #8
 80022f6:	089b      	lsrs	r3, r3, #2
 80022f8:	430a      	orrs	r2, r1
 80022fa:	3306      	adds	r3, #6
 80022fc:	009b      	lsls	r3, r3, #2
 80022fe:	18c3      	adds	r3, r0, r3
 8002300:	3304      	adds	r3, #4
 8002302:	601a      	str	r2, [r3, #0]
}
 8002304:	46c0      	nop			; (mov r8, r8)
 8002306:	46bd      	mov	sp, r7
 8002308:	b003      	add	sp, #12
 800230a:	bd90      	pop	{r4, r7, pc}
 800230c:	e000e100 	.word	0xe000e100
 8002310:	e000ed00 	.word	0xe000ed00

08002314 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002314:	b580      	push	{r7, lr}
 8002316:	b082      	sub	sp, #8
 8002318:	af00      	add	r7, sp, #0
 800231a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	1e5a      	subs	r2, r3, #1
 8002320:	2380      	movs	r3, #128	; 0x80
 8002322:	045b      	lsls	r3, r3, #17
 8002324:	429a      	cmp	r2, r3
 8002326:	d301      	bcc.n	800232c <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002328:	2301      	movs	r3, #1
 800232a:	e010      	b.n	800234e <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800232c:	4b0a      	ldr	r3, [pc, #40]	; (8002358 <SysTick_Config+0x44>)
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	3a01      	subs	r2, #1
 8002332:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002334:	2301      	movs	r3, #1
 8002336:	425b      	negs	r3, r3
 8002338:	2103      	movs	r1, #3
 800233a:	0018      	movs	r0, r3
 800233c:	f7ff ff7c 	bl	8002238 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002340:	4b05      	ldr	r3, [pc, #20]	; (8002358 <SysTick_Config+0x44>)
 8002342:	2200      	movs	r2, #0
 8002344:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002346:	4b04      	ldr	r3, [pc, #16]	; (8002358 <SysTick_Config+0x44>)
 8002348:	2207      	movs	r2, #7
 800234a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800234c:	2300      	movs	r3, #0
}
 800234e:	0018      	movs	r0, r3
 8002350:	46bd      	mov	sp, r7
 8002352:	b002      	add	sp, #8
 8002354:	bd80      	pop	{r7, pc}
 8002356:	46c0      	nop			; (mov r8, r8)
 8002358:	e000e010 	.word	0xe000e010

0800235c <HAL_NVIC_SetPriority>:
  *         with stm32g0xx devices, this parameter is a dummy value and it is ignored, because
  *         no subpriority supported in Cortex M0+ based products.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b084      	sub	sp, #16
 8002360:	af00      	add	r7, sp, #0
 8002362:	60b9      	str	r1, [r7, #8]
 8002364:	607a      	str	r2, [r7, #4]
 8002366:	210f      	movs	r1, #15
 8002368:	187b      	adds	r3, r7, r1
 800236a:	1c02      	adds	r2, r0, #0
 800236c:	701a      	strb	r2, [r3, #0]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(SubPriority);

  /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn, PreemptPriority);
 800236e:	68ba      	ldr	r2, [r7, #8]
 8002370:	187b      	adds	r3, r7, r1
 8002372:	781b      	ldrb	r3, [r3, #0]
 8002374:	b25b      	sxtb	r3, r3
 8002376:	0011      	movs	r1, r2
 8002378:	0018      	movs	r0, r3
 800237a:	f7ff ff5d 	bl	8002238 <__NVIC_SetPriority>
}
 800237e:	46c0      	nop			; (mov r8, r8)
 8002380:	46bd      	mov	sp, r7
 8002382:	b004      	add	sp, #16
 8002384:	bd80      	pop	{r7, pc}

08002386 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g0xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002386:	b580      	push	{r7, lr}
 8002388:	b082      	sub	sp, #8
 800238a:	af00      	add	r7, sp, #0
 800238c:	0002      	movs	r2, r0
 800238e:	1dfb      	adds	r3, r7, #7
 8002390:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002392:	1dfb      	adds	r3, r7, #7
 8002394:	781b      	ldrb	r3, [r3, #0]
 8002396:	b25b      	sxtb	r3, r3
 8002398:	0018      	movs	r0, r3
 800239a:	f7ff ff33 	bl	8002204 <__NVIC_EnableIRQ>
}
 800239e:	46c0      	nop			; (mov r8, r8)
 80023a0:	46bd      	mov	sp, r7
 80023a2:	b002      	add	sp, #8
 80023a4:	bd80      	pop	{r7, pc}

080023a6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80023a6:	b580      	push	{r7, lr}
 80023a8:	b082      	sub	sp, #8
 80023aa:	af00      	add	r7, sp, #0
 80023ac:	6078      	str	r0, [r7, #4]
  return SysTick_Config(TicksNumb);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	0018      	movs	r0, r3
 80023b2:	f7ff ffaf 	bl	8002314 <SysTick_Config>
 80023b6:	0003      	movs	r3, r0
}
 80023b8:	0018      	movs	r0, r3
 80023ba:	46bd      	mov	sp, r7
 80023bc:	b002      	add	sp, #8
 80023be:	bd80      	pop	{r7, pc}

080023c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
 80023c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80023ca:	2300      	movs	r3, #0
 80023cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023ce:	e14d      	b.n	800266c <HAL_GPIO_Init+0x2ac>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	2101      	movs	r1, #1
 80023d6:	697a      	ldr	r2, [r7, #20]
 80023d8:	4091      	lsls	r1, r2
 80023da:	000a      	movs	r2, r1
 80023dc:	4013      	ands	r3, r2
 80023de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80023e0:	68fb      	ldr	r3, [r7, #12]
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d100      	bne.n	80023e8 <HAL_GPIO_Init+0x28>
 80023e6:	e13e      	b.n	8002666 <HAL_GPIO_Init+0x2a6>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	685b      	ldr	r3, [r3, #4]
 80023ec:	2203      	movs	r2, #3
 80023ee:	4013      	ands	r3, r2
 80023f0:	2b01      	cmp	r3, #1
 80023f2:	d005      	beq.n	8002400 <HAL_GPIO_Init+0x40>
 80023f4:	683b      	ldr	r3, [r7, #0]
 80023f6:	685b      	ldr	r3, [r3, #4]
 80023f8:	2203      	movs	r2, #3
 80023fa:	4013      	ands	r3, r2
 80023fc:	2b02      	cmp	r3, #2
 80023fe:	d130      	bne.n	8002462 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	689b      	ldr	r3, [r3, #8]
 8002404:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 8002406:	697b      	ldr	r3, [r7, #20]
 8002408:	005b      	lsls	r3, r3, #1
 800240a:	2203      	movs	r2, #3
 800240c:	409a      	lsls	r2, r3
 800240e:	0013      	movs	r3, r2
 8002410:	43da      	mvns	r2, r3
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4013      	ands	r3, r2
 8002416:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	68da      	ldr	r2, [r3, #12]
 800241c:	697b      	ldr	r3, [r7, #20]
 800241e:	005b      	lsls	r3, r3, #1
 8002420:	409a      	lsls	r2, r3
 8002422:	0013      	movs	r3, r2
 8002424:	693a      	ldr	r2, [r7, #16]
 8002426:	4313      	orrs	r3, r2
 8002428:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	693a      	ldr	r2, [r7, #16]
 800242e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	685b      	ldr	r3, [r3, #4]
 8002434:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002436:	2201      	movs	r2, #1
 8002438:	697b      	ldr	r3, [r7, #20]
 800243a:	409a      	lsls	r2, r3
 800243c:	0013      	movs	r3, r2
 800243e:	43da      	mvns	r2, r3
 8002440:	693b      	ldr	r3, [r7, #16]
 8002442:	4013      	ands	r3, r2
 8002444:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002446:	683b      	ldr	r3, [r7, #0]
 8002448:	685b      	ldr	r3, [r3, #4]
 800244a:	091b      	lsrs	r3, r3, #4
 800244c:	2201      	movs	r2, #1
 800244e:	401a      	ands	r2, r3
 8002450:	697b      	ldr	r3, [r7, #20]
 8002452:	409a      	lsls	r2, r3
 8002454:	0013      	movs	r3, r2
 8002456:	693a      	ldr	r2, [r7, #16]
 8002458:	4313      	orrs	r3, r2
 800245a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	693a      	ldr	r2, [r7, #16]
 8002460:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	685b      	ldr	r3, [r3, #4]
 8002466:	2203      	movs	r2, #3
 8002468:	4013      	ands	r3, r2
 800246a:	2b03      	cmp	r3, #3
 800246c:	d017      	beq.n	800249e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	68db      	ldr	r3, [r3, #12]
 8002472:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2u));
 8002474:	697b      	ldr	r3, [r7, #20]
 8002476:	005b      	lsls	r3, r3, #1
 8002478:	2203      	movs	r2, #3
 800247a:	409a      	lsls	r2, r3
 800247c:	0013      	movs	r3, r2
 800247e:	43da      	mvns	r2, r3
 8002480:	693b      	ldr	r3, [r7, #16]
 8002482:	4013      	ands	r3, r2
 8002484:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2u));
 8002486:	683b      	ldr	r3, [r7, #0]
 8002488:	689a      	ldr	r2, [r3, #8]
 800248a:	697b      	ldr	r3, [r7, #20]
 800248c:	005b      	lsls	r3, r3, #1
 800248e:	409a      	lsls	r2, r3
 8002490:	0013      	movs	r3, r2
 8002492:	693a      	ldr	r2, [r7, #16]
 8002494:	4313      	orrs	r3, r2
 8002496:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	693a      	ldr	r2, [r7, #16]
 800249c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	2203      	movs	r2, #3
 80024a4:	4013      	ands	r3, r2
 80024a6:	2b02      	cmp	r3, #2
 80024a8:	d123      	bne.n	80024f2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80024aa:	697b      	ldr	r3, [r7, #20]
 80024ac:	08da      	lsrs	r2, r3, #3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	3208      	adds	r2, #8
 80024b2:	0092      	lsls	r2, r2, #2
 80024b4:	58d3      	ldr	r3, [r2, r3]
 80024b6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80024b8:	697b      	ldr	r3, [r7, #20]
 80024ba:	2207      	movs	r2, #7
 80024bc:	4013      	ands	r3, r2
 80024be:	009b      	lsls	r3, r3, #2
 80024c0:	220f      	movs	r2, #15
 80024c2:	409a      	lsls	r2, r3
 80024c4:	0013      	movs	r3, r2
 80024c6:	43da      	mvns	r2, r3
 80024c8:	693b      	ldr	r3, [r7, #16]
 80024ca:	4013      	ands	r3, r2
 80024cc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	691a      	ldr	r2, [r3, #16]
 80024d2:	697b      	ldr	r3, [r7, #20]
 80024d4:	2107      	movs	r1, #7
 80024d6:	400b      	ands	r3, r1
 80024d8:	009b      	lsls	r3, r3, #2
 80024da:	409a      	lsls	r2, r3
 80024dc:	0013      	movs	r3, r2
 80024de:	693a      	ldr	r2, [r7, #16]
 80024e0:	4313      	orrs	r3, r2
 80024e2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80024e4:	697b      	ldr	r3, [r7, #20]
 80024e6:	08da      	lsrs	r2, r3, #3
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	3208      	adds	r2, #8
 80024ec:	0092      	lsls	r2, r2, #2
 80024ee:	6939      	ldr	r1, [r7, #16]
 80024f0:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80024f2:	687b      	ldr	r3, [r7, #4]
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 80024f8:	697b      	ldr	r3, [r7, #20]
 80024fa:	005b      	lsls	r3, r3, #1
 80024fc:	2203      	movs	r2, #3
 80024fe:	409a      	lsls	r2, r3
 8002500:	0013      	movs	r3, r2
 8002502:	43da      	mvns	r2, r3
 8002504:	693b      	ldr	r3, [r7, #16]
 8002506:	4013      	ands	r3, r2
 8002508:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 800250a:	683b      	ldr	r3, [r7, #0]
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	2203      	movs	r2, #3
 8002510:	401a      	ands	r2, r3
 8002512:	697b      	ldr	r3, [r7, #20]
 8002514:	005b      	lsls	r3, r3, #1
 8002516:	409a      	lsls	r2, r3
 8002518:	0013      	movs	r3, r2
 800251a:	693a      	ldr	r2, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	693a      	ldr	r2, [r7, #16]
 8002524:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8002526:	683b      	ldr	r3, [r7, #0]
 8002528:	685a      	ldr	r2, [r3, #4]
 800252a:	23c0      	movs	r3, #192	; 0xc0
 800252c:	029b      	lsls	r3, r3, #10
 800252e:	4013      	ands	r3, r2
 8002530:	d100      	bne.n	8002534 <HAL_GPIO_Init+0x174>
 8002532:	e098      	b.n	8002666 <HAL_GPIO_Init+0x2a6>
      {
        temp = EXTI->EXTICR[position >> 2u];
 8002534:	4a53      	ldr	r2, [pc, #332]	; (8002684 <HAL_GPIO_Init+0x2c4>)
 8002536:	697b      	ldr	r3, [r7, #20]
 8002538:	089b      	lsrs	r3, r3, #2
 800253a:	3318      	adds	r3, #24
 800253c:	009b      	lsls	r3, r3, #2
 800253e:	589b      	ldr	r3, [r3, r2]
 8002540:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (8u * (position & 0x03u)));
 8002542:	697b      	ldr	r3, [r7, #20]
 8002544:	2203      	movs	r2, #3
 8002546:	4013      	ands	r3, r2
 8002548:	00db      	lsls	r3, r3, #3
 800254a:	220f      	movs	r2, #15
 800254c:	409a      	lsls	r2, r3
 800254e:	0013      	movs	r3, r2
 8002550:	43da      	mvns	r2, r3
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	4013      	ands	r3, r2
 8002556:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (8u * (position & 0x03u)));
 8002558:	687a      	ldr	r2, [r7, #4]
 800255a:	23a0      	movs	r3, #160	; 0xa0
 800255c:	05db      	lsls	r3, r3, #23
 800255e:	429a      	cmp	r2, r3
 8002560:	d019      	beq.n	8002596 <HAL_GPIO_Init+0x1d6>
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	4a48      	ldr	r2, [pc, #288]	; (8002688 <HAL_GPIO_Init+0x2c8>)
 8002566:	4293      	cmp	r3, r2
 8002568:	d013      	beq.n	8002592 <HAL_GPIO_Init+0x1d2>
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	4a47      	ldr	r2, [pc, #284]	; (800268c <HAL_GPIO_Init+0x2cc>)
 800256e:	4293      	cmp	r3, r2
 8002570:	d00d      	beq.n	800258e <HAL_GPIO_Init+0x1ce>
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	4a46      	ldr	r2, [pc, #280]	; (8002690 <HAL_GPIO_Init+0x2d0>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d007      	beq.n	800258a <HAL_GPIO_Init+0x1ca>
 800257a:	687b      	ldr	r3, [r7, #4]
 800257c:	4a45      	ldr	r2, [pc, #276]	; (8002694 <HAL_GPIO_Init+0x2d4>)
 800257e:	4293      	cmp	r3, r2
 8002580:	d101      	bne.n	8002586 <HAL_GPIO_Init+0x1c6>
 8002582:	2304      	movs	r3, #4
 8002584:	e008      	b.n	8002598 <HAL_GPIO_Init+0x1d8>
 8002586:	2305      	movs	r3, #5
 8002588:	e006      	b.n	8002598 <HAL_GPIO_Init+0x1d8>
 800258a:	2303      	movs	r3, #3
 800258c:	e004      	b.n	8002598 <HAL_GPIO_Init+0x1d8>
 800258e:	2302      	movs	r3, #2
 8002590:	e002      	b.n	8002598 <HAL_GPIO_Init+0x1d8>
 8002592:	2301      	movs	r3, #1
 8002594:	e000      	b.n	8002598 <HAL_GPIO_Init+0x1d8>
 8002596:	2300      	movs	r3, #0
 8002598:	697a      	ldr	r2, [r7, #20]
 800259a:	2103      	movs	r1, #3
 800259c:	400a      	ands	r2, r1
 800259e:	00d2      	lsls	r2, r2, #3
 80025a0:	4093      	lsls	r3, r2
 80025a2:	693a      	ldr	r2, [r7, #16]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	613b      	str	r3, [r7, #16]
        EXTI->EXTICR[position >> 2u] = temp;
 80025a8:	4936      	ldr	r1, [pc, #216]	; (8002684 <HAL_GPIO_Init+0x2c4>)
 80025aa:	697b      	ldr	r3, [r7, #20]
 80025ac:	089b      	lsrs	r3, r3, #2
 80025ae:	3318      	adds	r3, #24
 80025b0:	009b      	lsls	r3, r3, #2
 80025b2:	693a      	ldr	r2, [r7, #16]
 80025b4:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80025b6:	4b33      	ldr	r3, [pc, #204]	; (8002684 <HAL_GPIO_Init+0x2c4>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025bc:	68fb      	ldr	r3, [r7, #12]
 80025be:	43da      	mvns	r2, r3
 80025c0:	693b      	ldr	r3, [r7, #16]
 80025c2:	4013      	ands	r3, r2
 80025c4:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 80025c6:	683b      	ldr	r3, [r7, #0]
 80025c8:	685a      	ldr	r2, [r3, #4]
 80025ca:	2380      	movs	r3, #128	; 0x80
 80025cc:	035b      	lsls	r3, r3, #13
 80025ce:	4013      	ands	r3, r2
 80025d0:	d003      	beq.n	80025da <HAL_GPIO_Init+0x21a>
        {
          temp |= iocurrent;
 80025d2:	693a      	ldr	r2, [r7, #16]
 80025d4:	68fb      	ldr	r3, [r7, #12]
 80025d6:	4313      	orrs	r3, r2
 80025d8:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <HAL_GPIO_Init+0x2c4>)
 80025dc:	693a      	ldr	r2, [r7, #16]
 80025de:	601a      	str	r2, [r3, #0]

        temp = EXTI->FTSR1;
 80025e0:	4b28      	ldr	r3, [pc, #160]	; (8002684 <HAL_GPIO_Init+0x2c4>)
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	43da      	mvns	r2, r3
 80025ea:	693b      	ldr	r3, [r7, #16]
 80025ec:	4013      	ands	r3, r2
 80025ee:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 80025f0:	683b      	ldr	r3, [r7, #0]
 80025f2:	685a      	ldr	r2, [r3, #4]
 80025f4:	2380      	movs	r3, #128	; 0x80
 80025f6:	039b      	lsls	r3, r3, #14
 80025f8:	4013      	ands	r3, r2
 80025fa:	d003      	beq.n	8002604 <HAL_GPIO_Init+0x244>
        {
          temp |= iocurrent;
 80025fc:	693a      	ldr	r2, [r7, #16]
 80025fe:	68fb      	ldr	r3, [r7, #12]
 8002600:	4313      	orrs	r3, r2
 8002602:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8002604:	4b1f      	ldr	r3, [pc, #124]	; (8002684 <HAL_GPIO_Init+0x2c4>)
 8002606:	693a      	ldr	r2, [r7, #16]
 8002608:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 800260a:	4a1e      	ldr	r2, [pc, #120]	; (8002684 <HAL_GPIO_Init+0x2c4>)
 800260c:	2384      	movs	r3, #132	; 0x84
 800260e:	58d3      	ldr	r3, [r2, r3]
 8002610:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	43da      	mvns	r2, r3
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	4013      	ands	r3, r2
 800261a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	685a      	ldr	r2, [r3, #4]
 8002620:	2380      	movs	r3, #128	; 0x80
 8002622:	029b      	lsls	r3, r3, #10
 8002624:	4013      	ands	r3, r2
 8002626:	d003      	beq.n	8002630 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002628:	693a      	ldr	r2, [r7, #16]
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	4313      	orrs	r3, r2
 800262e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8002630:	4914      	ldr	r1, [pc, #80]	; (8002684 <HAL_GPIO_Init+0x2c4>)
 8002632:	2284      	movs	r2, #132	; 0x84
 8002634:	693b      	ldr	r3, [r7, #16]
 8002636:	508b      	str	r3, [r1, r2]

        temp = EXTI->IMR1;
 8002638:	4a12      	ldr	r2, [pc, #72]	; (8002684 <HAL_GPIO_Init+0x2c4>)
 800263a:	2380      	movs	r3, #128	; 0x80
 800263c:	58d3      	ldr	r3, [r2, r3]
 800263e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	43da      	mvns	r2, r3
 8002644:	693b      	ldr	r3, [r7, #16]
 8002646:	4013      	ands	r3, r2
 8002648:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 800264a:	683b      	ldr	r3, [r7, #0]
 800264c:	685a      	ldr	r2, [r3, #4]
 800264e:	2380      	movs	r3, #128	; 0x80
 8002650:	025b      	lsls	r3, r3, #9
 8002652:	4013      	ands	r3, r2
 8002654:	d003      	beq.n	800265e <HAL_GPIO_Init+0x29e>
        {
          temp |= iocurrent;
 8002656:	693a      	ldr	r2, [r7, #16]
 8002658:	68fb      	ldr	r3, [r7, #12]
 800265a:	4313      	orrs	r3, r2
 800265c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 800265e:	4909      	ldr	r1, [pc, #36]	; (8002684 <HAL_GPIO_Init+0x2c4>)
 8002660:	2280      	movs	r2, #128	; 0x80
 8002662:	693b      	ldr	r3, [r7, #16]
 8002664:	508b      	str	r3, [r1, r2]
      }
    }

    position++;
 8002666:	697b      	ldr	r3, [r7, #20]
 8002668:	3301      	adds	r3, #1
 800266a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	697b      	ldr	r3, [r7, #20]
 8002672:	40da      	lsrs	r2, r3
 8002674:	1e13      	subs	r3, r2, #0
 8002676:	d000      	beq.n	800267a <HAL_GPIO_Init+0x2ba>
 8002678:	e6aa      	b.n	80023d0 <HAL_GPIO_Init+0x10>
  }
}
 800267a:	46c0      	nop			; (mov r8, r8)
 800267c:	46c0      	nop			; (mov r8, r8)
 800267e:	46bd      	mov	sp, r7
 8002680:	b006      	add	sp, #24
 8002682:	bd80      	pop	{r7, pc}
 8002684:	40021800 	.word	0x40021800
 8002688:	50000400 	.word	0x50000400
 800268c:	50000800 	.word	0x50000800
 8002690:	50000c00 	.word	0x50000c00
 8002694:	50001000 	.word	0x50001000

08002698 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	b082      	sub	sp, #8
 800269c:	af00      	add	r7, sp, #0
 800269e:	6078      	str	r0, [r7, #4]
 80026a0:	0008      	movs	r0, r1
 80026a2:	0011      	movs	r1, r2
 80026a4:	1cbb      	adds	r3, r7, #2
 80026a6:	1c02      	adds	r2, r0, #0
 80026a8:	801a      	strh	r2, [r3, #0]
 80026aa:	1c7b      	adds	r3, r7, #1
 80026ac:	1c0a      	adds	r2, r1, #0
 80026ae:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026b0:	1c7b      	adds	r3, r7, #1
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d004      	beq.n	80026c2 <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80026b8:	1cbb      	adds	r3, r7, #2
 80026ba:	881a      	ldrh	r2, [r3, #0]
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80026c0:	e003      	b.n	80026ca <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80026c2:	1cbb      	adds	r3, r7, #2
 80026c4:	881a      	ldrh	r2, [r3, #0]
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	629a      	str	r2, [r3, #40]	; 0x28
}
 80026ca:	46c0      	nop			; (mov r8, r8)
 80026cc:	46bd      	mov	sp, r7
 80026ce:	b002      	add	sp, #8
 80026d0:	bd80      	pop	{r7, pc}
	...

080026d4 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80026d4:	b580      	push	{r7, lr}
 80026d6:	b082      	sub	sp, #8
 80026d8:	af00      	add	r7, sp, #0
 80026da:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d101      	bne.n	80026e6 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80026e2:	2301      	movs	r3, #1
 80026e4:	e08f      	b.n	8002806 <HAL_I2C_Init+0x132>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	2241      	movs	r2, #65	; 0x41
 80026ea:	5c9b      	ldrb	r3, [r3, r2]
 80026ec:	b2db      	uxtb	r3, r3
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d107      	bne.n	8002702 <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	2240      	movs	r2, #64	; 0x40
 80026f6:	2100      	movs	r1, #0
 80026f8:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	0018      	movs	r0, r3
 80026fe:	f7fe fe03 	bl	8001308 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	2241      	movs	r2, #65	; 0x41
 8002706:	2124      	movs	r1, #36	; 0x24
 8002708:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	681a      	ldr	r2, [r3, #0]
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	681b      	ldr	r3, [r3, #0]
 8002714:	2101      	movs	r1, #1
 8002716:	438a      	bics	r2, r1
 8002718:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	685a      	ldr	r2, [r3, #4]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	493b      	ldr	r1, [pc, #236]	; (8002810 <HAL_I2C_Init+0x13c>)
 8002724:	400a      	ands	r2, r1
 8002726:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	689a      	ldr	r2, [r3, #8]
 800272e:	687b      	ldr	r3, [r7, #4]
 8002730:	681b      	ldr	r3, [r3, #0]
 8002732:	4938      	ldr	r1, [pc, #224]	; (8002814 <HAL_I2C_Init+0x140>)
 8002734:	400a      	ands	r2, r1
 8002736:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002738:	687b      	ldr	r3, [r7, #4]
 800273a:	68db      	ldr	r3, [r3, #12]
 800273c:	2b01      	cmp	r3, #1
 800273e:	d108      	bne.n	8002752 <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	689a      	ldr	r2, [r3, #8]
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	2180      	movs	r1, #128	; 0x80
 800274a:	0209      	lsls	r1, r1, #8
 800274c:	430a      	orrs	r2, r1
 800274e:	609a      	str	r2, [r3, #8]
 8002750:	e007      	b.n	8002762 <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	689a      	ldr	r2, [r3, #8]
 8002756:	687b      	ldr	r3, [r7, #4]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	2184      	movs	r1, #132	; 0x84
 800275c:	0209      	lsls	r1, r1, #8
 800275e:	430a      	orrs	r2, r1
 8002760:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	68db      	ldr	r3, [r3, #12]
 8002766:	2b02      	cmp	r3, #2
 8002768:	d109      	bne.n	800277e <HAL_I2C_Init+0xaa>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	685a      	ldr	r2, [r3, #4]
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	2180      	movs	r1, #128	; 0x80
 8002776:	0109      	lsls	r1, r1, #4
 8002778:	430a      	orrs	r2, r1
 800277a:	605a      	str	r2, [r3, #4]
 800277c:	e007      	b.n	800278e <HAL_I2C_Init+0xba>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	681b      	ldr	r3, [r3, #0]
 8002782:	685a      	ldr	r2, [r3, #4]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	4923      	ldr	r1, [pc, #140]	; (8002818 <HAL_I2C_Init+0x144>)
 800278a:	400a      	ands	r2, r1
 800278c:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	685a      	ldr	r2, [r3, #4]
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	681b      	ldr	r3, [r3, #0]
 8002798:	4920      	ldr	r1, [pc, #128]	; (800281c <HAL_I2C_Init+0x148>)
 800279a:	430a      	orrs	r2, r1
 800279c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	681b      	ldr	r3, [r3, #0]
 80027a2:	68da      	ldr	r2, [r3, #12]
 80027a4:	687b      	ldr	r3, [r7, #4]
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	491a      	ldr	r1, [pc, #104]	; (8002814 <HAL_I2C_Init+0x140>)
 80027aa:	400a      	ands	r2, r1
 80027ac:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	691a      	ldr	r2, [r3, #16]
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	695b      	ldr	r3, [r3, #20]
 80027b6:	431a      	orrs	r2, r3
 80027b8:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	699b      	ldr	r3, [r3, #24]
 80027be:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	681b      	ldr	r3, [r3, #0]
 80027c4:	430a      	orrs	r2, r1
 80027c6:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	69d9      	ldr	r1, [r3, #28]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	6a1a      	ldr	r2, [r3, #32]
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	430a      	orrs	r2, r1
 80027d6:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	681a      	ldr	r2, [r3, #0]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	2101      	movs	r1, #1
 80027e4:	430a      	orrs	r2, r1
 80027e6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2200      	movs	r2, #0
 80027ec:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	2241      	movs	r2, #65	; 0x41
 80027f2:	2120      	movs	r1, #32
 80027f4:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	2200      	movs	r2, #0
 80027fa:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2242      	movs	r2, #66	; 0x42
 8002800:	2100      	movs	r1, #0
 8002802:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8002804:	2300      	movs	r3, #0
}
 8002806:	0018      	movs	r0, r3
 8002808:	46bd      	mov	sp, r7
 800280a:	b002      	add	sp, #8
 800280c:	bd80      	pop	{r7, pc}
 800280e:	46c0      	nop			; (mov r8, r8)
 8002810:	f0ffffff 	.word	0xf0ffffff
 8002814:	ffff7fff 	.word	0xffff7fff
 8002818:	fffff7ff 	.word	0xfffff7ff
 800281c:	02008000 	.word	0x02008000

08002820 <HAL_I2C_Mem_Read>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress,
                                   uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002820:	b590      	push	{r4, r7, lr}
 8002822:	b089      	sub	sp, #36	; 0x24
 8002824:	af02      	add	r7, sp, #8
 8002826:	60f8      	str	r0, [r7, #12]
 8002828:	000c      	movs	r4, r1
 800282a:	0010      	movs	r0, r2
 800282c:	0019      	movs	r1, r3
 800282e:	230a      	movs	r3, #10
 8002830:	18fb      	adds	r3, r7, r3
 8002832:	1c22      	adds	r2, r4, #0
 8002834:	801a      	strh	r2, [r3, #0]
 8002836:	2308      	movs	r3, #8
 8002838:	18fb      	adds	r3, r7, r3
 800283a:	1c02      	adds	r2, r0, #0
 800283c:	801a      	strh	r2, [r3, #0]
 800283e:	1dbb      	adds	r3, r7, #6
 8002840:	1c0a      	adds	r2, r1, #0
 8002842:	801a      	strh	r2, [r3, #0]
  uint32_t tickstart;

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	2241      	movs	r2, #65	; 0x41
 8002848:	5c9b      	ldrb	r3, [r3, r2]
 800284a:	b2db      	uxtb	r3, r3
 800284c:	2b20      	cmp	r3, #32
 800284e:	d000      	beq.n	8002852 <HAL_I2C_Mem_Read+0x32>
 8002850:	e110      	b.n	8002a74 <HAL_I2C_Mem_Read+0x254>
  {
    if ((pData == NULL) || (Size == 0U))
 8002852:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002854:	2b00      	cmp	r3, #0
 8002856:	d004      	beq.n	8002862 <HAL_I2C_Mem_Read+0x42>
 8002858:	232c      	movs	r3, #44	; 0x2c
 800285a:	18fb      	adds	r3, r7, r3
 800285c:	881b      	ldrh	r3, [r3, #0]
 800285e:	2b00      	cmp	r3, #0
 8002860:	d105      	bne.n	800286e <HAL_I2C_Mem_Read+0x4e>
    {
      hi2c->ErrorCode = HAL_I2C_ERROR_INVALID_PARAM;
 8002862:	68fb      	ldr	r3, [r7, #12]
 8002864:	2280      	movs	r2, #128	; 0x80
 8002866:	0092      	lsls	r2, r2, #2
 8002868:	645a      	str	r2, [r3, #68]	; 0x44
      return  HAL_ERROR;
 800286a:	2301      	movs	r3, #1
 800286c:	e103      	b.n	8002a76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800286e:	68fb      	ldr	r3, [r7, #12]
 8002870:	2240      	movs	r2, #64	; 0x40
 8002872:	5c9b      	ldrb	r3, [r3, r2]
 8002874:	2b01      	cmp	r3, #1
 8002876:	d101      	bne.n	800287c <HAL_I2C_Mem_Read+0x5c>
 8002878:	2302      	movs	r3, #2
 800287a:	e0fc      	b.n	8002a76 <HAL_I2C_Mem_Read+0x256>
 800287c:	68fb      	ldr	r3, [r7, #12]
 800287e:	2240      	movs	r2, #64	; 0x40
 8002880:	2101      	movs	r1, #1
 8002882:	5499      	strb	r1, [r3, r2]

    /* Init tickstart for timeout management*/
    tickstart = HAL_GetTick();
 8002884:	f7fe ff26 	bl	80016d4 <HAL_GetTick>
 8002888:	0003      	movs	r3, r0
 800288a:	617b      	str	r3, [r7, #20]

    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY, tickstart) != HAL_OK)
 800288c:	2380      	movs	r3, #128	; 0x80
 800288e:	0219      	lsls	r1, r3, #8
 8002890:	68f8      	ldr	r0, [r7, #12]
 8002892:	697b      	ldr	r3, [r7, #20]
 8002894:	9300      	str	r3, [sp, #0]
 8002896:	2319      	movs	r3, #25
 8002898:	2201      	movs	r2, #1
 800289a:	f000 f979 	bl	8002b90 <I2C_WaitOnFlagUntilTimeout>
 800289e:	1e03      	subs	r3, r0, #0
 80028a0:	d001      	beq.n	80028a6 <HAL_I2C_Mem_Read+0x86>
    {
      return HAL_ERROR;
 80028a2:	2301      	movs	r3, #1
 80028a4:	e0e7      	b.n	8002a76 <HAL_I2C_Mem_Read+0x256>
    }

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 80028a6:	68fb      	ldr	r3, [r7, #12]
 80028a8:	2241      	movs	r2, #65	; 0x41
 80028aa:	2122      	movs	r1, #34	; 0x22
 80028ac:	5499      	strb	r1, [r3, r2]
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80028ae:	68fb      	ldr	r3, [r7, #12]
 80028b0:	2242      	movs	r2, #66	; 0x42
 80028b2:	2140      	movs	r1, #64	; 0x40
 80028b4:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	2200      	movs	r2, #0
 80028ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr  = pData;
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80028c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount = Size;
 80028c2:	68fb      	ldr	r3, [r7, #12]
 80028c4:	222c      	movs	r2, #44	; 0x2c
 80028c6:	18ba      	adds	r2, r7, r2
 80028c8:	8812      	ldrh	r2, [r2, #0]
 80028ca:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferISR   = NULL;
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	2200      	movs	r2, #0
 80028d0:	635a      	str	r2, [r3, #52]	; 0x34

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80028d2:	1dbb      	adds	r3, r7, #6
 80028d4:	881c      	ldrh	r4, [r3, #0]
 80028d6:	2308      	movs	r3, #8
 80028d8:	18fb      	adds	r3, r7, r3
 80028da:	881a      	ldrh	r2, [r3, #0]
 80028dc:	230a      	movs	r3, #10
 80028de:	18fb      	adds	r3, r7, r3
 80028e0:	8819      	ldrh	r1, [r3, #0]
 80028e2:	68f8      	ldr	r0, [r7, #12]
 80028e4:	697b      	ldr	r3, [r7, #20]
 80028e6:	9301      	str	r3, [sp, #4]
 80028e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80028ea:	9300      	str	r3, [sp, #0]
 80028ec:	0023      	movs	r3, r4
 80028ee:	f000 f8cb 	bl	8002a88 <I2C_RequestMemoryRead>
 80028f2:	1e03      	subs	r3, r0, #0
 80028f4:	d005      	beq.n	8002902 <HAL_I2C_Mem_Read+0xe2>
    {
      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2240      	movs	r2, #64	; 0x40
 80028fa:	2100      	movs	r1, #0
 80028fc:	5499      	strb	r1, [r3, r2]
      return HAL_ERROR;
 80028fe:	2301      	movs	r3, #1
 8002900:	e0b9      	b.n	8002a76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002906:	b29b      	uxth	r3, r3
 8002908:	2bff      	cmp	r3, #255	; 0xff
 800290a:	d911      	bls.n	8002930 <HAL_I2C_Mem_Read+0x110>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	22ff      	movs	r2, #255	; 0xff
 8002910:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE,
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002916:	b2da      	uxtb	r2, r3
 8002918:	2380      	movs	r3, #128	; 0x80
 800291a:	045c      	lsls	r4, r3, #17
 800291c:	230a      	movs	r3, #10
 800291e:	18fb      	adds	r3, r7, r3
 8002920:	8819      	ldrh	r1, [r3, #0]
 8002922:	68f8      	ldr	r0, [r7, #12]
 8002924:	4b56      	ldr	r3, [pc, #344]	; (8002a80 <HAL_I2C_Mem_Read+0x260>)
 8002926:	9300      	str	r3, [sp, #0]
 8002928:	0023      	movs	r3, r4
 800292a:	f000 fb13 	bl	8002f54 <I2C_TransferConfig>
 800292e:	e012      	b.n	8002956 <HAL_I2C_Mem_Read+0x136>
                         I2C_GENERATE_START_READ);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002934:	b29a      	uxth	r2, r3
 8002936:	68fb      	ldr	r3, [r7, #12]
 8002938:	851a      	strh	r2, [r3, #40]	; 0x28
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800293e:	b2da      	uxtb	r2, r3
 8002940:	2380      	movs	r3, #128	; 0x80
 8002942:	049c      	lsls	r4, r3, #18
 8002944:	230a      	movs	r3, #10
 8002946:	18fb      	adds	r3, r7, r3
 8002948:	8819      	ldrh	r1, [r3, #0]
 800294a:	68f8      	ldr	r0, [r7, #12]
 800294c:	4b4c      	ldr	r3, [pc, #304]	; (8002a80 <HAL_I2C_Mem_Read+0x260>)
 800294e:	9300      	str	r3, [sp, #0]
 8002950:	0023      	movs	r3, r4
 8002952:	f000 faff 	bl	8002f54 <I2C_TransferConfig>
    }

    do
    {
      /* Wait until RXNE flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_RXNE, RESET, Timeout, tickstart) != HAL_OK)
 8002956:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002958:	68f8      	ldr	r0, [r7, #12]
 800295a:	697b      	ldr	r3, [r7, #20]
 800295c:	9300      	str	r3, [sp, #0]
 800295e:	0013      	movs	r3, r2
 8002960:	2200      	movs	r2, #0
 8002962:	2104      	movs	r1, #4
 8002964:	f000 f914 	bl	8002b90 <I2C_WaitOnFlagUntilTimeout>
 8002968:	1e03      	subs	r3, r0, #0
 800296a:	d001      	beq.n	8002970 <HAL_I2C_Mem_Read+0x150>
      {
        return HAL_ERROR;
 800296c:	2301      	movs	r3, #1
 800296e:	e082      	b.n	8002a76 <HAL_I2C_Mem_Read+0x256>
      }

      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8002970:	68fb      	ldr	r3, [r7, #12]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800297a:	b2d2      	uxtb	r2, r2
 800297c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800297e:	68fb      	ldr	r3, [r7, #12]
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	1c5a      	adds	r2, r3, #1
 8002984:	68fb      	ldr	r3, [r7, #12]
 8002986:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8002988:	68fb      	ldr	r3, [r7, #12]
 800298a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800298c:	3b01      	subs	r3, #1
 800298e:	b29a      	uxth	r2, r3
 8002990:	68fb      	ldr	r3, [r7, #12]
 8002992:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8002994:	68fb      	ldr	r3, [r7, #12]
 8002996:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002998:	b29b      	uxth	r3, r3
 800299a:	3b01      	subs	r3, #1
 800299c:	b29a      	uxth	r2, r3
 800299e:	68fb      	ldr	r3, [r7, #12]
 80029a0:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029a6:	b29b      	uxth	r3, r3
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	d03a      	beq.n	8002a22 <HAL_I2C_Mem_Read+0x202>
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d136      	bne.n	8002a22 <HAL_I2C_Mem_Read+0x202>
      {
        /* Wait until TCR flag is set */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TCR, RESET, Timeout, tickstart) != HAL_OK)
 80029b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80029b6:	68f8      	ldr	r0, [r7, #12]
 80029b8:	697b      	ldr	r3, [r7, #20]
 80029ba:	9300      	str	r3, [sp, #0]
 80029bc:	0013      	movs	r3, r2
 80029be:	2200      	movs	r2, #0
 80029c0:	2180      	movs	r1, #128	; 0x80
 80029c2:	f000 f8e5 	bl	8002b90 <I2C_WaitOnFlagUntilTimeout>
 80029c6:	1e03      	subs	r3, r0, #0
 80029c8:	d001      	beq.n	80029ce <HAL_I2C_Mem_Read+0x1ae>
        {
          return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e053      	b.n	8002a76 <HAL_I2C_Mem_Read+0x256>
        }

        if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80029ce:	68fb      	ldr	r3, [r7, #12]
 80029d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80029d2:	b29b      	uxth	r3, r3
 80029d4:	2bff      	cmp	r3, #255	; 0xff
 80029d6:	d911      	bls.n	80029fc <HAL_I2C_Mem_Read+0x1dc>
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	22ff      	movs	r2, #255	; 0xff
 80029dc:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t) hi2c->XferSize, I2C_RELOAD_MODE,
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80029e2:	b2da      	uxtb	r2, r3
 80029e4:	2380      	movs	r3, #128	; 0x80
 80029e6:	045c      	lsls	r4, r3, #17
 80029e8:	230a      	movs	r3, #10
 80029ea:	18fb      	adds	r3, r7, r3
 80029ec:	8819      	ldrh	r1, [r3, #0]
 80029ee:	68f8      	ldr	r0, [r7, #12]
 80029f0:	2300      	movs	r3, #0
 80029f2:	9300      	str	r3, [sp, #0]
 80029f4:	0023      	movs	r3, r4
 80029f6:	f000 faad 	bl	8002f54 <I2C_TransferConfig>
 80029fa:	e012      	b.n	8002a22 <HAL_I2C_Mem_Read+0x202>
                             I2C_NO_STARTSTOP);
        }
        else
        {
          hi2c->XferSize = hi2c->XferCount;
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a00:	b29a      	uxth	r2, r3
 8002a02:	68fb      	ldr	r3, [r7, #12]
 8002a04:	851a      	strh	r2, [r3, #40]	; 0x28
          I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002a0a:	b2da      	uxtb	r2, r3
 8002a0c:	2380      	movs	r3, #128	; 0x80
 8002a0e:	049c      	lsls	r4, r3, #18
 8002a10:	230a      	movs	r3, #10
 8002a12:	18fb      	adds	r3, r7, r3
 8002a14:	8819      	ldrh	r1, [r3, #0]
 8002a16:	68f8      	ldr	r0, [r7, #12]
 8002a18:	2300      	movs	r3, #0
 8002a1a:	9300      	str	r3, [sp, #0]
 8002a1c:	0023      	movs	r3, r4
 8002a1e:	f000 fa99 	bl	8002f54 <I2C_TransferConfig>
                             I2C_NO_STARTSTOP);
        }
      }
    } while (hi2c->XferCount > 0U);
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002a26:	b29b      	uxth	r3, r3
 8002a28:	2b00      	cmp	r3, #0
 8002a2a:	d194      	bne.n	8002956 <HAL_I2C_Mem_Read+0x136>

    /* No need to Check TC flag, with AUTOEND mode the stop is automatically generated */
    /* Wait until STOPF flag is reset */
    if (I2C_WaitOnSTOPFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002a2c:	697a      	ldr	r2, [r7, #20]
 8002a2e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	0018      	movs	r0, r3
 8002a34:	f000 f94a 	bl	8002ccc <I2C_WaitOnSTOPFlagUntilTimeout>
 8002a38:	1e03      	subs	r3, r0, #0
 8002a3a:	d001      	beq.n	8002a40 <HAL_I2C_Mem_Read+0x220>
    {
      return HAL_ERROR;
 8002a3c:	2301      	movs	r3, #1
 8002a3e:	e01a      	b.n	8002a76 <HAL_I2C_Mem_Read+0x256>
    }

    /* Clear STOP Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	2220      	movs	r2, #32
 8002a46:	61da      	str	r2, [r3, #28]

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	685a      	ldr	r2, [r3, #4]
 8002a4e:	68fb      	ldr	r3, [r7, #12]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	490c      	ldr	r1, [pc, #48]	; (8002a84 <HAL_I2C_Mem_Read+0x264>)
 8002a54:	400a      	ands	r2, r1
 8002a56:	605a      	str	r2, [r3, #4]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	2241      	movs	r2, #65	; 0x41
 8002a5c:	2120      	movs	r1, #32
 8002a5e:	5499      	strb	r1, [r3, r2]
    hi2c->Mode  = HAL_I2C_MODE_NONE;
 8002a60:	68fb      	ldr	r3, [r7, #12]
 8002a62:	2242      	movs	r2, #66	; 0x42
 8002a64:	2100      	movs	r1, #0
 8002a66:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	2240      	movs	r2, #64	; 0x40
 8002a6c:	2100      	movs	r1, #0
 8002a6e:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 8002a70:	2300      	movs	r3, #0
 8002a72:	e000      	b.n	8002a76 <HAL_I2C_Mem_Read+0x256>
  }
  else
  {
    return HAL_BUSY;
 8002a74:	2302      	movs	r3, #2
  }
}
 8002a76:	0018      	movs	r0, r3
 8002a78:	46bd      	mov	sp, r7
 8002a7a:	b007      	add	sp, #28
 8002a7c:	bd90      	pop	{r4, r7, pc}
 8002a7e:	46c0      	nop			; (mov r8, r8)
 8002a80:	80002400 	.word	0x80002400
 8002a84:	fe00e800 	.word	0xfe00e800

08002a88 <I2C_RequestMemoryRead>:
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress,
                                               uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout,
                                               uint32_t Tickstart)
{
 8002a88:	b5b0      	push	{r4, r5, r7, lr}
 8002a8a:	b086      	sub	sp, #24
 8002a8c:	af02      	add	r7, sp, #8
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	000c      	movs	r4, r1
 8002a92:	0010      	movs	r0, r2
 8002a94:	0019      	movs	r1, r3
 8002a96:	250a      	movs	r5, #10
 8002a98:	197b      	adds	r3, r7, r5
 8002a9a:	1c22      	adds	r2, r4, #0
 8002a9c:	801a      	strh	r2, [r3, #0]
 8002a9e:	2308      	movs	r3, #8
 8002aa0:	18fb      	adds	r3, r7, r3
 8002aa2:	1c02      	adds	r2, r0, #0
 8002aa4:	801a      	strh	r2, [r3, #0]
 8002aa6:	1dbb      	adds	r3, r7, #6
 8002aa8:	1c0a      	adds	r2, r1, #0
 8002aaa:	801a      	strh	r2, [r3, #0]
  I2C_TransferConfig(hi2c, DevAddress, (uint8_t)MemAddSize, I2C_SOFTEND_MODE, I2C_GENERATE_START_WRITE);
 8002aac:	1dbb      	adds	r3, r7, #6
 8002aae:	881b      	ldrh	r3, [r3, #0]
 8002ab0:	b2da      	uxtb	r2, r3
 8002ab2:	197b      	adds	r3, r7, r5
 8002ab4:	8819      	ldrh	r1, [r3, #0]
 8002ab6:	68f8      	ldr	r0, [r7, #12]
 8002ab8:	4b23      	ldr	r3, [pc, #140]	; (8002b48 <I2C_RequestMemoryRead+0xc0>)
 8002aba:	9300      	str	r3, [sp, #0]
 8002abc:	2300      	movs	r3, #0
 8002abe:	f000 fa49 	bl	8002f54 <I2C_TransferConfig>

  /* Wait until TXIS flag is set */
  if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ac2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002ac4:	6a39      	ldr	r1, [r7, #32]
 8002ac6:	68fb      	ldr	r3, [r7, #12]
 8002ac8:	0018      	movs	r0, r3
 8002aca:	f000 f8b9 	bl	8002c40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002ace:	1e03      	subs	r3, r0, #0
 8002ad0:	d001      	beq.n	8002ad6 <I2C_RequestMemoryRead+0x4e>
  {
    return HAL_ERROR;
 8002ad2:	2301      	movs	r3, #1
 8002ad4:	e033      	b.n	8002b3e <I2C_RequestMemoryRead+0xb6>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8002ad6:	1dbb      	adds	r3, r7, #6
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	d107      	bne.n	8002aee <I2C_RequestMemoryRead+0x66>
  {
    /* Send Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002ade:	2308      	movs	r3, #8
 8002ae0:	18fb      	adds	r3, r7, r3
 8002ae2:	881b      	ldrh	r3, [r3, #0]
 8002ae4:	b2da      	uxtb	r2, r3
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	629a      	str	r2, [r3, #40]	; 0x28
 8002aec:	e019      	b.n	8002b22 <I2C_RequestMemoryRead+0x9a>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_MSB(MemAddress);
 8002aee:	2308      	movs	r3, #8
 8002af0:	18fb      	adds	r3, r7, r3
 8002af2:	881b      	ldrh	r3, [r3, #0]
 8002af4:	0a1b      	lsrs	r3, r3, #8
 8002af6:	b29b      	uxth	r3, r3
 8002af8:	b2da      	uxtb	r2, r3
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	629a      	str	r2, [r3, #40]	; 0x28

    /* Wait until TXIS flag is set */
    if (I2C_WaitOnTXISFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8002b00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002b02:	6a39      	ldr	r1, [r7, #32]
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	0018      	movs	r0, r3
 8002b08:	f000 f89a 	bl	8002c40 <I2C_WaitOnTXISFlagUntilTimeout>
 8002b0c:	1e03      	subs	r3, r0, #0
 8002b0e:	d001      	beq.n	8002b14 <I2C_RequestMemoryRead+0x8c>
    {
      return HAL_ERROR;
 8002b10:	2301      	movs	r3, #1
 8002b12:	e014      	b.n	8002b3e <I2C_RequestMemoryRead+0xb6>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->TXDR = I2C_MEM_ADD_LSB(MemAddress);
 8002b14:	2308      	movs	r3, #8
 8002b16:	18fb      	adds	r3, r7, r3
 8002b18:	881b      	ldrh	r3, [r3, #0]
 8002b1a:	b2da      	uxtb	r2, r3
 8002b1c:	68fb      	ldr	r3, [r7, #12]
 8002b1e:	681b      	ldr	r3, [r3, #0]
 8002b20:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Wait until TC flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_TC, RESET, Timeout, Tickstart) != HAL_OK)
 8002b22:	6a3a      	ldr	r2, [r7, #32]
 8002b24:	68f8      	ldr	r0, [r7, #12]
 8002b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b28:	9300      	str	r3, [sp, #0]
 8002b2a:	0013      	movs	r3, r2
 8002b2c:	2200      	movs	r2, #0
 8002b2e:	2140      	movs	r1, #64	; 0x40
 8002b30:	f000 f82e 	bl	8002b90 <I2C_WaitOnFlagUntilTimeout>
 8002b34:	1e03      	subs	r3, r0, #0
 8002b36:	d001      	beq.n	8002b3c <I2C_RequestMemoryRead+0xb4>
  {
    return HAL_ERROR;
 8002b38:	2301      	movs	r3, #1
 8002b3a:	e000      	b.n	8002b3e <I2C_RequestMemoryRead+0xb6>
  }

  return HAL_OK;
 8002b3c:	2300      	movs	r3, #0
}
 8002b3e:	0018      	movs	r0, r3
 8002b40:	46bd      	mov	sp, r7
 8002b42:	b004      	add	sp, #16
 8002b44:	bdb0      	pop	{r4, r5, r7, pc}
 8002b46:	46c0      	nop			; (mov r8, r8)
 8002b48:	80002000 	.word	0x80002000

08002b4c <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8002b4c:	b580      	push	{r7, lr}
 8002b4e:	b082      	sub	sp, #8
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	681b      	ldr	r3, [r3, #0]
 8002b58:	699b      	ldr	r3, [r3, #24]
 8002b5a:	2202      	movs	r2, #2
 8002b5c:	4013      	ands	r3, r2
 8002b5e:	2b02      	cmp	r3, #2
 8002b60:	d103      	bne.n	8002b6a <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2200      	movs	r2, #0
 8002b68:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2201      	movs	r2, #1
 8002b72:	4013      	ands	r3, r2
 8002b74:	2b01      	cmp	r3, #1
 8002b76:	d007      	beq.n	8002b88 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	699a      	ldr	r2, [r3, #24]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2101      	movs	r1, #1
 8002b84:	430a      	orrs	r2, r1
 8002b86:	619a      	str	r2, [r3, #24]
  }
}
 8002b88:	46c0      	nop			; (mov r8, r8)
 8002b8a:	46bd      	mov	sp, r7
 8002b8c:	b002      	add	sp, #8
 8002b8e:	bd80      	pop	{r7, pc}

08002b90 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status,
                                                    uint32_t Timeout, uint32_t Tickstart)
{
 8002b90:	b580      	push	{r7, lr}
 8002b92:	b084      	sub	sp, #16
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	60f8      	str	r0, [r7, #12]
 8002b98:	60b9      	str	r1, [r7, #8]
 8002b9a:	603b      	str	r3, [r7, #0]
 8002b9c:	1dfb      	adds	r3, r7, #7
 8002b9e:	701a      	strb	r2, [r3, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002ba0:	e03a      	b.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0x88>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002ba2:	69ba      	ldr	r2, [r7, #24]
 8002ba4:	6839      	ldr	r1, [r7, #0]
 8002ba6:	68fb      	ldr	r3, [r7, #12]
 8002ba8:	0018      	movs	r0, r3
 8002baa:	f000 f8d3 	bl	8002d54 <I2C_IsErrorOccurred>
 8002bae:	1e03      	subs	r3, r0, #0
 8002bb0:	d001      	beq.n	8002bb6 <I2C_WaitOnFlagUntilTimeout+0x26>
    {
      return HAL_ERROR;
 8002bb2:	2301      	movs	r3, #1
 8002bb4:	e040      	b.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xa8>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002bb6:	683b      	ldr	r3, [r7, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	d02d      	beq.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0x88>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bbc:	f7fe fd8a 	bl	80016d4 <HAL_GetTick>
 8002bc0:	0002      	movs	r2, r0
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	1ad3      	subs	r3, r2, r3
 8002bc6:	683a      	ldr	r2, [r7, #0]
 8002bc8:	429a      	cmp	r2, r3
 8002bca:	d302      	bcc.n	8002bd2 <I2C_WaitOnFlagUntilTimeout+0x42>
 8002bcc:	683b      	ldr	r3, [r7, #0]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	d122      	bne.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0x88>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002bd2:	68fb      	ldr	r3, [r7, #12]
 8002bd4:	681b      	ldr	r3, [r3, #0]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	68ba      	ldr	r2, [r7, #8]
 8002bda:	4013      	ands	r3, r2
 8002bdc:	68ba      	ldr	r2, [r7, #8]
 8002bde:	1ad3      	subs	r3, r2, r3
 8002be0:	425a      	negs	r2, r3
 8002be2:	4153      	adcs	r3, r2
 8002be4:	b2db      	uxtb	r3, r3
 8002be6:	001a      	movs	r2, r3
 8002be8:	1dfb      	adds	r3, r7, #7
 8002bea:	781b      	ldrb	r3, [r3, #0]
 8002bec:	429a      	cmp	r2, r3
 8002bee:	d113      	bne.n	8002c18 <I2C_WaitOnFlagUntilTimeout+0x88>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002bf0:	68fb      	ldr	r3, [r7, #12]
 8002bf2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bf4:	2220      	movs	r2, #32
 8002bf6:	431a      	orrs	r2, r3
 8002bf8:	68fb      	ldr	r3, [r7, #12]
 8002bfa:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	2241      	movs	r2, #65	; 0x41
 8002c00:	2120      	movs	r1, #32
 8002c02:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	2242      	movs	r2, #66	; 0x42
 8002c08:	2100      	movs	r1, #0
 8002c0a:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002c0c:	68fb      	ldr	r3, [r7, #12]
 8002c0e:	2240      	movs	r2, #64	; 0x40
 8002c10:	2100      	movs	r1, #0
 8002c12:	5499      	strb	r1, [r3, r2]
          return HAL_ERROR;
 8002c14:	2301      	movs	r3, #1
 8002c16:	e00f      	b.n	8002c38 <I2C_WaitOnFlagUntilTimeout+0xa8>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002c18:	68fb      	ldr	r3, [r7, #12]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	699b      	ldr	r3, [r3, #24]
 8002c1e:	68ba      	ldr	r2, [r7, #8]
 8002c20:	4013      	ands	r3, r2
 8002c22:	68ba      	ldr	r2, [r7, #8]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	425a      	negs	r2, r3
 8002c28:	4153      	adcs	r3, r2
 8002c2a:	b2db      	uxtb	r3, r3
 8002c2c:	001a      	movs	r2, r3
 8002c2e:	1dfb      	adds	r3, r7, #7
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	429a      	cmp	r2, r3
 8002c34:	d0b5      	beq.n	8002ba2 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	0018      	movs	r0, r3
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	b004      	add	sp, #16
 8002c3e:	bd80      	pop	{r7, pc}

08002c40 <I2C_WaitOnTXISFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXISFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	b084      	sub	sp, #16
 8002c44:	af00      	add	r7, sp, #0
 8002c46:	60f8      	str	r0, [r7, #12]
 8002c48:	60b9      	str	r1, [r7, #8]
 8002c4a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002c4c:	e032      	b.n	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	68b9      	ldr	r1, [r7, #8]
 8002c52:	68fb      	ldr	r3, [r7, #12]
 8002c54:	0018      	movs	r0, r3
 8002c56:	f000 f87d 	bl	8002d54 <I2C_IsErrorOccurred>
 8002c5a:	1e03      	subs	r3, r0, #0
 8002c5c:	d001      	beq.n	8002c62 <I2C_WaitOnTXISFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002c5e:	2301      	movs	r3, #1
 8002c60:	e030      	b.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c62:	68bb      	ldr	r3, [r7, #8]
 8002c64:	3301      	adds	r3, #1
 8002c66:	d025      	beq.n	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c68:	f7fe fd34 	bl	80016d4 <HAL_GetTick>
 8002c6c:	0002      	movs	r2, r0
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	1ad3      	subs	r3, r2, r3
 8002c72:	68ba      	ldr	r2, [r7, #8]
 8002c74:	429a      	cmp	r2, r3
 8002c76:	d302      	bcc.n	8002c7e <I2C_WaitOnTXISFlagUntilTimeout+0x3e>
 8002c78:	68bb      	ldr	r3, [r7, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d11a      	bne.n	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET))
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	699b      	ldr	r3, [r3, #24]
 8002c84:	2202      	movs	r2, #2
 8002c86:	4013      	ands	r3, r2
 8002c88:	2b02      	cmp	r3, #2
 8002c8a:	d013      	beq.n	8002cb4 <I2C_WaitOnTXISFlagUntilTimeout+0x74>
        {
          hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002c8c:	68fb      	ldr	r3, [r7, #12]
 8002c8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c90:	2220      	movs	r2, #32
 8002c92:	431a      	orrs	r2, r3
 8002c94:	68fb      	ldr	r3, [r7, #12]
 8002c96:	645a      	str	r2, [r3, #68]	; 0x44
          hi2c->State = HAL_I2C_STATE_READY;
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2241      	movs	r2, #65	; 0x41
 8002c9c:	2120      	movs	r1, #32
 8002c9e:	5499      	strb	r1, [r3, r2]
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	2242      	movs	r2, #66	; 0x42
 8002ca4:	2100      	movs	r1, #0
 8002ca6:	5499      	strb	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ca8:	68fb      	ldr	r3, [r7, #12]
 8002caa:	2240      	movs	r2, #64	; 0x40
 8002cac:	2100      	movs	r1, #0
 8002cae:	5499      	strb	r1, [r3, r2]

          return HAL_ERROR;
 8002cb0:	2301      	movs	r3, #1
 8002cb2:	e007      	b.n	8002cc4 <I2C_WaitOnTXISFlagUntilTimeout+0x84>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) == RESET)
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	699b      	ldr	r3, [r3, #24]
 8002cba:	2202      	movs	r2, #2
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	2b02      	cmp	r3, #2
 8002cc0:	d1c5      	bne.n	8002c4e <I2C_WaitOnTXISFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8002cc2:	2300      	movs	r3, #0
}
 8002cc4:	0018      	movs	r0, r3
 8002cc6:	46bd      	mov	sp, r7
 8002cc8:	b004      	add	sp, #16
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <I2C_WaitOnSTOPFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout,
                                                        uint32_t Tickstart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b084      	sub	sp, #16
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	60f8      	str	r0, [r7, #12]
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002cd8:	e02f      	b.n	8002d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
  {
    /* Check if an error is detected */
    if (I2C_IsErrorOccurred(hi2c, Timeout, Tickstart) != HAL_OK)
 8002cda:	687a      	ldr	r2, [r7, #4]
 8002cdc:	68b9      	ldr	r1, [r7, #8]
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	0018      	movs	r0, r3
 8002ce2:	f000 f837 	bl	8002d54 <I2C_IsErrorOccurred>
 8002ce6:	1e03      	subs	r3, r0, #0
 8002ce8:	d001      	beq.n	8002cee <I2C_WaitOnSTOPFlagUntilTimeout+0x22>
    {
      return HAL_ERROR;
 8002cea:	2301      	movs	r3, #1
 8002cec:	e02d      	b.n	8002d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002cee:	f7fe fcf1 	bl	80016d4 <HAL_GetTick>
 8002cf2:	0002      	movs	r2, r0
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	1ad3      	subs	r3, r2, r3
 8002cf8:	68ba      	ldr	r2, [r7, #8]
 8002cfa:	429a      	cmp	r2, r3
 8002cfc:	d302      	bcc.n	8002d04 <I2C_WaitOnSTOPFlagUntilTimeout+0x38>
 8002cfe:	68bb      	ldr	r3, [r7, #8]
 8002d00:	2b00      	cmp	r3, #0
 8002d02:	d11a      	bne.n	8002d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET))
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	699b      	ldr	r3, [r3, #24]
 8002d0a:	2220      	movs	r2, #32
 8002d0c:	4013      	ands	r3, r2
 8002d0e:	2b20      	cmp	r3, #32
 8002d10:	d013      	beq.n	8002d3a <I2C_WaitOnSTOPFlagUntilTimeout+0x6e>
      {
        hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d16:	2220      	movs	r2, #32
 8002d18:	431a      	orrs	r2, r3
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	645a      	str	r2, [r3, #68]	; 0x44
        hi2c->State = HAL_I2C_STATE_READY;
 8002d1e:	68fb      	ldr	r3, [r7, #12]
 8002d20:	2241      	movs	r2, #65	; 0x41
 8002d22:	2120      	movs	r1, #32
 8002d24:	5499      	strb	r1, [r3, r2]
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d26:	68fb      	ldr	r3, [r7, #12]
 8002d28:	2242      	movs	r2, #66	; 0x42
 8002d2a:	2100      	movs	r1, #0
 8002d2c:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002d2e:	68fb      	ldr	r3, [r7, #12]
 8002d30:	2240      	movs	r2, #64	; 0x40
 8002d32:	2100      	movs	r1, #0
 8002d34:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 8002d36:	2301      	movs	r3, #1
 8002d38:	e007      	b.n	8002d4a <I2C_WaitOnSTOPFlagUntilTimeout+0x7e>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002d3a:	68fb      	ldr	r3, [r7, #12]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	699b      	ldr	r3, [r3, #24]
 8002d40:	2220      	movs	r2, #32
 8002d42:	4013      	ands	r3, r2
 8002d44:	2b20      	cmp	r3, #32
 8002d46:	d1c8      	bne.n	8002cda <I2C_WaitOnSTOPFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002d48:	2300      	movs	r3, #0
}
 8002d4a:	0018      	movs	r0, r3
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	b004      	add	sp, #16
 8002d50:	bd80      	pop	{r7, pc}
	...

08002d54 <I2C_IsErrorOccurred>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsErrorOccurred(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002d54:	b590      	push	{r4, r7, lr}
 8002d56:	b08b      	sub	sp, #44	; 0x2c
 8002d58:	af00      	add	r7, sp, #0
 8002d5a:	60f8      	str	r0, [r7, #12]
 8002d5c:	60b9      	str	r1, [r7, #8]
 8002d5e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d60:	2327      	movs	r3, #39	; 0x27
 8002d62:	18fb      	adds	r3, r7, r3
 8002d64:	2200      	movs	r2, #0
 8002d66:	701a      	strb	r2, [r3, #0]
  uint32_t itflag   = hi2c->Instance->ISR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	699b      	ldr	r3, [r3, #24]
 8002d6e:	61bb      	str	r3, [r7, #24]
  uint32_t error_code = 0;
 8002d70:	2300      	movs	r3, #0
 8002d72:	623b      	str	r3, [r7, #32]
  uint32_t tickstart = Tickstart;
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	61fb      	str	r3, [r7, #28]
  uint32_t tmp1;
  HAL_I2C_ModeTypeDef tmp2;

  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_AF))
 8002d78:	69bb      	ldr	r3, [r7, #24]
 8002d7a:	2210      	movs	r2, #16
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	d100      	bne.n	8002d82 <I2C_IsErrorOccurred+0x2e>
 8002d80:	e082      	b.n	8002e88 <I2C_IsErrorOccurred+0x134>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002d82:	68fb      	ldr	r3, [r7, #12]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	2210      	movs	r2, #16
 8002d88:	61da      	str	r2, [r3, #28]

    /* Wait until STOP Flag is set or timeout occurred */
    /* AutoEnd should be initiate after AF */
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002d8a:	e060      	b.n	8002e4e <I2C_IsErrorOccurred+0xfa>
 8002d8c:	2427      	movs	r4, #39	; 0x27
 8002d8e:	193b      	adds	r3, r7, r4
 8002d90:	193a      	adds	r2, r7, r4
 8002d92:	7812      	ldrb	r2, [r2, #0]
 8002d94:	701a      	strb	r2, [r3, #0]
    {
      /* Check for the Timeout */
      if (Timeout != HAL_MAX_DELAY)
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	3301      	adds	r3, #1
 8002d9a:	d058      	beq.n	8002e4e <I2C_IsErrorOccurred+0xfa>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8002d9c:	f7fe fc9a 	bl	80016d4 <HAL_GetTick>
 8002da0:	0002      	movs	r2, r0
 8002da2:	69fb      	ldr	r3, [r7, #28]
 8002da4:	1ad3      	subs	r3, r2, r3
 8002da6:	68ba      	ldr	r2, [r7, #8]
 8002da8:	429a      	cmp	r2, r3
 8002daa:	d306      	bcc.n	8002dba <I2C_IsErrorOccurred+0x66>
 8002dac:	193b      	adds	r3, r7, r4
 8002dae:	193a      	adds	r2, r7, r4
 8002db0:	7812      	ldrb	r2, [r2, #0]
 8002db2:	701a      	strb	r2, [r3, #0]
 8002db4:	68bb      	ldr	r3, [r7, #8]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d149      	bne.n	8002e4e <I2C_IsErrorOccurred+0xfa>
        {
          tmp1 = (uint32_t)(hi2c->Instance->CR2 & I2C_CR2_STOP);
 8002dba:	68fb      	ldr	r3, [r7, #12]
 8002dbc:	681b      	ldr	r3, [r3, #0]
 8002dbe:	685a      	ldr	r2, [r3, #4]
 8002dc0:	2380      	movs	r3, #128	; 0x80
 8002dc2:	01db      	lsls	r3, r3, #7
 8002dc4:	4013      	ands	r3, r2
 8002dc6:	617b      	str	r3, [r7, #20]
          tmp2 = hi2c->Mode;
 8002dc8:	2013      	movs	r0, #19
 8002dca:	183b      	adds	r3, r7, r0
 8002dcc:	68fa      	ldr	r2, [r7, #12]
 8002dce:	2142      	movs	r1, #66	; 0x42
 8002dd0:	5c52      	ldrb	r2, [r2, r1]
 8002dd2:	701a      	strb	r2, [r3, #0]

          /* In case of I2C still busy, try to regenerate a STOP manually */
          if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET) && \
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	699a      	ldr	r2, [r3, #24]
 8002dda:	2380      	movs	r3, #128	; 0x80
 8002ddc:	021b      	lsls	r3, r3, #8
 8002dde:	401a      	ands	r2, r3
 8002de0:	2380      	movs	r3, #128	; 0x80
 8002de2:	021b      	lsls	r3, r3, #8
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d126      	bne.n	8002e36 <I2C_IsErrorOccurred+0xe2>
 8002de8:	697a      	ldr	r2, [r7, #20]
 8002dea:	2380      	movs	r3, #128	; 0x80
 8002dec:	01db      	lsls	r3, r3, #7
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d021      	beq.n	8002e36 <I2C_IsErrorOccurred+0xe2>
              (tmp1 != I2C_CR2_STOP) && \
 8002df2:	183b      	adds	r3, r7, r0
 8002df4:	781b      	ldrb	r3, [r3, #0]
 8002df6:	2b20      	cmp	r3, #32
 8002df8:	d01d      	beq.n	8002e36 <I2C_IsErrorOccurred+0xe2>
              (tmp2 != HAL_I2C_MODE_SLAVE))
          {
            /* Generate Stop */
            hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8002dfa:	68fb      	ldr	r3, [r7, #12]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	685a      	ldr	r2, [r3, #4]
 8002e00:	68fb      	ldr	r3, [r7, #12]
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	2180      	movs	r1, #128	; 0x80
 8002e06:	01c9      	lsls	r1, r1, #7
 8002e08:	430a      	orrs	r2, r1
 8002e0a:	605a      	str	r2, [r3, #4]

            /* Update Tick with new reference */
            tickstart = HAL_GetTick();
 8002e0c:	f7fe fc62 	bl	80016d4 <HAL_GetTick>
 8002e10:	0003      	movs	r3, r0
 8002e12:	61fb      	str	r3, [r7, #28]
          }

          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e14:	e00f      	b.n	8002e36 <I2C_IsErrorOccurred+0xe2>
          {
            /* Check for the Timeout */
            if ((HAL_GetTick() - tickstart) > I2C_TIMEOUT_STOPF)
 8002e16:	f7fe fc5d 	bl	80016d4 <HAL_GetTick>
 8002e1a:	0002      	movs	r2, r0
 8002e1c:	69fb      	ldr	r3, [r7, #28]
 8002e1e:	1ad3      	subs	r3, r2, r3
 8002e20:	2b19      	cmp	r3, #25
 8002e22:	d908      	bls.n	8002e36 <I2C_IsErrorOccurred+0xe2>
            {
              error_code |= HAL_I2C_ERROR_TIMEOUT;
 8002e24:	6a3b      	ldr	r3, [r7, #32]
 8002e26:	2220      	movs	r2, #32
 8002e28:	4313      	orrs	r3, r2
 8002e2a:	623b      	str	r3, [r7, #32]

              status = HAL_ERROR;
 8002e2c:	2327      	movs	r3, #39	; 0x27
 8002e2e:	18fb      	adds	r3, r7, r3
 8002e30:	2201      	movs	r2, #1
 8002e32:	701a      	strb	r2, [r3, #0]

              break;
 8002e34:	e00b      	b.n	8002e4e <I2C_IsErrorOccurred+0xfa>
          while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET)
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	699b      	ldr	r3, [r3, #24]
 8002e3c:	2220      	movs	r2, #32
 8002e3e:	4013      	ands	r3, r2
 8002e40:	2127      	movs	r1, #39	; 0x27
 8002e42:	187a      	adds	r2, r7, r1
 8002e44:	1879      	adds	r1, r7, r1
 8002e46:	7809      	ldrb	r1, [r1, #0]
 8002e48:	7011      	strb	r1, [r2, #0]
 8002e4a:	2b20      	cmp	r3, #32
 8002e4c:	d1e3      	bne.n	8002e16 <I2C_IsErrorOccurred+0xc2>
    while ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == RESET) && (status == HAL_OK))
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	681b      	ldr	r3, [r3, #0]
 8002e52:	699b      	ldr	r3, [r3, #24]
 8002e54:	2220      	movs	r2, #32
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b20      	cmp	r3, #32
 8002e5a:	d004      	beq.n	8002e66 <I2C_IsErrorOccurred+0x112>
 8002e5c:	2327      	movs	r3, #39	; 0x27
 8002e5e:	18fb      	adds	r3, r7, r3
 8002e60:	781b      	ldrb	r3, [r3, #0]
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d092      	beq.n	8002d8c <I2C_IsErrorOccurred+0x38>
        }
      }
    }

    /* In case STOP Flag is detected, clear it */
    if (status == HAL_OK)
 8002e66:	2327      	movs	r3, #39	; 0x27
 8002e68:	18fb      	adds	r3, r7, r3
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d103      	bne.n	8002e78 <I2C_IsErrorOccurred+0x124>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8002e70:	68fb      	ldr	r3, [r7, #12]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	2220      	movs	r2, #32
 8002e76:	61da      	str	r2, [r3, #28]
    }

    error_code |= HAL_I2C_ERROR_AF;
 8002e78:	6a3b      	ldr	r3, [r7, #32]
 8002e7a:	2204      	movs	r2, #4
 8002e7c:	4313      	orrs	r3, r2
 8002e7e:	623b      	str	r3, [r7, #32]

    status = HAL_ERROR;
 8002e80:	2327      	movs	r3, #39	; 0x27
 8002e82:	18fb      	adds	r3, r7, r3
 8002e84:	2201      	movs	r2, #1
 8002e86:	701a      	strb	r2, [r3, #0]
  }

  /* Refresh Content of Status register */
  itflag = hi2c->Instance->ISR;
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	699b      	ldr	r3, [r3, #24]
 8002e8e:	61bb      	str	r3, [r7, #24]

  /* Then verify if an additional errors occurs */
  /* Check if a Bus error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_BERR))
 8002e90:	69ba      	ldr	r2, [r7, #24]
 8002e92:	2380      	movs	r3, #128	; 0x80
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	4013      	ands	r3, r2
 8002e98:	d00c      	beq.n	8002eb4 <I2C_IsErrorOccurred+0x160>
  {
    error_code |= HAL_I2C_ERROR_BERR;
 8002e9a:	6a3b      	ldr	r3, [r7, #32]
 8002e9c:	2201      	movs	r2, #1
 8002e9e:	4313      	orrs	r3, r2
 8002ea0:	623b      	str	r3, [r7, #32]

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	2280      	movs	r2, #128	; 0x80
 8002ea8:	0052      	lsls	r2, r2, #1
 8002eaa:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002eac:	2327      	movs	r3, #39	; 0x27
 8002eae:	18fb      	adds	r3, r7, r3
 8002eb0:	2201      	movs	r2, #1
 8002eb2:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Over-Run/Under-Run error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_OVR))
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	00db      	lsls	r3, r3, #3
 8002eba:	4013      	ands	r3, r2
 8002ebc:	d00c      	beq.n	8002ed8 <I2C_IsErrorOccurred+0x184>
  {
    error_code |= HAL_I2C_ERROR_OVR;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
 8002ec0:	2208      	movs	r2, #8
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	623b      	str	r3, [r7, #32]

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	2280      	movs	r2, #128	; 0x80
 8002ecc:	00d2      	lsls	r2, r2, #3
 8002ece:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ed0:	2327      	movs	r3, #39	; 0x27
 8002ed2:	18fb      	adds	r3, r7, r3
 8002ed4:	2201      	movs	r2, #1
 8002ed6:	701a      	strb	r2, [r3, #0]
  }

  /* Check if an Arbitration Loss error occurred */
  if (HAL_IS_BIT_SET(itflag, I2C_FLAG_ARLO))
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	2380      	movs	r3, #128	; 0x80
 8002edc:	009b      	lsls	r3, r3, #2
 8002ede:	4013      	ands	r3, r2
 8002ee0:	d00c      	beq.n	8002efc <I2C_IsErrorOccurred+0x1a8>
  {
    error_code |= HAL_I2C_ERROR_ARLO;
 8002ee2:	6a3b      	ldr	r3, [r7, #32]
 8002ee4:	2202      	movs	r2, #2
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	623b      	str	r3, [r7, #32]

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8002eea:	68fb      	ldr	r3, [r7, #12]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2280      	movs	r2, #128	; 0x80
 8002ef0:	0092      	lsls	r2, r2, #2
 8002ef2:	61da      	str	r2, [r3, #28]

    status = HAL_ERROR;
 8002ef4:	2327      	movs	r3, #39	; 0x27
 8002ef6:	18fb      	adds	r3, r7, r3
 8002ef8:	2201      	movs	r2, #1
 8002efa:	701a      	strb	r2, [r3, #0]
  }

  if (status != HAL_OK)
 8002efc:	2327      	movs	r3, #39	; 0x27
 8002efe:	18fb      	adds	r3, r7, r3
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d01d      	beq.n	8002f42 <I2C_IsErrorOccurred+0x1ee>
  {
    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8002f06:	68fb      	ldr	r3, [r7, #12]
 8002f08:	0018      	movs	r0, r3
 8002f0a:	f7ff fe1f 	bl	8002b4c <I2C_Flush_TXDR>

    /* Clear Configuration Register 2 */
    I2C_RESET_CR2(hi2c);
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	685a      	ldr	r2, [r3, #4]
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	490d      	ldr	r1, [pc, #52]	; (8002f50 <I2C_IsErrorOccurred+0x1fc>)
 8002f1a:	400a      	ands	r2, r1
 8002f1c:	605a      	str	r2, [r3, #4]

    hi2c->ErrorCode |= error_code;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002f22:	6a3b      	ldr	r3, [r7, #32]
 8002f24:	431a      	orrs	r2, r3
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	645a      	str	r2, [r3, #68]	; 0x44
    hi2c->State = HAL_I2C_STATE_READY;
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2241      	movs	r2, #65	; 0x41
 8002f2e:	2120      	movs	r1, #32
 8002f30:	5499      	strb	r1, [r3, r2]
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	2242      	movs	r2, #66	; 0x42
 8002f36:	2100      	movs	r1, #0
 8002f38:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002f3a:	68fb      	ldr	r3, [r7, #12]
 8002f3c:	2240      	movs	r2, #64	; 0x40
 8002f3e:	2100      	movs	r1, #0
 8002f40:	5499      	strb	r1, [r3, r2]
  }

  return status;
 8002f42:	2327      	movs	r3, #39	; 0x27
 8002f44:	18fb      	adds	r3, r7, r3
 8002f46:	781b      	ldrb	r3, [r3, #0]
}
 8002f48:	0018      	movs	r0, r3
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	b00b      	add	sp, #44	; 0x2c
 8002f4e:	bd90      	pop	{r4, r7, pc}
 8002f50:	fe00e800 	.word	0xfe00e800

08002f54 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8002f54:	b590      	push	{r4, r7, lr}
 8002f56:	b087      	sub	sp, #28
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	0008      	movs	r0, r1
 8002f5e:	0011      	movs	r1, r2
 8002f60:	607b      	str	r3, [r7, #4]
 8002f62:	240a      	movs	r4, #10
 8002f64:	193b      	adds	r3, r7, r4
 8002f66:	1c02      	adds	r2, r0, #0
 8002f68:	801a      	strh	r2, [r3, #0]
 8002f6a:	2009      	movs	r0, #9
 8002f6c:	183b      	adds	r3, r7, r0
 8002f6e:	1c0a      	adds	r2, r1, #0
 8002f70:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f72:	193b      	adds	r3, r7, r4
 8002f74:	881b      	ldrh	r3, [r3, #0]
 8002f76:	059b      	lsls	r3, r3, #22
 8002f78:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f7a:	183b      	adds	r3, r7, r0
 8002f7c:	781b      	ldrb	r3, [r3, #0]
 8002f7e:	0419      	lsls	r1, r3, #16
 8002f80:	23ff      	movs	r3, #255	; 0xff
 8002f82:	041b      	lsls	r3, r3, #16
 8002f84:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f86:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8002f8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f8e:	4313      	orrs	r3, r2
 8002f90:	005b      	lsls	r3, r3, #1
 8002f92:	085b      	lsrs	r3, r3, #1
 8002f94:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	685b      	ldr	r3, [r3, #4]
 8002f9c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002f9e:	0d51      	lsrs	r1, r2, #21
 8002fa0:	2280      	movs	r2, #128	; 0x80
 8002fa2:	00d2      	lsls	r2, r2, #3
 8002fa4:	400a      	ands	r2, r1
 8002fa6:	4907      	ldr	r1, [pc, #28]	; (8002fc4 <I2C_TransferConfig+0x70>)
 8002fa8:	430a      	orrs	r2, r1
 8002faa:	43d2      	mvns	r2, r2
 8002fac:	401a      	ands	r2, r3
 8002fae:	0011      	movs	r1, r2
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	697a      	ldr	r2, [r7, #20]
 8002fb6:	430a      	orrs	r2, r1
 8002fb8:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8002fba:	46c0      	nop			; (mov r8, r8)
 8002fbc:	46bd      	mov	sp, r7
 8002fbe:	b007      	add	sp, #28
 8002fc0:	bd90      	pop	{r4, r7, pc}
 8002fc2:	46c0      	nop			; (mov r8, r8)
 8002fc4:	03ff63ff 	.word	0x03ff63ff

08002fc8 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8002fc8:	b580      	push	{r7, lr}
 8002fca:	b082      	sub	sp, #8
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	2241      	movs	r2, #65	; 0x41
 8002fd6:	5c9b      	ldrb	r3, [r3, r2]
 8002fd8:	b2db      	uxtb	r3, r3
 8002fda:	2b20      	cmp	r3, #32
 8002fdc:	d138      	bne.n	8003050 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	2240      	movs	r2, #64	; 0x40
 8002fe2:	5c9b      	ldrb	r3, [r3, r2]
 8002fe4:	2b01      	cmp	r3, #1
 8002fe6:	d101      	bne.n	8002fec <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8002fe8:	2302      	movs	r3, #2
 8002fea:	e032      	b.n	8003052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	2240      	movs	r2, #64	; 0x40
 8002ff0:	2101      	movs	r1, #1
 8002ff2:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2241      	movs	r2, #65	; 0x41
 8002ff8:	2124      	movs	r1, #36	; 0x24
 8002ffa:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	681a      	ldr	r2, [r3, #0]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	2101      	movs	r1, #1
 8003008:	438a      	bics	r2, r1
 800300a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	681a      	ldr	r2, [r3, #0]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4911      	ldr	r1, [pc, #68]	; (800305c <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 8003018:	400a      	ands	r2, r1
 800301a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	6819      	ldr	r1, [r3, #0]
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	683a      	ldr	r2, [r7, #0]
 8003028:	430a      	orrs	r2, r1
 800302a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800302c:	687b      	ldr	r3, [r7, #4]
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	681a      	ldr	r2, [r3, #0]
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	2101      	movs	r1, #1
 8003038:	430a      	orrs	r2, r1
 800303a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2241      	movs	r2, #65	; 0x41
 8003040:	2120      	movs	r1, #32
 8003042:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	2240      	movs	r2, #64	; 0x40
 8003048:	2100      	movs	r1, #0
 800304a:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800304c:	2300      	movs	r3, #0
 800304e:	e000      	b.n	8003052 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003050:	2302      	movs	r3, #2
  }
}
 8003052:	0018      	movs	r0, r3
 8003054:	46bd      	mov	sp, r7
 8003056:	b002      	add	sp, #8
 8003058:	bd80      	pop	{r7, pc}
 800305a:	46c0      	nop			; (mov r8, r8)
 800305c:	ffffefff 	.word	0xffffefff

08003060 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003060:	b580      	push	{r7, lr}
 8003062:	b084      	sub	sp, #16
 8003064:	af00      	add	r7, sp, #0
 8003066:	6078      	str	r0, [r7, #4]
 8003068:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2241      	movs	r2, #65	; 0x41
 800306e:	5c9b      	ldrb	r3, [r3, r2]
 8003070:	b2db      	uxtb	r3, r3
 8003072:	2b20      	cmp	r3, #32
 8003074:	d139      	bne.n	80030ea <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2240      	movs	r2, #64	; 0x40
 800307a:	5c9b      	ldrb	r3, [r3, r2]
 800307c:	2b01      	cmp	r3, #1
 800307e:	d101      	bne.n	8003084 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8003080:	2302      	movs	r3, #2
 8003082:	e033      	b.n	80030ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2240      	movs	r2, #64	; 0x40
 8003088:	2101      	movs	r1, #1
 800308a:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	2241      	movs	r2, #65	; 0x41
 8003090:	2124      	movs	r1, #36	; 0x24
 8003092:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	681a      	ldr	r2, [r3, #0]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	2101      	movs	r1, #1
 80030a0:	438a      	bics	r2, r1
 80030a2:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80030ac:	68fb      	ldr	r3, [r7, #12]
 80030ae:	4a11      	ldr	r2, [pc, #68]	; (80030f4 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 80030b0:	4013      	ands	r3, r2
 80030b2:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	021b      	lsls	r3, r3, #8
 80030b8:	68fa      	ldr	r2, [r7, #12]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	68fa      	ldr	r2, [r7, #12]
 80030c4:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	681a      	ldr	r2, [r3, #0]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	2101      	movs	r1, #1
 80030d2:	430a      	orrs	r2, r1
 80030d4:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80030d6:	687b      	ldr	r3, [r7, #4]
 80030d8:	2241      	movs	r2, #65	; 0x41
 80030da:	2120      	movs	r1, #32
 80030dc:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	2240      	movs	r2, #64	; 0x40
 80030e2:	2100      	movs	r1, #0
 80030e4:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 80030ea:	2302      	movs	r3, #2
  }
}
 80030ec:	0018      	movs	r0, r3
 80030ee:	46bd      	mov	sp, r7
 80030f0:	b004      	add	sp, #16
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	fffff0ff 	.word	0xfffff0ff

080030f8 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        6 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 80030f8:	b580      	push	{r7, lr}
 80030fa:	b084      	sub	sp, #16
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  /* Modify voltage scaling range */
  MODIFY_REG(PWR->CR1, PWR_CR1_VOS, VoltageScaling);
 8003100:	4b19      	ldr	r3, [pc, #100]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0x70>)
 8003102:	681b      	ldr	r3, [r3, #0]
 8003104:	4a19      	ldr	r2, [pc, #100]	; (800316c <HAL_PWREx_ControlVoltageScaling+0x74>)
 8003106:	4013      	ands	r3, r2
 8003108:	0019      	movs	r1, r3
 800310a:	4b17      	ldr	r3, [pc, #92]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800310c:	687a      	ldr	r2, [r7, #4]
 800310e:	430a      	orrs	r2, r1
 8003110:	601a      	str	r2, [r3, #0]

  /* In case of Range 1 selected, we need to ensure that main regulator reaches new value */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003112:	687a      	ldr	r2, [r7, #4]
 8003114:	2380      	movs	r3, #128	; 0x80
 8003116:	009b      	lsls	r3, r3, #2
 8003118:	429a      	cmp	r2, r3
 800311a:	d11f      	bne.n	800315c <HAL_PWREx_ControlVoltageScaling+0x64>
  {
    /* Set timeout value */
    wait_loop_index = ((PWR_VOSF_SETTING_DELAY_6_US * SystemCoreClock) / 1000000U) + 1U;
 800311c:	4b14      	ldr	r3, [pc, #80]	; (8003170 <HAL_PWREx_ControlVoltageScaling+0x78>)
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	0013      	movs	r3, r2
 8003122:	005b      	lsls	r3, r3, #1
 8003124:	189b      	adds	r3, r3, r2
 8003126:	005b      	lsls	r3, r3, #1
 8003128:	4912      	ldr	r1, [pc, #72]	; (8003174 <HAL_PWREx_ControlVoltageScaling+0x7c>)
 800312a:	0018      	movs	r0, r3
 800312c:	f7fc ffea 	bl	8000104 <__udivsi3>
 8003130:	0003      	movs	r3, r0
 8003132:	3301      	adds	r3, #1
 8003134:	60fb      	str	r3, [r7, #12]

    /* Wait until VOSF is reset */
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003136:	e008      	b.n	800314a <HAL_PWREx_ControlVoltageScaling+0x52>
    {
      if (wait_loop_index != 0U)
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	2b00      	cmp	r3, #0
 800313c:	d003      	beq.n	8003146 <HAL_PWREx_ControlVoltageScaling+0x4e>
      {
        wait_loop_index--;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	3b01      	subs	r3, #1
 8003142:	60fb      	str	r3, [r7, #12]
 8003144:	e001      	b.n	800314a <HAL_PWREx_ControlVoltageScaling+0x52>
      }
      else
      {
        return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e009      	b.n	800315e <HAL_PWREx_ControlVoltageScaling+0x66>
    while (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 800314a:	4b07      	ldr	r3, [pc, #28]	; (8003168 <HAL_PWREx_ControlVoltageScaling+0x70>)
 800314c:	695a      	ldr	r2, [r3, #20]
 800314e:	2380      	movs	r3, #128	; 0x80
 8003150:	00db      	lsls	r3, r3, #3
 8003152:	401a      	ands	r2, r3
 8003154:	2380      	movs	r3, #128	; 0x80
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	429a      	cmp	r2, r3
 800315a:	d0ed      	beq.n	8003138 <HAL_PWREx_ControlVoltageScaling+0x40>
      }
    }
  }

  return HAL_OK;
 800315c:	2300      	movs	r3, #0
}
 800315e:	0018      	movs	r0, r3
 8003160:	46bd      	mov	sp, r7
 8003162:	b004      	add	sp, #16
 8003164:	bd80      	pop	{r7, pc}
 8003166:	46c0      	nop			; (mov r8, r8)
 8003168:	40007000 	.word	0x40007000
 800316c:	fffff9ff 	.word	0xfffff9ff
 8003170:	20000000 	.word	0x20000000
 8003174:	000f4240 	.word	0x000f4240

08003178 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to LSE Off
  *         first and then to LSE On or LSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003178:	b580      	push	{r7, lr}
 800317a:	b088      	sub	sp, #32
 800317c:	af00      	add	r7, sp, #0
 800317e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2b00      	cmp	r3, #0
 8003184:	d102      	bne.n	800318c <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 8003186:	2301      	movs	r3, #1
 8003188:	f000 fb50 	bl	800382c <HAL_RCC_OscConfig+0x6b4>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	681b      	ldr	r3, [r3, #0]
 8003190:	2201      	movs	r2, #1
 8003192:	4013      	ands	r3, r2
 8003194:	d100      	bne.n	8003198 <HAL_RCC_OscConfig+0x20>
 8003196:	e07c      	b.n	8003292 <HAL_RCC_OscConfig+0x11a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003198:	4bc3      	ldr	r3, [pc, #780]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800319a:	689b      	ldr	r3, [r3, #8]
 800319c:	2238      	movs	r2, #56	; 0x38
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80031a2:	4bc1      	ldr	r3, [pc, #772]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80031a4:	68db      	ldr	r3, [r3, #12]
 80031a6:	2203      	movs	r2, #3
 80031a8:	4013      	ands	r3, r2
 80031aa:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSE))
 80031ac:	69bb      	ldr	r3, [r7, #24]
 80031ae:	2b10      	cmp	r3, #16
 80031b0:	d102      	bne.n	80031b8 <HAL_RCC_OscConfig+0x40>
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d002      	beq.n	80031be <HAL_RCC_OscConfig+0x46>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSE))
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	2b08      	cmp	r3, #8
 80031bc:	d10b      	bne.n	80031d6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031be:	4bba      	ldr	r3, [pc, #744]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80031c0:	681a      	ldr	r2, [r3, #0]
 80031c2:	2380      	movs	r3, #128	; 0x80
 80031c4:	029b      	lsls	r3, r3, #10
 80031c6:	4013      	ands	r3, r2
 80031c8:	d062      	beq.n	8003290 <HAL_RCC_OscConfig+0x118>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	685b      	ldr	r3, [r3, #4]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d15e      	bne.n	8003290 <HAL_RCC_OscConfig+0x118>
      {
        return HAL_ERROR;
 80031d2:	2301      	movs	r3, #1
 80031d4:	e32a      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	685a      	ldr	r2, [r3, #4]
 80031da:	2380      	movs	r3, #128	; 0x80
 80031dc:	025b      	lsls	r3, r3, #9
 80031de:	429a      	cmp	r2, r3
 80031e0:	d107      	bne.n	80031f2 <HAL_RCC_OscConfig+0x7a>
 80031e2:	4bb1      	ldr	r3, [pc, #708]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80031e4:	681a      	ldr	r2, [r3, #0]
 80031e6:	4bb0      	ldr	r3, [pc, #704]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80031e8:	2180      	movs	r1, #128	; 0x80
 80031ea:	0249      	lsls	r1, r1, #9
 80031ec:	430a      	orrs	r2, r1
 80031ee:	601a      	str	r2, [r3, #0]
 80031f0:	e020      	b.n	8003234 <HAL_RCC_OscConfig+0xbc>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	685a      	ldr	r2, [r3, #4]
 80031f6:	23a0      	movs	r3, #160	; 0xa0
 80031f8:	02db      	lsls	r3, r3, #11
 80031fa:	429a      	cmp	r2, r3
 80031fc:	d10e      	bne.n	800321c <HAL_RCC_OscConfig+0xa4>
 80031fe:	4baa      	ldr	r3, [pc, #680]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003200:	681a      	ldr	r2, [r3, #0]
 8003202:	4ba9      	ldr	r3, [pc, #676]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003204:	2180      	movs	r1, #128	; 0x80
 8003206:	02c9      	lsls	r1, r1, #11
 8003208:	430a      	orrs	r2, r1
 800320a:	601a      	str	r2, [r3, #0]
 800320c:	4ba6      	ldr	r3, [pc, #664]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800320e:	681a      	ldr	r2, [r3, #0]
 8003210:	4ba5      	ldr	r3, [pc, #660]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003212:	2180      	movs	r1, #128	; 0x80
 8003214:	0249      	lsls	r1, r1, #9
 8003216:	430a      	orrs	r2, r1
 8003218:	601a      	str	r2, [r3, #0]
 800321a:	e00b      	b.n	8003234 <HAL_RCC_OscConfig+0xbc>
 800321c:	4ba2      	ldr	r3, [pc, #648]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	4ba1      	ldr	r3, [pc, #644]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003222:	49a2      	ldr	r1, [pc, #648]	; (80034ac <HAL_RCC_OscConfig+0x334>)
 8003224:	400a      	ands	r2, r1
 8003226:	601a      	str	r2, [r3, #0]
 8003228:	4b9f      	ldr	r3, [pc, #636]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800322a:	681a      	ldr	r2, [r3, #0]
 800322c:	4b9e      	ldr	r3, [pc, #632]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800322e:	49a0      	ldr	r1, [pc, #640]	; (80034b0 <HAL_RCC_OscConfig+0x338>)
 8003230:	400a      	ands	r2, r1
 8003232:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	2b00      	cmp	r3, #0
 800323a:	d014      	beq.n	8003266 <HAL_RCC_OscConfig+0xee>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800323c:	f7fe fa4a 	bl	80016d4 <HAL_GetTick>
 8003240:	0003      	movs	r3, r0
 8003242:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003244:	e008      	b.n	8003258 <HAL_RCC_OscConfig+0xe0>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003246:	f7fe fa45 	bl	80016d4 <HAL_GetTick>
 800324a:	0002      	movs	r2, r0
 800324c:	693b      	ldr	r3, [r7, #16]
 800324e:	1ad3      	subs	r3, r2, r3
 8003250:	2b64      	cmp	r3, #100	; 0x64
 8003252:	d901      	bls.n	8003258 <HAL_RCC_OscConfig+0xe0>
          {
            return HAL_TIMEOUT;
 8003254:	2303      	movs	r3, #3
 8003256:	e2e9      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003258:	4b93      	ldr	r3, [pc, #588]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	2380      	movs	r3, #128	; 0x80
 800325e:	029b      	lsls	r3, r3, #10
 8003260:	4013      	ands	r3, r2
 8003262:	d0f0      	beq.n	8003246 <HAL_RCC_OscConfig+0xce>
 8003264:	e015      	b.n	8003292 <HAL_RCC_OscConfig+0x11a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003266:	f7fe fa35 	bl	80016d4 <HAL_GetTick>
 800326a:	0003      	movs	r3, r0
 800326c:	613b      	str	r3, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800326e:	e008      	b.n	8003282 <HAL_RCC_OscConfig+0x10a>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003270:	f7fe fa30 	bl	80016d4 <HAL_GetTick>
 8003274:	0002      	movs	r2, r0
 8003276:	693b      	ldr	r3, [r7, #16]
 8003278:	1ad3      	subs	r3, r2, r3
 800327a:	2b64      	cmp	r3, #100	; 0x64
 800327c:	d901      	bls.n	8003282 <HAL_RCC_OscConfig+0x10a>
          {
            return HAL_TIMEOUT;
 800327e:	2303      	movs	r3, #3
 8003280:	e2d4      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003282:	4b89      	ldr	r3, [pc, #548]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003284:	681a      	ldr	r2, [r3, #0]
 8003286:	2380      	movs	r3, #128	; 0x80
 8003288:	029b      	lsls	r3, r3, #10
 800328a:	4013      	ands	r3, r2
 800328c:	d1f0      	bne.n	8003270 <HAL_RCC_OscConfig+0xf8>
 800328e:	e000      	b.n	8003292 <HAL_RCC_OscConfig+0x11a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003290:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	681b      	ldr	r3, [r3, #0]
 8003296:	2202      	movs	r2, #2
 8003298:	4013      	ands	r3, r2
 800329a:	d100      	bne.n	800329e <HAL_RCC_OscConfig+0x126>
 800329c:	e099      	b.n	80033d2 <HAL_RCC_OscConfig+0x25a>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));
    assert_param(IS_RCC_HSIDIV(RCC_OscInitStruct->HSIDiv));

    /* Check if HSI16 is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800329e:	4b82      	ldr	r3, [pc, #520]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80032a0:	689b      	ldr	r3, [r3, #8]
 80032a2:	2238      	movs	r2, #56	; 0x38
 80032a4:	4013      	ands	r3, r2
 80032a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80032a8:	4b7f      	ldr	r3, [pc, #508]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80032aa:	68db      	ldr	r3, [r3, #12]
 80032ac:	2203      	movs	r2, #3
 80032ae:	4013      	ands	r3, r2
 80032b0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (temp_pllckcfg == RCC_PLLSOURCE_HSI))
 80032b2:	69bb      	ldr	r3, [r7, #24]
 80032b4:	2b10      	cmp	r3, #16
 80032b6:	d102      	bne.n	80032be <HAL_RCC_OscConfig+0x146>
 80032b8:	697b      	ldr	r3, [r7, #20]
 80032ba:	2b02      	cmp	r3, #2
 80032bc:	d002      	beq.n	80032c4 <HAL_RCC_OscConfig+0x14c>
        || (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI))
 80032be:	69bb      	ldr	r3, [r7, #24]
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d135      	bne.n	8003330 <HAL_RCC_OscConfig+0x1b8>
    {
      /* When HSI is used as system clock or as PLL input clock it can not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032c4:	4b78      	ldr	r3, [pc, #480]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80032c6:	681a      	ldr	r2, [r3, #0]
 80032c8:	2380      	movs	r3, #128	; 0x80
 80032ca:	00db      	lsls	r3, r3, #3
 80032cc:	4013      	ands	r3, r2
 80032ce:	d005      	beq.n	80032dc <HAL_RCC_OscConfig+0x164>
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	68db      	ldr	r3, [r3, #12]
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d101      	bne.n	80032dc <HAL_RCC_OscConfig+0x164>
      {
        return HAL_ERROR;
 80032d8:	2301      	movs	r3, #1
 80032da:	e2a7      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80032dc:	4b72      	ldr	r3, [pc, #456]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	4a74      	ldr	r2, [pc, #464]	; (80034b4 <HAL_RCC_OscConfig+0x33c>)
 80032e2:	4013      	ands	r3, r2
 80032e4:	0019      	movs	r1, r3
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	021a      	lsls	r2, r3, #8
 80032ec:	4b6e      	ldr	r3, [pc, #440]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80032ee:	430a      	orrs	r2, r1
 80032f0:	605a      	str	r2, [r3, #4]

        if (temp_sysclksrc == RCC_SYSCLKSOURCE_STATUS_HSI)
 80032f2:	69bb      	ldr	r3, [r7, #24]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	d112      	bne.n	800331e <HAL_RCC_OscConfig+0x1a6>
        {
          /* Adjust the HSI16 division factor */
          __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 80032f8:	4b6b      	ldr	r3, [pc, #428]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	4a6e      	ldr	r2, [pc, #440]	; (80034b8 <HAL_RCC_OscConfig+0x340>)
 80032fe:	4013      	ands	r3, r2
 8003300:	0019      	movs	r1, r3
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	691a      	ldr	r2, [r3, #16]
 8003306:	4b68      	ldr	r3, [pc, #416]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003308:	430a      	orrs	r2, r1
 800330a:	601a      	str	r2, [r3, #0]

          /* Update the SystemCoreClock global variable with HSISYS value  */
          SystemCoreClock = (HSI_VALUE / (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos)));
 800330c:	4b66      	ldr	r3, [pc, #408]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	0adb      	lsrs	r3, r3, #11
 8003312:	2207      	movs	r2, #7
 8003314:	4013      	ands	r3, r2
 8003316:	4a69      	ldr	r2, [pc, #420]	; (80034bc <HAL_RCC_OscConfig+0x344>)
 8003318:	40da      	lsrs	r2, r3
 800331a:	4b69      	ldr	r3, [pc, #420]	; (80034c0 <HAL_RCC_OscConfig+0x348>)
 800331c:	601a      	str	r2, [r3, #0]
        }

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800331e:	4b69      	ldr	r3, [pc, #420]	; (80034c4 <HAL_RCC_OscConfig+0x34c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	0018      	movs	r0, r3
 8003324:	f7fe f97a 	bl	800161c <HAL_InitTick>
 8003328:	1e03      	subs	r3, r0, #0
 800332a:	d051      	beq.n	80033d0 <HAL_RCC_OscConfig+0x258>
        {
          return HAL_ERROR;
 800332c:	2301      	movs	r3, #1
 800332e:	e27d      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	68db      	ldr	r3, [r3, #12]
 8003334:	2b00      	cmp	r3, #0
 8003336:	d030      	beq.n	800339a <HAL_RCC_OscConfig+0x222>
      {
        /* Configure the HSI16 division factor */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIDiv);
 8003338:	4b5b      	ldr	r3, [pc, #364]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a5e      	ldr	r2, [pc, #376]	; (80034b8 <HAL_RCC_OscConfig+0x340>)
 800333e:	4013      	ands	r3, r2
 8003340:	0019      	movs	r1, r3
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	691a      	ldr	r2, [r3, #16]
 8003346:	4b58      	ldr	r3, [pc, #352]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003348:	430a      	orrs	r2, r1
 800334a:	601a      	str	r2, [r3, #0]

        /* Enable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_ENABLE();
 800334c:	4b56      	ldr	r3, [pc, #344]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800334e:	681a      	ldr	r2, [r3, #0]
 8003350:	4b55      	ldr	r3, [pc, #340]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003352:	2180      	movs	r1, #128	; 0x80
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	430a      	orrs	r2, r1
 8003358:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800335a:	f7fe f9bb 	bl	80016d4 <HAL_GetTick>
 800335e:	0003      	movs	r3, r0
 8003360:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003362:	e008      	b.n	8003376 <HAL_RCC_OscConfig+0x1fe>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003364:	f7fe f9b6 	bl	80016d4 <HAL_GetTick>
 8003368:	0002      	movs	r2, r0
 800336a:	693b      	ldr	r3, [r7, #16]
 800336c:	1ad3      	subs	r3, r2, r3
 800336e:	2b02      	cmp	r3, #2
 8003370:	d901      	bls.n	8003376 <HAL_RCC_OscConfig+0x1fe>
          {
            return HAL_TIMEOUT;
 8003372:	2303      	movs	r3, #3
 8003374:	e25a      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003376:	4b4c      	ldr	r3, [pc, #304]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003378:	681a      	ldr	r2, [r3, #0]
 800337a:	2380      	movs	r3, #128	; 0x80
 800337c:	00db      	lsls	r3, r3, #3
 800337e:	4013      	ands	r3, r2
 8003380:	d0f0      	beq.n	8003364 <HAL_RCC_OscConfig+0x1ec>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003382:	4b49      	ldr	r3, [pc, #292]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	4a4b      	ldr	r2, [pc, #300]	; (80034b4 <HAL_RCC_OscConfig+0x33c>)
 8003388:	4013      	ands	r3, r2
 800338a:	0019      	movs	r1, r3
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	695b      	ldr	r3, [r3, #20]
 8003390:	021a      	lsls	r2, r3, #8
 8003392:	4b45      	ldr	r3, [pc, #276]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003394:	430a      	orrs	r2, r1
 8003396:	605a      	str	r2, [r3, #4]
 8003398:	e01b      	b.n	80033d2 <HAL_RCC_OscConfig+0x25a>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI16). */
        __HAL_RCC_HSI_DISABLE();
 800339a:	4b43      	ldr	r3, [pc, #268]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800339c:	681a      	ldr	r2, [r3, #0]
 800339e:	4b42      	ldr	r3, [pc, #264]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80033a0:	4949      	ldr	r1, [pc, #292]	; (80034c8 <HAL_RCC_OscConfig+0x350>)
 80033a2:	400a      	ands	r2, r1
 80033a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033a6:	f7fe f995 	bl	80016d4 <HAL_GetTick>
 80033aa:	0003      	movs	r3, r0
 80033ac:	613b      	str	r3, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033ae:	e008      	b.n	80033c2 <HAL_RCC_OscConfig+0x24a>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b0:	f7fe f990 	bl	80016d4 <HAL_GetTick>
 80033b4:	0002      	movs	r2, r0
 80033b6:	693b      	ldr	r3, [r7, #16]
 80033b8:	1ad3      	subs	r3, r2, r3
 80033ba:	2b02      	cmp	r3, #2
 80033bc:	d901      	bls.n	80033c2 <HAL_RCC_OscConfig+0x24a>
          {
            return HAL_TIMEOUT;
 80033be:	2303      	movs	r3, #3
 80033c0:	e234      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 80033c2:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80033c4:	681a      	ldr	r2, [r3, #0]
 80033c6:	2380      	movs	r3, #128	; 0x80
 80033c8:	00db      	lsls	r3, r3, #3
 80033ca:	4013      	ands	r3, r2
 80033cc:	d1f0      	bne.n	80033b0 <HAL_RCC_OscConfig+0x238>
 80033ce:	e000      	b.n	80033d2 <HAL_RCC_OscConfig+0x25a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80033d0:	46c0      	nop			; (mov r8, r8)
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	2208      	movs	r2, #8
 80033d8:	4013      	ands	r3, r2
 80033da:	d047      	beq.n	800346c <HAL_RCC_OscConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check if LSI is used as system clock */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 80033dc:	4b32      	ldr	r3, [pc, #200]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80033de:	689b      	ldr	r3, [r3, #8]
 80033e0:	2238      	movs	r2, #56	; 0x38
 80033e2:	4013      	ands	r3, r2
 80033e4:	2b18      	cmp	r3, #24
 80033e6:	d10a      	bne.n	80033fe <HAL_RCC_OscConfig+0x286>
    {
      /* When LSI is used as system clock it will not be disabled */
      if ((((RCC->CSR) & RCC_CSR_LSIRDY) != 0U) && (RCC_OscInitStruct->LSIState == RCC_LSI_OFF))
 80033e8:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 80033ea:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80033ec:	2202      	movs	r2, #2
 80033ee:	4013      	ands	r3, r2
 80033f0:	d03c      	beq.n	800346c <HAL_RCC_OscConfig+0x2f4>
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d138      	bne.n	800346c <HAL_RCC_OscConfig+0x2f4>
      {
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e216      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
      }
    }
    else
    {
      /* Check the LSI State */
      if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	2b00      	cmp	r3, #0
 8003404:	d019      	beq.n	800343a <HAL_RCC_OscConfig+0x2c2>
      {
        /* Enable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_ENABLE();
 8003406:	4b28      	ldr	r3, [pc, #160]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003408:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800340a:	4b27      	ldr	r3, [pc, #156]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800340c:	2101      	movs	r1, #1
 800340e:	430a      	orrs	r2, r1
 8003410:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003412:	f7fe f95f 	bl	80016d4 <HAL_GetTick>
 8003416:	0003      	movs	r3, r0
 8003418:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is ready */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800341a:	e008      	b.n	800342e <HAL_RCC_OscConfig+0x2b6>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800341c:	f7fe f95a 	bl	80016d4 <HAL_GetTick>
 8003420:	0002      	movs	r2, r0
 8003422:	693b      	ldr	r3, [r7, #16]
 8003424:	1ad3      	subs	r3, r2, r3
 8003426:	2b02      	cmp	r3, #2
 8003428:	d901      	bls.n	800342e <HAL_RCC_OscConfig+0x2b6>
          {
            return HAL_TIMEOUT;
 800342a:	2303      	movs	r3, #3
 800342c:	e1fe      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 800342e:	4b1e      	ldr	r3, [pc, #120]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003430:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003432:	2202      	movs	r2, #2
 8003434:	4013      	ands	r3, r2
 8003436:	d0f1      	beq.n	800341c <HAL_RCC_OscConfig+0x2a4>
 8003438:	e018      	b.n	800346c <HAL_RCC_OscConfig+0x2f4>
        }
      }
      else
      {
        /* Disable the Internal Low Speed oscillator (LSI). */
        __HAL_RCC_LSI_DISABLE();
 800343a:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800343c:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800343e:	4b1a      	ldr	r3, [pc, #104]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003440:	2101      	movs	r1, #1
 8003442:	438a      	bics	r2, r1
 8003444:	661a      	str	r2, [r3, #96]	; 0x60

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003446:	f7fe f945 	bl	80016d4 <HAL_GetTick>
 800344a:	0003      	movs	r3, r0
 800344c:	613b      	str	r3, [r7, #16]

        /* Wait till LSI is disabled */
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800344e:	e008      	b.n	8003462 <HAL_RCC_OscConfig+0x2ea>
        {
          if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003450:	f7fe f940 	bl	80016d4 <HAL_GetTick>
 8003454:	0002      	movs	r2, r0
 8003456:	693b      	ldr	r3, [r7, #16]
 8003458:	1ad3      	subs	r3, r2, r3
 800345a:	2b02      	cmp	r3, #2
 800345c:	d901      	bls.n	8003462 <HAL_RCC_OscConfig+0x2ea>
          {
            return HAL_TIMEOUT;
 800345e:	2303      	movs	r3, #3
 8003460:	e1e4      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003462:	4b11      	ldr	r3, [pc, #68]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003464:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003466:	2202      	movs	r2, #2
 8003468:	4013      	ands	r3, r2
 800346a:	d1f1      	bne.n	8003450 <HAL_RCC_OscConfig+0x2d8>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	2204      	movs	r2, #4
 8003472:	4013      	ands	r3, r2
 8003474:	d100      	bne.n	8003478 <HAL_RCC_OscConfig+0x300>
 8003476:	e0c7      	b.n	8003608 <HAL_RCC_OscConfig+0x490>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003478:	231f      	movs	r3, #31
 800347a:	18fb      	adds	r3, r7, r3
 800347c:	2200      	movs	r2, #0
 800347e:	701a      	strb	r2, [r3, #0]

    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* When the LSE is used as system clock, it is not allowed disable it */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003480:	4b09      	ldr	r3, [pc, #36]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	2238      	movs	r2, #56	; 0x38
 8003486:	4013      	ands	r3, r2
 8003488:	2b20      	cmp	r3, #32
 800348a:	d11f      	bne.n	80034cc <HAL_RCC_OscConfig+0x354>
    {
      if ((((RCC->BDCR) & RCC_BDCR_LSERDY) != 0U) && (RCC_OscInitStruct->LSEState == RCC_LSE_OFF))
 800348c:	4b06      	ldr	r3, [pc, #24]	; (80034a8 <HAL_RCC_OscConfig+0x330>)
 800348e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003490:	2202      	movs	r2, #2
 8003492:	4013      	ands	r3, r2
 8003494:	d100      	bne.n	8003498 <HAL_RCC_OscConfig+0x320>
 8003496:	e0b7      	b.n	8003608 <HAL_RCC_OscConfig+0x490>
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	689b      	ldr	r3, [r3, #8]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d000      	beq.n	80034a2 <HAL_RCC_OscConfig+0x32a>
 80034a0:	e0b2      	b.n	8003608 <HAL_RCC_OscConfig+0x490>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e1c2      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
 80034a6:	46c0      	nop			; (mov r8, r8)
 80034a8:	40021000 	.word	0x40021000
 80034ac:	fffeffff 	.word	0xfffeffff
 80034b0:	fffbffff 	.word	0xfffbffff
 80034b4:	ffff80ff 	.word	0xffff80ff
 80034b8:	ffffc7ff 	.word	0xffffc7ff
 80034bc:	00f42400 	.word	0x00f42400
 80034c0:	20000000 	.word	0x20000000
 80034c4:	20000004 	.word	0x20000004
 80034c8:	fffffeff 	.word	0xfffffeff
    }
    else
    {
      /* Update LSE configuration in Backup Domain control register    */
      /* Requires to enable write access to Backup Domain of necessary */
      if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80034cc:	4bb5      	ldr	r3, [pc, #724]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 80034ce:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034d0:	2380      	movs	r3, #128	; 0x80
 80034d2:	055b      	lsls	r3, r3, #21
 80034d4:	4013      	ands	r3, r2
 80034d6:	d101      	bne.n	80034dc <HAL_RCC_OscConfig+0x364>
 80034d8:	2301      	movs	r3, #1
 80034da:	e000      	b.n	80034de <HAL_RCC_OscConfig+0x366>
 80034dc:	2300      	movs	r3, #0
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d011      	beq.n	8003506 <HAL_RCC_OscConfig+0x38e>
      {
        __HAL_RCC_PWR_CLK_ENABLE();
 80034e2:	4bb0      	ldr	r3, [pc, #704]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 80034e4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034e6:	4baf      	ldr	r3, [pc, #700]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 80034e8:	2180      	movs	r1, #128	; 0x80
 80034ea:	0549      	lsls	r1, r1, #21
 80034ec:	430a      	orrs	r2, r1
 80034ee:	63da      	str	r2, [r3, #60]	; 0x3c
 80034f0:	4bac      	ldr	r3, [pc, #688]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 80034f2:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80034f4:	2380      	movs	r3, #128	; 0x80
 80034f6:	055b      	lsls	r3, r3, #21
 80034f8:	4013      	ands	r3, r2
 80034fa:	60fb      	str	r3, [r7, #12]
 80034fc:	68fb      	ldr	r3, [r7, #12]
        pwrclkchanged = SET;
 80034fe:	231f      	movs	r3, #31
 8003500:	18fb      	adds	r3, r7, r3
 8003502:	2201      	movs	r2, #1
 8003504:	701a      	strb	r2, [r3, #0]
      }

      if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003506:	4ba8      	ldr	r3, [pc, #672]	; (80037a8 <HAL_RCC_OscConfig+0x630>)
 8003508:	681a      	ldr	r2, [r3, #0]
 800350a:	2380      	movs	r3, #128	; 0x80
 800350c:	005b      	lsls	r3, r3, #1
 800350e:	4013      	ands	r3, r2
 8003510:	d11a      	bne.n	8003548 <HAL_RCC_OscConfig+0x3d0>
      {
        /* Enable write access to Backup domain */
        SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003512:	4ba5      	ldr	r3, [pc, #660]	; (80037a8 <HAL_RCC_OscConfig+0x630>)
 8003514:	681a      	ldr	r2, [r3, #0]
 8003516:	4ba4      	ldr	r3, [pc, #656]	; (80037a8 <HAL_RCC_OscConfig+0x630>)
 8003518:	2180      	movs	r1, #128	; 0x80
 800351a:	0049      	lsls	r1, r1, #1
 800351c:	430a      	orrs	r2, r1
 800351e:	601a      	str	r2, [r3, #0]

        /* Wait for Backup domain Write protection disable */
        tickstart = HAL_GetTick();
 8003520:	f7fe f8d8 	bl	80016d4 <HAL_GetTick>
 8003524:	0003      	movs	r3, r0
 8003526:	613b      	str	r3, [r7, #16]

        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003528:	e008      	b.n	800353c <HAL_RCC_OscConfig+0x3c4>
        {
          if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800352a:	f7fe f8d3 	bl	80016d4 <HAL_GetTick>
 800352e:	0002      	movs	r2, r0
 8003530:	693b      	ldr	r3, [r7, #16]
 8003532:	1ad3      	subs	r3, r2, r3
 8003534:	2b02      	cmp	r3, #2
 8003536:	d901      	bls.n	800353c <HAL_RCC_OscConfig+0x3c4>
          {
            return HAL_TIMEOUT;
 8003538:	2303      	movs	r3, #3
 800353a:	e177      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800353c:	4b9a      	ldr	r3, [pc, #616]	; (80037a8 <HAL_RCC_OscConfig+0x630>)
 800353e:	681a      	ldr	r2, [r3, #0]
 8003540:	2380      	movs	r3, #128	; 0x80
 8003542:	005b      	lsls	r3, r3, #1
 8003544:	4013      	ands	r3, r2
 8003546:	d0f0      	beq.n	800352a <HAL_RCC_OscConfig+0x3b2>
          }
        }
      }

      /* Set the new LSE configuration -----------------------------------------*/
      __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	689b      	ldr	r3, [r3, #8]
 800354c:	2b01      	cmp	r3, #1
 800354e:	d106      	bne.n	800355e <HAL_RCC_OscConfig+0x3e6>
 8003550:	4b94      	ldr	r3, [pc, #592]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003552:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003554:	4b93      	ldr	r3, [pc, #588]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003556:	2101      	movs	r1, #1
 8003558:	430a      	orrs	r2, r1
 800355a:	65da      	str	r2, [r3, #92]	; 0x5c
 800355c:	e01c      	b.n	8003598 <HAL_RCC_OscConfig+0x420>
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	689b      	ldr	r3, [r3, #8]
 8003562:	2b05      	cmp	r3, #5
 8003564:	d10c      	bne.n	8003580 <HAL_RCC_OscConfig+0x408>
 8003566:	4b8f      	ldr	r3, [pc, #572]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003568:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 800356a:	4b8e      	ldr	r3, [pc, #568]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 800356c:	2104      	movs	r1, #4
 800356e:	430a      	orrs	r2, r1
 8003570:	65da      	str	r2, [r3, #92]	; 0x5c
 8003572:	4b8c      	ldr	r3, [pc, #560]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003574:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003576:	4b8b      	ldr	r3, [pc, #556]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003578:	2101      	movs	r1, #1
 800357a:	430a      	orrs	r2, r1
 800357c:	65da      	str	r2, [r3, #92]	; 0x5c
 800357e:	e00b      	b.n	8003598 <HAL_RCC_OscConfig+0x420>
 8003580:	4b88      	ldr	r3, [pc, #544]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003582:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003584:	4b87      	ldr	r3, [pc, #540]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003586:	2101      	movs	r1, #1
 8003588:	438a      	bics	r2, r1
 800358a:	65da      	str	r2, [r3, #92]	; 0x5c
 800358c:	4b85      	ldr	r3, [pc, #532]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 800358e:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003590:	4b84      	ldr	r3, [pc, #528]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003592:	2104      	movs	r1, #4
 8003594:	438a      	bics	r2, r1
 8003596:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Check the LSE State */
      if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d014      	beq.n	80035ca <HAL_RCC_OscConfig+0x452>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a0:	f7fe f898 	bl	80016d4 <HAL_GetTick>
 80035a4:	0003      	movs	r3, r0
 80035a6:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035a8:	e009      	b.n	80035be <HAL_RCC_OscConfig+0x446>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035aa:	f7fe f893 	bl	80016d4 <HAL_GetTick>
 80035ae:	0002      	movs	r2, r0
 80035b0:	693b      	ldr	r3, [r7, #16]
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	4a7d      	ldr	r2, [pc, #500]	; (80037ac <HAL_RCC_OscConfig+0x634>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d901      	bls.n	80035be <HAL_RCC_OscConfig+0x446>
          {
            return HAL_TIMEOUT;
 80035ba:	2303      	movs	r3, #3
 80035bc:	e136      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80035be:	4b79      	ldr	r3, [pc, #484]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 80035c0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035c2:	2202      	movs	r2, #2
 80035c4:	4013      	ands	r3, r2
 80035c6:	d0f0      	beq.n	80035aa <HAL_RCC_OscConfig+0x432>
 80035c8:	e013      	b.n	80035f2 <HAL_RCC_OscConfig+0x47a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035ca:	f7fe f883 	bl	80016d4 <HAL_GetTick>
 80035ce:	0003      	movs	r3, r0
 80035d0:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is disabled */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035d2:	e009      	b.n	80035e8 <HAL_RCC_OscConfig+0x470>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035d4:	f7fe f87e 	bl	80016d4 <HAL_GetTick>
 80035d8:	0002      	movs	r2, r0
 80035da:	693b      	ldr	r3, [r7, #16]
 80035dc:	1ad3      	subs	r3, r2, r3
 80035de:	4a73      	ldr	r2, [pc, #460]	; (80037ac <HAL_RCC_OscConfig+0x634>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d901      	bls.n	80035e8 <HAL_RCC_OscConfig+0x470>
          {
            return HAL_TIMEOUT;
 80035e4:	2303      	movs	r3, #3
 80035e6:	e121      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 80035e8:	4b6e      	ldr	r3, [pc, #440]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 80035ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80035ec:	2202      	movs	r2, #2
 80035ee:	4013      	ands	r3, r2
 80035f0:	d1f0      	bne.n	80035d4 <HAL_RCC_OscConfig+0x45c>
          }
        }
      }

      /* Restore clock configuration if changed */
      if (pwrclkchanged == SET)
 80035f2:	231f      	movs	r3, #31
 80035f4:	18fb      	adds	r3, r7, r3
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d105      	bne.n	8003608 <HAL_RCC_OscConfig+0x490>
      {
        __HAL_RCC_PWR_CLK_DISABLE();
 80035fc:	4b69      	ldr	r3, [pc, #420]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 80035fe:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003600:	4b68      	ldr	r3, [pc, #416]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003602:	496b      	ldr	r1, [pc, #428]	; (80037b0 <HAL_RCC_OscConfig+0x638>)
 8003604:	400a      	ands	r2, r1
 8003606:	63da      	str	r2, [r3, #60]	; 0x3c
      }
    }
  }
#if defined(RCC_HSI48_SUPPORT)
  /*------------------------------ HSI48 Configuration -----------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003608:	687b      	ldr	r3, [r7, #4]
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	2220      	movs	r2, #32
 800360e:	4013      	ands	r3, r2
 8003610:	d039      	beq.n	8003686 <HAL_RCC_OscConfig+0x50e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the LSI State */
    if (RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	69db      	ldr	r3, [r3, #28]
 8003616:	2b00      	cmp	r3, #0
 8003618:	d01b      	beq.n	8003652 <HAL_RCC_OscConfig+0x4da>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 800361a:	4b62      	ldr	r3, [pc, #392]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 800361c:	681a      	ldr	r2, [r3, #0]
 800361e:	4b61      	ldr	r3, [pc, #388]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003620:	2180      	movs	r1, #128	; 0x80
 8003622:	03c9      	lsls	r1, r1, #15
 8003624:	430a      	orrs	r2, r1
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe f854 	bl	80016d4 <HAL_GetTick>
 800362c:	0003      	movs	r3, r0
 800362e:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is ready */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003630:	e008      	b.n	8003644 <HAL_RCC_OscConfig+0x4cc>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003632:	f7fe f84f 	bl	80016d4 <HAL_GetTick>
 8003636:	0002      	movs	r2, r0
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	1ad3      	subs	r3, r2, r3
 800363c:	2b02      	cmp	r3, #2
 800363e:	d901      	bls.n	8003644 <HAL_RCC_OscConfig+0x4cc>
        {
          return HAL_TIMEOUT;
 8003640:	2303      	movs	r3, #3
 8003642:	e0f3      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) == 0U)
 8003644:	4b57      	ldr	r3, [pc, #348]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003646:	681a      	ldr	r2, [r3, #0]
 8003648:	2380      	movs	r3, #128	; 0x80
 800364a:	041b      	lsls	r3, r3, #16
 800364c:	4013      	ands	r3, r2
 800364e:	d0f0      	beq.n	8003632 <HAL_RCC_OscConfig+0x4ba>
 8003650:	e019      	b.n	8003686 <HAL_RCC_OscConfig+0x50e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003652:	4b54      	ldr	r3, [pc, #336]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003654:	681a      	ldr	r2, [r3, #0]
 8003656:	4b53      	ldr	r3, [pc, #332]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003658:	4956      	ldr	r1, [pc, #344]	; (80037b4 <HAL_RCC_OscConfig+0x63c>)
 800365a:	400a      	ands	r2, r1
 800365c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800365e:	f7fe f839 	bl	80016d4 <HAL_GetTick>
 8003662:	0003      	movs	r3, r0
 8003664:	613b      	str	r3, [r7, #16]

      /* Wait till HSI48 is disabled */
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 8003666:	e008      	b.n	800367a <HAL_RCC_OscConfig+0x502>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003668:	f7fe f834 	bl	80016d4 <HAL_GetTick>
 800366c:	0002      	movs	r2, r0
 800366e:	693b      	ldr	r3, [r7, #16]
 8003670:	1ad3      	subs	r3, r2, r3
 8003672:	2b02      	cmp	r3, #2
 8003674:	d901      	bls.n	800367a <HAL_RCC_OscConfig+0x502>
        {
          return HAL_TIMEOUT;
 8003676:	2303      	movs	r3, #3
 8003678:	e0d8      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
      while (READ_BIT(RCC->CR, RCC_CR_HSI48RDY) != 0U)
 800367a:	4b4a      	ldr	r3, [pc, #296]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 800367c:	681a      	ldr	r2, [r3, #0]
 800367e:	2380      	movs	r3, #128	; 0x80
 8003680:	041b      	lsls	r3, r3, #16
 8003682:	4013      	ands	r3, r2
 8003684:	d1f0      	bne.n	8003668 <HAL_RCC_OscConfig+0x4f0>
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d100      	bne.n	8003690 <HAL_RCC_OscConfig+0x518>
 800368e:	e0cc      	b.n	800382a <HAL_RCC_OscConfig+0x6b2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003690:	4b44      	ldr	r3, [pc, #272]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003692:	689b      	ldr	r3, [r3, #8]
 8003694:	2238      	movs	r2, #56	; 0x38
 8003696:	4013      	ands	r3, r2
 8003698:	2b10      	cmp	r3, #16
 800369a:	d100      	bne.n	800369e <HAL_RCC_OscConfig+0x526>
 800369c:	e07b      	b.n	8003796 <HAL_RCC_OscConfig+0x61e>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	6a1b      	ldr	r3, [r3, #32]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d156      	bne.n	8003754 <HAL_RCC_OscConfig+0x5dc>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
#endif /* RCC_PLLQ_SUPPORT */
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036a6:	4b3f      	ldr	r3, [pc, #252]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 80036a8:	681a      	ldr	r2, [r3, #0]
 80036aa:	4b3e      	ldr	r3, [pc, #248]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 80036ac:	4942      	ldr	r1, [pc, #264]	; (80037b8 <HAL_RCC_OscConfig+0x640>)
 80036ae:	400a      	ands	r2, r1
 80036b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80036b2:	f7fe f80f 	bl	80016d4 <HAL_GetTick>
 80036b6:	0003      	movs	r3, r0
 80036b8:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ba:	e008      	b.n	80036ce <HAL_RCC_OscConfig+0x556>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036bc:	f7fe f80a 	bl	80016d4 <HAL_GetTick>
 80036c0:	0002      	movs	r2, r0
 80036c2:	693b      	ldr	r3, [r7, #16]
 80036c4:	1ad3      	subs	r3, r2, r3
 80036c6:	2b02      	cmp	r3, #2
 80036c8:	d901      	bls.n	80036ce <HAL_RCC_OscConfig+0x556>
          {
            return HAL_TIMEOUT;
 80036ca:	2303      	movs	r3, #3
 80036cc:	e0ae      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80036ce:	4b35      	ldr	r3, [pc, #212]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	2380      	movs	r3, #128	; 0x80
 80036d4:	049b      	lsls	r3, r3, #18
 80036d6:	4013      	ands	r3, r2
 80036d8:	d1f0      	bne.n	80036bc <HAL_RCC_OscConfig+0x544>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLQ_SUPPORT)
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80036da:	4b32      	ldr	r3, [pc, #200]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 80036dc:	68db      	ldr	r3, [r3, #12]
 80036de:	4a37      	ldr	r2, [pc, #220]	; (80037bc <HAL_RCC_OscConfig+0x644>)
 80036e0:	4013      	ands	r3, r2
 80036e2:	0019      	movs	r1, r3
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036ec:	431a      	orrs	r2, r3
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036f2:	021b      	lsls	r3, r3, #8
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036fa:	431a      	orrs	r2, r3
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003700:	431a      	orrs	r2, r3
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003706:	431a      	orrs	r2, r3
 8003708:	4b26      	ldr	r3, [pc, #152]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 800370a:	430a      	orrs	r2, r1
 800370c:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLR);
#endif /* RCC_PLLQ_SUPPORT */

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800370e:	4b25      	ldr	r3, [pc, #148]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003710:	681a      	ldr	r2, [r3, #0]
 8003712:	4b24      	ldr	r3, [pc, #144]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003714:	2180      	movs	r1, #128	; 0x80
 8003716:	0449      	lsls	r1, r1, #17
 8003718:	430a      	orrs	r2, r1
 800371a:	601a      	str	r2, [r3, #0]

        /* Enable PLLR Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLRCLK);
 800371c:	4b21      	ldr	r3, [pc, #132]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 800371e:	68da      	ldr	r2, [r3, #12]
 8003720:	4b20      	ldr	r3, [pc, #128]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003722:	2180      	movs	r1, #128	; 0x80
 8003724:	0549      	lsls	r1, r1, #21
 8003726:	430a      	orrs	r2, r1
 8003728:	60da      	str	r2, [r3, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800372a:	f7fd ffd3 	bl	80016d4 <HAL_GetTick>
 800372e:	0003      	movs	r3, r0
 8003730:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003732:	e008      	b.n	8003746 <HAL_RCC_OscConfig+0x5ce>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003734:	f7fd ffce 	bl	80016d4 <HAL_GetTick>
 8003738:	0002      	movs	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	2b02      	cmp	r3, #2
 8003740:	d901      	bls.n	8003746 <HAL_RCC_OscConfig+0x5ce>
          {
            return HAL_TIMEOUT;
 8003742:	2303      	movs	r3, #3
 8003744:	e072      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003746:	4b17      	ldr	r3, [pc, #92]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003748:	681a      	ldr	r2, [r3, #0]
 800374a:	2380      	movs	r3, #128	; 0x80
 800374c:	049b      	lsls	r3, r3, #18
 800374e:	4013      	ands	r3, r2
 8003750:	d0f0      	beq.n	8003734 <HAL_RCC_OscConfig+0x5bc>
 8003752:	e06a      	b.n	800382a <HAL_RCC_OscConfig+0x6b2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003754:	4b13      	ldr	r3, [pc, #76]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 8003756:	681a      	ldr	r2, [r3, #0]
 8003758:	4b12      	ldr	r3, [pc, #72]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 800375a:	4917      	ldr	r1, [pc, #92]	; (80037b8 <HAL_RCC_OscConfig+0x640>)
 800375c:	400a      	ands	r2, r1
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003760:	f7fd ffb8 	bl	80016d4 <HAL_GetTick>
 8003764:	0003      	movs	r3, r0
 8003766:	613b      	str	r3, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003768:	e008      	b.n	800377c <HAL_RCC_OscConfig+0x604>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800376a:	f7fd ffb3 	bl	80016d4 <HAL_GetTick>
 800376e:	0002      	movs	r2, r0
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	1ad3      	subs	r3, r2, r3
 8003774:	2b02      	cmp	r3, #2
 8003776:	d901      	bls.n	800377c <HAL_RCC_OscConfig+0x604>
          {
            return HAL_TIMEOUT;
 8003778:	2303      	movs	r3, #3
 800377a:	e057      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800377c:	4b09      	ldr	r3, [pc, #36]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 800377e:	681a      	ldr	r2, [r3, #0]
 8003780:	2380      	movs	r3, #128	; 0x80
 8003782:	049b      	lsls	r3, r3, #18
 8003784:	4013      	ands	r3, r2
 8003786:	d1f0      	bne.n	800376a <HAL_RCC_OscConfig+0x5f2>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLQ_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLPEN | RCC_PLLCFGR_PLLQEN | RCC_PLLCFGR_PLLREN);
 8003788:	4b06      	ldr	r3, [pc, #24]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 800378a:	68da      	ldr	r2, [r3, #12]
 800378c:	4b05      	ldr	r3, [pc, #20]	; (80037a4 <HAL_RCC_OscConfig+0x62c>)
 800378e:	490c      	ldr	r1, [pc, #48]	; (80037c0 <HAL_RCC_OscConfig+0x648>)
 8003790:	400a      	ands	r2, r1
 8003792:	60da      	str	r2, [r3, #12]
 8003794:	e049      	b.n	800382a <HAL_RCC_OscConfig+0x6b2>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003796:	687b      	ldr	r3, [r7, #4]
 8003798:	6a1b      	ldr	r3, [r3, #32]
 800379a:	2b01      	cmp	r3, #1
 800379c:	d112      	bne.n	80037c4 <HAL_RCC_OscConfig+0x64c>
      {
        return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e044      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
 80037a2:	46c0      	nop			; (mov r8, r8)
 80037a4:	40021000 	.word	0x40021000
 80037a8:	40007000 	.word	0x40007000
 80037ac:	00001388 	.word	0x00001388
 80037b0:	efffffff 	.word	0xefffffff
 80037b4:	ffbfffff 	.word	0xffbfffff
 80037b8:	feffffff 	.word	0xfeffffff
 80037bc:	11c1808c 	.word	0x11c1808c
 80037c0:	eefefffc 	.word	0xeefefffc
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        temp_pllckcfg = RCC->PLLCFGR;
 80037c4:	4b1b      	ldr	r3, [pc, #108]	; (8003834 <HAL_RCC_OscConfig+0x6bc>)
 80037c6:	68db      	ldr	r3, [r3, #12]
 80037c8:	617b      	str	r3, [r7, #20]
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ca:	697b      	ldr	r3, [r7, #20]
 80037cc:	2203      	movs	r2, #3
 80037ce:	401a      	ands	r2, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d4:	429a      	cmp	r2, r3
 80037d6:	d126      	bne.n	8003826 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037d8:	697b      	ldr	r3, [r7, #20]
 80037da:	2270      	movs	r2, #112	; 0x70
 80037dc:	401a      	ands	r2, r3
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
        if ((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037e2:	429a      	cmp	r2, r3
 80037e4:	d11f      	bne.n	8003826 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80037e6:	697a      	ldr	r2, [r7, #20]
 80037e8:	23fe      	movs	r3, #254	; 0xfe
 80037ea:	01db      	lsls	r3, r3, #7
 80037ec:	401a      	ands	r2, r3
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80037f2:	021b      	lsls	r3, r3, #8
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80037f4:	429a      	cmp	r2, r3
 80037f6:	d116      	bne.n	8003826 <HAL_RCC_OscConfig+0x6ae>
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 80037f8:	697a      	ldr	r2, [r7, #20]
 80037fa:	23f8      	movs	r3, #248	; 0xf8
 80037fc:	039b      	lsls	r3, r3, #14
 80037fe:	401a      	ands	r2, r3
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	6b1b      	ldr	r3, [r3, #48]	; 0x30
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003804:	429a      	cmp	r2, r3
 8003806:	d10e      	bne.n	8003826 <HAL_RCC_OscConfig+0x6ae>
#if defined (RCC_PLLQ_SUPPORT)
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003808:	697a      	ldr	r2, [r7, #20]
 800380a:	23e0      	movs	r3, #224	; 0xe0
 800380c:	051b      	lsls	r3, r3, #20
 800380e:	401a      	ands	r2, r3
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	6b5b      	ldr	r3, [r3, #52]	; 0x34
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003814:	429a      	cmp	r2, r3
 8003816:	d106      	bne.n	8003826 <HAL_RCC_OscConfig+0x6ae>
#endif /* RCC_PLLQ_SUPPORT */
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != RCC_OscInitStruct->PLL.PLLR))
 8003818:	697b      	ldr	r3, [r7, #20]
 800381a:	0f5b      	lsrs	r3, r3, #29
 800381c:	075a      	lsls	r2, r3, #29
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	6b9b      	ldr	r3, [r3, #56]	; 0x38
            (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ) ||
 8003822:	429a      	cmp	r2, r3
 8003824:	d001      	beq.n	800382a <HAL_RCC_OscConfig+0x6b2>
        {
          return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e000      	b.n	800382c <HAL_RCC_OscConfig+0x6b4>
        }
      }
    }
  }
  return HAL_OK;
 800382a:	2300      	movs	r3, #0
}
 800382c:	0018      	movs	r0, r3
 800382e:	46bd      	mov	sp, r7
 8003830:	b008      	add	sp, #32
 8003832:	bd80      	pop	{r7, pc}
 8003834:	40021000 	.word	0x40021000

08003838 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003838:	b580      	push	{r7, lr}
 800383a:	b084      	sub	sp, #16
 800383c:	af00      	add	r7, sp, #0
 800383e:	6078      	str	r0, [r7, #4]
 8003840:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	2b00      	cmp	r3, #0
 8003846:	d101      	bne.n	800384c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003848:	2301      	movs	r3, #1
 800384a:	e0e9      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the FLASH clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800384c:	4b76      	ldr	r3, [pc, #472]	; (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	2207      	movs	r2, #7
 8003852:	4013      	ands	r3, r2
 8003854:	683a      	ldr	r2, [r7, #0]
 8003856:	429a      	cmp	r2, r3
 8003858:	d91e      	bls.n	8003898 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800385a:	4b73      	ldr	r3, [pc, #460]	; (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	2207      	movs	r2, #7
 8003860:	4393      	bics	r3, r2
 8003862:	0019      	movs	r1, r3
 8003864:	4b70      	ldr	r3, [pc, #448]	; (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 8003866:	683a      	ldr	r2, [r7, #0]
 8003868:	430a      	orrs	r2, r1
 800386a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 800386c:	f7fd ff32 	bl	80016d4 <HAL_GetTick>
 8003870:	0003      	movs	r3, r0
 8003872:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 8003874:	e009      	b.n	800388a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003876:	f7fd ff2d 	bl	80016d4 <HAL_GetTick>
 800387a:	0002      	movs	r2, r0
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	1ad3      	subs	r3, r2, r3
 8003880:	4a6a      	ldr	r2, [pc, #424]	; (8003a2c <HAL_RCC_ClockConfig+0x1f4>)
 8003882:	4293      	cmp	r3, r2
 8003884:	d901      	bls.n	800388a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8003886:	2303      	movs	r3, #3
 8003888:	e0ca      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 800388a:	4b67      	ldr	r3, [pc, #412]	; (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	2207      	movs	r2, #7
 8003890:	4013      	ands	r3, r2
 8003892:	683a      	ldr	r2, [r7, #0]
 8003894:	429a      	cmp	r2, r3
 8003896:	d1ee      	bne.n	8003876 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	2202      	movs	r2, #2
 800389e:	4013      	ands	r3, r2
 80038a0:	d015      	beq.n	80038ce <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	2204      	movs	r2, #4
 80038a8:	4013      	ands	r3, r2
 80038aa:	d006      	beq.n	80038ba <HAL_RCC_ClockConfig+0x82>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_HCLK_DIV16);
 80038ac:	4b60      	ldr	r3, [pc, #384]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038ae:	689a      	ldr	r2, [r3, #8]
 80038b0:	4b5f      	ldr	r3, [pc, #380]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038b2:	21e0      	movs	r1, #224	; 0xe0
 80038b4:	01c9      	lsls	r1, r1, #7
 80038b6:	430a      	orrs	r2, r1
 80038b8:	609a      	str	r2, [r3, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038ba:	4b5d      	ldr	r3, [pc, #372]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	4a5d      	ldr	r2, [pc, #372]	; (8003a34 <HAL_RCC_ClockConfig+0x1fc>)
 80038c0:	4013      	ands	r3, r2
 80038c2:	0019      	movs	r1, r3
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689a      	ldr	r2, [r3, #8]
 80038c8:	4b59      	ldr	r3, [pc, #356]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038ca:	430a      	orrs	r2, r1
 80038cc:	609a      	str	r2, [r3, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	2201      	movs	r2, #1
 80038d4:	4013      	ands	r3, r2
 80038d6:	d057      	beq.n	8003988 <HAL_RCC_ClockConfig+0x150>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	685b      	ldr	r3, [r3, #4]
 80038dc:	2b01      	cmp	r3, #1
 80038de:	d107      	bne.n	80038f0 <HAL_RCC_ClockConfig+0xb8>
    {
      /* Check the HSE ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80038e0:	4b53      	ldr	r3, [pc, #332]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	2380      	movs	r3, #128	; 0x80
 80038e6:	029b      	lsls	r3, r3, #10
 80038e8:	4013      	ands	r3, r2
 80038ea:	d12b      	bne.n	8003944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 80038ec:	2301      	movs	r3, #1
 80038ee:	e097      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	685b      	ldr	r3, [r3, #4]
 80038f4:	2b02      	cmp	r3, #2
 80038f6:	d107      	bne.n	8003908 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038f8:	4b4d      	ldr	r3, [pc, #308]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	2380      	movs	r3, #128	; 0x80
 80038fe:	049b      	lsls	r3, r3, #18
 8003900:	4013      	ands	r3, r2
 8003902:	d11f      	bne.n	8003944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003904:	2301      	movs	r3, #1
 8003906:	e08b      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* HSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	685b      	ldr	r3, [r3, #4]
 800390c:	2b00      	cmp	r3, #0
 800390e:	d107      	bne.n	8003920 <HAL_RCC_ClockConfig+0xe8>
    {
      /* Check the HSI ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003910:	4b47      	ldr	r3, [pc, #284]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 8003912:	681a      	ldr	r2, [r3, #0]
 8003914:	2380      	movs	r3, #128	; 0x80
 8003916:	00db      	lsls	r3, r3, #3
 8003918:	4013      	ands	r3, r2
 800391a:	d113      	bne.n	8003944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 800391c:	2301      	movs	r3, #1
 800391e:	e07f      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    /* LSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_LSI)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	2b03      	cmp	r3, #3
 8003926:	d106      	bne.n	8003936 <HAL_RCC_ClockConfig+0xfe>
    {
      /* Check the LSI ready flag */
      if (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003928:	4b41      	ldr	r3, [pc, #260]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 800392a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800392c:	2202      	movs	r2, #2
 800392e:	4013      	ands	r3, r2
 8003930:	d108      	bne.n	8003944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003932:	2301      	movs	r3, #1
 8003934:	e074      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
    }
    /* LSE is selected as System Clock Source */
    else
    {
      /* Check the LSE ready flag */
      if (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003936:	4b3e      	ldr	r3, [pc, #248]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 8003938:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800393a:	2202      	movs	r2, #2
 800393c:	4013      	ands	r3, r2
 800393e:	d101      	bne.n	8003944 <HAL_RCC_ClockConfig+0x10c>
      {
        return HAL_ERROR;
 8003940:	2301      	movs	r3, #1
 8003942:	e06d      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003944:	4b3a      	ldr	r3, [pc, #232]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	2207      	movs	r2, #7
 800394a:	4393      	bics	r3, r2
 800394c:	0019      	movs	r1, r3
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	685a      	ldr	r2, [r3, #4]
 8003952:	4b37      	ldr	r3, [pc, #220]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 8003954:	430a      	orrs	r2, r1
 8003956:	609a      	str	r2, [r3, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003958:	f7fd febc 	bl	80016d4 <HAL_GetTick>
 800395c:	0003      	movs	r3, r0
 800395e:	60fb      	str	r3, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003960:	e009      	b.n	8003976 <HAL_RCC_ClockConfig+0x13e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003962:	f7fd feb7 	bl	80016d4 <HAL_GetTick>
 8003966:	0002      	movs	r2, r0
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	1ad3      	subs	r3, r2, r3
 800396c:	4a2f      	ldr	r2, [pc, #188]	; (8003a2c <HAL_RCC_ClockConfig+0x1f4>)
 800396e:	4293      	cmp	r3, r2
 8003970:	d901      	bls.n	8003976 <HAL_RCC_ClockConfig+0x13e>
      {
        return HAL_TIMEOUT;
 8003972:	2303      	movs	r3, #3
 8003974:	e054      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003976:	4b2e      	ldr	r3, [pc, #184]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 8003978:	689b      	ldr	r3, [r3, #8]
 800397a:	2238      	movs	r2, #56	; 0x38
 800397c:	401a      	ands	r2, r3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	685b      	ldr	r3, [r3, #4]
 8003982:	00db      	lsls	r3, r3, #3
 8003984:	429a      	cmp	r2, r3
 8003986:	d1ec      	bne.n	8003962 <HAL_RCC_ClockConfig+0x12a>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003988:	4b27      	ldr	r3, [pc, #156]	; (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2207      	movs	r2, #7
 800398e:	4013      	ands	r3, r2
 8003990:	683a      	ldr	r2, [r7, #0]
 8003992:	429a      	cmp	r2, r3
 8003994:	d21e      	bcs.n	80039d4 <HAL_RCC_ClockConfig+0x19c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003996:	4b24      	ldr	r3, [pc, #144]	; (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	2207      	movs	r2, #7
 800399c:	4393      	bics	r3, r2
 800399e:	0019      	movs	r1, r3
 80039a0:	4b21      	ldr	r3, [pc, #132]	; (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	430a      	orrs	r2, r1
 80039a6:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80039a8:	f7fd fe94 	bl	80016d4 <HAL_GetTick>
 80039ac:	0003      	movs	r3, r0
 80039ae:	60fb      	str	r3, [r7, #12]

    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039b0:	e009      	b.n	80039c6 <HAL_RCC_ClockConfig+0x18e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039b2:	f7fd fe8f 	bl	80016d4 <HAL_GetTick>
 80039b6:	0002      	movs	r2, r0
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	1ad3      	subs	r3, r2, r3
 80039bc:	4a1b      	ldr	r2, [pc, #108]	; (8003a2c <HAL_RCC_ClockConfig+0x1f4>)
 80039be:	4293      	cmp	r3, r2
 80039c0:	d901      	bls.n	80039c6 <HAL_RCC_ClockConfig+0x18e>
      {
        return HAL_TIMEOUT;
 80039c2:	2303      	movs	r3, #3
 80039c4:	e02c      	b.n	8003a20 <HAL_RCC_ClockConfig+0x1e8>
    while ((FLASH->ACR & FLASH_ACR_LATENCY) != FLatency)
 80039c6:	4b18      	ldr	r3, [pc, #96]	; (8003a28 <HAL_RCC_ClockConfig+0x1f0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	2207      	movs	r2, #7
 80039cc:	4013      	ands	r3, r2
 80039ce:	683a      	ldr	r2, [r7, #0]
 80039d0:	429a      	cmp	r2, r3
 80039d2:	d1ee      	bne.n	80039b2 <HAL_RCC_ClockConfig+0x17a>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	2204      	movs	r2, #4
 80039da:	4013      	ands	r3, r2
 80039dc:	d009      	beq.n	80039f2 <HAL_RCC_ClockConfig+0x1ba>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE, RCC_ClkInitStruct->APB1CLKDivider);
 80039de:	4b14      	ldr	r3, [pc, #80]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80039e0:	689b      	ldr	r3, [r3, #8]
 80039e2:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <HAL_RCC_ClockConfig+0x200>)
 80039e4:	4013      	ands	r3, r2
 80039e6:	0019      	movs	r1, r3
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	68da      	ldr	r2, [r3, #12]
 80039ec:	4b10      	ldr	r3, [pc, #64]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80039ee:	430a      	orrs	r2, r1
 80039f0:	609a      	str	r2, [r3, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = (HAL_RCC_GetSysClockFreq() >> ((AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos]) & 0x1FU));
 80039f2:	f000 f829 	bl	8003a48 <HAL_RCC_GetSysClockFreq>
 80039f6:	0001      	movs	r1, r0
 80039f8:	4b0d      	ldr	r3, [pc, #52]	; (8003a30 <HAL_RCC_ClockConfig+0x1f8>)
 80039fa:	689b      	ldr	r3, [r3, #8]
 80039fc:	0a1b      	lsrs	r3, r3, #8
 80039fe:	220f      	movs	r2, #15
 8003a00:	401a      	ands	r2, r3
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <HAL_RCC_ClockConfig+0x204>)
 8003a04:	0092      	lsls	r2, r2, #2
 8003a06:	58d3      	ldr	r3, [r2, r3]
 8003a08:	221f      	movs	r2, #31
 8003a0a:	4013      	ands	r3, r2
 8003a0c:	000a      	movs	r2, r1
 8003a0e:	40da      	lsrs	r2, r3
 8003a10:	4b0b      	ldr	r3, [pc, #44]	; (8003a40 <HAL_RCC_ClockConfig+0x208>)
 8003a12:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003a14:	4b0b      	ldr	r3, [pc, #44]	; (8003a44 <HAL_RCC_ClockConfig+0x20c>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	0018      	movs	r0, r3
 8003a1a:	f7fd fdff 	bl	800161c <HAL_InitTick>
 8003a1e:	0003      	movs	r3, r0
}
 8003a20:	0018      	movs	r0, r3
 8003a22:	46bd      	mov	sp, r7
 8003a24:	b004      	add	sp, #16
 8003a26:	bd80      	pop	{r7, pc}
 8003a28:	40022000 	.word	0x40022000
 8003a2c:	00001388 	.word	0x00001388
 8003a30:	40021000 	.word	0x40021000
 8003a34:	fffff0ff 	.word	0xfffff0ff
 8003a38:	ffff8fff 	.word	0xffff8fff
 8003a3c:	08005510 	.word	0x08005510
 8003a40:	20000000 	.word	0x20000000
 8003a44:	20000004 	.word	0x20000004

08003a48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm, hsidiv;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003a4e:	4b3c      	ldr	r3, [pc, #240]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a50:	689b      	ldr	r3, [r3, #8]
 8003a52:	2238      	movs	r2, #56	; 0x38
 8003a54:	4013      	ands	r3, r2
 8003a56:	d10f      	bne.n	8003a78 <HAL_RCC_GetSysClockFreq+0x30>
  {
    /* HSISYS can be derived for HSI16 */
    hsidiv = (1UL << ((READ_BIT(RCC->CR, RCC_CR_HSIDIV)) >> RCC_CR_HSIDIV_Pos));
 8003a58:	4b39      	ldr	r3, [pc, #228]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	0adb      	lsrs	r3, r3, #11
 8003a5e:	2207      	movs	r2, #7
 8003a60:	4013      	ands	r3, r2
 8003a62:	2201      	movs	r2, #1
 8003a64:	409a      	lsls	r2, r3
 8003a66:	0013      	movs	r3, r2
 8003a68:	603b      	str	r3, [r7, #0]

    /* HSI used as system clock source */
    sysclockfreq = (HSI_VALUE / hsidiv);
 8003a6a:	6839      	ldr	r1, [r7, #0]
 8003a6c:	4835      	ldr	r0, [pc, #212]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003a6e:	f7fc fb49 	bl	8000104 <__udivsi3>
 8003a72:	0003      	movs	r3, r0
 8003a74:	613b      	str	r3, [r7, #16]
 8003a76:	e05d      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003a78:	4b31      	ldr	r3, [pc, #196]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	2238      	movs	r2, #56	; 0x38
 8003a7e:	4013      	ands	r3, r2
 8003a80:	2b08      	cmp	r3, #8
 8003a82:	d102      	bne.n	8003a8a <HAL_RCC_GetSysClockFreq+0x42>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003a84:	4b30      	ldr	r3, [pc, #192]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x100>)
 8003a86:	613b      	str	r3, [r7, #16]
 8003a88:	e054      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003a8a:	4b2d      	ldr	r3, [pc, #180]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a8c:	689b      	ldr	r3, [r3, #8]
 8003a8e:	2238      	movs	r2, #56	; 0x38
 8003a90:	4013      	ands	r3, r2
 8003a92:	2b10      	cmp	r3, #16
 8003a94:	d138      	bne.n	8003b08 <HAL_RCC_GetSysClockFreq+0xc0>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = (RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC);
 8003a96:	4b2a      	ldr	r3, [pc, #168]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003a98:	68db      	ldr	r3, [r3, #12]
 8003a9a:	2203      	movs	r2, #3
 8003a9c:	4013      	ands	r3, r2
 8003a9e:	60fb      	str	r3, [r7, #12]
    pllm = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003aa0:	4b27      	ldr	r3, [pc, #156]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aa2:	68db      	ldr	r3, [r3, #12]
 8003aa4:	091b      	lsrs	r3, r3, #4
 8003aa6:	2207      	movs	r2, #7
 8003aa8:	4013      	ands	r3, r2
 8003aaa:	3301      	adds	r3, #1
 8003aac:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	2b03      	cmp	r3, #3
 8003ab2:	d10d      	bne.n	8003ad0 <HAL_RCC_GetSysClockFreq+0x88>
    {
      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pllvco = (HSE_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003ab4:	68b9      	ldr	r1, [r7, #8]
 8003ab6:	4824      	ldr	r0, [pc, #144]	; (8003b48 <HAL_RCC_GetSysClockFreq+0x100>)
 8003ab8:	f7fc fb24 	bl	8000104 <__udivsi3>
 8003abc:	0003      	movs	r3, r0
 8003abe:	0019      	movs	r1, r3
 8003ac0:	4b1f      	ldr	r3, [pc, #124]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ac2:	68db      	ldr	r3, [r3, #12]
 8003ac4:	0a1b      	lsrs	r3, r3, #8
 8003ac6:	227f      	movs	r2, #127	; 0x7f
 8003ac8:	4013      	ands	r3, r2
 8003aca:	434b      	muls	r3, r1
 8003acc:	617b      	str	r3, [r7, #20]
        break;
 8003ace:	e00d      	b.n	8003aec <HAL_RCC_GetSysClockFreq+0xa4>

      case RCC_PLLSOURCE_HSI:  /* HSI16 used as PLL clock source */
      default:                 /* HSI16 used as PLL clock source */
        pllvco = (HSI_VALUE / pllm) * ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos) ;
 8003ad0:	68b9      	ldr	r1, [r7, #8]
 8003ad2:	481c      	ldr	r0, [pc, #112]	; (8003b44 <HAL_RCC_GetSysClockFreq+0xfc>)
 8003ad4:	f7fc fb16 	bl	8000104 <__udivsi3>
 8003ad8:	0003      	movs	r3, r0
 8003ada:	0019      	movs	r1, r3
 8003adc:	4b18      	ldr	r3, [pc, #96]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003ade:	68db      	ldr	r3, [r3, #12]
 8003ae0:	0a1b      	lsrs	r3, r3, #8
 8003ae2:	227f      	movs	r2, #127	; 0x7f
 8003ae4:	4013      	ands	r3, r2
 8003ae6:	434b      	muls	r3, r1
 8003ae8:	617b      	str	r3, [r7, #20]
        break;
 8003aea:	46c0      	nop			; (mov r8, r8)
    }
    pllr = (((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U);
 8003aec:	4b14      	ldr	r3, [pc, #80]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	0f5b      	lsrs	r3, r3, #29
 8003af2:	2207      	movs	r2, #7
 8003af4:	4013      	ands	r3, r2
 8003af6:	3301      	adds	r3, #1
 8003af8:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco / pllr;
 8003afa:	6879      	ldr	r1, [r7, #4]
 8003afc:	6978      	ldr	r0, [r7, #20]
 8003afe:	f7fc fb01 	bl	8000104 <__udivsi3>
 8003b02:	0003      	movs	r3, r0
 8003b04:	613b      	str	r3, [r7, #16]
 8003b06:	e015      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSE)
 8003b08:	4b0d      	ldr	r3, [pc, #52]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	2238      	movs	r2, #56	; 0x38
 8003b0e:	4013      	ands	r3, r2
 8003b10:	2b20      	cmp	r3, #32
 8003b12:	d103      	bne.n	8003b1c <HAL_RCC_GetSysClockFreq+0xd4>
  {
    /* LSE used as system clock source */
    sysclockfreq = LSE_VALUE;
 8003b14:	2380      	movs	r3, #128	; 0x80
 8003b16:	021b      	lsls	r3, r3, #8
 8003b18:	613b      	str	r3, [r7, #16]
 8003b1a:	e00b      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_LSI)
 8003b1c:	4b08      	ldr	r3, [pc, #32]	; (8003b40 <HAL_RCC_GetSysClockFreq+0xf8>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	2238      	movs	r2, #56	; 0x38
 8003b22:	4013      	ands	r3, r2
 8003b24:	2b18      	cmp	r3, #24
 8003b26:	d103      	bne.n	8003b30 <HAL_RCC_GetSysClockFreq+0xe8>
  {
    /* LSI used as system clock source */
    sysclockfreq = LSI_VALUE;
 8003b28:	23fa      	movs	r3, #250	; 0xfa
 8003b2a:	01db      	lsls	r3, r3, #7
 8003b2c:	613b      	str	r3, [r7, #16]
 8003b2e:	e001      	b.n	8003b34 <HAL_RCC_GetSysClockFreq+0xec>
  }
  else
  {
    sysclockfreq = 0U;
 8003b30:	2300      	movs	r3, #0
 8003b32:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003b34:	693b      	ldr	r3, [r7, #16]
}
 8003b36:	0018      	movs	r0, r3
 8003b38:	46bd      	mov	sp, r7
 8003b3a:	b006      	add	sp, #24
 8003b3c:	bd80      	pop	{r7, pc}
 8003b3e:	46c0      	nop			; (mov r8, r8)
 8003b40:	40021000 	.word	0x40021000
 8003b44:	00f42400 	.word	0x00f42400
 8003b48:	007a1200 	.word	0x007a1200

08003b4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003b4c:	b580      	push	{r7, lr}
 8003b4e:	b086      	sub	sp, #24
 8003b50:	af00      	add	r7, sp, #0
 8003b52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret    = HAL_OK;   /* Intermediate status */
 8003b54:	2313      	movs	r3, #19
 8003b56:	18fb      	adds	r3, r7, r3
 8003b58:	2200      	movs	r2, #0
 8003b5a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003b5c:	2312      	movs	r3, #18
 8003b5e:	18fb      	adds	r3, r7, r3
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681a      	ldr	r2, [r3, #0]
 8003b68:	2380      	movs	r3, #128	; 0x80
 8003b6a:	029b      	lsls	r3, r3, #10
 8003b6c:	4013      	ands	r3, r2
 8003b6e:	d100      	bne.n	8003b72 <HAL_RCCEx_PeriphCLKConfig+0x26>
 8003b70:	e0ad      	b.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x182>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003b72:	2011      	movs	r0, #17
 8003b74:	183b      	adds	r3, r7, r0
 8003b76:	2200      	movs	r2, #0
 8003b78:	701a      	strb	r2, [r3, #0]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003b7a:	4b47      	ldr	r3, [pc, #284]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003b7c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b7e:	2380      	movs	r3, #128	; 0x80
 8003b80:	055b      	lsls	r3, r3, #21
 8003b82:	4013      	ands	r3, r2
 8003b84:	d110      	bne.n	8003ba8 <HAL_RCCEx_PeriphCLKConfig+0x5c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003b86:	4b44      	ldr	r3, [pc, #272]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003b88:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b8a:	4b43      	ldr	r3, [pc, #268]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003b8c:	2180      	movs	r1, #128	; 0x80
 8003b8e:	0549      	lsls	r1, r1, #21
 8003b90:	430a      	orrs	r2, r1
 8003b92:	63da      	str	r2, [r3, #60]	; 0x3c
 8003b94:	4b40      	ldr	r3, [pc, #256]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003b96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003b98:	2380      	movs	r3, #128	; 0x80
 8003b9a:	055b      	lsls	r3, r3, #21
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	60bb      	str	r3, [r7, #8]
 8003ba0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003ba2:	183b      	adds	r3, r7, r0
 8003ba4:	2201      	movs	r2, #1
 8003ba6:	701a      	strb	r2, [r3, #0]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003ba8:	4b3c      	ldr	r3, [pc, #240]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003baa:	681a      	ldr	r2, [r3, #0]
 8003bac:	4b3b      	ldr	r3, [pc, #236]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003bae:	2180      	movs	r1, #128	; 0x80
 8003bb0:	0049      	lsls	r1, r1, #1
 8003bb2:	430a      	orrs	r2, r1
 8003bb4:	601a      	str	r2, [r3, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003bb6:	f7fd fd8d 	bl	80016d4 <HAL_GetTick>
 8003bba:	0003      	movs	r3, r0
 8003bbc:	60fb      	str	r3, [r7, #12]

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bbe:	e00b      	b.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003bc0:	f7fd fd88 	bl	80016d4 <HAL_GetTick>
 8003bc4:	0002      	movs	r2, r0
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	1ad3      	subs	r3, r2, r3
 8003bca:	2b02      	cmp	r3, #2
 8003bcc:	d904      	bls.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x8c>
      {
        ret = HAL_TIMEOUT;
 8003bce:	2313      	movs	r3, #19
 8003bd0:	18fb      	adds	r3, r7, r3
 8003bd2:	2203      	movs	r2, #3
 8003bd4:	701a      	strb	r2, [r3, #0]
        break;
 8003bd6:	e005      	b.n	8003be4 <HAL_RCCEx_PeriphCLKConfig+0x98>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003bd8:	4b30      	ldr	r3, [pc, #192]	; (8003c9c <HAL_RCCEx_PeriphCLKConfig+0x150>)
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	2380      	movs	r3, #128	; 0x80
 8003bde:	005b      	lsls	r3, r3, #1
 8003be0:	4013      	ands	r3, r2
 8003be2:	d0ed      	beq.n	8003bc0 <HAL_RCCEx_PeriphCLKConfig+0x74>
      }
    }

    if (ret == HAL_OK)
 8003be4:	2313      	movs	r3, #19
 8003be6:	18fb      	adds	r3, r7, r3
 8003be8:	781b      	ldrb	r3, [r3, #0]
 8003bea:	2b00      	cmp	r3, #0
 8003bec:	d15e      	bne.n	8003cac <HAL_RCCEx_PeriphCLKConfig+0x160>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003bee:	4b2a      	ldr	r3, [pc, #168]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003bf0:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003bf2:	23c0      	movs	r3, #192	; 0xc0
 8003bf4:	009b      	lsls	r3, r3, #2
 8003bf6:	4013      	ands	r3, r2
 8003bf8:	617b      	str	r3, [r7, #20]

      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003bfa:	697b      	ldr	r3, [r7, #20]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d019      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c04:	697a      	ldr	r2, [r7, #20]
 8003c06:	429a      	cmp	r2, r3
 8003c08:	d014      	beq.n	8003c34 <HAL_RCCEx_PeriphCLKConfig+0xe8>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003c0a:	4b23      	ldr	r3, [pc, #140]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c0c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c0e:	4a24      	ldr	r2, [pc, #144]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003c10:	4013      	ands	r3, r2
 8003c12:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003c14:	4b20      	ldr	r3, [pc, #128]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c16:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c18:	4b1f      	ldr	r3, [pc, #124]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c1a:	2180      	movs	r1, #128	; 0x80
 8003c1c:	0249      	lsls	r1, r1, #9
 8003c1e:	430a      	orrs	r2, r1
 8003c20:	65da      	str	r2, [r3, #92]	; 0x5c
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003c22:	4b1d      	ldr	r3, [pc, #116]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c24:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8003c26:	4b1c      	ldr	r3, [pc, #112]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c28:	491e      	ldr	r1, [pc, #120]	; (8003ca4 <HAL_RCCEx_PeriphCLKConfig+0x158>)
 8003c2a:	400a      	ands	r2, r1
 8003c2c:	65da      	str	r2, [r3, #92]	; 0x5c
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003c2e:	4b1a      	ldr	r3, [pc, #104]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c30:	697a      	ldr	r2, [r7, #20]
 8003c32:	65da      	str	r2, [r3, #92]	; 0x5c
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003c34:	697b      	ldr	r3, [r7, #20]
 8003c36:	2201      	movs	r2, #1
 8003c38:	4013      	ands	r3, r2
 8003c3a:	d016      	beq.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c3c:	f7fd fd4a 	bl	80016d4 <HAL_GetTick>
 8003c40:	0003      	movs	r3, r0
 8003c42:	60fb      	str	r3, [r7, #12]

        /* Wait till LSE is ready */
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c44:	e00c      	b.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x114>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003c46:	f7fd fd45 	bl	80016d4 <HAL_GetTick>
 8003c4a:	0002      	movs	r2, r0
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	1ad3      	subs	r3, r2, r3
 8003c50:	4a15      	ldr	r2, [pc, #84]	; (8003ca8 <HAL_RCCEx_PeriphCLKConfig+0x15c>)
 8003c52:	4293      	cmp	r3, r2
 8003c54:	d904      	bls.n	8003c60 <HAL_RCCEx_PeriphCLKConfig+0x114>
          {
            ret = HAL_TIMEOUT;
 8003c56:	2313      	movs	r3, #19
 8003c58:	18fb      	adds	r3, r7, r3
 8003c5a:	2203      	movs	r2, #3
 8003c5c:	701a      	strb	r2, [r3, #0]
            break;
 8003c5e:	e004      	b.n	8003c6a <HAL_RCCEx_PeriphCLKConfig+0x11e>
        while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003c60:	4b0d      	ldr	r3, [pc, #52]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c62:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c64:	2202      	movs	r2, #2
 8003c66:	4013      	ands	r3, r2
 8003c68:	d0ed      	beq.n	8003c46 <HAL_RCCEx_PeriphCLKConfig+0xfa>
          }
        }
      }

      if (ret == HAL_OK)
 8003c6a:	2313      	movs	r3, #19
 8003c6c:	18fb      	adds	r3, r7, r3
 8003c6e:	781b      	ldrb	r3, [r3, #0]
 8003c70:	2b00      	cmp	r3, #0
 8003c72:	d10a      	bne.n	8003c8a <HAL_RCCEx_PeriphCLKConfig+0x13e>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003c74:	4b08      	ldr	r3, [pc, #32]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c76:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c78:	4a09      	ldr	r2, [pc, #36]	; (8003ca0 <HAL_RCCEx_PeriphCLKConfig+0x154>)
 8003c7a:	4013      	ands	r3, r2
 8003c7c:	0019      	movs	r1, r3
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003c82:	4b05      	ldr	r3, [pc, #20]	; (8003c98 <HAL_RCCEx_PeriphCLKConfig+0x14c>)
 8003c84:	430a      	orrs	r2, r1
 8003c86:	65da      	str	r2, [r3, #92]	; 0x5c
 8003c88:	e016      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003c8a:	2312      	movs	r3, #18
 8003c8c:	18fb      	adds	r3, r7, r3
 8003c8e:	2213      	movs	r2, #19
 8003c90:	18ba      	adds	r2, r7, r2
 8003c92:	7812      	ldrb	r2, [r2, #0]
 8003c94:	701a      	strb	r2, [r3, #0]
 8003c96:	e00f      	b.n	8003cb8 <HAL_RCCEx_PeriphCLKConfig+0x16c>
 8003c98:	40021000 	.word	0x40021000
 8003c9c:	40007000 	.word	0x40007000
 8003ca0:	fffffcff 	.word	0xfffffcff
 8003ca4:	fffeffff 	.word	0xfffeffff
 8003ca8:	00001388 	.word	0x00001388
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003cac:	2312      	movs	r3, #18
 8003cae:	18fb      	adds	r3, r7, r3
 8003cb0:	2213      	movs	r2, #19
 8003cb2:	18ba      	adds	r2, r7, r2
 8003cb4:	7812      	ldrb	r2, [r2, #0]
 8003cb6:	701a      	strb	r2, [r3, #0]
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003cb8:	2311      	movs	r3, #17
 8003cba:	18fb      	adds	r3, r7, r3
 8003cbc:	781b      	ldrb	r3, [r3, #0]
 8003cbe:	2b01      	cmp	r3, #1
 8003cc0:	d105      	bne.n	8003cce <HAL_RCCEx_PeriphCLKConfig+0x182>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003cc2:	4bb6      	ldr	r3, [pc, #728]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cc4:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003cc6:	4bb5      	ldr	r3, [pc, #724]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cc8:	49b5      	ldr	r1, [pc, #724]	; (8003fa0 <HAL_RCCEx_PeriphCLKConfig+0x454>)
 8003cca:	400a      	ands	r2, r1
 8003ccc:	63da      	str	r2, [r3, #60]	; 0x3c
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	4013      	ands	r3, r2
 8003cd6:	d009      	beq.n	8003cec <HAL_RCCEx_PeriphCLKConfig+0x1a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003cd8:	4bb0      	ldr	r3, [pc, #704]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cda:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cdc:	2203      	movs	r2, #3
 8003cde:	4393      	bics	r3, r2
 8003ce0:	0019      	movs	r1, r3
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	685a      	ldr	r2, [r3, #4]
 8003ce6:	4bad      	ldr	r3, [pc, #692]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ce8:	430a      	orrs	r2, r1
 8003cea:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_USART2SEL)
  /*-------------------------- USART2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	2202      	movs	r2, #2
 8003cf2:	4013      	ands	r3, r2
 8003cf4:	d009      	beq.n	8003d0a <HAL_RCCEx_PeriphCLKConfig+0x1be>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003cf6:	4ba9      	ldr	r3, [pc, #676]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003cf8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003cfa:	220c      	movs	r2, #12
 8003cfc:	4393      	bics	r3, r2
 8003cfe:	0019      	movs	r1, r3
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	689a      	ldr	r2, [r3, #8]
 8003d04:	4ba5      	ldr	r3, [pc, #660]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d06:	430a      	orrs	r2, r1
 8003d08:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART2SEL */

#if defined(RCC_CCIPR_USART3SEL)
  /*-------------------------- USART3 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	2204      	movs	r2, #4
 8003d10:	4013      	ands	r3, r2
 8003d12:	d009      	beq.n	8003d28 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003d14:	4ba1      	ldr	r3, [pc, #644]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d16:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d18:	2230      	movs	r2, #48	; 0x30
 8003d1a:	4393      	bics	r3, r2
 8003d1c:	0019      	movs	r1, r3
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	68da      	ldr	r2, [r3, #12]
 8003d22:	4b9e      	ldr	r3, [pc, #632]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d24:	430a      	orrs	r2, r1
 8003d26:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_USART3SEL */

#if defined(LPUART1)
  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	2210      	movs	r2, #16
 8003d2e:	4013      	ands	r3, r2
 8003d30:	d009      	beq.n	8003d46 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8003d32:	4b9a      	ldr	r3, [pc, #616]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d36:	4a9b      	ldr	r2, [pc, #620]	; (8003fa4 <HAL_RCCEx_PeriphCLKConfig+0x458>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	0019      	movs	r1, r3
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	691a      	ldr	r2, [r3, #16]
 8003d40:	4b96      	ldr	r3, [pc, #600]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d42:	430a      	orrs	r2, r1
 8003d44:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART1 */

#if defined(LPUART2)
  /*-------------------------- LPUART2 clock source configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART2) == RCC_PERIPHCLK_LPUART2)
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681a      	ldr	r2, [r3, #0]
 8003d4a:	2380      	movs	r3, #128	; 0x80
 8003d4c:	015b      	lsls	r3, r3, #5
 8003d4e:	4013      	ands	r3, r2
 8003d50:	d009      	beq.n	8003d66 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART2CLKSOURCE(PeriphClkInit->Lpuart2ClockSelection));

    /* Configure the LPUART clock source */
    __HAL_RCC_LPUART2_CONFIG(PeriphClkInit->Lpuart2ClockSelection);
 8003d52:	4b92      	ldr	r3, [pc, #584]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d54:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d56:	4a94      	ldr	r2, [pc, #592]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003d58:	4013      	ands	r3, r2
 8003d5a:	0019      	movs	r1, r3
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	695a      	ldr	r2, [r3, #20]
 8003d60:	4b8e      	ldr	r3, [pc, #568]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d62:	430a      	orrs	r2, r1
 8003d64:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* LPUART2 */

#if defined(RCC_CCIPR_LPTIM1SEL)
  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	681a      	ldr	r2, [r3, #0]
 8003d6a:	2380      	movs	r3, #128	; 0x80
 8003d6c:	009b      	lsls	r3, r3, #2
 8003d6e:	4013      	ands	r3, r2
 8003d70:	d009      	beq.n	8003d86 <HAL_RCCEx_PeriphCLKConfig+0x23a>
  {
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8003d72:	4b8a      	ldr	r3, [pc, #552]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d74:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d76:	4a8d      	ldr	r2, [pc, #564]	; (8003fac <HAL_RCCEx_PeriphCLKConfig+0x460>)
 8003d78:	4013      	ands	r3, r2
 8003d7a:	0019      	movs	r1, r3
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003d80:	4b86      	ldr	r3, [pc, #536]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d82:	430a      	orrs	r2, r1
 8003d84:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM1SEL */

#if defined(RCC_CCIPR_LPTIM2SEL)
  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	2380      	movs	r3, #128	; 0x80
 8003d8c:	00db      	lsls	r3, r3, #3
 8003d8e:	4013      	ands	r3, r2
 8003d90:	d009      	beq.n	8003da6 <HAL_RCCEx_PeriphCLKConfig+0x25a>
  {
    assert_param(IS_RCC_LPTIM2CLKSOURCE(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8003d92:	4b82      	ldr	r3, [pc, #520]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003d94:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d96:	4a86      	ldr	r2, [pc, #536]	; (8003fb0 <HAL_RCCEx_PeriphCLKConfig+0x464>)
 8003d98:	4013      	ands	r3, r2
 8003d9a:	0019      	movs	r1, r3
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003da0:	4b7e      	ldr	r3, [pc, #504]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003da2:	430a      	orrs	r2, r1
 8003da4:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* RCC_CCIPR_LPTIM2SEL */

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	2220      	movs	r2, #32
 8003dac:	4013      	ands	r3, r2
 8003dae:	d009      	beq.n	8003dc4 <HAL_RCCEx_PeriphCLKConfig+0x278>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8003db0:	4b7a      	ldr	r3, [pc, #488]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003db2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003db4:	4a7f      	ldr	r2, [pc, #508]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003db6:	4013      	ands	r3, r2
 8003db8:	0019      	movs	r1, r3
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	699a      	ldr	r2, [r3, #24]
 8003dbe:	4b77      	ldr	r3, [pc, #476]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dc0:	430a      	orrs	r2, r1
 8003dc2:	655a      	str	r2, [r3, #84]	; 0x54
  }

#if defined(RCC_CCIPR_I2C2SEL)
  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	2240      	movs	r2, #64	; 0x40
 8003dca:	4013      	ands	r3, r2
 8003dcc:	d009      	beq.n	8003de2 <HAL_RCCEx_PeriphCLKConfig+0x296>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8003dce:	4b73      	ldr	r3, [pc, #460]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dd0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dd2:	4a79      	ldr	r2, [pc, #484]	; (8003fb8 <HAL_RCCEx_PeriphCLKConfig+0x46c>)
 8003dd4:	4013      	ands	r3, r2
 8003dd6:	0019      	movs	r1, r3
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	69da      	ldr	r2, [r3, #28]
 8003ddc:	4b6f      	ldr	r3, [pc, #444]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dde:	430a      	orrs	r2, r1
 8003de0:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
    }
  }
#endif /* RNG */
  /*-------------------------- ADC clock source configuration ----------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	2380      	movs	r3, #128	; 0x80
 8003de8:	01db      	lsls	r3, r3, #7
 8003dea:	4013      	ands	r3, r2
 8003dec:	d015      	beq.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8003dee:	4b6b      	ldr	r3, [pc, #428]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003df0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003df2:	009b      	lsls	r3, r3, #2
 8003df4:	0899      	lsrs	r1, r3, #2
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003dfa:	4b68      	ldr	r3, [pc, #416]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003dfc:	430a      	orrs	r2, r1
 8003dfe:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLADC)
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e04:	2380      	movs	r3, #128	; 0x80
 8003e06:	05db      	lsls	r3, r3, #23
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	d106      	bne.n	8003e1a <HAL_RCCEx_PeriphCLKConfig+0x2ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003e0c:	4b63      	ldr	r3, [pc, #396]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e0e:	68da      	ldr	r2, [r3, #12]
 8003e10:	4b62      	ldr	r3, [pc, #392]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e12:	2180      	movs	r1, #128	; 0x80
 8003e14:	0249      	lsls	r1, r1, #9
 8003e16:	430a      	orrs	r2, r1
 8003e18:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(CEC)
  /*-------------------------- CEC clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681a      	ldr	r2, [r3, #0]
 8003e1e:	2380      	movs	r3, #128	; 0x80
 8003e20:	031b      	lsls	r3, r3, #12
 8003e22:	4013      	ands	r3, r2
 8003e24:	d009      	beq.n	8003e3a <HAL_RCCEx_PeriphCLKConfig+0x2ee>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003e26:	4b5d      	ldr	r3, [pc, #372]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e2a:	2240      	movs	r2, #64	; 0x40
 8003e2c:	4393      	bics	r3, r2
 8003e2e:	0019      	movs	r1, r3
 8003e30:	687b      	ldr	r3, [r7, #4]
 8003e32:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003e34:	4b59      	ldr	r3, [pc, #356]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e36:	430a      	orrs	r2, r1
 8003e38:	655a      	str	r2, [r3, #84]	; 0x54
  }
#endif /* CEC */

#if defined(RCC_CCIPR_TIM1SEL)
  /*-------------------------- TIM1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM1) == RCC_PERIPHCLK_TIM1)
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681a      	ldr	r2, [r3, #0]
 8003e3e:	2380      	movs	r3, #128	; 0x80
 8003e40:	039b      	lsls	r3, r3, #14
 8003e42:	4013      	ands	r3, r2
 8003e44:	d016      	beq.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM1CLKSOURCE(PeriphClkInit->Tim1ClockSelection));

    /* Configure the TIM1 clock source */
    __HAL_RCC_TIM1_CONFIG(PeriphClkInit->Tim1ClockSelection);
 8003e46:	4b55      	ldr	r3, [pc, #340]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e48:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e4a:	4a5c      	ldr	r2, [pc, #368]	; (8003fbc <HAL_RCCEx_PeriphCLKConfig+0x470>)
 8003e4c:	4013      	ands	r3, r2
 8003e4e:	0019      	movs	r1, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e54:	4b51      	ldr	r3, [pc, #324]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e56:	430a      	orrs	r2, r1
 8003e58:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim1ClockSelection == RCC_TIM1CLKSOURCE_PLL)
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003e5e:	2380      	movs	r3, #128	; 0x80
 8003e60:	03db      	lsls	r3, r3, #15
 8003e62:	429a      	cmp	r2, r3
 8003e64:	d106      	bne.n	8003e74 <HAL_RCCEx_PeriphCLKConfig+0x328>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003e66:	4b4d      	ldr	r3, [pc, #308]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e68:	68da      	ldr	r2, [r3, #12]
 8003e6a:	4b4c      	ldr	r3, [pc, #304]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e6c:	2180      	movs	r1, #128	; 0x80
 8003e6e:	0449      	lsls	r1, r1, #17
 8003e70:	430a      	orrs	r2, r1
 8003e72:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR_TIM1SEL */

#if defined(RCC_CCIPR_TIM15SEL)
  /*-------------------------- TIM15 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM15) == RCC_PERIPHCLK_TIM15)
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	2380      	movs	r3, #128	; 0x80
 8003e7a:	03db      	lsls	r3, r3, #15
 8003e7c:	4013      	ands	r3, r2
 8003e7e:	d016      	beq.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x362>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIM15CLKSOURCE(PeriphClkInit->Tim15ClockSelection));

    /* Configure the TIM15 clock source */
    __HAL_RCC_TIM15_CONFIG(PeriphClkInit->Tim15ClockSelection);
 8003e80:	4b46      	ldr	r3, [pc, #280]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e82:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003e84:	4a4e      	ldr	r2, [pc, #312]	; (8003fc0 <HAL_RCCEx_PeriphCLKConfig+0x474>)
 8003e86:	4013      	ands	r3, r2
 8003e88:	0019      	movs	r1, r3
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e8e:	4b43      	ldr	r3, [pc, #268]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003e90:	430a      	orrs	r2, r1
 8003e92:	655a      	str	r2, [r3, #84]	; 0x54

    if (PeriphClkInit->Tim15ClockSelection == RCC_TIM15CLKSOURCE_PLL)
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003e98:	2380      	movs	r3, #128	; 0x80
 8003e9a:	045b      	lsls	r3, r3, #17
 8003e9c:	429a      	cmp	r2, r3
 8003e9e:	d106      	bne.n	8003eae <HAL_RCCEx_PeriphCLKConfig+0x362>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003ea0:	4b3e      	ldr	r3, [pc, #248]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ea2:	68da      	ldr	r2, [r3, #12]
 8003ea4:	4b3d      	ldr	r3, [pc, #244]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ea6:	2180      	movs	r1, #128	; 0x80
 8003ea8:	0449      	lsls	r1, r1, #17
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* RCC_CCIPR_TIM15SEL */

  /*-------------------------- I2S1 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S1) == RCC_PERIPHCLK_I2S1)
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681a      	ldr	r2, [r3, #0]
 8003eb2:	2380      	movs	r3, #128	; 0x80
 8003eb4:	011b      	lsls	r3, r3, #4
 8003eb6:	4013      	ands	r3, r2
 8003eb8:	d014      	beq.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x398>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S1CLKSOURCE(PeriphClkInit->I2s1ClockSelection));

    /* Configure the I2S1 clock source */
    __HAL_RCC_I2S1_CONFIG(PeriphClkInit->I2s1ClockSelection);
 8003eba:	4b38      	ldr	r3, [pc, #224]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ebe:	2203      	movs	r2, #3
 8003ec0:	4393      	bics	r3, r2
 8003ec2:	0019      	movs	r1, r3
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	6a1a      	ldr	r2, [r3, #32]
 8003ec8:	4b34      	ldr	r3, [pc, #208]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003eca:	430a      	orrs	r2, r1
 8003ecc:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s1ClockSelection == RCC_I2S1CLKSOURCE_PLL)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	6a1b      	ldr	r3, [r3, #32]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d106      	bne.n	8003ee4 <HAL_RCCEx_PeriphCLKConfig+0x398>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003ed6:	4b31      	ldr	r3, [pc, #196]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ed8:	68da      	ldr	r2, [r3, #12]
 8003eda:	4b30      	ldr	r3, [pc, #192]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003edc:	2180      	movs	r1, #128	; 0x80
 8003ede:	0249      	lsls	r1, r1, #9
 8003ee0:	430a      	orrs	r2, r1
 8003ee2:	60da      	str	r2, [r3, #12]
    }
  }

#if defined(RCC_CCIPR2_I2S2SEL)
  /*-------------------------- I2S2 clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S2) == RCC_PERIPHCLK_I2S2)
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	2380      	movs	r3, #128	; 0x80
 8003eea:	019b      	lsls	r3, r3, #6
 8003eec:	4013      	ands	r3, r2
 8003eee:	d014      	beq.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2S2CLKSOURCE(PeriphClkInit->I2s2ClockSelection));

    /* Configure the I2S2 clock source */
    __HAL_RCC_I2S2_CONFIG(PeriphClkInit->I2s2ClockSelection);
 8003ef0:	4b2a      	ldr	r3, [pc, #168]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003ef2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ef4:	220c      	movs	r2, #12
 8003ef6:	4393      	bics	r3, r2
 8003ef8:	0019      	movs	r1, r3
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003efe:	4b27      	ldr	r3, [pc, #156]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f00:	430a      	orrs	r2, r1
 8003f02:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->I2s2ClockSelection == RCC_I2S2CLKSOURCE_PLL)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f08:	2b04      	cmp	r3, #4
 8003f0a:	d106      	bne.n	8003f1a <HAL_RCCEx_PeriphCLKConfig+0x3ce>
    {
      /* Enable PLLPCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLPCLK);
 8003f0c:	4b23      	ldr	r3, [pc, #140]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f0e:	68da      	ldr	r2, [r3, #12]
 8003f10:	4b22      	ldr	r3, [pc, #136]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f12:	2180      	movs	r1, #128	; 0x80
 8003f14:	0249      	lsls	r1, r1, #9
 8003f16:	430a      	orrs	r2, r1
 8003f18:	60da      	str	r2, [r3, #12]
  }
#endif /* RCC_CCIPR2_I2S2SEL */

#if defined(STM32G0C1xx) || defined(STM32G0B1xx)  || defined(STM32G0B0xx)
  /*-------------------------- USB clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	681a      	ldr	r2, [r3, #0]
 8003f1e:	2380      	movs	r3, #128	; 0x80
 8003f20:	045b      	lsls	r3, r3, #17
 8003f22:	4013      	ands	r3, r2
 8003f24:	d016      	beq.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x408>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8003f26:	4b1d      	ldr	r3, [pc, #116]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f2a:	4a22      	ldr	r2, [pc, #136]	; (8003fb4 <HAL_RCCEx_PeriphCLKConfig+0x468>)
 8003f2c:	4013      	ands	r3, r2
 8003f2e:	0019      	movs	r1, r3
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f34:	4b19      	ldr	r3, [pc, #100]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f36:	430a      	orrs	r2, r1
 8003f38:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003f3e:	2380      	movs	r3, #128	; 0x80
 8003f40:	019b      	lsls	r3, r3, #6
 8003f42:	429a      	cmp	r2, r3
 8003f44:	d106      	bne.n	8003f54 <HAL_RCCEx_PeriphCLKConfig+0x408>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003f46:	4b15      	ldr	r3, [pc, #84]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f48:	68da      	ldr	r2, [r3, #12]
 8003f4a:	4b14      	ldr	r3, [pc, #80]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f4c:	2180      	movs	r1, #128	; 0x80
 8003f4e:	0449      	lsls	r1, r1, #17
 8003f50:	430a      	orrs	r2, r1
 8003f52:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32G0C1xx || STM32G0B1xx || STM32G0B0xx */

#if defined(FDCAN1) || defined(FDCAN2)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681a      	ldr	r2, [r3, #0]
 8003f58:	2380      	movs	r3, #128	; 0x80
 8003f5a:	049b      	lsls	r3, r3, #18
 8003f5c:	4013      	ands	r3, r2
 8003f5e:	d016      	beq.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8003f60:	4b0e      	ldr	r3, [pc, #56]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f62:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f64:	4a10      	ldr	r2, [pc, #64]	; (8003fa8 <HAL_RCCEx_PeriphCLKConfig+0x45c>)
 8003f66:	4013      	ands	r3, r2
 8003f68:	0019      	movs	r1, r3
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f6e:	4b0b      	ldr	r3, [pc, #44]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f70:	430a      	orrs	r2, r1
 8003f72:	659a      	str	r2, [r3, #88]	; 0x58

    if (PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8003f74:	687b      	ldr	r3, [r7, #4]
 8003f76:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8003f78:	2380      	movs	r3, #128	; 0x80
 8003f7a:	005b      	lsls	r3, r3, #1
 8003f7c:	429a      	cmp	r2, r3
 8003f7e:	d106      	bne.n	8003f8e <HAL_RCCEx_PeriphCLKConfig+0x442>
    {
      /* Enable PLLQCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLLQCLK);
 8003f80:	4b06      	ldr	r3, [pc, #24]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f82:	68da      	ldr	r2, [r3, #12]
 8003f84:	4b05      	ldr	r3, [pc, #20]	; (8003f9c <HAL_RCCEx_PeriphCLKConfig+0x450>)
 8003f86:	2180      	movs	r1, #128	; 0x80
 8003f88:	0449      	lsls	r1, r1, #17
 8003f8a:	430a      	orrs	r2, r1
 8003f8c:	60da      	str	r2, [r3, #12]
    }
  }
#endif /* FDCAN1 || FDCAN2 */

  return status;
 8003f8e:	2312      	movs	r3, #18
 8003f90:	18fb      	adds	r3, r7, r3
 8003f92:	781b      	ldrb	r3, [r3, #0]
}
 8003f94:	0018      	movs	r0, r3
 8003f96:	46bd      	mov	sp, r7
 8003f98:	b006      	add	sp, #24
 8003f9a:	bd80      	pop	{r7, pc}
 8003f9c:	40021000 	.word	0x40021000
 8003fa0:	efffffff 	.word	0xefffffff
 8003fa4:	fffff3ff 	.word	0xfffff3ff
 8003fa8:	fffffcff 	.word	0xfffffcff
 8003fac:	fff3ffff 	.word	0xfff3ffff
 8003fb0:	ffcfffff 	.word	0xffcfffff
 8003fb4:	ffffcfff 	.word	0xffffcfff
 8003fb8:	ffff3fff 	.word	0xffff3fff
 8003fbc:	ffbfffff 	.word	0xffbfffff
 8003fc0:	feffffff 	.word	0xfeffffff

08003fc4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003fc4:	b580      	push	{r7, lr}
 8003fc6:	b082      	sub	sp, #8
 8003fc8:	af00      	add	r7, sp, #0
 8003fca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d101      	bne.n	8003fd6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fd2:	2301      	movs	r3, #1
 8003fd4:	e04a      	b.n	800406c <HAL_TIM_Base_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	223d      	movs	r2, #61	; 0x3d
 8003fda:	5c9b      	ldrb	r3, [r3, r2]
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b00      	cmp	r3, #0
 8003fe0:	d107      	bne.n	8003ff2 <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	223c      	movs	r2, #60	; 0x3c
 8003fe6:	2100      	movs	r1, #0
 8003fe8:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	0018      	movs	r0, r3
 8003fee:	f7fd fa11 	bl	8001414 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	223d      	movs	r2, #61	; 0x3d
 8003ff6:	2102      	movs	r1, #2
 8003ff8:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681a      	ldr	r2, [r3, #0]
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	3304      	adds	r3, #4
 8004002:	0019      	movs	r1, r3
 8004004:	0010      	movs	r0, r2
 8004006:	f000 fce5 	bl	80049d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2248      	movs	r2, #72	; 0x48
 800400e:	2101      	movs	r1, #1
 8004010:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	223e      	movs	r2, #62	; 0x3e
 8004016:	2101      	movs	r1, #1
 8004018:	5499      	strb	r1, [r3, r2]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	223f      	movs	r2, #63	; 0x3f
 800401e:	2101      	movs	r1, #1
 8004020:	5499      	strb	r1, [r3, r2]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	2240      	movs	r2, #64	; 0x40
 8004026:	2101      	movs	r1, #1
 8004028:	5499      	strb	r1, [r3, r2]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2241      	movs	r2, #65	; 0x41
 800402e:	2101      	movs	r1, #1
 8004030:	5499      	strb	r1, [r3, r2]
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	2242      	movs	r2, #66	; 0x42
 8004036:	2101      	movs	r1, #1
 8004038:	5499      	strb	r1, [r3, r2]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2243      	movs	r2, #67	; 0x43
 800403e:	2101      	movs	r1, #1
 8004040:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	2244      	movs	r2, #68	; 0x44
 8004046:	2101      	movs	r1, #1
 8004048:	5499      	strb	r1, [r3, r2]
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2245      	movs	r2, #69	; 0x45
 800404e:	2101      	movs	r1, #1
 8004050:	5499      	strb	r1, [r3, r2]
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2246      	movs	r2, #70	; 0x46
 8004056:	2101      	movs	r1, #1
 8004058:	5499      	strb	r1, [r3, r2]
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2247      	movs	r2, #71	; 0x47
 800405e:	2101      	movs	r1, #1
 8004060:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	223d      	movs	r2, #61	; 0x3d
 8004066:	2101      	movs	r1, #1
 8004068:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800406a:	2300      	movs	r3, #0
}
 800406c:	0018      	movs	r0, r3
 800406e:	46bd      	mov	sp, r7
 8004070:	b002      	add	sp, #8
 8004072:	bd80      	pop	{r7, pc}

08004074 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004074:	b580      	push	{r7, lr}
 8004076:	b084      	sub	sp, #16
 8004078:	af00      	add	r7, sp, #0
 800407a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	223d      	movs	r2, #61	; 0x3d
 8004080:	5c9b      	ldrb	r3, [r3, r2]
 8004082:	b2db      	uxtb	r3, r3
 8004084:	2b01      	cmp	r3, #1
 8004086:	d001      	beq.n	800408c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004088:	2301      	movs	r3, #1
 800408a:	e047      	b.n	800411c <HAL_TIM_Base_Start_IT+0xa8>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	223d      	movs	r2, #61	; 0x3d
 8004090:	2102      	movs	r1, #2
 8004092:	5499      	strb	r1, [r3, r2]

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	68da      	ldr	r2, [r3, #12]
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	2101      	movs	r1, #1
 80040a0:	430a      	orrs	r2, r1
 80040a2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	681b      	ldr	r3, [r3, #0]
 80040a8:	4a1e      	ldr	r2, [pc, #120]	; (8004124 <HAL_TIM_Base_Start_IT+0xb0>)
 80040aa:	4293      	cmp	r3, r2
 80040ac:	d014      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x64>
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	681a      	ldr	r2, [r3, #0]
 80040b2:	2380      	movs	r3, #128	; 0x80
 80040b4:	05db      	lsls	r3, r3, #23
 80040b6:	429a      	cmp	r2, r3
 80040b8:	d00e      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x64>
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	4a1a      	ldr	r2, [pc, #104]	; (8004128 <HAL_TIM_Base_Start_IT+0xb4>)
 80040c0:	4293      	cmp	r3, r2
 80040c2:	d009      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x64>
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	4a18      	ldr	r2, [pc, #96]	; (800412c <HAL_TIM_Base_Start_IT+0xb8>)
 80040ca:	4293      	cmp	r3, r2
 80040cc:	d004      	beq.n	80040d8 <HAL_TIM_Base_Start_IT+0x64>
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	4a17      	ldr	r2, [pc, #92]	; (8004130 <HAL_TIM_Base_Start_IT+0xbc>)
 80040d4:	4293      	cmp	r3, r2
 80040d6:	d116      	bne.n	8004106 <HAL_TIM_Base_Start_IT+0x92>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	689b      	ldr	r3, [r3, #8]
 80040de:	4a15      	ldr	r2, [pc, #84]	; (8004134 <HAL_TIM_Base_Start_IT+0xc0>)
 80040e0:	4013      	ands	r3, r2
 80040e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	2b06      	cmp	r3, #6
 80040e8:	d016      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0xa4>
 80040ea:	68fa      	ldr	r2, [r7, #12]
 80040ec:	2380      	movs	r3, #128	; 0x80
 80040ee:	025b      	lsls	r3, r3, #9
 80040f0:	429a      	cmp	r2, r3
 80040f2:	d011      	beq.n	8004118 <HAL_TIM_Base_Start_IT+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	681a      	ldr	r2, [r3, #0]
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	2101      	movs	r1, #1
 8004100:	430a      	orrs	r2, r1
 8004102:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004104:	e008      	b.n	8004118 <HAL_TIM_Base_Start_IT+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681a      	ldr	r2, [r3, #0]
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	2101      	movs	r1, #1
 8004112:	430a      	orrs	r2, r1
 8004114:	601a      	str	r2, [r3, #0]
 8004116:	e000      	b.n	800411a <HAL_TIM_Base_Start_IT+0xa6>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004118:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 800411a:	2300      	movs	r3, #0
}
 800411c:	0018      	movs	r0, r3
 800411e:	46bd      	mov	sp, r7
 8004120:	b004      	add	sp, #16
 8004122:	bd80      	pop	{r7, pc}
 8004124:	40012c00 	.word	0x40012c00
 8004128:	40000400 	.word	0x40000400
 800412c:	40000800 	.word	0x40000800
 8004130:	40014000 	.word	0x40014000
 8004134:	00010007 	.word	0x00010007

08004138 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004138:	b580      	push	{r7, lr}
 800413a:	b082      	sub	sp, #8
 800413c:	af00      	add	r7, sp, #0
 800413e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2b00      	cmp	r3, #0
 8004144:	d101      	bne.n	800414a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004146:	2301      	movs	r3, #1
 8004148:	e04a      	b.n	80041e0 <HAL_TIM_PWM_Init+0xa8>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	223d      	movs	r2, #61	; 0x3d
 800414e:	5c9b      	ldrb	r3, [r3, r2]
 8004150:	b2db      	uxtb	r3, r3
 8004152:	2b00      	cmp	r3, #0
 8004154:	d107      	bne.n	8004166 <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	223c      	movs	r2, #60	; 0x3c
 800415a:	2100      	movs	r1, #0
 800415c:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	0018      	movs	r0, r3
 8004162:	f000 f841 	bl	80041e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	223d      	movs	r2, #61	; 0x3d
 800416a:	2102      	movs	r1, #2
 800416c:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681a      	ldr	r2, [r3, #0]
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	3304      	adds	r3, #4
 8004176:	0019      	movs	r1, r3
 8004178:	0010      	movs	r0, r2
 800417a:	f000 fc2b 	bl	80049d4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	2248      	movs	r2, #72	; 0x48
 8004182:	2101      	movs	r1, #1
 8004184:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	223e      	movs	r2, #62	; 0x3e
 800418a:	2101      	movs	r1, #1
 800418c:	5499      	strb	r1, [r3, r2]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	223f      	movs	r2, #63	; 0x3f
 8004192:	2101      	movs	r1, #1
 8004194:	5499      	strb	r1, [r3, r2]
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	2240      	movs	r2, #64	; 0x40
 800419a:	2101      	movs	r1, #1
 800419c:	5499      	strb	r1, [r3, r2]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	2241      	movs	r2, #65	; 0x41
 80041a2:	2101      	movs	r1, #1
 80041a4:	5499      	strb	r1, [r3, r2]
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	2242      	movs	r2, #66	; 0x42
 80041aa:	2101      	movs	r1, #1
 80041ac:	5499      	strb	r1, [r3, r2]
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2243      	movs	r2, #67	; 0x43
 80041b2:	2101      	movs	r1, #1
 80041b4:	5499      	strb	r1, [r3, r2]
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	2244      	movs	r2, #68	; 0x44
 80041ba:	2101      	movs	r1, #1
 80041bc:	5499      	strb	r1, [r3, r2]
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	2245      	movs	r2, #69	; 0x45
 80041c2:	2101      	movs	r1, #1
 80041c4:	5499      	strb	r1, [r3, r2]
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	2246      	movs	r2, #70	; 0x46
 80041ca:	2101      	movs	r1, #1
 80041cc:	5499      	strb	r1, [r3, r2]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	2247      	movs	r2, #71	; 0x47
 80041d2:	2101      	movs	r1, #1
 80041d4:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	223d      	movs	r2, #61	; 0x3d
 80041da:	2101      	movs	r1, #1
 80041dc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80041de:	2300      	movs	r3, #0
}
 80041e0:	0018      	movs	r0, r3
 80041e2:	46bd      	mov	sp, r7
 80041e4:	b002      	add	sp, #8
 80041e6:	bd80      	pop	{r7, pc}

080041e8 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041e8:	b580      	push	{r7, lr}
 80041ea:	b082      	sub	sp, #8
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041f0:	46c0      	nop			; (mov r8, r8)
 80041f2:	46bd      	mov	sp, r7
 80041f4:	b002      	add	sp, #8
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041f8:	b580      	push	{r7, lr}
 80041fa:	b084      	sub	sp, #16
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
 8004200:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b00      	cmp	r3, #0
 8004206:	d108      	bne.n	800421a <HAL_TIM_PWM_Start+0x22>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	223e      	movs	r2, #62	; 0x3e
 800420c:	5c9b      	ldrb	r3, [r3, r2]
 800420e:	b2db      	uxtb	r3, r3
 8004210:	3b01      	subs	r3, #1
 8004212:	1e5a      	subs	r2, r3, #1
 8004214:	4193      	sbcs	r3, r2
 8004216:	b2db      	uxtb	r3, r3
 8004218:	e037      	b.n	800428a <HAL_TIM_PWM_Start+0x92>
 800421a:	683b      	ldr	r3, [r7, #0]
 800421c:	2b04      	cmp	r3, #4
 800421e:	d108      	bne.n	8004232 <HAL_TIM_PWM_Start+0x3a>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	223f      	movs	r2, #63	; 0x3f
 8004224:	5c9b      	ldrb	r3, [r3, r2]
 8004226:	b2db      	uxtb	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	1e5a      	subs	r2, r3, #1
 800422c:	4193      	sbcs	r3, r2
 800422e:	b2db      	uxtb	r3, r3
 8004230:	e02b      	b.n	800428a <HAL_TIM_PWM_Start+0x92>
 8004232:	683b      	ldr	r3, [r7, #0]
 8004234:	2b08      	cmp	r3, #8
 8004236:	d108      	bne.n	800424a <HAL_TIM_PWM_Start+0x52>
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2240      	movs	r2, #64	; 0x40
 800423c:	5c9b      	ldrb	r3, [r3, r2]
 800423e:	b2db      	uxtb	r3, r3
 8004240:	3b01      	subs	r3, #1
 8004242:	1e5a      	subs	r2, r3, #1
 8004244:	4193      	sbcs	r3, r2
 8004246:	b2db      	uxtb	r3, r3
 8004248:	e01f      	b.n	800428a <HAL_TIM_PWM_Start+0x92>
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	2b0c      	cmp	r3, #12
 800424e:	d108      	bne.n	8004262 <HAL_TIM_PWM_Start+0x6a>
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2241      	movs	r2, #65	; 0x41
 8004254:	5c9b      	ldrb	r3, [r3, r2]
 8004256:	b2db      	uxtb	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	1e5a      	subs	r2, r3, #1
 800425c:	4193      	sbcs	r3, r2
 800425e:	b2db      	uxtb	r3, r3
 8004260:	e013      	b.n	800428a <HAL_TIM_PWM_Start+0x92>
 8004262:	683b      	ldr	r3, [r7, #0]
 8004264:	2b10      	cmp	r3, #16
 8004266:	d108      	bne.n	800427a <HAL_TIM_PWM_Start+0x82>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2242      	movs	r2, #66	; 0x42
 800426c:	5c9b      	ldrb	r3, [r3, r2]
 800426e:	b2db      	uxtb	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	1e5a      	subs	r2, r3, #1
 8004274:	4193      	sbcs	r3, r2
 8004276:	b2db      	uxtb	r3, r3
 8004278:	e007      	b.n	800428a <HAL_TIM_PWM_Start+0x92>
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	2243      	movs	r2, #67	; 0x43
 800427e:	5c9b      	ldrb	r3, [r3, r2]
 8004280:	b2db      	uxtb	r3, r3
 8004282:	3b01      	subs	r3, #1
 8004284:	1e5a      	subs	r2, r3, #1
 8004286:	4193      	sbcs	r3, r2
 8004288:	b2db      	uxtb	r3, r3
 800428a:	2b00      	cmp	r3, #0
 800428c:	d001      	beq.n	8004292 <HAL_TIM_PWM_Start+0x9a>
  {
    return HAL_ERROR;
 800428e:	2301      	movs	r3, #1
 8004290:	e090      	b.n	80043b4 <HAL_TIM_PWM_Start+0x1bc>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004292:	683b      	ldr	r3, [r7, #0]
 8004294:	2b00      	cmp	r3, #0
 8004296:	d104      	bne.n	80042a2 <HAL_TIM_PWM_Start+0xaa>
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	223e      	movs	r2, #62	; 0x3e
 800429c:	2102      	movs	r1, #2
 800429e:	5499      	strb	r1, [r3, r2]
 80042a0:	e023      	b.n	80042ea <HAL_TIM_PWM_Start+0xf2>
 80042a2:	683b      	ldr	r3, [r7, #0]
 80042a4:	2b04      	cmp	r3, #4
 80042a6:	d104      	bne.n	80042b2 <HAL_TIM_PWM_Start+0xba>
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	223f      	movs	r2, #63	; 0x3f
 80042ac:	2102      	movs	r1, #2
 80042ae:	5499      	strb	r1, [r3, r2]
 80042b0:	e01b      	b.n	80042ea <HAL_TIM_PWM_Start+0xf2>
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	2b08      	cmp	r3, #8
 80042b6:	d104      	bne.n	80042c2 <HAL_TIM_PWM_Start+0xca>
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2240      	movs	r2, #64	; 0x40
 80042bc:	2102      	movs	r1, #2
 80042be:	5499      	strb	r1, [r3, r2]
 80042c0:	e013      	b.n	80042ea <HAL_TIM_PWM_Start+0xf2>
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	2b0c      	cmp	r3, #12
 80042c6:	d104      	bne.n	80042d2 <HAL_TIM_PWM_Start+0xda>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	2241      	movs	r2, #65	; 0x41
 80042cc:	2102      	movs	r1, #2
 80042ce:	5499      	strb	r1, [r3, r2]
 80042d0:	e00b      	b.n	80042ea <HAL_TIM_PWM_Start+0xf2>
 80042d2:	683b      	ldr	r3, [r7, #0]
 80042d4:	2b10      	cmp	r3, #16
 80042d6:	d104      	bne.n	80042e2 <HAL_TIM_PWM_Start+0xea>
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2242      	movs	r2, #66	; 0x42
 80042dc:	2102      	movs	r1, #2
 80042de:	5499      	strb	r1, [r3, r2]
 80042e0:	e003      	b.n	80042ea <HAL_TIM_PWM_Start+0xf2>
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	2243      	movs	r2, #67	; 0x43
 80042e6:	2102      	movs	r1, #2
 80042e8:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	6839      	ldr	r1, [r7, #0]
 80042f0:	2201      	movs	r2, #1
 80042f2:	0018      	movs	r0, r3
 80042f4:	f000 ff66 	bl	80051c4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80042f8:	687b      	ldr	r3, [r7, #4]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	4a2f      	ldr	r2, [pc, #188]	; (80043bc <HAL_TIM_PWM_Start+0x1c4>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d00e      	beq.n	8004320 <HAL_TIM_PWM_Start+0x128>
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	4a2e      	ldr	r2, [pc, #184]	; (80043c0 <HAL_TIM_PWM_Start+0x1c8>)
 8004308:	4293      	cmp	r3, r2
 800430a:	d009      	beq.n	8004320 <HAL_TIM_PWM_Start+0x128>
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	4a2c      	ldr	r2, [pc, #176]	; (80043c4 <HAL_TIM_PWM_Start+0x1cc>)
 8004312:	4293      	cmp	r3, r2
 8004314:	d004      	beq.n	8004320 <HAL_TIM_PWM_Start+0x128>
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	4a2b      	ldr	r2, [pc, #172]	; (80043c8 <HAL_TIM_PWM_Start+0x1d0>)
 800431c:	4293      	cmp	r3, r2
 800431e:	d101      	bne.n	8004324 <HAL_TIM_PWM_Start+0x12c>
 8004320:	2301      	movs	r3, #1
 8004322:	e000      	b.n	8004326 <HAL_TIM_PWM_Start+0x12e>
 8004324:	2300      	movs	r3, #0
 8004326:	2b00      	cmp	r3, #0
 8004328:	d008      	beq.n	800433c <HAL_TIM_PWM_Start+0x144>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	2180      	movs	r1, #128	; 0x80
 8004336:	0209      	lsls	r1, r1, #8
 8004338:	430a      	orrs	r2, r1
 800433a:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	4a1e      	ldr	r2, [pc, #120]	; (80043bc <HAL_TIM_PWM_Start+0x1c4>)
 8004342:	4293      	cmp	r3, r2
 8004344:	d014      	beq.n	8004370 <HAL_TIM_PWM_Start+0x178>
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681a      	ldr	r2, [r3, #0]
 800434a:	2380      	movs	r3, #128	; 0x80
 800434c:	05db      	lsls	r3, r3, #23
 800434e:	429a      	cmp	r2, r3
 8004350:	d00e      	beq.n	8004370 <HAL_TIM_PWM_Start+0x178>
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1d      	ldr	r2, [pc, #116]	; (80043cc <HAL_TIM_PWM_Start+0x1d4>)
 8004358:	4293      	cmp	r3, r2
 800435a:	d009      	beq.n	8004370 <HAL_TIM_PWM_Start+0x178>
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	4a1b      	ldr	r2, [pc, #108]	; (80043d0 <HAL_TIM_PWM_Start+0x1d8>)
 8004362:	4293      	cmp	r3, r2
 8004364:	d004      	beq.n	8004370 <HAL_TIM_PWM_Start+0x178>
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	4a15      	ldr	r2, [pc, #84]	; (80043c0 <HAL_TIM_PWM_Start+0x1c8>)
 800436c:	4293      	cmp	r3, r2
 800436e:	d116      	bne.n	800439e <HAL_TIM_PWM_Start+0x1a6>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	689b      	ldr	r3, [r3, #8]
 8004376:	4a17      	ldr	r2, [pc, #92]	; (80043d4 <HAL_TIM_PWM_Start+0x1dc>)
 8004378:	4013      	ands	r3, r2
 800437a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2b06      	cmp	r3, #6
 8004380:	d016      	beq.n	80043b0 <HAL_TIM_PWM_Start+0x1b8>
 8004382:	68fa      	ldr	r2, [r7, #12]
 8004384:	2380      	movs	r3, #128	; 0x80
 8004386:	025b      	lsls	r3, r3, #9
 8004388:	429a      	cmp	r2, r3
 800438a:	d011      	beq.n	80043b0 <HAL_TIM_PWM_Start+0x1b8>
    {
      __HAL_TIM_ENABLE(htim);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	681a      	ldr	r2, [r3, #0]
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	2101      	movs	r1, #1
 8004398:	430a      	orrs	r2, r1
 800439a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800439c:	e008      	b.n	80043b0 <HAL_TIM_PWM_Start+0x1b8>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	2101      	movs	r1, #1
 80043aa:	430a      	orrs	r2, r1
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e000      	b.n	80043b2 <HAL_TIM_PWM_Start+0x1ba>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043b0:	46c0      	nop			; (mov r8, r8)
  }

  /* Return function status */
  return HAL_OK;
 80043b2:	2300      	movs	r3, #0
}
 80043b4:	0018      	movs	r0, r3
 80043b6:	46bd      	mov	sp, r7
 80043b8:	b004      	add	sp, #16
 80043ba:	bd80      	pop	{r7, pc}
 80043bc:	40012c00 	.word	0x40012c00
 80043c0:	40014000 	.word	0x40014000
 80043c4:	40014400 	.word	0x40014400
 80043c8:	40014800 	.word	0x40014800
 80043cc:	40000400 	.word	0x40000400
 80043d0:	40000800 	.word	0x40000800
 80043d4:	00010007 	.word	0x00010007

080043d8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80043d8:	b580      	push	{r7, lr}
 80043da:	b084      	sub	sp, #16
 80043dc:	af00      	add	r7, sp, #0
 80043de:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
 80043e6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	681b      	ldr	r3, [r3, #0]
 80043ec:	691b      	ldr	r3, [r3, #16]
 80043ee:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	2202      	movs	r2, #2
 80043f4:	4013      	ands	r3, r2
 80043f6:	d021      	beq.n	800443c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	2202      	movs	r2, #2
 80043fc:	4013      	ands	r3, r2
 80043fe:	d01d      	beq.n	800443c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	2203      	movs	r2, #3
 8004406:	4252      	negs	r2, r2
 8004408:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2201      	movs	r2, #1
 800440e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	2203      	movs	r2, #3
 8004418:	4013      	ands	r3, r2
 800441a:	d004      	beq.n	8004426 <HAL_TIM_IRQHandler+0x4e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	0018      	movs	r0, r3
 8004420:	f000 fac0 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 8004424:	e007      	b.n	8004436 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	0018      	movs	r0, r3
 800442a:	f000 fab3 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	0018      	movs	r0, r3
 8004432:	f000 fabf 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800443c:	68bb      	ldr	r3, [r7, #8]
 800443e:	2204      	movs	r2, #4
 8004440:	4013      	ands	r3, r2
 8004442:	d022      	beq.n	800448a <HAL_TIM_IRQHandler+0xb2>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	2204      	movs	r2, #4
 8004448:	4013      	ands	r3, r2
 800444a:	d01e      	beq.n	800448a <HAL_TIM_IRQHandler+0xb2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	2205      	movs	r2, #5
 8004452:	4252      	negs	r2, r2
 8004454:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2202      	movs	r2, #2
 800445a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	699a      	ldr	r2, [r3, #24]
 8004462:	23c0      	movs	r3, #192	; 0xc0
 8004464:	009b      	lsls	r3, r3, #2
 8004466:	4013      	ands	r3, r2
 8004468:	d004      	beq.n	8004474 <HAL_TIM_IRQHandler+0x9c>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	0018      	movs	r0, r3
 800446e:	f000 fa99 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 8004472:	e007      	b.n	8004484 <HAL_TIM_IRQHandler+0xac>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	0018      	movs	r0, r3
 8004478:	f000 fa8c 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	0018      	movs	r0, r3
 8004480:	f000 fa98 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	2200      	movs	r2, #0
 8004488:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	2208      	movs	r2, #8
 800448e:	4013      	ands	r3, r2
 8004490:	d021      	beq.n	80044d6 <HAL_TIM_IRQHandler+0xfe>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004492:	68fb      	ldr	r3, [r7, #12]
 8004494:	2208      	movs	r2, #8
 8004496:	4013      	ands	r3, r2
 8004498:	d01d      	beq.n	80044d6 <HAL_TIM_IRQHandler+0xfe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	2209      	movs	r2, #9
 80044a0:	4252      	negs	r2, r2
 80044a2:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2204      	movs	r2, #4
 80044a8:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	69db      	ldr	r3, [r3, #28]
 80044b0:	2203      	movs	r2, #3
 80044b2:	4013      	ands	r3, r2
 80044b4:	d004      	beq.n	80044c0 <HAL_TIM_IRQHandler+0xe8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	0018      	movs	r0, r3
 80044ba:	f000 fa73 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 80044be:	e007      	b.n	80044d0 <HAL_TIM_IRQHandler+0xf8>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	0018      	movs	r0, r3
 80044c4:	f000 fa66 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	0018      	movs	r0, r3
 80044cc:	f000 fa72 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	2200      	movs	r2, #0
 80044d4:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80044d6:	68bb      	ldr	r3, [r7, #8]
 80044d8:	2210      	movs	r2, #16
 80044da:	4013      	ands	r3, r2
 80044dc:	d022      	beq.n	8004524 <HAL_TIM_IRQHandler+0x14c>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80044de:	68fb      	ldr	r3, [r7, #12]
 80044e0:	2210      	movs	r2, #16
 80044e2:	4013      	ands	r3, r2
 80044e4:	d01e      	beq.n	8004524 <HAL_TIM_IRQHandler+0x14c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	681b      	ldr	r3, [r3, #0]
 80044ea:	2211      	movs	r2, #17
 80044ec:	4252      	negs	r2, r2
 80044ee:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2208      	movs	r2, #8
 80044f4:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	69da      	ldr	r2, [r3, #28]
 80044fc:	23c0      	movs	r3, #192	; 0xc0
 80044fe:	009b      	lsls	r3, r3, #2
 8004500:	4013      	ands	r3, r2
 8004502:	d004      	beq.n	800450e <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	0018      	movs	r0, r3
 8004508:	f000 fa4c 	bl	80049a4 <HAL_TIM_IC_CaptureCallback>
 800450c:	e007      	b.n	800451e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	0018      	movs	r0, r3
 8004512:	f000 fa3f 	bl	8004994 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	0018      	movs	r0, r3
 800451a:	f000 fa4b 	bl	80049b4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2200      	movs	r2, #0
 8004522:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004524:	68bb      	ldr	r3, [r7, #8]
 8004526:	2201      	movs	r2, #1
 8004528:	4013      	ands	r3, r2
 800452a:	d00c      	beq.n	8004546 <HAL_TIM_IRQHandler+0x16e>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800452c:	68fb      	ldr	r3, [r7, #12]
 800452e:	2201      	movs	r2, #1
 8004530:	4013      	ands	r3, r2
 8004532:	d008      	beq.n	8004546 <HAL_TIM_IRQHandler+0x16e>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	2202      	movs	r2, #2
 800453a:	4252      	negs	r2, r2
 800453c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	0018      	movs	r0, r3
 8004542:	f7fc fd51 	bl	8000fe8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004546:	68bb      	ldr	r3, [r7, #8]
 8004548:	2280      	movs	r2, #128	; 0x80
 800454a:	4013      	ands	r3, r2
 800454c:	d104      	bne.n	8004558 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800454e:	68ba      	ldr	r2, [r7, #8]
 8004550:	2380      	movs	r3, #128	; 0x80
 8004552:	019b      	lsls	r3, r3, #6
 8004554:	4013      	ands	r3, r2
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 8004556:	d00b      	beq.n	8004570 <HAL_TIM_IRQHandler+0x198>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2280      	movs	r2, #128	; 0x80
 800455c:	4013      	ands	r3, r2
 800455e:	d007      	beq.n	8004570 <HAL_TIM_IRQHandler+0x198>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	4a1e      	ldr	r2, [pc, #120]	; (80045e0 <HAL_TIM_IRQHandler+0x208>)
 8004566:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	0018      	movs	r0, r3
 800456c:	f000 ff68 	bl	8005440 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 8004570:	68ba      	ldr	r2, [r7, #8]
 8004572:	2380      	movs	r3, #128	; 0x80
 8004574:	005b      	lsls	r3, r3, #1
 8004576:	4013      	ands	r3, r2
 8004578:	d00b      	beq.n	8004592 <HAL_TIM_IRQHandler+0x1ba>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2280      	movs	r2, #128	; 0x80
 800457e:	4013      	ands	r3, r2
 8004580:	d007      	beq.n	8004592 <HAL_TIM_IRQHandler+0x1ba>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	681b      	ldr	r3, [r3, #0]
 8004586:	4a17      	ldr	r2, [pc, #92]	; (80045e4 <HAL_TIM_IRQHandler+0x20c>)
 8004588:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	0018      	movs	r0, r3
 800458e:	f000 ff5f 	bl	8005450 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004592:	68bb      	ldr	r3, [r7, #8]
 8004594:	2240      	movs	r2, #64	; 0x40
 8004596:	4013      	ands	r3, r2
 8004598:	d00c      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800459a:	68fb      	ldr	r3, [r7, #12]
 800459c:	2240      	movs	r2, #64	; 0x40
 800459e:	4013      	ands	r3, r2
 80045a0:	d008      	beq.n	80045b4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	2241      	movs	r2, #65	; 0x41
 80045a8:	4252      	negs	r2, r2
 80045aa:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	0018      	movs	r0, r3
 80045b0:	f000 fa08 	bl	80049c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80045b4:	68bb      	ldr	r3, [r7, #8]
 80045b6:	2220      	movs	r2, #32
 80045b8:	4013      	ands	r3, r2
 80045ba:	d00c      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x1fe>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	4013      	ands	r3, r2
 80045c2:	d008      	beq.n	80045d6 <HAL_TIM_IRQHandler+0x1fe>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	2221      	movs	r2, #33	; 0x21
 80045ca:	4252      	negs	r2, r2
 80045cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	0018      	movs	r0, r3
 80045d2:	f000 ff2d 	bl	8005430 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80045d6:	46c0      	nop			; (mov r8, r8)
 80045d8:	46bd      	mov	sp, r7
 80045da:	b004      	add	sp, #16
 80045dc:	bd80      	pop	{r7, pc}
 80045de:	46c0      	nop			; (mov r8, r8)
 80045e0:	ffffdf7f 	.word	0xffffdf7f
 80045e4:	fffffeff 	.word	0xfffffeff

080045e8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80045e8:	b580      	push	{r7, lr}
 80045ea:	b086      	sub	sp, #24
 80045ec:	af00      	add	r7, sp, #0
 80045ee:	60f8      	str	r0, [r7, #12]
 80045f0:	60b9      	str	r1, [r7, #8]
 80045f2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045f4:	2317      	movs	r3, #23
 80045f6:	18fb      	adds	r3, r7, r3
 80045f8:	2200      	movs	r2, #0
 80045fa:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80045fc:	68fb      	ldr	r3, [r7, #12]
 80045fe:	223c      	movs	r2, #60	; 0x3c
 8004600:	5c9b      	ldrb	r3, [r3, r2]
 8004602:	2b01      	cmp	r3, #1
 8004604:	d101      	bne.n	800460a <HAL_TIM_PWM_ConfigChannel+0x22>
 8004606:	2302      	movs	r3, #2
 8004608:	e0e5      	b.n	80047d6 <HAL_TIM_PWM_ConfigChannel+0x1ee>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	223c      	movs	r2, #60	; 0x3c
 800460e:	2101      	movs	r1, #1
 8004610:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b14      	cmp	r3, #20
 8004616:	d900      	bls.n	800461a <HAL_TIM_PWM_ConfigChannel+0x32>
 8004618:	e0d1      	b.n	80047be <HAL_TIM_PWM_ConfigChannel+0x1d6>
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	009a      	lsls	r2, r3, #2
 800461e:	4b70      	ldr	r3, [pc, #448]	; (80047e0 <HAL_TIM_PWM_ConfigChannel+0x1f8>)
 8004620:	18d3      	adds	r3, r2, r3
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	469f      	mov	pc, r3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004626:	68fb      	ldr	r3, [r7, #12]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	68ba      	ldr	r2, [r7, #8]
 800462c:	0011      	movs	r1, r2
 800462e:	0018      	movs	r0, r3
 8004630:	f000 fa68 	bl	8004b04 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	681b      	ldr	r3, [r3, #0]
 8004638:	699a      	ldr	r2, [r3, #24]
 800463a:	68fb      	ldr	r3, [r7, #12]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	2108      	movs	r1, #8
 8004640:	430a      	orrs	r2, r1
 8004642:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	699a      	ldr	r2, [r3, #24]
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2104      	movs	r1, #4
 8004650:	438a      	bics	r2, r1
 8004652:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	6999      	ldr	r1, [r3, #24]
 800465a:	68bb      	ldr	r3, [r7, #8]
 800465c:	691a      	ldr	r2, [r3, #16]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	430a      	orrs	r2, r1
 8004664:	619a      	str	r2, [r3, #24]
      break;
 8004666:	e0af      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	0011      	movs	r1, r2
 8004670:	0018      	movs	r0, r3
 8004672:	f000 fad1 	bl	8004c18 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	699a      	ldr	r2, [r3, #24]
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	2180      	movs	r1, #128	; 0x80
 8004682:	0109      	lsls	r1, r1, #4
 8004684:	430a      	orrs	r2, r1
 8004686:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004688:	68fb      	ldr	r3, [r7, #12]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	699a      	ldr	r2, [r3, #24]
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	4954      	ldr	r1, [pc, #336]	; (80047e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 8004694:	400a      	ands	r2, r1
 8004696:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	6999      	ldr	r1, [r3, #24]
 800469e:	68bb      	ldr	r3, [r7, #8]
 80046a0:	691b      	ldr	r3, [r3, #16]
 80046a2:	021a      	lsls	r2, r3, #8
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	430a      	orrs	r2, r1
 80046aa:	619a      	str	r2, [r3, #24]
      break;
 80046ac:	e08c      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68ba      	ldr	r2, [r7, #8]
 80046b4:	0011      	movs	r1, r2
 80046b6:	0018      	movs	r0, r3
 80046b8:	f000 fb32 	bl	8004d20 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	69da      	ldr	r2, [r3, #28]
 80046c2:	68fb      	ldr	r3, [r7, #12]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	2108      	movs	r1, #8
 80046c8:	430a      	orrs	r2, r1
 80046ca:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	69da      	ldr	r2, [r3, #28]
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	2104      	movs	r1, #4
 80046d8:	438a      	bics	r2, r1
 80046da:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	69d9      	ldr	r1, [r3, #28]
 80046e2:	68bb      	ldr	r3, [r7, #8]
 80046e4:	691a      	ldr	r2, [r3, #16]
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	430a      	orrs	r2, r1
 80046ec:	61da      	str	r2, [r3, #28]
      break;
 80046ee:	e06b      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68ba      	ldr	r2, [r7, #8]
 80046f6:	0011      	movs	r1, r2
 80046f8:	0018      	movs	r0, r3
 80046fa:	f000 fb99 	bl	8004e30 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	69da      	ldr	r2, [r3, #28]
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	2180      	movs	r1, #128	; 0x80
 800470a:	0109      	lsls	r1, r1, #4
 800470c:	430a      	orrs	r2, r1
 800470e:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	69da      	ldr	r2, [r3, #28]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	4932      	ldr	r1, [pc, #200]	; (80047e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 800471c:	400a      	ands	r2, r1
 800471e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004720:	68fb      	ldr	r3, [r7, #12]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	69d9      	ldr	r1, [r3, #28]
 8004726:	68bb      	ldr	r3, [r7, #8]
 8004728:	691b      	ldr	r3, [r3, #16]
 800472a:	021a      	lsls	r2, r3, #8
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	430a      	orrs	r2, r1
 8004732:	61da      	str	r2, [r3, #28]
      break;
 8004734:	e048      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	68ba      	ldr	r2, [r7, #8]
 800473c:	0011      	movs	r1, r2
 800473e:	0018      	movs	r0, r3
 8004740:	f000 fbe0 	bl	8004f04 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004744:	68fb      	ldr	r3, [r7, #12]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800474a:	68fb      	ldr	r3, [r7, #12]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	2108      	movs	r1, #8
 8004750:	430a      	orrs	r2, r1
 8004752:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	2104      	movs	r1, #4
 8004760:	438a      	bics	r2, r1
 8004762:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	681b      	ldr	r3, [r3, #0]
 8004768:	6d59      	ldr	r1, [r3, #84]	; 0x54
 800476a:	68bb      	ldr	r3, [r7, #8]
 800476c:	691a      	ldr	r2, [r3, #16]
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	430a      	orrs	r2, r1
 8004774:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 8004776:	e027      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	68ba      	ldr	r2, [r7, #8]
 800477e:	0011      	movs	r1, r2
 8004780:	0018      	movs	r0, r3
 8004782:	f000 fc1f 	bl	8004fc4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004786:	68fb      	ldr	r3, [r7, #12]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	681b      	ldr	r3, [r3, #0]
 8004790:	2180      	movs	r1, #128	; 0x80
 8004792:	0109      	lsls	r1, r1, #4
 8004794:	430a      	orrs	r2, r1
 8004796:	655a      	str	r2, [r3, #84]	; 0x54

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004798:	68fb      	ldr	r3, [r7, #12]
 800479a:	681b      	ldr	r3, [r3, #0]
 800479c:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	4910      	ldr	r1, [pc, #64]	; (80047e4 <HAL_TIM_PWM_ConfigChannel+0x1fc>)
 80047a4:	400a      	ands	r2, r1
 80047a6:	655a      	str	r2, [r3, #84]	; 0x54
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	681b      	ldr	r3, [r3, #0]
 80047ac:	6d59      	ldr	r1, [r3, #84]	; 0x54
 80047ae:	68bb      	ldr	r3, [r7, #8]
 80047b0:	691b      	ldr	r3, [r3, #16]
 80047b2:	021a      	lsls	r2, r3, #8
 80047b4:	68fb      	ldr	r3, [r7, #12]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	430a      	orrs	r2, r1
 80047ba:	655a      	str	r2, [r3, #84]	; 0x54
      break;
 80047bc:	e004      	b.n	80047c8 <HAL_TIM_PWM_ConfigChannel+0x1e0>
    }

    default:
      status = HAL_ERROR;
 80047be:	2317      	movs	r3, #23
 80047c0:	18fb      	adds	r3, r7, r3
 80047c2:	2201      	movs	r2, #1
 80047c4:	701a      	strb	r2, [r3, #0]
      break;
 80047c6:	46c0      	nop			; (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	223c      	movs	r2, #60	; 0x3c
 80047cc:	2100      	movs	r1, #0
 80047ce:	5499      	strb	r1, [r3, r2]

  return status;
 80047d0:	2317      	movs	r3, #23
 80047d2:	18fb      	adds	r3, r7, r3
 80047d4:	781b      	ldrb	r3, [r3, #0]
}
 80047d6:	0018      	movs	r0, r3
 80047d8:	46bd      	mov	sp, r7
 80047da:	b006      	add	sp, #24
 80047dc:	bd80      	pop	{r7, pc}
 80047de:	46c0      	nop			; (mov r8, r8)
 80047e0:	08005550 	.word	0x08005550
 80047e4:	fffffbff 	.word	0xfffffbff

080047e8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80047e8:	b580      	push	{r7, lr}
 80047ea:	b084      	sub	sp, #16
 80047ec:	af00      	add	r7, sp, #0
 80047ee:	6078      	str	r0, [r7, #4]
 80047f0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047f2:	230f      	movs	r3, #15
 80047f4:	18fb      	adds	r3, r7, r3
 80047f6:	2200      	movs	r2, #0
 80047f8:	701a      	strb	r2, [r3, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	223c      	movs	r2, #60	; 0x3c
 80047fe:	5c9b      	ldrb	r3, [r3, r2]
 8004800:	2b01      	cmp	r3, #1
 8004802:	d101      	bne.n	8004808 <HAL_TIM_ConfigClockSource+0x20>
 8004804:	2302      	movs	r3, #2
 8004806:	e0bc      	b.n	8004982 <HAL_TIM_ConfigClockSource+0x19a>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	223c      	movs	r2, #60	; 0x3c
 800480c:	2101      	movs	r1, #1
 800480e:	5499      	strb	r1, [r3, r2]

  htim->State = HAL_TIM_STATE_BUSY;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	223d      	movs	r2, #61	; 0x3d
 8004814:	2102      	movs	r1, #2
 8004816:	5499      	strb	r1, [r3, r2]

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	689b      	ldr	r3, [r3, #8]
 800481e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4a5a      	ldr	r2, [pc, #360]	; (800498c <HAL_TIM_ConfigClockSource+0x1a4>)
 8004824:	4013      	ands	r3, r2
 8004826:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004828:	68bb      	ldr	r3, [r7, #8]
 800482a:	4a59      	ldr	r2, [pc, #356]	; (8004990 <HAL_TIM_ConfigClockSource+0x1a8>)
 800482c:	4013      	ands	r3, r2
 800482e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004838:	683b      	ldr	r3, [r7, #0]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	2280      	movs	r2, #128	; 0x80
 800483e:	0192      	lsls	r2, r2, #6
 8004840:	4293      	cmp	r3, r2
 8004842:	d040      	beq.n	80048c6 <HAL_TIM_ConfigClockSource+0xde>
 8004844:	2280      	movs	r2, #128	; 0x80
 8004846:	0192      	lsls	r2, r2, #6
 8004848:	4293      	cmp	r3, r2
 800484a:	d900      	bls.n	800484e <HAL_TIM_ConfigClockSource+0x66>
 800484c:	e088      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x178>
 800484e:	2280      	movs	r2, #128	; 0x80
 8004850:	0152      	lsls	r2, r2, #5
 8004852:	4293      	cmp	r3, r2
 8004854:	d100      	bne.n	8004858 <HAL_TIM_ConfigClockSource+0x70>
 8004856:	e088      	b.n	800496a <HAL_TIM_ConfigClockSource+0x182>
 8004858:	2280      	movs	r2, #128	; 0x80
 800485a:	0152      	lsls	r2, r2, #5
 800485c:	4293      	cmp	r3, r2
 800485e:	d900      	bls.n	8004862 <HAL_TIM_ConfigClockSource+0x7a>
 8004860:	e07e      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x178>
 8004862:	2b70      	cmp	r3, #112	; 0x70
 8004864:	d018      	beq.n	8004898 <HAL_TIM_ConfigClockSource+0xb0>
 8004866:	d900      	bls.n	800486a <HAL_TIM_ConfigClockSource+0x82>
 8004868:	e07a      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x178>
 800486a:	2b60      	cmp	r3, #96	; 0x60
 800486c:	d04f      	beq.n	800490e <HAL_TIM_ConfigClockSource+0x126>
 800486e:	d900      	bls.n	8004872 <HAL_TIM_ConfigClockSource+0x8a>
 8004870:	e076      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x178>
 8004872:	2b50      	cmp	r3, #80	; 0x50
 8004874:	d03b      	beq.n	80048ee <HAL_TIM_ConfigClockSource+0x106>
 8004876:	d900      	bls.n	800487a <HAL_TIM_ConfigClockSource+0x92>
 8004878:	e072      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x178>
 800487a:	2b40      	cmp	r3, #64	; 0x40
 800487c:	d057      	beq.n	800492e <HAL_TIM_ConfigClockSource+0x146>
 800487e:	d900      	bls.n	8004882 <HAL_TIM_ConfigClockSource+0x9a>
 8004880:	e06e      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x178>
 8004882:	2b30      	cmp	r3, #48	; 0x30
 8004884:	d063      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x166>
 8004886:	d86b      	bhi.n	8004960 <HAL_TIM_ConfigClockSource+0x178>
 8004888:	2b20      	cmp	r3, #32
 800488a:	d060      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x166>
 800488c:	d868      	bhi.n	8004960 <HAL_TIM_ConfigClockSource+0x178>
 800488e:	2b00      	cmp	r3, #0
 8004890:	d05d      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x166>
 8004892:	2b10      	cmp	r3, #16
 8004894:	d05b      	beq.n	800494e <HAL_TIM_ConfigClockSource+0x166>
 8004896:	e063      	b.n	8004960 <HAL_TIM_ConfigClockSource+0x178>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800489c:	683b      	ldr	r3, [r7, #0]
 800489e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048a0:	683b      	ldr	r3, [r7, #0]
 80048a2:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048a4:	683b      	ldr	r3, [r7, #0]
 80048a6:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048a8:	f000 fc6c 	bl	8005184 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80048ac:	687b      	ldr	r3, [r7, #4]
 80048ae:	681b      	ldr	r3, [r3, #0]
 80048b0:	689b      	ldr	r3, [r3, #8]
 80048b2:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80048b4:	68bb      	ldr	r3, [r7, #8]
 80048b6:	2277      	movs	r2, #119	; 0x77
 80048b8:	4313      	orrs	r3, r2
 80048ba:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68ba      	ldr	r2, [r7, #8]
 80048c2:	609a      	str	r2, [r3, #8]
      break;
 80048c4:	e052      	b.n	800496c <HAL_TIM_ConfigClockSource+0x184>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80048ce:	683b      	ldr	r3, [r7, #0]
 80048d0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80048d2:	683b      	ldr	r3, [r7, #0]
 80048d4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80048d6:	f000 fc55 	bl	8005184 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	689a      	ldr	r2, [r3, #8]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	2180      	movs	r1, #128	; 0x80
 80048e6:	01c9      	lsls	r1, r1, #7
 80048e8:	430a      	orrs	r2, r1
 80048ea:	609a      	str	r2, [r3, #8]
      break;
 80048ec:	e03e      	b.n	800496c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80048fa:	001a      	movs	r2, r3
 80048fc:	f000 fbc6 	bl	800508c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	2150      	movs	r1, #80	; 0x50
 8004906:	0018      	movs	r0, r3
 8004908:	f000 fc20 	bl	800514c <TIM_ITRx_SetConfig>
      break;
 800490c:	e02e      	b.n	800496c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004912:	683b      	ldr	r3, [r7, #0]
 8004914:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004916:	683b      	ldr	r3, [r7, #0]
 8004918:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800491a:	001a      	movs	r2, r3
 800491c:	f000 fbe4 	bl	80050e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	2160      	movs	r1, #96	; 0x60
 8004926:	0018      	movs	r0, r3
 8004928:	f000 fc10 	bl	800514c <TIM_ITRx_SetConfig>
      break;
 800492c:	e01e      	b.n	800496c <HAL_TIM_ConfigClockSource+0x184>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004932:	683b      	ldr	r3, [r7, #0]
 8004934:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004936:	683b      	ldr	r3, [r7, #0]
 8004938:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800493a:	001a      	movs	r2, r3
 800493c:	f000 fba6 	bl	800508c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	681b      	ldr	r3, [r3, #0]
 8004944:	2140      	movs	r1, #64	; 0x40
 8004946:	0018      	movs	r0, r3
 8004948:	f000 fc00 	bl	800514c <TIM_ITRx_SetConfig>
      break;
 800494c:	e00e      	b.n	800496c <HAL_TIM_ConfigClockSource+0x184>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681a      	ldr	r2, [r3, #0]
 8004952:	683b      	ldr	r3, [r7, #0]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	0019      	movs	r1, r3
 8004958:	0010      	movs	r0, r2
 800495a:	f000 fbf7 	bl	800514c <TIM_ITRx_SetConfig>
      break;
 800495e:	e005      	b.n	800496c <HAL_TIM_ConfigClockSource+0x184>
    }

    default:
      status = HAL_ERROR;
 8004960:	230f      	movs	r3, #15
 8004962:	18fb      	adds	r3, r7, r3
 8004964:	2201      	movs	r2, #1
 8004966:	701a      	strb	r2, [r3, #0]
      break;
 8004968:	e000      	b.n	800496c <HAL_TIM_ConfigClockSource+0x184>
      break;
 800496a:	46c0      	nop			; (mov r8, r8)
  }
  htim->State = HAL_TIM_STATE_READY;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	223d      	movs	r2, #61	; 0x3d
 8004970:	2101      	movs	r1, #1
 8004972:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	223c      	movs	r2, #60	; 0x3c
 8004978:	2100      	movs	r1, #0
 800497a:	5499      	strb	r1, [r3, r2]

  return status;
 800497c:	230f      	movs	r3, #15
 800497e:	18fb      	adds	r3, r7, r3
 8004980:	781b      	ldrb	r3, [r3, #0]
}
 8004982:	0018      	movs	r0, r3
 8004984:	46bd      	mov	sp, r7
 8004986:	b004      	add	sp, #16
 8004988:	bd80      	pop	{r7, pc}
 800498a:	46c0      	nop			; (mov r8, r8)
 800498c:	ffceff88 	.word	0xffceff88
 8004990:	ffff00ff 	.word	0xffff00ff

08004994 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800499c:	46c0      	nop			; (mov r8, r8)
 800499e:	46bd      	mov	sp, r7
 80049a0:	b002      	add	sp, #8
 80049a2:	bd80      	pop	{r7, pc}

080049a4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80049a4:	b580      	push	{r7, lr}
 80049a6:	b082      	sub	sp, #8
 80049a8:	af00      	add	r7, sp, #0
 80049aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80049ac:	46c0      	nop			; (mov r8, r8)
 80049ae:	46bd      	mov	sp, r7
 80049b0:	b002      	add	sp, #8
 80049b2:	bd80      	pop	{r7, pc}

080049b4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80049b4:	b580      	push	{r7, lr}
 80049b6:	b082      	sub	sp, #8
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80049bc:	46c0      	nop			; (mov r8, r8)
 80049be:	46bd      	mov	sp, r7
 80049c0:	b002      	add	sp, #8
 80049c2:	bd80      	pop	{r7, pc}

080049c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80049c4:	b580      	push	{r7, lr}
 80049c6:	b082      	sub	sp, #8
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80049cc:	46c0      	nop			; (mov r8, r8)
 80049ce:	46bd      	mov	sp, r7
 80049d0:	b002      	add	sp, #8
 80049d2:	bd80      	pop	{r7, pc}

080049d4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80049d4:	b580      	push	{r7, lr}
 80049d6:	b084      	sub	sp, #16
 80049d8:	af00      	add	r7, sp, #0
 80049da:	6078      	str	r0, [r7, #4]
 80049dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	4a3f      	ldr	r2, [pc, #252]	; (8004ae4 <TIM_Base_SetConfig+0x110>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00c      	beq.n	8004a06 <TIM_Base_SetConfig+0x32>
 80049ec:	687a      	ldr	r2, [r7, #4]
 80049ee:	2380      	movs	r3, #128	; 0x80
 80049f0:	05db      	lsls	r3, r3, #23
 80049f2:	429a      	cmp	r2, r3
 80049f4:	d007      	beq.n	8004a06 <TIM_Base_SetConfig+0x32>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	4a3b      	ldr	r2, [pc, #236]	; (8004ae8 <TIM_Base_SetConfig+0x114>)
 80049fa:	4293      	cmp	r3, r2
 80049fc:	d003      	beq.n	8004a06 <TIM_Base_SetConfig+0x32>
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	4a3a      	ldr	r2, [pc, #232]	; (8004aec <TIM_Base_SetConfig+0x118>)
 8004a02:	4293      	cmp	r3, r2
 8004a04:	d108      	bne.n	8004a18 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	2270      	movs	r2, #112	; 0x70
 8004a0a:	4393      	bics	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	4313      	orrs	r3, r2
 8004a16:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	4a32      	ldr	r2, [pc, #200]	; (8004ae4 <TIM_Base_SetConfig+0x110>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d01c      	beq.n	8004a5a <TIM_Base_SetConfig+0x86>
 8004a20:	687a      	ldr	r2, [r7, #4]
 8004a22:	2380      	movs	r3, #128	; 0x80
 8004a24:	05db      	lsls	r3, r3, #23
 8004a26:	429a      	cmp	r2, r3
 8004a28:	d017      	beq.n	8004a5a <TIM_Base_SetConfig+0x86>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	4a2e      	ldr	r2, [pc, #184]	; (8004ae8 <TIM_Base_SetConfig+0x114>)
 8004a2e:	4293      	cmp	r3, r2
 8004a30:	d013      	beq.n	8004a5a <TIM_Base_SetConfig+0x86>
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	4a2d      	ldr	r2, [pc, #180]	; (8004aec <TIM_Base_SetConfig+0x118>)
 8004a36:	4293      	cmp	r3, r2
 8004a38:	d00f      	beq.n	8004a5a <TIM_Base_SetConfig+0x86>
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	4a2c      	ldr	r2, [pc, #176]	; (8004af0 <TIM_Base_SetConfig+0x11c>)
 8004a3e:	4293      	cmp	r3, r2
 8004a40:	d00b      	beq.n	8004a5a <TIM_Base_SetConfig+0x86>
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	4a2b      	ldr	r2, [pc, #172]	; (8004af4 <TIM_Base_SetConfig+0x120>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d007      	beq.n	8004a5a <TIM_Base_SetConfig+0x86>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	4a2a      	ldr	r2, [pc, #168]	; (8004af8 <TIM_Base_SetConfig+0x124>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d003      	beq.n	8004a5a <TIM_Base_SetConfig+0x86>
 8004a52:	687b      	ldr	r3, [r7, #4]
 8004a54:	4a29      	ldr	r2, [pc, #164]	; (8004afc <TIM_Base_SetConfig+0x128>)
 8004a56:	4293      	cmp	r3, r2
 8004a58:	d108      	bne.n	8004a6c <TIM_Base_SetConfig+0x98>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	4a28      	ldr	r2, [pc, #160]	; (8004b00 <TIM_Base_SetConfig+0x12c>)
 8004a5e:	4013      	ands	r3, r2
 8004a60:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	68db      	ldr	r3, [r3, #12]
 8004a66:	68fa      	ldr	r2, [r7, #12]
 8004a68:	4313      	orrs	r3, r2
 8004a6a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
 8004a6e:	2280      	movs	r2, #128	; 0x80
 8004a70:	4393      	bics	r3, r2
 8004a72:	001a      	movs	r2, r3
 8004a74:	683b      	ldr	r3, [r7, #0]
 8004a76:	695b      	ldr	r3, [r3, #20]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	68fa      	ldr	r2, [r7, #12]
 8004a80:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004a82:	683b      	ldr	r3, [r7, #0]
 8004a84:	689a      	ldr	r2, [r3, #8]
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	681a      	ldr	r2, [r3, #0]
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	4a13      	ldr	r2, [pc, #76]	; (8004ae4 <TIM_Base_SetConfig+0x110>)
 8004a96:	4293      	cmp	r3, r2
 8004a98:	d00b      	beq.n	8004ab2 <TIM_Base_SetConfig+0xde>
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	4a15      	ldr	r2, [pc, #84]	; (8004af4 <TIM_Base_SetConfig+0x120>)
 8004a9e:	4293      	cmp	r3, r2
 8004aa0:	d007      	beq.n	8004ab2 <TIM_Base_SetConfig+0xde>
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	4a14      	ldr	r2, [pc, #80]	; (8004af8 <TIM_Base_SetConfig+0x124>)
 8004aa6:	4293      	cmp	r3, r2
 8004aa8:	d003      	beq.n	8004ab2 <TIM_Base_SetConfig+0xde>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	4a13      	ldr	r2, [pc, #76]	; (8004afc <TIM_Base_SetConfig+0x128>)
 8004aae:	4293      	cmp	r3, r2
 8004ab0:	d103      	bne.n	8004aba <TIM_Base_SetConfig+0xe6>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004ab2:	683b      	ldr	r3, [r7, #0]
 8004ab4:	691a      	ldr	r2, [r3, #16]
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	2201      	movs	r2, #1
 8004abe:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004ac0:	687b      	ldr	r3, [r7, #4]
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	2201      	movs	r2, #1
 8004ac6:	4013      	ands	r3, r2
 8004ac8:	2b01      	cmp	r3, #1
 8004aca:	d106      	bne.n	8004ada <TIM_Base_SetConfig+0x106>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	2201      	movs	r2, #1
 8004ad2:	4393      	bics	r3, r2
 8004ad4:	001a      	movs	r2, r3
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	611a      	str	r2, [r3, #16]
  }
}
 8004ada:	46c0      	nop			; (mov r8, r8)
 8004adc:	46bd      	mov	sp, r7
 8004ade:	b004      	add	sp, #16
 8004ae0:	bd80      	pop	{r7, pc}
 8004ae2:	46c0      	nop			; (mov r8, r8)
 8004ae4:	40012c00 	.word	0x40012c00
 8004ae8:	40000400 	.word	0x40000400
 8004aec:	40000800 	.word	0x40000800
 8004af0:	40002000 	.word	0x40002000
 8004af4:	40014000 	.word	0x40014000
 8004af8:	40014400 	.word	0x40014400
 8004afc:	40014800 	.word	0x40014800
 8004b00:	fffffcff 	.word	0xfffffcff

08004b04 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004b04:	b580      	push	{r7, lr}
 8004b06:	b086      	sub	sp, #24
 8004b08:	af00      	add	r7, sp, #0
 8004b0a:	6078      	str	r0, [r7, #4]
 8004b0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	6a1b      	ldr	r3, [r3, #32]
 8004b12:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	6a1b      	ldr	r3, [r3, #32]
 8004b18:	2201      	movs	r2, #1
 8004b1a:	4393      	bics	r3, r2
 8004b1c:	001a      	movs	r2, r3
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	685b      	ldr	r3, [r3, #4]
 8004b26:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	699b      	ldr	r3, [r3, #24]
 8004b2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	4a32      	ldr	r2, [pc, #200]	; (8004bfc <TIM_OC1_SetConfig+0xf8>)
 8004b32:	4013      	ands	r3, r2
 8004b34:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	2203      	movs	r2, #3
 8004b3a:	4393      	bics	r3, r2
 8004b3c:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b3e:	683b      	ldr	r3, [r7, #0]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	68fa      	ldr	r2, [r7, #12]
 8004b44:	4313      	orrs	r3, r2
 8004b46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004b48:	697b      	ldr	r3, [r7, #20]
 8004b4a:	2202      	movs	r2, #2
 8004b4c:	4393      	bics	r3, r2
 8004b4e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004b50:	683b      	ldr	r3, [r7, #0]
 8004b52:	689b      	ldr	r3, [r3, #8]
 8004b54:	697a      	ldr	r2, [r7, #20]
 8004b56:	4313      	orrs	r3, r2
 8004b58:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a28      	ldr	r2, [pc, #160]	; (8004c00 <TIM_OC1_SetConfig+0xfc>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d00b      	beq.n	8004b7a <TIM_OC1_SetConfig+0x76>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a27      	ldr	r2, [pc, #156]	; (8004c04 <TIM_OC1_SetConfig+0x100>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d007      	beq.n	8004b7a <TIM_OC1_SetConfig+0x76>
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	4a26      	ldr	r2, [pc, #152]	; (8004c08 <TIM_OC1_SetConfig+0x104>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d003      	beq.n	8004b7a <TIM_OC1_SetConfig+0x76>
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	4a25      	ldr	r2, [pc, #148]	; (8004c0c <TIM_OC1_SetConfig+0x108>)
 8004b76:	4293      	cmp	r3, r2
 8004b78:	d10c      	bne.n	8004b94 <TIM_OC1_SetConfig+0x90>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004b7a:	697b      	ldr	r3, [r7, #20]
 8004b7c:	2208      	movs	r2, #8
 8004b7e:	4393      	bics	r3, r2
 8004b80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004b82:	683b      	ldr	r3, [r7, #0]
 8004b84:	68db      	ldr	r3, [r3, #12]
 8004b86:	697a      	ldr	r2, [r7, #20]
 8004b88:	4313      	orrs	r3, r2
 8004b8a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004b8c:	697b      	ldr	r3, [r7, #20]
 8004b8e:	2204      	movs	r2, #4
 8004b90:	4393      	bics	r3, r2
 8004b92:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	4a1a      	ldr	r2, [pc, #104]	; (8004c00 <TIM_OC1_SetConfig+0xfc>)
 8004b98:	4293      	cmp	r3, r2
 8004b9a:	d00b      	beq.n	8004bb4 <TIM_OC1_SetConfig+0xb0>
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a19      	ldr	r2, [pc, #100]	; (8004c04 <TIM_OC1_SetConfig+0x100>)
 8004ba0:	4293      	cmp	r3, r2
 8004ba2:	d007      	beq.n	8004bb4 <TIM_OC1_SetConfig+0xb0>
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	4a18      	ldr	r2, [pc, #96]	; (8004c08 <TIM_OC1_SetConfig+0x104>)
 8004ba8:	4293      	cmp	r3, r2
 8004baa:	d003      	beq.n	8004bb4 <TIM_OC1_SetConfig+0xb0>
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	4a17      	ldr	r2, [pc, #92]	; (8004c0c <TIM_OC1_SetConfig+0x108>)
 8004bb0:	4293      	cmp	r3, r2
 8004bb2:	d111      	bne.n	8004bd8 <TIM_OC1_SetConfig+0xd4>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004bb4:	693b      	ldr	r3, [r7, #16]
 8004bb6:	4a16      	ldr	r2, [pc, #88]	; (8004c10 <TIM_OC1_SetConfig+0x10c>)
 8004bb8:	4013      	ands	r3, r2
 8004bba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004bbc:	693b      	ldr	r3, [r7, #16]
 8004bbe:	4a15      	ldr	r2, [pc, #84]	; (8004c14 <TIM_OC1_SetConfig+0x110>)
 8004bc0:	4013      	ands	r3, r2
 8004bc2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004bc4:	683b      	ldr	r3, [r7, #0]
 8004bc6:	695b      	ldr	r3, [r3, #20]
 8004bc8:	693a      	ldr	r2, [r7, #16]
 8004bca:	4313      	orrs	r3, r2
 8004bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004bce:	683b      	ldr	r3, [r7, #0]
 8004bd0:	699b      	ldr	r3, [r3, #24]
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	4313      	orrs	r3, r2
 8004bd6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	693a      	ldr	r2, [r7, #16]
 8004bdc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	68fa      	ldr	r2, [r7, #12]
 8004be2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004be4:	683b      	ldr	r3, [r7, #0]
 8004be6:	685a      	ldr	r2, [r3, #4]
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	697a      	ldr	r2, [r7, #20]
 8004bf0:	621a      	str	r2, [r3, #32]
}
 8004bf2:	46c0      	nop			; (mov r8, r8)
 8004bf4:	46bd      	mov	sp, r7
 8004bf6:	b006      	add	sp, #24
 8004bf8:	bd80      	pop	{r7, pc}
 8004bfa:	46c0      	nop			; (mov r8, r8)
 8004bfc:	fffeff8f 	.word	0xfffeff8f
 8004c00:	40012c00 	.word	0x40012c00
 8004c04:	40014000 	.word	0x40014000
 8004c08:	40014400 	.word	0x40014400
 8004c0c:	40014800 	.word	0x40014800
 8004c10:	fffffeff 	.word	0xfffffeff
 8004c14:	fffffdff 	.word	0xfffffdff

08004c18 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004c18:	b580      	push	{r7, lr}
 8004c1a:	b086      	sub	sp, #24
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	6078      	str	r0, [r7, #4]
 8004c20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	6a1b      	ldr	r3, [r3, #32]
 8004c26:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	6a1b      	ldr	r3, [r3, #32]
 8004c2c:	2210      	movs	r2, #16
 8004c2e:	4393      	bics	r3, r2
 8004c30:	001a      	movs	r2, r3
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	685b      	ldr	r3, [r3, #4]
 8004c3a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	699b      	ldr	r3, [r3, #24]
 8004c40:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004c42:	68fb      	ldr	r3, [r7, #12]
 8004c44:	4a2e      	ldr	r2, [pc, #184]	; (8004d00 <TIM_OC2_SetConfig+0xe8>)
 8004c46:	4013      	ands	r3, r2
 8004c48:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4a2d      	ldr	r2, [pc, #180]	; (8004d04 <TIM_OC2_SetConfig+0xec>)
 8004c4e:	4013      	ands	r3, r2
 8004c50:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	681b      	ldr	r3, [r3, #0]
 8004c56:	021b      	lsls	r3, r3, #8
 8004c58:	68fa      	ldr	r2, [r7, #12]
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004c5e:	697b      	ldr	r3, [r7, #20]
 8004c60:	2220      	movs	r2, #32
 8004c62:	4393      	bics	r3, r2
 8004c64:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	011b      	lsls	r3, r3, #4
 8004c6c:	697a      	ldr	r2, [r7, #20]
 8004c6e:	4313      	orrs	r3, r2
 8004c70:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	4a24      	ldr	r2, [pc, #144]	; (8004d08 <TIM_OC2_SetConfig+0xf0>)
 8004c76:	4293      	cmp	r3, r2
 8004c78:	d10d      	bne.n	8004c96 <TIM_OC2_SetConfig+0x7e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004c7a:	697b      	ldr	r3, [r7, #20]
 8004c7c:	2280      	movs	r2, #128	; 0x80
 8004c7e:	4393      	bics	r3, r2
 8004c80:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004c82:	683b      	ldr	r3, [r7, #0]
 8004c84:	68db      	ldr	r3, [r3, #12]
 8004c86:	011b      	lsls	r3, r3, #4
 8004c88:	697a      	ldr	r2, [r7, #20]
 8004c8a:	4313      	orrs	r3, r2
 8004c8c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004c8e:	697b      	ldr	r3, [r7, #20]
 8004c90:	2240      	movs	r2, #64	; 0x40
 8004c92:	4393      	bics	r3, r2
 8004c94:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	4a1b      	ldr	r2, [pc, #108]	; (8004d08 <TIM_OC2_SetConfig+0xf0>)
 8004c9a:	4293      	cmp	r3, r2
 8004c9c:	d00b      	beq.n	8004cb6 <TIM_OC2_SetConfig+0x9e>
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a1a      	ldr	r2, [pc, #104]	; (8004d0c <TIM_OC2_SetConfig+0xf4>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d007      	beq.n	8004cb6 <TIM_OC2_SetConfig+0x9e>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a19      	ldr	r2, [pc, #100]	; (8004d10 <TIM_OC2_SetConfig+0xf8>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d003      	beq.n	8004cb6 <TIM_OC2_SetConfig+0x9e>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a18      	ldr	r2, [pc, #96]	; (8004d14 <TIM_OC2_SetConfig+0xfc>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d113      	bne.n	8004cde <TIM_OC2_SetConfig+0xc6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004cb6:	693b      	ldr	r3, [r7, #16]
 8004cb8:	4a17      	ldr	r2, [pc, #92]	; (8004d18 <TIM_OC2_SetConfig+0x100>)
 8004cba:	4013      	ands	r3, r2
 8004cbc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004cbe:	693b      	ldr	r3, [r7, #16]
 8004cc0:	4a16      	ldr	r2, [pc, #88]	; (8004d1c <TIM_OC2_SetConfig+0x104>)
 8004cc2:	4013      	ands	r3, r2
 8004cc4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004cc6:	683b      	ldr	r3, [r7, #0]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	009b      	lsls	r3, r3, #2
 8004ccc:	693a      	ldr	r2, [r7, #16]
 8004cce:	4313      	orrs	r3, r2
 8004cd0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004cd2:	683b      	ldr	r3, [r7, #0]
 8004cd4:	699b      	ldr	r3, [r3, #24]
 8004cd6:	009b      	lsls	r3, r3, #2
 8004cd8:	693a      	ldr	r2, [r7, #16]
 8004cda:	4313      	orrs	r3, r2
 8004cdc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	693a      	ldr	r2, [r7, #16]
 8004ce2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	68fa      	ldr	r2, [r7, #12]
 8004ce8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	685a      	ldr	r2, [r3, #4]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	697a      	ldr	r2, [r7, #20]
 8004cf6:	621a      	str	r2, [r3, #32]
}
 8004cf8:	46c0      	nop			; (mov r8, r8)
 8004cfa:	46bd      	mov	sp, r7
 8004cfc:	b006      	add	sp, #24
 8004cfe:	bd80      	pop	{r7, pc}
 8004d00:	feff8fff 	.word	0xfeff8fff
 8004d04:	fffffcff 	.word	0xfffffcff
 8004d08:	40012c00 	.word	0x40012c00
 8004d0c:	40014000 	.word	0x40014000
 8004d10:	40014400 	.word	0x40014400
 8004d14:	40014800 	.word	0x40014800
 8004d18:	fffffbff 	.word	0xfffffbff
 8004d1c:	fffff7ff 	.word	0xfffff7ff

08004d20 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004d20:	b580      	push	{r7, lr}
 8004d22:	b086      	sub	sp, #24
 8004d24:	af00      	add	r7, sp, #0
 8004d26:	6078      	str	r0, [r7, #4]
 8004d28:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	6a1b      	ldr	r3, [r3, #32]
 8004d2e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004d30:	687b      	ldr	r3, [r7, #4]
 8004d32:	6a1b      	ldr	r3, [r3, #32]
 8004d34:	4a33      	ldr	r2, [pc, #204]	; (8004e04 <TIM_OC3_SetConfig+0xe4>)
 8004d36:	401a      	ands	r2, r3
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	69db      	ldr	r3, [r3, #28]
 8004d46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004d48:	68fb      	ldr	r3, [r7, #12]
 8004d4a:	4a2f      	ldr	r2, [pc, #188]	; (8004e08 <TIM_OC3_SetConfig+0xe8>)
 8004d4c:	4013      	ands	r3, r2
 8004d4e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	2203      	movs	r2, #3
 8004d54:	4393      	bics	r3, r2
 8004d56:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	68fa      	ldr	r2, [r7, #12]
 8004d5e:	4313      	orrs	r3, r2
 8004d60:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004d62:	697b      	ldr	r3, [r7, #20]
 8004d64:	4a29      	ldr	r2, [pc, #164]	; (8004e0c <TIM_OC3_SetConfig+0xec>)
 8004d66:	4013      	ands	r3, r2
 8004d68:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004d6a:	683b      	ldr	r3, [r7, #0]
 8004d6c:	689b      	ldr	r3, [r3, #8]
 8004d6e:	021b      	lsls	r3, r3, #8
 8004d70:	697a      	ldr	r2, [r7, #20]
 8004d72:	4313      	orrs	r3, r2
 8004d74:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	4a25      	ldr	r2, [pc, #148]	; (8004e10 <TIM_OC3_SetConfig+0xf0>)
 8004d7a:	4293      	cmp	r3, r2
 8004d7c:	d10d      	bne.n	8004d9a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004d7e:	697b      	ldr	r3, [r7, #20]
 8004d80:	4a24      	ldr	r2, [pc, #144]	; (8004e14 <TIM_OC3_SetConfig+0xf4>)
 8004d82:	4013      	ands	r3, r2
 8004d84:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004d86:	683b      	ldr	r3, [r7, #0]
 8004d88:	68db      	ldr	r3, [r3, #12]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	697a      	ldr	r2, [r7, #20]
 8004d8e:	4313      	orrs	r3, r2
 8004d90:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004d92:	697b      	ldr	r3, [r7, #20]
 8004d94:	4a20      	ldr	r2, [pc, #128]	; (8004e18 <TIM_OC3_SetConfig+0xf8>)
 8004d96:	4013      	ands	r3, r2
 8004d98:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	4a1c      	ldr	r2, [pc, #112]	; (8004e10 <TIM_OC3_SetConfig+0xf0>)
 8004d9e:	4293      	cmp	r3, r2
 8004da0:	d00b      	beq.n	8004dba <TIM_OC3_SetConfig+0x9a>
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	4a1d      	ldr	r2, [pc, #116]	; (8004e1c <TIM_OC3_SetConfig+0xfc>)
 8004da6:	4293      	cmp	r3, r2
 8004da8:	d007      	beq.n	8004dba <TIM_OC3_SetConfig+0x9a>
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	4a1c      	ldr	r2, [pc, #112]	; (8004e20 <TIM_OC3_SetConfig+0x100>)
 8004dae:	4293      	cmp	r3, r2
 8004db0:	d003      	beq.n	8004dba <TIM_OC3_SetConfig+0x9a>
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	4a1b      	ldr	r2, [pc, #108]	; (8004e24 <TIM_OC3_SetConfig+0x104>)
 8004db6:	4293      	cmp	r3, r2
 8004db8:	d113      	bne.n	8004de2 <TIM_OC3_SetConfig+0xc2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	4a1a      	ldr	r2, [pc, #104]	; (8004e28 <TIM_OC3_SetConfig+0x108>)
 8004dbe:	4013      	ands	r3, r2
 8004dc0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004dc2:	693b      	ldr	r3, [r7, #16]
 8004dc4:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <TIM_OC3_SetConfig+0x10c>)
 8004dc6:	4013      	ands	r3, r2
 8004dc8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004dca:	683b      	ldr	r3, [r7, #0]
 8004dcc:	695b      	ldr	r3, [r3, #20]
 8004dce:	011b      	lsls	r3, r3, #4
 8004dd0:	693a      	ldr	r2, [r7, #16]
 8004dd2:	4313      	orrs	r3, r2
 8004dd4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004dd6:	683b      	ldr	r3, [r7, #0]
 8004dd8:	699b      	ldr	r3, [r3, #24]
 8004dda:	011b      	lsls	r3, r3, #4
 8004ddc:	693a      	ldr	r2, [r7, #16]
 8004dde:	4313      	orrs	r3, r2
 8004de0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	693a      	ldr	r2, [r7, #16]
 8004de6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	68fa      	ldr	r2, [r7, #12]
 8004dec:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004dee:	683b      	ldr	r3, [r7, #0]
 8004df0:	685a      	ldr	r2, [r3, #4]
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	697a      	ldr	r2, [r7, #20]
 8004dfa:	621a      	str	r2, [r3, #32]
}
 8004dfc:	46c0      	nop			; (mov r8, r8)
 8004dfe:	46bd      	mov	sp, r7
 8004e00:	b006      	add	sp, #24
 8004e02:	bd80      	pop	{r7, pc}
 8004e04:	fffffeff 	.word	0xfffffeff
 8004e08:	fffeff8f 	.word	0xfffeff8f
 8004e0c:	fffffdff 	.word	0xfffffdff
 8004e10:	40012c00 	.word	0x40012c00
 8004e14:	fffff7ff 	.word	0xfffff7ff
 8004e18:	fffffbff 	.word	0xfffffbff
 8004e1c:	40014000 	.word	0x40014000
 8004e20:	40014400 	.word	0x40014400
 8004e24:	40014800 	.word	0x40014800
 8004e28:	ffffefff 	.word	0xffffefff
 8004e2c:	ffffdfff 	.word	0xffffdfff

08004e30 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004e30:	b580      	push	{r7, lr}
 8004e32:	b086      	sub	sp, #24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	6a1b      	ldr	r3, [r3, #32]
 8004e3e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	6a1b      	ldr	r3, [r3, #32]
 8004e44:	4a26      	ldr	r2, [pc, #152]	; (8004ee0 <TIM_OC4_SetConfig+0xb0>)
 8004e46:	401a      	ands	r2, r3
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	685b      	ldr	r3, [r3, #4]
 8004e50:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	69db      	ldr	r3, [r3, #28]
 8004e56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004e58:	68fb      	ldr	r3, [r7, #12]
 8004e5a:	4a22      	ldr	r2, [pc, #136]	; (8004ee4 <TIM_OC4_SetConfig+0xb4>)
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	4a21      	ldr	r2, [pc, #132]	; (8004ee8 <TIM_OC4_SetConfig+0xb8>)
 8004e64:	4013      	ands	r3, r2
 8004e66:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004e68:	683b      	ldr	r3, [r7, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	021b      	lsls	r3, r3, #8
 8004e6e:	68fa      	ldr	r2, [r7, #12]
 8004e70:	4313      	orrs	r3, r2
 8004e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004e74:	693b      	ldr	r3, [r7, #16]
 8004e76:	4a1d      	ldr	r2, [pc, #116]	; (8004eec <TIM_OC4_SetConfig+0xbc>)
 8004e78:	4013      	ands	r3, r2
 8004e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004e7c:	683b      	ldr	r3, [r7, #0]
 8004e7e:	689b      	ldr	r3, [r3, #8]
 8004e80:	031b      	lsls	r3, r3, #12
 8004e82:	693a      	ldr	r2, [r7, #16]
 8004e84:	4313      	orrs	r3, r2
 8004e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	4a19      	ldr	r2, [pc, #100]	; (8004ef0 <TIM_OC4_SetConfig+0xc0>)
 8004e8c:	4293      	cmp	r3, r2
 8004e8e:	d00b      	beq.n	8004ea8 <TIM_OC4_SetConfig+0x78>
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a18      	ldr	r2, [pc, #96]	; (8004ef4 <TIM_OC4_SetConfig+0xc4>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d007      	beq.n	8004ea8 <TIM_OC4_SetConfig+0x78>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a17      	ldr	r2, [pc, #92]	; (8004ef8 <TIM_OC4_SetConfig+0xc8>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d003      	beq.n	8004ea8 <TIM_OC4_SetConfig+0x78>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a16      	ldr	r2, [pc, #88]	; (8004efc <TIM_OC4_SetConfig+0xcc>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d109      	bne.n	8004ebc <TIM_OC4_SetConfig+0x8c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004ea8:	697b      	ldr	r3, [r7, #20]
 8004eaa:	4a15      	ldr	r2, [pc, #84]	; (8004f00 <TIM_OC4_SetConfig+0xd0>)
 8004eac:	4013      	ands	r3, r2
 8004eae:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004eb0:	683b      	ldr	r3, [r7, #0]
 8004eb2:	695b      	ldr	r3, [r3, #20]
 8004eb4:	019b      	lsls	r3, r3, #6
 8004eb6:	697a      	ldr	r2, [r7, #20]
 8004eb8:	4313      	orrs	r3, r2
 8004eba:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	697a      	ldr	r2, [r7, #20]
 8004ec0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004ec2:	687b      	ldr	r3, [r7, #4]
 8004ec4:	68fa      	ldr	r2, [r7, #12]
 8004ec6:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685a      	ldr	r2, [r3, #4]
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	693a      	ldr	r2, [r7, #16]
 8004ed4:	621a      	str	r2, [r3, #32]
}
 8004ed6:	46c0      	nop			; (mov r8, r8)
 8004ed8:	46bd      	mov	sp, r7
 8004eda:	b006      	add	sp, #24
 8004edc:	bd80      	pop	{r7, pc}
 8004ede:	46c0      	nop			; (mov r8, r8)
 8004ee0:	ffffefff 	.word	0xffffefff
 8004ee4:	feff8fff 	.word	0xfeff8fff
 8004ee8:	fffffcff 	.word	0xfffffcff
 8004eec:	ffffdfff 	.word	0xffffdfff
 8004ef0:	40012c00 	.word	0x40012c00
 8004ef4:	40014000 	.word	0x40014000
 8004ef8:	40014400 	.word	0x40014400
 8004efc:	40014800 	.word	0x40014800
 8004f00:	ffffbfff 	.word	0xffffbfff

08004f04 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b086      	sub	sp, #24
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]
 8004f0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	6a1b      	ldr	r3, [r3, #32]
 8004f12:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	6a1b      	ldr	r3, [r3, #32]
 8004f18:	4a23      	ldr	r2, [pc, #140]	; (8004fa8 <TIM_OC5_SetConfig+0xa4>)
 8004f1a:	401a      	ands	r2, r3
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004f2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4a1f      	ldr	r2, [pc, #124]	; (8004fac <TIM_OC5_SetConfig+0xa8>)
 8004f30:	4013      	ands	r3, r2
 8004f32:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004f34:	683b      	ldr	r3, [r7, #0]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	68fa      	ldr	r2, [r7, #12]
 8004f3a:	4313      	orrs	r3, r2
 8004f3c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8004f3e:	693b      	ldr	r3, [r7, #16]
 8004f40:	4a1b      	ldr	r2, [pc, #108]	; (8004fb0 <TIM_OC5_SetConfig+0xac>)
 8004f42:	4013      	ands	r3, r2
 8004f44:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	689b      	ldr	r3, [r3, #8]
 8004f4a:	041b      	lsls	r3, r3, #16
 8004f4c:	693a      	ldr	r2, [r7, #16]
 8004f4e:	4313      	orrs	r3, r2
 8004f50:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	4a17      	ldr	r2, [pc, #92]	; (8004fb4 <TIM_OC5_SetConfig+0xb0>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d00b      	beq.n	8004f72 <TIM_OC5_SetConfig+0x6e>
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	4a16      	ldr	r2, [pc, #88]	; (8004fb8 <TIM_OC5_SetConfig+0xb4>)
 8004f5e:	4293      	cmp	r3, r2
 8004f60:	d007      	beq.n	8004f72 <TIM_OC5_SetConfig+0x6e>
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	4a15      	ldr	r2, [pc, #84]	; (8004fbc <TIM_OC5_SetConfig+0xb8>)
 8004f66:	4293      	cmp	r3, r2
 8004f68:	d003      	beq.n	8004f72 <TIM_OC5_SetConfig+0x6e>
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	4a14      	ldr	r2, [pc, #80]	; (8004fc0 <TIM_OC5_SetConfig+0xbc>)
 8004f6e:	4293      	cmp	r3, r2
 8004f70:	d109      	bne.n	8004f86 <TIM_OC5_SetConfig+0x82>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	4a0c      	ldr	r2, [pc, #48]	; (8004fa8 <TIM_OC5_SetConfig+0xa4>)
 8004f76:	4013      	ands	r3, r2
 8004f78:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8004f7a:	683b      	ldr	r3, [r7, #0]
 8004f7c:	695b      	ldr	r3, [r3, #20]
 8004f7e:	021b      	lsls	r3, r3, #8
 8004f80:	697a      	ldr	r2, [r7, #20]
 8004f82:	4313      	orrs	r3, r2
 8004f84:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	697a      	ldr	r2, [r7, #20]
 8004f8a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	68fa      	ldr	r2, [r7, #12]
 8004f90:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8004f92:	683b      	ldr	r3, [r7, #0]
 8004f94:	685a      	ldr	r2, [r3, #4]
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	659a      	str	r2, [r3, #88]	; 0x58

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	693a      	ldr	r2, [r7, #16]
 8004f9e:	621a      	str	r2, [r3, #32]
}
 8004fa0:	46c0      	nop			; (mov r8, r8)
 8004fa2:	46bd      	mov	sp, r7
 8004fa4:	b006      	add	sp, #24
 8004fa6:	bd80      	pop	{r7, pc}
 8004fa8:	fffeffff 	.word	0xfffeffff
 8004fac:	fffeff8f 	.word	0xfffeff8f
 8004fb0:	fffdffff 	.word	0xfffdffff
 8004fb4:	40012c00 	.word	0x40012c00
 8004fb8:	40014000 	.word	0x40014000
 8004fbc:	40014400 	.word	0x40014400
 8004fc0:	40014800 	.word	0x40014800

08004fc4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              const TIM_OC_InitTypeDef *OC_Config)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b086      	sub	sp, #24
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	6a1b      	ldr	r3, [r3, #32]
 8004fd2:	613b      	str	r3, [r7, #16]

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	6a1b      	ldr	r3, [r3, #32]
 8004fd8:	4a24      	ldr	r2, [pc, #144]	; (800506c <TIM_OC6_SetConfig+0xa8>)
 8004fda:	401a      	ands	r2, r3
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004fea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8004fec:	68fb      	ldr	r3, [r7, #12]
 8004fee:	4a20      	ldr	r2, [pc, #128]	; (8005070 <TIM_OC6_SetConfig+0xac>)
 8004ff0:	4013      	ands	r3, r2
 8004ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004ff4:	683b      	ldr	r3, [r7, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	021b      	lsls	r3, r3, #8
 8004ffa:	68fa      	ldr	r2, [r7, #12]
 8004ffc:	4313      	orrs	r3, r2
 8004ffe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8005000:	693b      	ldr	r3, [r7, #16]
 8005002:	4a1c      	ldr	r2, [pc, #112]	; (8005074 <TIM_OC6_SetConfig+0xb0>)
 8005004:	4013      	ands	r3, r2
 8005006:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8005008:	683b      	ldr	r3, [r7, #0]
 800500a:	689b      	ldr	r3, [r3, #8]
 800500c:	051b      	lsls	r3, r3, #20
 800500e:	693a      	ldr	r2, [r7, #16]
 8005010:	4313      	orrs	r3, r2
 8005012:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a18      	ldr	r2, [pc, #96]	; (8005078 <TIM_OC6_SetConfig+0xb4>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d00b      	beq.n	8005034 <TIM_OC6_SetConfig+0x70>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a17      	ldr	r2, [pc, #92]	; (800507c <TIM_OC6_SetConfig+0xb8>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d007      	beq.n	8005034 <TIM_OC6_SetConfig+0x70>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a16      	ldr	r2, [pc, #88]	; (8005080 <TIM_OC6_SetConfig+0xbc>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d003      	beq.n	8005034 <TIM_OC6_SetConfig+0x70>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	4a15      	ldr	r2, [pc, #84]	; (8005084 <TIM_OC6_SetConfig+0xc0>)
 8005030:	4293      	cmp	r3, r2
 8005032:	d109      	bne.n	8005048 <TIM_OC6_SetConfig+0x84>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005034:	697b      	ldr	r3, [r7, #20]
 8005036:	4a14      	ldr	r2, [pc, #80]	; (8005088 <TIM_OC6_SetConfig+0xc4>)
 8005038:	4013      	ands	r3, r2
 800503a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	029b      	lsls	r3, r3, #10
 8005042:	697a      	ldr	r2, [r7, #20]
 8005044:	4313      	orrs	r3, r2
 8005046:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	697a      	ldr	r2, [r7, #20]
 800504c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	655a      	str	r2, [r3, #84]	; 0x54

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005054:	683b      	ldr	r3, [r7, #0]
 8005056:	685a      	ldr	r2, [r3, #4]
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	693a      	ldr	r2, [r7, #16]
 8005060:	621a      	str	r2, [r3, #32]
}
 8005062:	46c0      	nop			; (mov r8, r8)
 8005064:	46bd      	mov	sp, r7
 8005066:	b006      	add	sp, #24
 8005068:	bd80      	pop	{r7, pc}
 800506a:	46c0      	nop			; (mov r8, r8)
 800506c:	ffefffff 	.word	0xffefffff
 8005070:	feff8fff 	.word	0xfeff8fff
 8005074:	ffdfffff 	.word	0xffdfffff
 8005078:	40012c00 	.word	0x40012c00
 800507c:	40014000 	.word	0x40014000
 8005080:	40014400 	.word	0x40014400
 8005084:	40014800 	.word	0x40014800
 8005088:	fffbffff 	.word	0xfffbffff

0800508c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800508c:	b580      	push	{r7, lr}
 800508e:	b086      	sub	sp, #24
 8005090:	af00      	add	r7, sp, #0
 8005092:	60f8      	str	r0, [r7, #12]
 8005094:	60b9      	str	r1, [r7, #8]
 8005096:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	6a1b      	ldr	r3, [r3, #32]
 800509c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	2201      	movs	r2, #1
 80050a4:	4393      	bics	r3, r2
 80050a6:	001a      	movs	r2, r3
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	22f0      	movs	r2, #240	; 0xf0
 80050b6:	4393      	bics	r3, r2
 80050b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	011b      	lsls	r3, r3, #4
 80050be:	693a      	ldr	r2, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80050c4:	697b      	ldr	r3, [r7, #20]
 80050c6:	220a      	movs	r2, #10
 80050c8:	4393      	bics	r3, r2
 80050ca:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80050cc:	697a      	ldr	r2, [r7, #20]
 80050ce:	68bb      	ldr	r3, [r7, #8]
 80050d0:	4313      	orrs	r3, r2
 80050d2:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	693a      	ldr	r2, [r7, #16]
 80050d8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	697a      	ldr	r2, [r7, #20]
 80050de:	621a      	str	r2, [r3, #32]
}
 80050e0:	46c0      	nop			; (mov r8, r8)
 80050e2:	46bd      	mov	sp, r7
 80050e4:	b006      	add	sp, #24
 80050e6:	bd80      	pop	{r7, pc}

080050e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80050e8:	b580      	push	{r7, lr}
 80050ea:	b086      	sub	sp, #24
 80050ec:	af00      	add	r7, sp, #0
 80050ee:	60f8      	str	r0, [r7, #12]
 80050f0:	60b9      	str	r1, [r7, #8]
 80050f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	6a1b      	ldr	r3, [r3, #32]
 80050f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80050fa:	68fb      	ldr	r3, [r7, #12]
 80050fc:	6a1b      	ldr	r3, [r3, #32]
 80050fe:	2210      	movs	r2, #16
 8005100:	4393      	bics	r3, r2
 8005102:	001a      	movs	r2, r3
 8005104:	68fb      	ldr	r3, [r7, #12]
 8005106:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005108:	68fb      	ldr	r3, [r7, #12]
 800510a:	699b      	ldr	r3, [r3, #24]
 800510c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800510e:	693b      	ldr	r3, [r7, #16]
 8005110:	4a0d      	ldr	r2, [pc, #52]	; (8005148 <TIM_TI2_ConfigInputStage+0x60>)
 8005112:	4013      	ands	r3, r2
 8005114:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	031b      	lsls	r3, r3, #12
 800511a:	693a      	ldr	r2, [r7, #16]
 800511c:	4313      	orrs	r3, r2
 800511e:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	22a0      	movs	r2, #160	; 0xa0
 8005124:	4393      	bics	r3, r2
 8005126:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005128:	68bb      	ldr	r3, [r7, #8]
 800512a:	011b      	lsls	r3, r3, #4
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005132:	68fb      	ldr	r3, [r7, #12]
 8005134:	693a      	ldr	r2, [r7, #16]
 8005136:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	697a      	ldr	r2, [r7, #20]
 800513c:	621a      	str	r2, [r3, #32]
}
 800513e:	46c0      	nop			; (mov r8, r8)
 8005140:	46bd      	mov	sp, r7
 8005142:	b006      	add	sp, #24
 8005144:	bd80      	pop	{r7, pc}
 8005146:	46c0      	nop			; (mov r8, r8)
 8005148:	ffff0fff 	.word	0xffff0fff

0800514c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800514c:	b580      	push	{r7, lr}
 800514e:	b084      	sub	sp, #16
 8005150:	af00      	add	r7, sp, #0
 8005152:	6078      	str	r0, [r7, #4]
 8005154:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	689b      	ldr	r3, [r3, #8]
 800515a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800515c:	68fb      	ldr	r3, [r7, #12]
 800515e:	4a08      	ldr	r2, [pc, #32]	; (8005180 <TIM_ITRx_SetConfig+0x34>)
 8005160:	4013      	ands	r3, r2
 8005162:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005164:	683a      	ldr	r2, [r7, #0]
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	4313      	orrs	r3, r2
 800516a:	2207      	movs	r2, #7
 800516c:	4313      	orrs	r3, r2
 800516e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	68fa      	ldr	r2, [r7, #12]
 8005174:	609a      	str	r2, [r3, #8]
}
 8005176:	46c0      	nop			; (mov r8, r8)
 8005178:	46bd      	mov	sp, r7
 800517a:	b004      	add	sp, #16
 800517c:	bd80      	pop	{r7, pc}
 800517e:	46c0      	nop			; (mov r8, r8)
 8005180:	ffcfff8f 	.word	0xffcfff8f

08005184 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005184:	b580      	push	{r7, lr}
 8005186:	b086      	sub	sp, #24
 8005188:	af00      	add	r7, sp, #0
 800518a:	60f8      	str	r0, [r7, #12]
 800518c:	60b9      	str	r1, [r7, #8]
 800518e:	607a      	str	r2, [r7, #4]
 8005190:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005198:	697b      	ldr	r3, [r7, #20]
 800519a:	4a09      	ldr	r2, [pc, #36]	; (80051c0 <TIM_ETR_SetConfig+0x3c>)
 800519c:	4013      	ands	r3, r2
 800519e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80051a0:	683b      	ldr	r3, [r7, #0]
 80051a2:	021a      	lsls	r2, r3, #8
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	68bb      	ldr	r3, [r7, #8]
 80051aa:	4313      	orrs	r3, r2
 80051ac:	697a      	ldr	r2, [r7, #20]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	697a      	ldr	r2, [r7, #20]
 80051b6:	609a      	str	r2, [r3, #8]
}
 80051b8:	46c0      	nop			; (mov r8, r8)
 80051ba:	46bd      	mov	sp, r7
 80051bc:	b006      	add	sp, #24
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	ffff00ff 	.word	0xffff00ff

080051c4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80051c4:	b580      	push	{r7, lr}
 80051c6:	b086      	sub	sp, #24
 80051c8:	af00      	add	r7, sp, #0
 80051ca:	60f8      	str	r0, [r7, #12]
 80051cc:	60b9      	str	r1, [r7, #8]
 80051ce:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80051d0:	68bb      	ldr	r3, [r7, #8]
 80051d2:	221f      	movs	r2, #31
 80051d4:	4013      	ands	r3, r2
 80051d6:	2201      	movs	r2, #1
 80051d8:	409a      	lsls	r2, r3
 80051da:	0013      	movs	r3, r2
 80051dc:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	6a1b      	ldr	r3, [r3, #32]
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	43d2      	mvns	r2, r2
 80051e6:	401a      	ands	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	6a1a      	ldr	r2, [r3, #32]
 80051f0:	68bb      	ldr	r3, [r7, #8]
 80051f2:	211f      	movs	r1, #31
 80051f4:	400b      	ands	r3, r1
 80051f6:	6879      	ldr	r1, [r7, #4]
 80051f8:	4099      	lsls	r1, r3
 80051fa:	000b      	movs	r3, r1
 80051fc:	431a      	orrs	r2, r3
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	621a      	str	r2, [r3, #32]
}
 8005202:	46c0      	nop			; (mov r8, r8)
 8005204:	46bd      	mov	sp, r7
 8005206:	b006      	add	sp, #24
 8005208:	bd80      	pop	{r7, pc}
	...

0800520c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800520c:	b580      	push	{r7, lr}
 800520e:	b084      	sub	sp, #16
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
 8005214:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005216:	687b      	ldr	r3, [r7, #4]
 8005218:	223c      	movs	r2, #60	; 0x3c
 800521a:	5c9b      	ldrb	r3, [r3, r2]
 800521c:	2b01      	cmp	r3, #1
 800521e:	d101      	bne.n	8005224 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005220:	2302      	movs	r3, #2
 8005222:	e05a      	b.n	80052da <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	223c      	movs	r2, #60	; 0x3c
 8005228:	2101      	movs	r1, #1
 800522a:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	223d      	movs	r2, #61	; 0x3d
 8005230:	2102      	movs	r1, #2
 8005232:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	681b      	ldr	r3, [r3, #0]
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	689b      	ldr	r3, [r3, #8]
 8005242:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	4a26      	ldr	r2, [pc, #152]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800524a:	4293      	cmp	r3, r2
 800524c:	d108      	bne.n	8005260 <HAL_TIMEx_MasterConfigSynchronization+0x54>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 800524e:	68fb      	ldr	r3, [r7, #12]
 8005250:	4a25      	ldr	r2, [pc, #148]	; (80052e8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005252:	4013      	ands	r3, r2
 8005254:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8005256:	683b      	ldr	r3, [r7, #0]
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	68fa      	ldr	r2, [r7, #12]
 800525c:	4313      	orrs	r3, r2
 800525e:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	2270      	movs	r2, #112	; 0x70
 8005264:	4393      	bics	r3, r2
 8005266:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005268:	683b      	ldr	r3, [r7, #0]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	68fa      	ldr	r2, [r7, #12]
 800526e:	4313      	orrs	r3, r2
 8005270:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	68fa      	ldr	r2, [r7, #12]
 8005278:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	4a19      	ldr	r2, [pc, #100]	; (80052e4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005280:	4293      	cmp	r3, r2
 8005282:	d014      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681a      	ldr	r2, [r3, #0]
 8005288:	2380      	movs	r3, #128	; 0x80
 800528a:	05db      	lsls	r3, r3, #23
 800528c:	429a      	cmp	r2, r3
 800528e:	d00e      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	4a15      	ldr	r2, [pc, #84]	; (80052ec <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005296:	4293      	cmp	r3, r2
 8005298:	d009      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	681b      	ldr	r3, [r3, #0]
 800529e:	4a14      	ldr	r2, [pc, #80]	; (80052f0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80052a0:	4293      	cmp	r3, r2
 80052a2:	d004      	beq.n	80052ae <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a12      	ldr	r2, [pc, #72]	; (80052f4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80052aa:	4293      	cmp	r3, r2
 80052ac:	d10c      	bne.n	80052c8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80052ae:	68bb      	ldr	r3, [r7, #8]
 80052b0:	2280      	movs	r2, #128	; 0x80
 80052b2:	4393      	bics	r3, r2
 80052b4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80052b6:	683b      	ldr	r3, [r7, #0]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	68ba      	ldr	r2, [r7, #8]
 80052bc:	4313      	orrs	r3, r2
 80052be:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	68ba      	ldr	r2, [r7, #8]
 80052c6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	223d      	movs	r2, #61	; 0x3d
 80052cc:	2101      	movs	r1, #1
 80052ce:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	223c      	movs	r2, #60	; 0x3c
 80052d4:	2100      	movs	r1, #0
 80052d6:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80052d8:	2300      	movs	r3, #0
}
 80052da:	0018      	movs	r0, r3
 80052dc:	46bd      	mov	sp, r7
 80052de:	b004      	add	sp, #16
 80052e0:	bd80      	pop	{r7, pc}
 80052e2:	46c0      	nop			; (mov r8, r8)
 80052e4:	40012c00 	.word	0x40012c00
 80052e8:	ff0fffff 	.word	0xff0fffff
 80052ec:	40000400 	.word	0x40000400
 80052f0:	40000800 	.word	0x40000800
 80052f4:	40014000 	.word	0x40014000

080052f8 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b084      	sub	sp, #16
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005302:	2300      	movs	r3, #0
 8005304:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));
  assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	223c      	movs	r2, #60	; 0x3c
 800530a:	5c9b      	ldrb	r3, [r3, r2]
 800530c:	2b01      	cmp	r3, #1
 800530e:	d101      	bne.n	8005314 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005310:	2302      	movs	r3, #2
 8005312:	e06f      	b.n	80053f4 <HAL_TIMEx_ConfigBreakDeadTime+0xfc>
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	223c      	movs	r2, #60	; 0x3c
 8005318:	2101      	movs	r1, #1
 800531a:	5499      	strb	r1, [r3, r2]

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800531c:	68fb      	ldr	r3, [r7, #12]
 800531e:	22ff      	movs	r2, #255	; 0xff
 8005320:	4393      	bics	r3, r2
 8005322:	001a      	movs	r2, r3
 8005324:	683b      	ldr	r3, [r7, #0]
 8005326:	68db      	ldr	r3, [r3, #12]
 8005328:	4313      	orrs	r3, r2
 800532a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800532c:	68fb      	ldr	r3, [r7, #12]
 800532e:	4a33      	ldr	r2, [pc, #204]	; (80053fc <HAL_TIMEx_ConfigBreakDeadTime+0x104>)
 8005330:	401a      	ands	r2, r3
 8005332:	683b      	ldr	r3, [r7, #0]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	4313      	orrs	r3, r2
 8005338:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 800533a:	68fb      	ldr	r3, [r7, #12]
 800533c:	4a30      	ldr	r2, [pc, #192]	; (8005400 <HAL_TIMEx_ConfigBreakDeadTime+0x108>)
 800533e:	401a      	ands	r2, r3
 8005340:	683b      	ldr	r3, [r7, #0]
 8005342:	685b      	ldr	r3, [r3, #4]
 8005344:	4313      	orrs	r3, r2
 8005346:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	4a2e      	ldr	r2, [pc, #184]	; (8005404 <HAL_TIMEx_ConfigBreakDeadTime+0x10c>)
 800534c:	401a      	ands	r2, r3
 800534e:	683b      	ldr	r3, [r7, #0]
 8005350:	681b      	ldr	r3, [r3, #0]
 8005352:	4313      	orrs	r3, r2
 8005354:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	4a2b      	ldr	r2, [pc, #172]	; (8005408 <HAL_TIMEx_ConfigBreakDeadTime+0x110>)
 800535a:	401a      	ands	r2, r3
 800535c:	683b      	ldr	r3, [r7, #0]
 800535e:	691b      	ldr	r3, [r3, #16]
 8005360:	4313      	orrs	r3, r2
 8005362:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	4a29      	ldr	r2, [pc, #164]	; (800540c <HAL_TIMEx_ConfigBreakDeadTime+0x114>)
 8005368:	401a      	ands	r2, r3
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	4313      	orrs	r3, r2
 8005370:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	4a26      	ldr	r2, [pc, #152]	; (8005410 <HAL_TIMEx_ConfigBreakDeadTime+0x118>)
 8005376:	401a      	ands	r2, r3
 8005378:	683b      	ldr	r3, [r7, #0]
 800537a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005380:	68fb      	ldr	r3, [r7, #12]
 8005382:	4a24      	ldr	r2, [pc, #144]	; (8005414 <HAL_TIMEx_ConfigBreakDeadTime+0x11c>)
 8005384:	401a      	ands	r2, r3
 8005386:	683b      	ldr	r3, [r7, #0]
 8005388:	699b      	ldr	r3, [r3, #24]
 800538a:	041b      	lsls	r3, r3, #16
 800538c:	4313      	orrs	r3, r2
 800538e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005390:	68fb      	ldr	r3, [r7, #12]
 8005392:	4a21      	ldr	r2, [pc, #132]	; (8005418 <HAL_TIMEx_ConfigBreakDeadTime+0x120>)
 8005394:	401a      	ands	r2, r3
 8005396:	683b      	ldr	r3, [r7, #0]
 8005398:	69db      	ldr	r3, [r3, #28]
 800539a:	4313      	orrs	r3, r2
 800539c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	4a1e      	ldr	r2, [pc, #120]	; (800541c <HAL_TIMEx_ConfigBreakDeadTime+0x124>)
 80053a4:	4293      	cmp	r3, r2
 80053a6:	d11c      	bne.n	80053e2 <HAL_TIMEx_ConfigBreakDeadTime+0xea>
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));
    assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	4a1d      	ldr	r2, [pc, #116]	; (8005420 <HAL_TIMEx_ConfigBreakDeadTime+0x128>)
 80053ac:	401a      	ands	r2, r3
 80053ae:	683b      	ldr	r3, [r7, #0]
 80053b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80053b2:	051b      	lsls	r3, r3, #20
 80053b4:	4313      	orrs	r3, r2
 80053b6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80053b8:	68fb      	ldr	r3, [r7, #12]
 80053ba:	4a1a      	ldr	r2, [pc, #104]	; (8005424 <HAL_TIMEx_ConfigBreakDeadTime+0x12c>)
 80053bc:	401a      	ands	r2, r3
 80053be:	683b      	ldr	r3, [r7, #0]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	4313      	orrs	r3, r2
 80053c4:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	4a17      	ldr	r2, [pc, #92]	; (8005428 <HAL_TIMEx_ConfigBreakDeadTime+0x130>)
 80053ca:	401a      	ands	r2, r3
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053d0:	4313      	orrs	r3, r2
 80053d2:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	4a15      	ldr	r2, [pc, #84]	; (800542c <HAL_TIMEx_ConfigBreakDeadTime+0x134>)
 80053d8:	401a      	ands	r2, r3
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80053de:	4313      	orrs	r3, r2
 80053e0:	60fb      	str	r3, [r7, #12]
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 80053e2:	687b      	ldr	r3, [r7, #4]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	68fa      	ldr	r2, [r7, #12]
 80053e8:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	223c      	movs	r2, #60	; 0x3c
 80053ee:	2100      	movs	r1, #0
 80053f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80053f2:	2300      	movs	r3, #0
}
 80053f4:	0018      	movs	r0, r3
 80053f6:	46bd      	mov	sp, r7
 80053f8:	b004      	add	sp, #16
 80053fa:	bd80      	pop	{r7, pc}
 80053fc:	fffffcff 	.word	0xfffffcff
 8005400:	fffffbff 	.word	0xfffffbff
 8005404:	fffff7ff 	.word	0xfffff7ff
 8005408:	ffffefff 	.word	0xffffefff
 800540c:	ffffdfff 	.word	0xffffdfff
 8005410:	ffffbfff 	.word	0xffffbfff
 8005414:	fff0ffff 	.word	0xfff0ffff
 8005418:	efffffff 	.word	0xefffffff
 800541c:	40012c00 	.word	0x40012c00
 8005420:	ff0fffff 	.word	0xff0fffff
 8005424:	feffffff 	.word	0xfeffffff
 8005428:	fdffffff 	.word	0xfdffffff
 800542c:	dfffffff 	.word	0xdfffffff

08005430 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	b082      	sub	sp, #8
 8005434:	af00      	add	r7, sp, #0
 8005436:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005438:	46c0      	nop			; (mov r8, r8)
 800543a:	46bd      	mov	sp, r7
 800543c:	b002      	add	sp, #8
 800543e:	bd80      	pop	{r7, pc}

08005440 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005440:	b580      	push	{r7, lr}
 8005442:	b082      	sub	sp, #8
 8005444:	af00      	add	r7, sp, #0
 8005446:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005448:	46c0      	nop			; (mov r8, r8)
 800544a:	46bd      	mov	sp, r7
 800544c:	b002      	add	sp, #8
 800544e:	bd80      	pop	{r7, pc}

08005450 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b082      	sub	sp, #8
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005458:	46c0      	nop			; (mov r8, r8)
 800545a:	46bd      	mov	sp, r7
 800545c:	b002      	add	sp, #8
 800545e:	bd80      	pop	{r7, pc}

08005460 <memset>:
 8005460:	0003      	movs	r3, r0
 8005462:	1882      	adds	r2, r0, r2
 8005464:	4293      	cmp	r3, r2
 8005466:	d100      	bne.n	800546a <memset+0xa>
 8005468:	4770      	bx	lr
 800546a:	7019      	strb	r1, [r3, #0]
 800546c:	3301      	adds	r3, #1
 800546e:	e7f9      	b.n	8005464 <memset+0x4>

08005470 <__libc_init_array>:
 8005470:	b570      	push	{r4, r5, r6, lr}
 8005472:	2600      	movs	r6, #0
 8005474:	4c0c      	ldr	r4, [pc, #48]	; (80054a8 <__libc_init_array+0x38>)
 8005476:	4d0d      	ldr	r5, [pc, #52]	; (80054ac <__libc_init_array+0x3c>)
 8005478:	1b64      	subs	r4, r4, r5
 800547a:	10a4      	asrs	r4, r4, #2
 800547c:	42a6      	cmp	r6, r4
 800547e:	d109      	bne.n	8005494 <__libc_init_array+0x24>
 8005480:	2600      	movs	r6, #0
 8005482:	f000 f819 	bl	80054b8 <_init>
 8005486:	4c0a      	ldr	r4, [pc, #40]	; (80054b0 <__libc_init_array+0x40>)
 8005488:	4d0a      	ldr	r5, [pc, #40]	; (80054b4 <__libc_init_array+0x44>)
 800548a:	1b64      	subs	r4, r4, r5
 800548c:	10a4      	asrs	r4, r4, #2
 800548e:	42a6      	cmp	r6, r4
 8005490:	d105      	bne.n	800549e <__libc_init_array+0x2e>
 8005492:	bd70      	pop	{r4, r5, r6, pc}
 8005494:	00b3      	lsls	r3, r6, #2
 8005496:	58eb      	ldr	r3, [r5, r3]
 8005498:	4798      	blx	r3
 800549a:	3601      	adds	r6, #1
 800549c:	e7ee      	b.n	800547c <__libc_init_array+0xc>
 800549e:	00b3      	lsls	r3, r6, #2
 80054a0:	58eb      	ldr	r3, [r5, r3]
 80054a2:	4798      	blx	r3
 80054a4:	3601      	adds	r6, #1
 80054a6:	e7f2      	b.n	800548e <__libc_init_array+0x1e>
 80054a8:	080055a4 	.word	0x080055a4
 80054ac:	080055a4 	.word	0x080055a4
 80054b0:	080055a8 	.word	0x080055a8
 80054b4:	080055a4 	.word	0x080055a4

080054b8 <_init>:
 80054b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054ba:	46c0      	nop			; (mov r8, r8)
 80054bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054be:	bc08      	pop	{r3}
 80054c0:	469e      	mov	lr, r3
 80054c2:	4770      	bx	lr

080054c4 <_fini>:
 80054c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80054c6:	46c0      	nop			; (mov r8, r8)
 80054c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80054ca:	bc08      	pop	{r3}
 80054cc:	469e      	mov	lr, r3
 80054ce:	4770      	bx	lr
