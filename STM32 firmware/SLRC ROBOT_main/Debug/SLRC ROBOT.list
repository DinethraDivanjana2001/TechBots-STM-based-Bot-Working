
SLRC ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007288  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  08007418  08007418  00008418  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007568  08007568  000091d0  2**0
                  CONTENTS
  4 .ARM          00000008  08007568  08007568  00008568  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007570  08007570  000091d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007570  08007570  00008570  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007574  08007574  00008574  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d0  20000000  08007578  00009000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000091d0  2**0
                  CONTENTS
 10 .bss          000005ec  200001d0  200001d0  000091d0  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200007bc  200007bc  000091d0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000091d0  2**0
                  CONTENTS, READONLY
 13 .debug_info   00013d85  00000000  00000000  00009200  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002818  00000000  00000000  0001cf85  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000012f0  00000000  00000000  0001f7a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000ef5  00000000  00000000  00020a90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022691  00000000  00000000  00021985  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00016e6c  00000000  00000000  00044016  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000d3b9e  00000000  00000000  0005ae82  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0012ea20  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000059c0  00000000  00000000  0012ea64  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000070  00000000  00000000  00134424  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001d0 	.word	0x200001d0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08007400 	.word	0x08007400

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001d4 	.word	0x200001d4
 80001cc:	08007400 	.word	0x08007400

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_dmul>:
 8000270:	b570      	push	{r4, r5, r6, lr}
 8000272:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000276:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 800027a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800027e:	bf1d      	ittte	ne
 8000280:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000284:	ea94 0f0c 	teqne	r4, ip
 8000288:	ea95 0f0c 	teqne	r5, ip
 800028c:	f000 f8de 	bleq	800044c <__aeabi_dmul+0x1dc>
 8000290:	442c      	add	r4, r5
 8000292:	ea81 0603 	eor.w	r6, r1, r3
 8000296:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800029a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800029e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80002a2:	bf18      	it	ne
 80002a4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80002a8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80002ac:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80002b0:	d038      	beq.n	8000324 <__aeabi_dmul+0xb4>
 80002b2:	fba0 ce02 	umull	ip, lr, r0, r2
 80002b6:	f04f 0500 	mov.w	r5, #0
 80002ba:	fbe1 e502 	umlal	lr, r5, r1, r2
 80002be:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 80002c2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80002c6:	f04f 0600 	mov.w	r6, #0
 80002ca:	fbe1 5603 	umlal	r5, r6, r1, r3
 80002ce:	f09c 0f00 	teq	ip, #0
 80002d2:	bf18      	it	ne
 80002d4:	f04e 0e01 	orrne.w	lr, lr, #1
 80002d8:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 80002dc:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 80002e0:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 80002e4:	d204      	bcs.n	80002f0 <__aeabi_dmul+0x80>
 80002e6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80002ea:	416d      	adcs	r5, r5
 80002ec:	eb46 0606 	adc.w	r6, r6, r6
 80002f0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80002f4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80002f8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80002fc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000300:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000304:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000308:	bf88      	it	hi
 800030a:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 800030e:	d81e      	bhi.n	800034e <__aeabi_dmul+0xde>
 8000310:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000314:	bf08      	it	eq
 8000316:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800031a:	f150 0000 	adcs.w	r0, r0, #0
 800031e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000322:	bd70      	pop	{r4, r5, r6, pc}
 8000324:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000328:	ea46 0101 	orr.w	r1, r6, r1
 800032c:	ea40 0002 	orr.w	r0, r0, r2
 8000330:	ea81 0103 	eor.w	r1, r1, r3
 8000334:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000338:	bfc2      	ittt	gt
 800033a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800033e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000342:	bd70      	popgt	{r4, r5, r6, pc}
 8000344:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000348:	f04f 0e00 	mov.w	lr, #0
 800034c:	3c01      	subs	r4, #1
 800034e:	f300 80ab 	bgt.w	80004a8 <__aeabi_dmul+0x238>
 8000352:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 8000356:	bfde      	ittt	le
 8000358:	2000      	movle	r0, #0
 800035a:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 800035e:	bd70      	pople	{r4, r5, r6, pc}
 8000360:	f1c4 0400 	rsb	r4, r4, #0
 8000364:	3c20      	subs	r4, #32
 8000366:	da35      	bge.n	80003d4 <__aeabi_dmul+0x164>
 8000368:	340c      	adds	r4, #12
 800036a:	dc1b      	bgt.n	80003a4 <__aeabi_dmul+0x134>
 800036c:	f104 0414 	add.w	r4, r4, #20
 8000370:	f1c4 0520 	rsb	r5, r4, #32
 8000374:	fa00 f305 	lsl.w	r3, r0, r5
 8000378:	fa20 f004 	lsr.w	r0, r0, r4
 800037c:	fa01 f205 	lsl.w	r2, r1, r5
 8000380:	ea40 0002 	orr.w	r0, r0, r2
 8000384:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000388:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 800038c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000390:	fa21 f604 	lsr.w	r6, r1, r4
 8000394:	eb42 0106 	adc.w	r1, r2, r6
 8000398:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800039c:	bf08      	it	eq
 800039e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003a2:	bd70      	pop	{r4, r5, r6, pc}
 80003a4:	f1c4 040c 	rsb	r4, r4, #12
 80003a8:	f1c4 0520 	rsb	r5, r4, #32
 80003ac:	fa00 f304 	lsl.w	r3, r0, r4
 80003b0:	fa20 f005 	lsr.w	r0, r0, r5
 80003b4:	fa01 f204 	lsl.w	r2, r1, r4
 80003b8:	ea40 0002 	orr.w	r0, r0, r2
 80003bc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003c0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80003c4:	f141 0100 	adc.w	r1, r1, #0
 80003c8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80003cc:	bf08      	it	eq
 80003ce:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80003d2:	bd70      	pop	{r4, r5, r6, pc}
 80003d4:	f1c4 0520 	rsb	r5, r4, #32
 80003d8:	fa00 f205 	lsl.w	r2, r0, r5
 80003dc:	ea4e 0e02 	orr.w	lr, lr, r2
 80003e0:	fa20 f304 	lsr.w	r3, r0, r4
 80003e4:	fa01 f205 	lsl.w	r2, r1, r5
 80003e8:	ea43 0302 	orr.w	r3, r3, r2
 80003ec:	fa21 f004 	lsr.w	r0, r1, r4
 80003f0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80003f4:	fa21 f204 	lsr.w	r2, r1, r4
 80003f8:	ea20 0002 	bic.w	r0, r0, r2
 80003fc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000400:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000404:	bf08      	it	eq
 8000406:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800040a:	bd70      	pop	{r4, r5, r6, pc}
 800040c:	f094 0f00 	teq	r4, #0
 8000410:	d10f      	bne.n	8000432 <__aeabi_dmul+0x1c2>
 8000412:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 8000416:	0040      	lsls	r0, r0, #1
 8000418:	eb41 0101 	adc.w	r1, r1, r1
 800041c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000420:	bf08      	it	eq
 8000422:	3c01      	subeq	r4, #1
 8000424:	d0f7      	beq.n	8000416 <__aeabi_dmul+0x1a6>
 8000426:	ea41 0106 	orr.w	r1, r1, r6
 800042a:	f095 0f00 	teq	r5, #0
 800042e:	bf18      	it	ne
 8000430:	4770      	bxne	lr
 8000432:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 8000436:	0052      	lsls	r2, r2, #1
 8000438:	eb43 0303 	adc.w	r3, r3, r3
 800043c:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000440:	bf08      	it	eq
 8000442:	3d01      	subeq	r5, #1
 8000444:	d0f7      	beq.n	8000436 <__aeabi_dmul+0x1c6>
 8000446:	ea43 0306 	orr.w	r3, r3, r6
 800044a:	4770      	bx	lr
 800044c:	ea94 0f0c 	teq	r4, ip
 8000450:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000454:	bf18      	it	ne
 8000456:	ea95 0f0c 	teqne	r5, ip
 800045a:	d00c      	beq.n	8000476 <__aeabi_dmul+0x206>
 800045c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000460:	bf18      	it	ne
 8000462:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000466:	d1d1      	bne.n	800040c <__aeabi_dmul+0x19c>
 8000468:	ea81 0103 	eor.w	r1, r1, r3
 800046c:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000470:	f04f 0000 	mov.w	r0, #0
 8000474:	bd70      	pop	{r4, r5, r6, pc}
 8000476:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800047a:	bf06      	itte	eq
 800047c:	4610      	moveq	r0, r2
 800047e:	4619      	moveq	r1, r3
 8000480:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000484:	d019      	beq.n	80004ba <__aeabi_dmul+0x24a>
 8000486:	ea94 0f0c 	teq	r4, ip
 800048a:	d102      	bne.n	8000492 <__aeabi_dmul+0x222>
 800048c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000490:	d113      	bne.n	80004ba <__aeabi_dmul+0x24a>
 8000492:	ea95 0f0c 	teq	r5, ip
 8000496:	d105      	bne.n	80004a4 <__aeabi_dmul+0x234>
 8000498:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800049c:	bf1c      	itt	ne
 800049e:	4610      	movne	r0, r2
 80004a0:	4619      	movne	r1, r3
 80004a2:	d10a      	bne.n	80004ba <__aeabi_dmul+0x24a>
 80004a4:	ea81 0103 	eor.w	r1, r1, r3
 80004a8:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80004ac:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004b0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004b4:	f04f 0000 	mov.w	r0, #0
 80004b8:	bd70      	pop	{r4, r5, r6, pc}
 80004ba:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 80004be:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 80004c2:	bd70      	pop	{r4, r5, r6, pc}

080004c4 <__aeabi_drsub>:
 80004c4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 80004c8:	e002      	b.n	80004d0 <__adddf3>
 80004ca:	bf00      	nop

080004cc <__aeabi_dsub>:
 80004cc:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

080004d0 <__adddf3>:
 80004d0:	b530      	push	{r4, r5, lr}
 80004d2:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80004d6:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80004da:	ea94 0f05 	teq	r4, r5
 80004de:	bf08      	it	eq
 80004e0:	ea90 0f02 	teqeq	r0, r2
 80004e4:	bf1f      	itttt	ne
 80004e6:	ea54 0c00 	orrsne.w	ip, r4, r0
 80004ea:	ea55 0c02 	orrsne.w	ip, r5, r2
 80004ee:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80004f2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f6:	f000 80e2 	beq.w	80006be <__adddf3+0x1ee>
 80004fa:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80004fe:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000502:	bfb8      	it	lt
 8000504:	426d      	neglt	r5, r5
 8000506:	dd0c      	ble.n	8000522 <__adddf3+0x52>
 8000508:	442c      	add	r4, r5
 800050a:	ea80 0202 	eor.w	r2, r0, r2
 800050e:	ea81 0303 	eor.w	r3, r1, r3
 8000512:	ea82 0000 	eor.w	r0, r2, r0
 8000516:	ea83 0101 	eor.w	r1, r3, r1
 800051a:	ea80 0202 	eor.w	r2, r0, r2
 800051e:	ea81 0303 	eor.w	r3, r1, r3
 8000522:	2d36      	cmp	r5, #54	@ 0x36
 8000524:	bf88      	it	hi
 8000526:	bd30      	pophi	{r4, r5, pc}
 8000528:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 800052c:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000530:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000534:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000538:	d002      	beq.n	8000540 <__adddf3+0x70>
 800053a:	4240      	negs	r0, r0
 800053c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000540:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000544:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000548:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 800054c:	d002      	beq.n	8000554 <__adddf3+0x84>
 800054e:	4252      	negs	r2, r2
 8000550:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000554:	ea94 0f05 	teq	r4, r5
 8000558:	f000 80a7 	beq.w	80006aa <__adddf3+0x1da>
 800055c:	f1a4 0401 	sub.w	r4, r4, #1
 8000560:	f1d5 0e20 	rsbs	lr, r5, #32
 8000564:	db0d      	blt.n	8000582 <__adddf3+0xb2>
 8000566:	fa02 fc0e 	lsl.w	ip, r2, lr
 800056a:	fa22 f205 	lsr.w	r2, r2, r5
 800056e:	1880      	adds	r0, r0, r2
 8000570:	f141 0100 	adc.w	r1, r1, #0
 8000574:	fa03 f20e 	lsl.w	r2, r3, lr
 8000578:	1880      	adds	r0, r0, r2
 800057a:	fa43 f305 	asr.w	r3, r3, r5
 800057e:	4159      	adcs	r1, r3
 8000580:	e00e      	b.n	80005a0 <__adddf3+0xd0>
 8000582:	f1a5 0520 	sub.w	r5, r5, #32
 8000586:	f10e 0e20 	add.w	lr, lr, #32
 800058a:	2a01      	cmp	r2, #1
 800058c:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000590:	bf28      	it	cs
 8000592:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000596:	fa43 f305 	asr.w	r3, r3, r5
 800059a:	18c0      	adds	r0, r0, r3
 800059c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80005a0:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80005a4:	d507      	bpl.n	80005b6 <__adddf3+0xe6>
 80005a6:	f04f 0e00 	mov.w	lr, #0
 80005aa:	f1dc 0c00 	rsbs	ip, ip, #0
 80005ae:	eb7e 0000 	sbcs.w	r0, lr, r0
 80005b2:	eb6e 0101 	sbc.w	r1, lr, r1
 80005b6:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 80005ba:	d31b      	bcc.n	80005f4 <__adddf3+0x124>
 80005bc:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 80005c0:	d30c      	bcc.n	80005dc <__adddf3+0x10c>
 80005c2:	0849      	lsrs	r1, r1, #1
 80005c4:	ea5f 0030 	movs.w	r0, r0, rrx
 80005c8:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80005cc:	f104 0401 	add.w	r4, r4, #1
 80005d0:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80005d4:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80005d8:	f080 809a 	bcs.w	8000710 <__adddf3+0x240>
 80005dc:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80005e0:	bf08      	it	eq
 80005e2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80005e6:	f150 0000 	adcs.w	r0, r0, #0
 80005ea:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80005ee:	ea41 0105 	orr.w	r1, r1, r5
 80005f2:	bd30      	pop	{r4, r5, pc}
 80005f4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80005f8:	4140      	adcs	r0, r0
 80005fa:	eb41 0101 	adc.w	r1, r1, r1
 80005fe:	3c01      	subs	r4, #1
 8000600:	bf28      	it	cs
 8000602:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000606:	d2e9      	bcs.n	80005dc <__adddf3+0x10c>
 8000608:	f091 0f00 	teq	r1, #0
 800060c:	bf04      	itt	eq
 800060e:	4601      	moveq	r1, r0
 8000610:	2000      	moveq	r0, #0
 8000612:	fab1 f381 	clz	r3, r1
 8000616:	bf08      	it	eq
 8000618:	3320      	addeq	r3, #32
 800061a:	f1a3 030b 	sub.w	r3, r3, #11
 800061e:	f1b3 0220 	subs.w	r2, r3, #32
 8000622:	da0c      	bge.n	800063e <__adddf3+0x16e>
 8000624:	320c      	adds	r2, #12
 8000626:	dd08      	ble.n	800063a <__adddf3+0x16a>
 8000628:	f102 0c14 	add.w	ip, r2, #20
 800062c:	f1c2 020c 	rsb	r2, r2, #12
 8000630:	fa01 f00c 	lsl.w	r0, r1, ip
 8000634:	fa21 f102 	lsr.w	r1, r1, r2
 8000638:	e00c      	b.n	8000654 <__adddf3+0x184>
 800063a:	f102 0214 	add.w	r2, r2, #20
 800063e:	bfd8      	it	le
 8000640:	f1c2 0c20 	rsble	ip, r2, #32
 8000644:	fa01 f102 	lsl.w	r1, r1, r2
 8000648:	fa20 fc0c 	lsr.w	ip, r0, ip
 800064c:	bfdc      	itt	le
 800064e:	ea41 010c 	orrle.w	r1, r1, ip
 8000652:	4090      	lslle	r0, r2
 8000654:	1ae4      	subs	r4, r4, r3
 8000656:	bfa2      	ittt	ge
 8000658:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 800065c:	4329      	orrge	r1, r5
 800065e:	bd30      	popge	{r4, r5, pc}
 8000660:	ea6f 0404 	mvn.w	r4, r4
 8000664:	3c1f      	subs	r4, #31
 8000666:	da1c      	bge.n	80006a2 <__adddf3+0x1d2>
 8000668:	340c      	adds	r4, #12
 800066a:	dc0e      	bgt.n	800068a <__adddf3+0x1ba>
 800066c:	f104 0414 	add.w	r4, r4, #20
 8000670:	f1c4 0220 	rsb	r2, r4, #32
 8000674:	fa20 f004 	lsr.w	r0, r0, r4
 8000678:	fa01 f302 	lsl.w	r3, r1, r2
 800067c:	ea40 0003 	orr.w	r0, r0, r3
 8000680:	fa21 f304 	lsr.w	r3, r1, r4
 8000684:	ea45 0103 	orr.w	r1, r5, r3
 8000688:	bd30      	pop	{r4, r5, pc}
 800068a:	f1c4 040c 	rsb	r4, r4, #12
 800068e:	f1c4 0220 	rsb	r2, r4, #32
 8000692:	fa20 f002 	lsr.w	r0, r0, r2
 8000696:	fa01 f304 	lsl.w	r3, r1, r4
 800069a:	ea40 0003 	orr.w	r0, r0, r3
 800069e:	4629      	mov	r1, r5
 80006a0:	bd30      	pop	{r4, r5, pc}
 80006a2:	fa21 f004 	lsr.w	r0, r1, r4
 80006a6:	4629      	mov	r1, r5
 80006a8:	bd30      	pop	{r4, r5, pc}
 80006aa:	f094 0f00 	teq	r4, #0
 80006ae:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 80006b2:	bf06      	itte	eq
 80006b4:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 80006b8:	3401      	addeq	r4, #1
 80006ba:	3d01      	subne	r5, #1
 80006bc:	e74e      	b.n	800055c <__adddf3+0x8c>
 80006be:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80006c2:	bf18      	it	ne
 80006c4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80006c8:	d029      	beq.n	800071e <__adddf3+0x24e>
 80006ca:	ea94 0f05 	teq	r4, r5
 80006ce:	bf08      	it	eq
 80006d0:	ea90 0f02 	teqeq	r0, r2
 80006d4:	d005      	beq.n	80006e2 <__adddf3+0x212>
 80006d6:	ea54 0c00 	orrs.w	ip, r4, r0
 80006da:	bf04      	itt	eq
 80006dc:	4619      	moveq	r1, r3
 80006de:	4610      	moveq	r0, r2
 80006e0:	bd30      	pop	{r4, r5, pc}
 80006e2:	ea91 0f03 	teq	r1, r3
 80006e6:	bf1e      	ittt	ne
 80006e8:	2100      	movne	r1, #0
 80006ea:	2000      	movne	r0, #0
 80006ec:	bd30      	popne	{r4, r5, pc}
 80006ee:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80006f2:	d105      	bne.n	8000700 <__adddf3+0x230>
 80006f4:	0040      	lsls	r0, r0, #1
 80006f6:	4149      	adcs	r1, r1
 80006f8:	bf28      	it	cs
 80006fa:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80006fe:	bd30      	pop	{r4, r5, pc}
 8000700:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000704:	bf3c      	itt	cc
 8000706:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 800070a:	bd30      	popcc	{r4, r5, pc}
 800070c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000710:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 8000714:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000718:	f04f 0000 	mov.w	r0, #0
 800071c:	bd30      	pop	{r4, r5, pc}
 800071e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000722:	bf1a      	itte	ne
 8000724:	4619      	movne	r1, r3
 8000726:	4610      	movne	r0, r2
 8000728:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 800072c:	bf1c      	itt	ne
 800072e:	460b      	movne	r3, r1
 8000730:	4602      	movne	r2, r0
 8000732:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000736:	bf06      	itte	eq
 8000738:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 800073c:	ea91 0f03 	teqeq	r1, r3
 8000740:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000744:	bd30      	pop	{r4, r5, pc}
 8000746:	bf00      	nop

08000748 <__aeabi_ui2d>:
 8000748:	f090 0f00 	teq	r0, #0
 800074c:	bf04      	itt	eq
 800074e:	2100      	moveq	r1, #0
 8000750:	4770      	bxeq	lr
 8000752:	b530      	push	{r4, r5, lr}
 8000754:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000758:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800075c:	f04f 0500 	mov.w	r5, #0
 8000760:	f04f 0100 	mov.w	r1, #0
 8000764:	e750      	b.n	8000608 <__adddf3+0x138>
 8000766:	bf00      	nop

08000768 <__aeabi_i2d>:
 8000768:	f090 0f00 	teq	r0, #0
 800076c:	bf04      	itt	eq
 800076e:	2100      	moveq	r1, #0
 8000770:	4770      	bxeq	lr
 8000772:	b530      	push	{r4, r5, lr}
 8000774:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000778:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800077c:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000780:	bf48      	it	mi
 8000782:	4240      	negmi	r0, r0
 8000784:	f04f 0100 	mov.w	r1, #0
 8000788:	e73e      	b.n	8000608 <__adddf3+0x138>
 800078a:	bf00      	nop

0800078c <__aeabi_f2d>:
 800078c:	0042      	lsls	r2, r0, #1
 800078e:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000792:	ea4f 0131 	mov.w	r1, r1, rrx
 8000796:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800079a:	bf1f      	itttt	ne
 800079c:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 80007a0:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 80007a4:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 80007a8:	4770      	bxne	lr
 80007aa:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 80007ae:	bf08      	it	eq
 80007b0:	4770      	bxeq	lr
 80007b2:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 80007b6:	bf04      	itt	eq
 80007b8:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 80007bc:	4770      	bxeq	lr
 80007be:	b530      	push	{r4, r5, lr}
 80007c0:	f44f 7460 	mov.w	r4, #896	@ 0x380
 80007c4:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80007c8:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80007cc:	e71c      	b.n	8000608 <__adddf3+0x138>
 80007ce:	bf00      	nop

080007d0 <__aeabi_ul2d>:
 80007d0:	ea50 0201 	orrs.w	r2, r0, r1
 80007d4:	bf08      	it	eq
 80007d6:	4770      	bxeq	lr
 80007d8:	b530      	push	{r4, r5, lr}
 80007da:	f04f 0500 	mov.w	r5, #0
 80007de:	e00a      	b.n	80007f6 <__aeabi_l2d+0x16>

080007e0 <__aeabi_l2d>:
 80007e0:	ea50 0201 	orrs.w	r2, r0, r1
 80007e4:	bf08      	it	eq
 80007e6:	4770      	bxeq	lr
 80007e8:	b530      	push	{r4, r5, lr}
 80007ea:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80007ee:	d502      	bpl.n	80007f6 <__aeabi_l2d+0x16>
 80007f0:	4240      	negs	r0, r0
 80007f2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80007f6:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80007fa:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80007fe:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000802:	f43f aed8 	beq.w	80005b6 <__adddf3+0xe6>
 8000806:	f04f 0203 	mov.w	r2, #3
 800080a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800080e:	bf18      	it	ne
 8000810:	3203      	addne	r2, #3
 8000812:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000816:	bf18      	it	ne
 8000818:	3203      	addne	r2, #3
 800081a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800081e:	f1c2 0320 	rsb	r3, r2, #32
 8000822:	fa00 fc03 	lsl.w	ip, r0, r3
 8000826:	fa20 f002 	lsr.w	r0, r0, r2
 800082a:	fa01 fe03 	lsl.w	lr, r1, r3
 800082e:	ea40 000e 	orr.w	r0, r0, lr
 8000832:	fa21 f102 	lsr.w	r1, r1, r2
 8000836:	4414      	add	r4, r2
 8000838:	e6bd      	b.n	80005b6 <__adddf3+0xe6>
 800083a:	bf00      	nop

0800083c <__aeabi_d2iz>:
 800083c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000840:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000844:	d215      	bcs.n	8000872 <__aeabi_d2iz+0x36>
 8000846:	d511      	bpl.n	800086c <__aeabi_d2iz+0x30>
 8000848:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 800084c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000850:	d912      	bls.n	8000878 <__aeabi_d2iz+0x3c>
 8000852:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000856:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 800085a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800085e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000862:	fa23 f002 	lsr.w	r0, r3, r2
 8000866:	bf18      	it	ne
 8000868:	4240      	negne	r0, r0
 800086a:	4770      	bx	lr
 800086c:	f04f 0000 	mov.w	r0, #0
 8000870:	4770      	bx	lr
 8000872:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000876:	d105      	bne.n	8000884 <__aeabi_d2iz+0x48>
 8000878:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 800087c:	bf08      	it	eq
 800087e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000882:	4770      	bx	lr
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	4770      	bx	lr
 800088a:	bf00      	nop

0800088c <__aeabi_uldivmod>:
 800088c:	b953      	cbnz	r3, 80008a4 <__aeabi_uldivmod+0x18>
 800088e:	b94a      	cbnz	r2, 80008a4 <__aeabi_uldivmod+0x18>
 8000890:	2900      	cmp	r1, #0
 8000892:	bf08      	it	eq
 8000894:	2800      	cmpeq	r0, #0
 8000896:	bf1c      	itt	ne
 8000898:	f04f 31ff 	movne.w	r1, #4294967295
 800089c:	f04f 30ff 	movne.w	r0, #4294967295
 80008a0:	f000 b96a 	b.w	8000b78 <__aeabi_idiv0>
 80008a4:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008ac:	f000 f806 	bl	80008bc <__udivmoddi4>
 80008b0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008b4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b8:	b004      	add	sp, #16
 80008ba:	4770      	bx	lr

080008bc <__udivmoddi4>:
 80008bc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008c0:	9d08      	ldr	r5, [sp, #32]
 80008c2:	460c      	mov	r4, r1
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d14e      	bne.n	8000966 <__udivmoddi4+0xaa>
 80008c8:	4694      	mov	ip, r2
 80008ca:	458c      	cmp	ip, r1
 80008cc:	4686      	mov	lr, r0
 80008ce:	fab2 f282 	clz	r2, r2
 80008d2:	d962      	bls.n	800099a <__udivmoddi4+0xde>
 80008d4:	b14a      	cbz	r2, 80008ea <__udivmoddi4+0x2e>
 80008d6:	f1c2 0320 	rsb	r3, r2, #32
 80008da:	4091      	lsls	r1, r2
 80008dc:	fa20 f303 	lsr.w	r3, r0, r3
 80008e0:	fa0c fc02 	lsl.w	ip, ip, r2
 80008e4:	4319      	orrs	r1, r3
 80008e6:	fa00 fe02 	lsl.w	lr, r0, r2
 80008ea:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80008ee:	fa1f f68c 	uxth.w	r6, ip
 80008f2:	fbb1 f4f7 	udiv	r4, r1, r7
 80008f6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80008fa:	fb07 1114 	mls	r1, r7, r4, r1
 80008fe:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000902:	fb04 f106 	mul.w	r1, r4, r6
 8000906:	4299      	cmp	r1, r3
 8000908:	d90a      	bls.n	8000920 <__udivmoddi4+0x64>
 800090a:	eb1c 0303 	adds.w	r3, ip, r3
 800090e:	f104 30ff 	add.w	r0, r4, #4294967295
 8000912:	f080 8112 	bcs.w	8000b3a <__udivmoddi4+0x27e>
 8000916:	4299      	cmp	r1, r3
 8000918:	f240 810f 	bls.w	8000b3a <__udivmoddi4+0x27e>
 800091c:	3c02      	subs	r4, #2
 800091e:	4463      	add	r3, ip
 8000920:	1a59      	subs	r1, r3, r1
 8000922:	fa1f f38e 	uxth.w	r3, lr
 8000926:	fbb1 f0f7 	udiv	r0, r1, r7
 800092a:	fb07 1110 	mls	r1, r7, r0, r1
 800092e:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000932:	fb00 f606 	mul.w	r6, r0, r6
 8000936:	429e      	cmp	r6, r3
 8000938:	d90a      	bls.n	8000950 <__udivmoddi4+0x94>
 800093a:	eb1c 0303 	adds.w	r3, ip, r3
 800093e:	f100 31ff 	add.w	r1, r0, #4294967295
 8000942:	f080 80fc 	bcs.w	8000b3e <__udivmoddi4+0x282>
 8000946:	429e      	cmp	r6, r3
 8000948:	f240 80f9 	bls.w	8000b3e <__udivmoddi4+0x282>
 800094c:	4463      	add	r3, ip
 800094e:	3802      	subs	r0, #2
 8000950:	1b9b      	subs	r3, r3, r6
 8000952:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000956:	2100      	movs	r1, #0
 8000958:	b11d      	cbz	r5, 8000962 <__udivmoddi4+0xa6>
 800095a:	40d3      	lsrs	r3, r2
 800095c:	2200      	movs	r2, #0
 800095e:	e9c5 3200 	strd	r3, r2, [r5]
 8000962:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000966:	428b      	cmp	r3, r1
 8000968:	d905      	bls.n	8000976 <__udivmoddi4+0xba>
 800096a:	b10d      	cbz	r5, 8000970 <__udivmoddi4+0xb4>
 800096c:	e9c5 0100 	strd	r0, r1, [r5]
 8000970:	2100      	movs	r1, #0
 8000972:	4608      	mov	r0, r1
 8000974:	e7f5      	b.n	8000962 <__udivmoddi4+0xa6>
 8000976:	fab3 f183 	clz	r1, r3
 800097a:	2900      	cmp	r1, #0
 800097c:	d146      	bne.n	8000a0c <__udivmoddi4+0x150>
 800097e:	42a3      	cmp	r3, r4
 8000980:	d302      	bcc.n	8000988 <__udivmoddi4+0xcc>
 8000982:	4290      	cmp	r0, r2
 8000984:	f0c0 80f0 	bcc.w	8000b68 <__udivmoddi4+0x2ac>
 8000988:	1a86      	subs	r6, r0, r2
 800098a:	eb64 0303 	sbc.w	r3, r4, r3
 800098e:	2001      	movs	r0, #1
 8000990:	2d00      	cmp	r5, #0
 8000992:	d0e6      	beq.n	8000962 <__udivmoddi4+0xa6>
 8000994:	e9c5 6300 	strd	r6, r3, [r5]
 8000998:	e7e3      	b.n	8000962 <__udivmoddi4+0xa6>
 800099a:	2a00      	cmp	r2, #0
 800099c:	f040 8090 	bne.w	8000ac0 <__udivmoddi4+0x204>
 80009a0:	eba1 040c 	sub.w	r4, r1, ip
 80009a4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80009a8:	fa1f f78c 	uxth.w	r7, ip
 80009ac:	2101      	movs	r1, #1
 80009ae:	fbb4 f6f8 	udiv	r6, r4, r8
 80009b2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80009b6:	fb08 4416 	mls	r4, r8, r6, r4
 80009ba:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009be:	fb07 f006 	mul.w	r0, r7, r6
 80009c2:	4298      	cmp	r0, r3
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x11c>
 80009c6:	eb1c 0303 	adds.w	r3, ip, r3
 80009ca:	f106 34ff 	add.w	r4, r6, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x11a>
 80009d0:	4298      	cmp	r0, r3
 80009d2:	f200 80cd 	bhi.w	8000b70 <__udivmoddi4+0x2b4>
 80009d6:	4626      	mov	r6, r4
 80009d8:	1a1c      	subs	r4, r3, r0
 80009da:	fa1f f38e 	uxth.w	r3, lr
 80009de:	fbb4 f0f8 	udiv	r0, r4, r8
 80009e2:	fb08 4410 	mls	r4, r8, r0, r4
 80009e6:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80009ea:	fb00 f707 	mul.w	r7, r0, r7
 80009ee:	429f      	cmp	r7, r3
 80009f0:	d908      	bls.n	8000a04 <__udivmoddi4+0x148>
 80009f2:	eb1c 0303 	adds.w	r3, ip, r3
 80009f6:	f100 34ff 	add.w	r4, r0, #4294967295
 80009fa:	d202      	bcs.n	8000a02 <__udivmoddi4+0x146>
 80009fc:	429f      	cmp	r7, r3
 80009fe:	f200 80b0 	bhi.w	8000b62 <__udivmoddi4+0x2a6>
 8000a02:	4620      	mov	r0, r4
 8000a04:	1bdb      	subs	r3, r3, r7
 8000a06:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000a0a:	e7a5      	b.n	8000958 <__udivmoddi4+0x9c>
 8000a0c:	f1c1 0620 	rsb	r6, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 f706 	lsr.w	r7, r2, r6
 8000a16:	431f      	orrs	r7, r3
 8000a18:	fa20 fc06 	lsr.w	ip, r0, r6
 8000a1c:	fa04 f301 	lsl.w	r3, r4, r1
 8000a20:	ea43 030c 	orr.w	r3, r3, ip
 8000a24:	40f4      	lsrs	r4, r6
 8000a26:	fa00 f801 	lsl.w	r8, r0, r1
 8000a2a:	0c38      	lsrs	r0, r7, #16
 8000a2c:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000a30:	fbb4 fef0 	udiv	lr, r4, r0
 8000a34:	fa1f fc87 	uxth.w	ip, r7
 8000a38:	fb00 441e 	mls	r4, r0, lr, r4
 8000a3c:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a40:	fb0e f90c 	mul.w	r9, lr, ip
 8000a44:	45a1      	cmp	r9, r4
 8000a46:	fa02 f201 	lsl.w	r2, r2, r1
 8000a4a:	d90a      	bls.n	8000a62 <__udivmoddi4+0x1a6>
 8000a4c:	193c      	adds	r4, r7, r4
 8000a4e:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000a52:	f080 8084 	bcs.w	8000b5e <__udivmoddi4+0x2a2>
 8000a56:	45a1      	cmp	r9, r4
 8000a58:	f240 8081 	bls.w	8000b5e <__udivmoddi4+0x2a2>
 8000a5c:	f1ae 0e02 	sub.w	lr, lr, #2
 8000a60:	443c      	add	r4, r7
 8000a62:	eba4 0409 	sub.w	r4, r4, r9
 8000a66:	fa1f f983 	uxth.w	r9, r3
 8000a6a:	fbb4 f3f0 	udiv	r3, r4, r0
 8000a6e:	fb00 4413 	mls	r4, r0, r3, r4
 8000a72:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000a76:	fb03 fc0c 	mul.w	ip, r3, ip
 8000a7a:	45a4      	cmp	ip, r4
 8000a7c:	d907      	bls.n	8000a8e <__udivmoddi4+0x1d2>
 8000a7e:	193c      	adds	r4, r7, r4
 8000a80:	f103 30ff 	add.w	r0, r3, #4294967295
 8000a84:	d267      	bcs.n	8000b56 <__udivmoddi4+0x29a>
 8000a86:	45a4      	cmp	ip, r4
 8000a88:	d965      	bls.n	8000b56 <__udivmoddi4+0x29a>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	443c      	add	r4, r7
 8000a8e:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000a92:	fba0 9302 	umull	r9, r3, r0, r2
 8000a96:	eba4 040c 	sub.w	r4, r4, ip
 8000a9a:	429c      	cmp	r4, r3
 8000a9c:	46ce      	mov	lr, r9
 8000a9e:	469c      	mov	ip, r3
 8000aa0:	d351      	bcc.n	8000b46 <__udivmoddi4+0x28a>
 8000aa2:	d04e      	beq.n	8000b42 <__udivmoddi4+0x286>
 8000aa4:	b155      	cbz	r5, 8000abc <__udivmoddi4+0x200>
 8000aa6:	ebb8 030e 	subs.w	r3, r8, lr
 8000aaa:	eb64 040c 	sbc.w	r4, r4, ip
 8000aae:	fa04 f606 	lsl.w	r6, r4, r6
 8000ab2:	40cb      	lsrs	r3, r1
 8000ab4:	431e      	orrs	r6, r3
 8000ab6:	40cc      	lsrs	r4, r1
 8000ab8:	e9c5 6400 	strd	r6, r4, [r5]
 8000abc:	2100      	movs	r1, #0
 8000abe:	e750      	b.n	8000962 <__udivmoddi4+0xa6>
 8000ac0:	f1c2 0320 	rsb	r3, r2, #32
 8000ac4:	fa20 f103 	lsr.w	r1, r0, r3
 8000ac8:	fa0c fc02 	lsl.w	ip, ip, r2
 8000acc:	fa24 f303 	lsr.w	r3, r4, r3
 8000ad0:	4094      	lsls	r4, r2
 8000ad2:	430c      	orrs	r4, r1
 8000ad4:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ad8:	fa00 fe02 	lsl.w	lr, r0, r2
 8000adc:	fa1f f78c 	uxth.w	r7, ip
 8000ae0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ae4:	fb08 3110 	mls	r1, r8, r0, r3
 8000ae8:	0c23      	lsrs	r3, r4, #16
 8000aea:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000aee:	fb00 f107 	mul.w	r1, r0, r7
 8000af2:	4299      	cmp	r1, r3
 8000af4:	d908      	bls.n	8000b08 <__udivmoddi4+0x24c>
 8000af6:	eb1c 0303 	adds.w	r3, ip, r3
 8000afa:	f100 36ff 	add.w	r6, r0, #4294967295
 8000afe:	d22c      	bcs.n	8000b5a <__udivmoddi4+0x29e>
 8000b00:	4299      	cmp	r1, r3
 8000b02:	d92a      	bls.n	8000b5a <__udivmoddi4+0x29e>
 8000b04:	3802      	subs	r0, #2
 8000b06:	4463      	add	r3, ip
 8000b08:	1a5b      	subs	r3, r3, r1
 8000b0a:	b2a4      	uxth	r4, r4
 8000b0c:	fbb3 f1f8 	udiv	r1, r3, r8
 8000b10:	fb08 3311 	mls	r3, r8, r1, r3
 8000b14:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000b18:	fb01 f307 	mul.w	r3, r1, r7
 8000b1c:	42a3      	cmp	r3, r4
 8000b1e:	d908      	bls.n	8000b32 <__udivmoddi4+0x276>
 8000b20:	eb1c 0404 	adds.w	r4, ip, r4
 8000b24:	f101 36ff 	add.w	r6, r1, #4294967295
 8000b28:	d213      	bcs.n	8000b52 <__udivmoddi4+0x296>
 8000b2a:	42a3      	cmp	r3, r4
 8000b2c:	d911      	bls.n	8000b52 <__udivmoddi4+0x296>
 8000b2e:	3902      	subs	r1, #2
 8000b30:	4464      	add	r4, ip
 8000b32:	1ae4      	subs	r4, r4, r3
 8000b34:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000b38:	e739      	b.n	80009ae <__udivmoddi4+0xf2>
 8000b3a:	4604      	mov	r4, r0
 8000b3c:	e6f0      	b.n	8000920 <__udivmoddi4+0x64>
 8000b3e:	4608      	mov	r0, r1
 8000b40:	e706      	b.n	8000950 <__udivmoddi4+0x94>
 8000b42:	45c8      	cmp	r8, r9
 8000b44:	d2ae      	bcs.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b46:	ebb9 0e02 	subs.w	lr, r9, r2
 8000b4a:	eb63 0c07 	sbc.w	ip, r3, r7
 8000b4e:	3801      	subs	r0, #1
 8000b50:	e7a8      	b.n	8000aa4 <__udivmoddi4+0x1e8>
 8000b52:	4631      	mov	r1, r6
 8000b54:	e7ed      	b.n	8000b32 <__udivmoddi4+0x276>
 8000b56:	4603      	mov	r3, r0
 8000b58:	e799      	b.n	8000a8e <__udivmoddi4+0x1d2>
 8000b5a:	4630      	mov	r0, r6
 8000b5c:	e7d4      	b.n	8000b08 <__udivmoddi4+0x24c>
 8000b5e:	46d6      	mov	lr, sl
 8000b60:	e77f      	b.n	8000a62 <__udivmoddi4+0x1a6>
 8000b62:	4463      	add	r3, ip
 8000b64:	3802      	subs	r0, #2
 8000b66:	e74d      	b.n	8000a04 <__udivmoddi4+0x148>
 8000b68:	4606      	mov	r6, r0
 8000b6a:	4623      	mov	r3, r4
 8000b6c:	4608      	mov	r0, r1
 8000b6e:	e70f      	b.n	8000990 <__udivmoddi4+0xd4>
 8000b70:	3e02      	subs	r6, #2
 8000b72:	4463      	add	r3, ip
 8000b74:	e730      	b.n	80009d8 <__udivmoddi4+0x11c>
 8000b76:	bf00      	nop

08000b78 <__aeabi_idiv0>:
 8000b78:	4770      	bx	lr
 8000b7a:	bf00      	nop

08000b7c <speed>:
#include "stm32f4xx_hal.h"
#include "MotorControl.h"

extern TIM_HandleTypeDef htim1;

void speed(int Left, int Right){
 8000b7c:	b480      	push	{r7}
 8000b7e:	b083      	sub	sp, #12
 8000b80:	af00      	add	r7, sp, #0
 8000b82:	6078      	str	r0, [r7, #4]
 8000b84:	6039      	str	r1, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim1,FR_MOTOR_PWM,Right);
 8000b86:	4b07      	ldr	r3, [pc, #28]	@ (8000ba4 <speed+0x28>)
 8000b88:	681b      	ldr	r3, [r3, #0]
 8000b8a:	683a      	ldr	r2, [r7, #0]
 8000b8c:	639a      	str	r2, [r3, #56]	@ 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,RR_MOTOR_PWM,Left);
 8000b8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ba4 <speed+0x28>)
 8000b90:	681b      	ldr	r3, [r3, #0]
 8000b92:	687a      	ldr	r2, [r7, #4]
 8000b94:	635a      	str	r2, [r3, #52]	@ 0x34
}
 8000b96:	bf00      	nop
 8000b98:	370c      	adds	r7, #12
 8000b9a:	46bd      	mov	sp, r7
 8000b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba0:	4770      	bx	lr
 8000ba2:	bf00      	nop
 8000ba4:	20000400 	.word	0x20000400

08000ba8 <motor>:

void motor(int motor,int direction){
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b082      	sub	sp, #8
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
 8000bb0:	6039      	str	r1, [r7, #0]
	if (motor == 0){
 8000bb2:	687b      	ldr	r3, [r7, #4]
 8000bb4:	2b00      	cmp	r3, #0
 8000bb6:	d11c      	bne.n	8000bf2 <motor+0x4a>
		if (direction == 0){
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	d10c      	bne.n	8000bd8 <motor+0x30>
			HAL_GPIO_WritePin(RR_INB_GPIO_Port, RR_INB_Pin, 0);
 8000bbe:	2200      	movs	r2, #0
 8000bc0:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bc4:	481b      	ldr	r0, [pc, #108]	@ (8000c34 <motor+0x8c>)
 8000bc6:	f002 fdad 	bl	8003724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RR_INA_GPIO_Port, RR_INA_Pin, 1);
 8000bca:	2201      	movs	r2, #1
 8000bcc:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bd0:	4818      	ldr	r0, [pc, #96]	@ (8000c34 <motor+0x8c>)
 8000bd2:	f002 fda7 	bl	8003724 <HAL_GPIO_WritePin>
		}else{
			HAL_GPIO_WritePin(FR_INB_GPIO_Port, FR_INB_Pin, 1);
			HAL_GPIO_WritePin(FR_INA_GPIO_Port, FR_INA_Pin, 0);
		}
	}
}
 8000bd6:	e028      	b.n	8000c2a <motor+0x82>
			HAL_GPIO_WritePin(RR_INB_GPIO_Port, RR_INB_Pin, 1);
 8000bd8:	2201      	movs	r2, #1
 8000bda:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000bde:	4815      	ldr	r0, [pc, #84]	@ (8000c34 <motor+0x8c>)
 8000be0:	f002 fda0 	bl	8003724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RR_INA_GPIO_Port, RR_INA_Pin, 0);
 8000be4:	2200      	movs	r2, #0
 8000be6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8000bea:	4812      	ldr	r0, [pc, #72]	@ (8000c34 <motor+0x8c>)
 8000bec:	f002 fd9a 	bl	8003724 <HAL_GPIO_WritePin>
}
 8000bf0:	e01b      	b.n	8000c2a <motor+0x82>
		if (direction == 1){
 8000bf2:	683b      	ldr	r3, [r7, #0]
 8000bf4:	2b01      	cmp	r3, #1
 8000bf6:	d10c      	bne.n	8000c12 <motor+0x6a>
			HAL_GPIO_WritePin(FR_INB_GPIO_Port, FR_INB_Pin, 0);
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bfe:	480d      	ldr	r0, [pc, #52]	@ (8000c34 <motor+0x8c>)
 8000c00:	f002 fd90 	bl	8003724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FR_INA_GPIO_Port, FR_INA_Pin, 1);
 8000c04:	2201      	movs	r2, #1
 8000c06:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c0a:	480a      	ldr	r0, [pc, #40]	@ (8000c34 <motor+0x8c>)
 8000c0c:	f002 fd8a 	bl	8003724 <HAL_GPIO_WritePin>
}
 8000c10:	e00b      	b.n	8000c2a <motor+0x82>
			HAL_GPIO_WritePin(FR_INB_GPIO_Port, FR_INB_Pin, 1);
 8000c12:	2201      	movs	r2, #1
 8000c14:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000c18:	4806      	ldr	r0, [pc, #24]	@ (8000c34 <motor+0x8c>)
 8000c1a:	f002 fd83 	bl	8003724 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FR_INA_GPIO_Port, FR_INA_Pin, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000c24:	4803      	ldr	r0, [pc, #12]	@ (8000c34 <motor+0x8c>)
 8000c26:	f002 fd7d 	bl	8003724 <HAL_GPIO_WritePin>
}
 8000c2a:	bf00      	nop
 8000c2c:	3708      	adds	r7, #8
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
 8000c32:	bf00      	nop
 8000c34:	40020400 	.word	0x40020400

08000c38 <PID_control>:

};//Y8 IR25

float test = 0;
// Function to calculate PID control values
struct DriveValues PID_control(double Kp, double Kd, double Ki, int digital_IR[IR_ARRAY_LENGTH]) {
 8000c38:	b5b0      	push	{r4, r5, r7, lr}
 8000c3a:	b098      	sub	sp, #96	@ 0x60
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	61f8      	str	r0, [r7, #28]
 8000c40:	ed87 0b04 	vstr	d0, [r7, #16]
 8000c44:	ed87 1b02 	vstr	d1, [r7, #8]
 8000c48:	ed87 2b00 	vstr	d2, [r7]
 8000c4c:	61b9      	str	r1, [r7, #24]
	//Calculate the amount of IRs turned on
	  int array_lit_amount = 0;
 8000c4e:	2300      	movs	r3, #0
 8000c50:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8000c52:	2300      	movs	r3, #0
 8000c54:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c56:	e00a      	b.n	8000c6e <PID_control+0x36>
	  {
		  array_lit_amount += digital_IR[i];
 8000c58:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c5a:	009b      	lsls	r3, r3, #2
 8000c5c:	69ba      	ldr	r2, [r7, #24]
 8000c5e:	4413      	add	r3, r2
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8000c64:	4413      	add	r3, r2
 8000c66:	65fb      	str	r3, [r7, #92]	@ 0x5c
	  for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8000c68:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c6a:	3301      	adds	r3, #1
 8000c6c:	65bb      	str	r3, [r7, #88]	@ 0x58
 8000c6e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8000c70:	2b18      	cmp	r3, #24
 8000c72:	ddf1      	ble.n	8000c58 <PID_control+0x20>
	  }

	  int IR_MID_VAL = ((IR_ARRAY_LENGTH+1)/2-1);
 8000c74:	230c      	movs	r3, #12
 8000c76:	64fb      	str	r3, [r7, #76]	@ 0x4c

	  //Calculate the sum of Left side IRs with given weight
	  float left_sum = 0;
 8000c78:	f04f 0300 	mov.w	r3, #0
 8000c7c:	64bb      	str	r3, [r7, #72]	@ 0x48
//	  for (int i=-IR_MID_VAL; i<0;i++) left_sum += ARRAY_WEIGHT[i+IR_MID_VAL]*digital_IR[i+IR_MID_VAL];
	  left_sum = ARRAY_WEIGHT[0]*digital_IR[0]+ARRAY_WEIGHT[1]*digital_IR[1]+ARRAY_WEIGHT[2]*digital_IR[2]+
 8000c7e:	4baa      	ldr	r3, [pc, #680]	@ (8000f28 <PID_control+0x2f0>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	69ba      	ldr	r2, [r7, #24]
 8000c84:	6812      	ldr	r2, [r2, #0]
 8000c86:	fb03 f202 	mul.w	r2, r3, r2
 8000c8a:	4ba7      	ldr	r3, [pc, #668]	@ (8000f28 <PID_control+0x2f0>)
 8000c8c:	685b      	ldr	r3, [r3, #4]
 8000c8e:	69b9      	ldr	r1, [r7, #24]
 8000c90:	3104      	adds	r1, #4
 8000c92:	6809      	ldr	r1, [r1, #0]
 8000c94:	fb01 f303 	mul.w	r3, r1, r3
 8000c98:	441a      	add	r2, r3
 8000c9a:	4ba3      	ldr	r3, [pc, #652]	@ (8000f28 <PID_control+0x2f0>)
 8000c9c:	689b      	ldr	r3, [r3, #8]
 8000c9e:	69b9      	ldr	r1, [r7, #24]
 8000ca0:	3108      	adds	r1, #8
 8000ca2:	6809      	ldr	r1, [r1, #0]
 8000ca4:	fb01 f303 	mul.w	r3, r1, r3
 8000ca8:	441a      	add	r2, r3
			  ARRAY_WEIGHT[3]*digital_IR[3]+ARRAY_WEIGHT[4]*digital_IR[4]+ARRAY_WEIGHT[5]*digital_IR[5]+
 8000caa:	4b9f      	ldr	r3, [pc, #636]	@ (8000f28 <PID_control+0x2f0>)
 8000cac:	68db      	ldr	r3, [r3, #12]
 8000cae:	69b9      	ldr	r1, [r7, #24]
 8000cb0:	310c      	adds	r1, #12
 8000cb2:	6809      	ldr	r1, [r1, #0]
 8000cb4:	fb01 f303 	mul.w	r3, r1, r3
	  left_sum = ARRAY_WEIGHT[0]*digital_IR[0]+ARRAY_WEIGHT[1]*digital_IR[1]+ARRAY_WEIGHT[2]*digital_IR[2]+
 8000cb8:	441a      	add	r2, r3
			  ARRAY_WEIGHT[3]*digital_IR[3]+ARRAY_WEIGHT[4]*digital_IR[4]+ARRAY_WEIGHT[5]*digital_IR[5]+
 8000cba:	4b9b      	ldr	r3, [pc, #620]	@ (8000f28 <PID_control+0x2f0>)
 8000cbc:	691b      	ldr	r3, [r3, #16]
 8000cbe:	69b9      	ldr	r1, [r7, #24]
 8000cc0:	3110      	adds	r1, #16
 8000cc2:	6809      	ldr	r1, [r1, #0]
 8000cc4:	fb01 f303 	mul.w	r3, r1, r3
 8000cc8:	441a      	add	r2, r3
 8000cca:	4b97      	ldr	r3, [pc, #604]	@ (8000f28 <PID_control+0x2f0>)
 8000ccc:	695b      	ldr	r3, [r3, #20]
 8000cce:	69b9      	ldr	r1, [r7, #24]
 8000cd0:	3114      	adds	r1, #20
 8000cd2:	6809      	ldr	r1, [r1, #0]
 8000cd4:	fb01 f303 	mul.w	r3, r1, r3
 8000cd8:	441a      	add	r2, r3
			  ARRAY_WEIGHT[6]*digital_IR[6]+ARRAY_WEIGHT[7]*digital_IR[7]+ARRAY_WEIGHT[8]*digital_IR[8]+
 8000cda:	4b93      	ldr	r3, [pc, #588]	@ (8000f28 <PID_control+0x2f0>)
 8000cdc:	699b      	ldr	r3, [r3, #24]
 8000cde:	69b9      	ldr	r1, [r7, #24]
 8000ce0:	3118      	adds	r1, #24
 8000ce2:	6809      	ldr	r1, [r1, #0]
 8000ce4:	fb01 f303 	mul.w	r3, r1, r3
			  ARRAY_WEIGHT[3]*digital_IR[3]+ARRAY_WEIGHT[4]*digital_IR[4]+ARRAY_WEIGHT[5]*digital_IR[5]+
 8000ce8:	441a      	add	r2, r3
			  ARRAY_WEIGHT[6]*digital_IR[6]+ARRAY_WEIGHT[7]*digital_IR[7]+ARRAY_WEIGHT[8]*digital_IR[8]+
 8000cea:	4b8f      	ldr	r3, [pc, #572]	@ (8000f28 <PID_control+0x2f0>)
 8000cec:	69db      	ldr	r3, [r3, #28]
 8000cee:	69b9      	ldr	r1, [r7, #24]
 8000cf0:	311c      	adds	r1, #28
 8000cf2:	6809      	ldr	r1, [r1, #0]
 8000cf4:	fb01 f303 	mul.w	r3, r1, r3
 8000cf8:	441a      	add	r2, r3
 8000cfa:	4b8b      	ldr	r3, [pc, #556]	@ (8000f28 <PID_control+0x2f0>)
 8000cfc:	6a1b      	ldr	r3, [r3, #32]
 8000cfe:	69b9      	ldr	r1, [r7, #24]
 8000d00:	3120      	adds	r1, #32
 8000d02:	6809      	ldr	r1, [r1, #0]
 8000d04:	fb01 f303 	mul.w	r3, r1, r3
 8000d08:	441a      	add	r2, r3
			  ARRAY_WEIGHT[9]*digital_IR[9]+ARRAY_WEIGHT[10]*digital_IR[10]+ARRAY_WEIGHT[11]*digital_IR[11];
 8000d0a:	4b87      	ldr	r3, [pc, #540]	@ (8000f28 <PID_control+0x2f0>)
 8000d0c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000d0e:	69b9      	ldr	r1, [r7, #24]
 8000d10:	3124      	adds	r1, #36	@ 0x24
 8000d12:	6809      	ldr	r1, [r1, #0]
 8000d14:	fb01 f303 	mul.w	r3, r1, r3
			  ARRAY_WEIGHT[6]*digital_IR[6]+ARRAY_WEIGHT[7]*digital_IR[7]+ARRAY_WEIGHT[8]*digital_IR[8]+
 8000d18:	441a      	add	r2, r3
			  ARRAY_WEIGHT[9]*digital_IR[9]+ARRAY_WEIGHT[10]*digital_IR[10]+ARRAY_WEIGHT[11]*digital_IR[11];
 8000d1a:	4b83      	ldr	r3, [pc, #524]	@ (8000f28 <PID_control+0x2f0>)
 8000d1c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000d1e:	69b9      	ldr	r1, [r7, #24]
 8000d20:	3128      	adds	r1, #40	@ 0x28
 8000d22:	6809      	ldr	r1, [r1, #0]
 8000d24:	fb01 f303 	mul.w	r3, r1, r3
 8000d28:	441a      	add	r2, r3
 8000d2a:	4b7f      	ldr	r3, [pc, #508]	@ (8000f28 <PID_control+0x2f0>)
 8000d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8000d2e:	69b9      	ldr	r1, [r7, #24]
 8000d30:	312c      	adds	r1, #44	@ 0x2c
 8000d32:	6809      	ldr	r1, [r1, #0]
 8000d34:	fb01 f303 	mul.w	r3, r1, r3
 8000d38:	4413      	add	r3, r2
	  left_sum = ARRAY_WEIGHT[0]*digital_IR[0]+ARRAY_WEIGHT[1]*digital_IR[1]+ARRAY_WEIGHT[2]*digital_IR[2]+
 8000d3a:	ee07 3a90 	vmov	s15, r3
 8000d3e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000d42:	edc7 7a12 	vstr	s15, [r7, #72]	@ 0x48
test = left_sum;
 8000d46:	4a79      	ldr	r2, [pc, #484]	@ (8000f2c <PID_control+0x2f4>)
 8000d48:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8000d4a:	6013      	str	r3, [r2, #0]
	  //Calculate the sum of Right side IRs with given weight
	  float right_sum = 0;
 8000d4c:	f04f 0300 	mov.w	r3, #0
 8000d50:	647b      	str	r3, [r7, #68]	@ 0x44

	  right_sum = ARRAY_WEIGHT[13]*digital_IR[13]+ARRAY_WEIGHT[14]*digital_IR[14]+
 8000d52:	4b75      	ldr	r3, [pc, #468]	@ (8000f28 <PID_control+0x2f0>)
 8000d54:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8000d56:	69ba      	ldr	r2, [r7, #24]
 8000d58:	3234      	adds	r2, #52	@ 0x34
 8000d5a:	6812      	ldr	r2, [r2, #0]
 8000d5c:	fb03 f202 	mul.w	r2, r3, r2
 8000d60:	4b71      	ldr	r3, [pc, #452]	@ (8000f28 <PID_control+0x2f0>)
 8000d62:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8000d64:	69b9      	ldr	r1, [r7, #24]
 8000d66:	3138      	adds	r1, #56	@ 0x38
 8000d68:	6809      	ldr	r1, [r1, #0]
 8000d6a:	fb01 f303 	mul.w	r3, r1, r3
 8000d6e:	441a      	add	r2, r3
			  ARRAY_WEIGHT[15]*digital_IR[15]+ARRAY_WEIGHT[16]*digital_IR[16]+ARRAY_WEIGHT[17]*digital_IR[17]+
 8000d70:	4b6d      	ldr	r3, [pc, #436]	@ (8000f28 <PID_control+0x2f0>)
 8000d72:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8000d74:	69b9      	ldr	r1, [r7, #24]
 8000d76:	313c      	adds	r1, #60	@ 0x3c
 8000d78:	6809      	ldr	r1, [r1, #0]
 8000d7a:	fb01 f303 	mul.w	r3, r1, r3
	  right_sum = ARRAY_WEIGHT[13]*digital_IR[13]+ARRAY_WEIGHT[14]*digital_IR[14]+
 8000d7e:	441a      	add	r2, r3
			  ARRAY_WEIGHT[15]*digital_IR[15]+ARRAY_WEIGHT[16]*digital_IR[16]+ARRAY_WEIGHT[17]*digital_IR[17]+
 8000d80:	4b69      	ldr	r3, [pc, #420]	@ (8000f28 <PID_control+0x2f0>)
 8000d82:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000d84:	69b9      	ldr	r1, [r7, #24]
 8000d86:	3140      	adds	r1, #64	@ 0x40
 8000d88:	6809      	ldr	r1, [r1, #0]
 8000d8a:	fb01 f303 	mul.w	r3, r1, r3
 8000d8e:	441a      	add	r2, r3
 8000d90:	4b65      	ldr	r3, [pc, #404]	@ (8000f28 <PID_control+0x2f0>)
 8000d92:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000d94:	69b9      	ldr	r1, [r7, #24]
 8000d96:	3144      	adds	r1, #68	@ 0x44
 8000d98:	6809      	ldr	r1, [r1, #0]
 8000d9a:	fb01 f303 	mul.w	r3, r1, r3
 8000d9e:	441a      	add	r2, r3
			  ARRAY_WEIGHT[18]*digital_IR[18]+ARRAY_WEIGHT[19]*digital_IR[19]+ARRAY_WEIGHT[20]*digital_IR[20]+
 8000da0:	4b61      	ldr	r3, [pc, #388]	@ (8000f28 <PID_control+0x2f0>)
 8000da2:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000da4:	69b9      	ldr	r1, [r7, #24]
 8000da6:	3148      	adds	r1, #72	@ 0x48
 8000da8:	6809      	ldr	r1, [r1, #0]
 8000daa:	fb01 f303 	mul.w	r3, r1, r3
			  ARRAY_WEIGHT[15]*digital_IR[15]+ARRAY_WEIGHT[16]*digital_IR[16]+ARRAY_WEIGHT[17]*digital_IR[17]+
 8000dae:	441a      	add	r2, r3
			  ARRAY_WEIGHT[18]*digital_IR[18]+ARRAY_WEIGHT[19]*digital_IR[19]+ARRAY_WEIGHT[20]*digital_IR[20]+
 8000db0:	4b5d      	ldr	r3, [pc, #372]	@ (8000f28 <PID_control+0x2f0>)
 8000db2:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8000db4:	69b9      	ldr	r1, [r7, #24]
 8000db6:	314c      	adds	r1, #76	@ 0x4c
 8000db8:	6809      	ldr	r1, [r1, #0]
 8000dba:	fb01 f303 	mul.w	r3, r1, r3
 8000dbe:	441a      	add	r2, r3
 8000dc0:	4b59      	ldr	r3, [pc, #356]	@ (8000f28 <PID_control+0x2f0>)
 8000dc2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8000dc4:	69b9      	ldr	r1, [r7, #24]
 8000dc6:	3150      	adds	r1, #80	@ 0x50
 8000dc8:	6809      	ldr	r1, [r1, #0]
 8000dca:	fb01 f303 	mul.w	r3, r1, r3
 8000dce:	441a      	add	r2, r3
			  ARRAY_WEIGHT[21]*digital_IR[21]+ARRAY_WEIGHT[22]*digital_IR[22]+ARRAY_WEIGHT[23]*digital_IR[23]+
 8000dd0:	4b55      	ldr	r3, [pc, #340]	@ (8000f28 <PID_control+0x2f0>)
 8000dd2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8000dd4:	69b9      	ldr	r1, [r7, #24]
 8000dd6:	3154      	adds	r1, #84	@ 0x54
 8000dd8:	6809      	ldr	r1, [r1, #0]
 8000dda:	fb01 f303 	mul.w	r3, r1, r3
			  ARRAY_WEIGHT[18]*digital_IR[18]+ARRAY_WEIGHT[19]*digital_IR[19]+ARRAY_WEIGHT[20]*digital_IR[20]+
 8000dde:	441a      	add	r2, r3
			  ARRAY_WEIGHT[21]*digital_IR[21]+ARRAY_WEIGHT[22]*digital_IR[22]+ARRAY_WEIGHT[23]*digital_IR[23]+
 8000de0:	4b51      	ldr	r3, [pc, #324]	@ (8000f28 <PID_control+0x2f0>)
 8000de2:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000de4:	69b9      	ldr	r1, [r7, #24]
 8000de6:	3158      	adds	r1, #88	@ 0x58
 8000de8:	6809      	ldr	r1, [r1, #0]
 8000dea:	fb01 f303 	mul.w	r3, r1, r3
 8000dee:	441a      	add	r2, r3
 8000df0:	4b4d      	ldr	r3, [pc, #308]	@ (8000f28 <PID_control+0x2f0>)
 8000df2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000df4:	69b9      	ldr	r1, [r7, #24]
 8000df6:	315c      	adds	r1, #92	@ 0x5c
 8000df8:	6809      	ldr	r1, [r1, #0]
 8000dfa:	fb01 f303 	mul.w	r3, r1, r3
 8000dfe:	441a      	add	r2, r3
			  ARRAY_WEIGHT[24]*digital_IR[24];
 8000e00:	4b49      	ldr	r3, [pc, #292]	@ (8000f28 <PID_control+0x2f0>)
 8000e02:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8000e04:	69b9      	ldr	r1, [r7, #24]
 8000e06:	3160      	adds	r1, #96	@ 0x60
 8000e08:	6809      	ldr	r1, [r1, #0]
 8000e0a:	fb01 f303 	mul.w	r3, r1, r3
			  ARRAY_WEIGHT[21]*digital_IR[21]+ARRAY_WEIGHT[22]*digital_IR[22]+ARRAY_WEIGHT[23]*digital_IR[23]+
 8000e0e:	4413      	add	r3, r2
	  right_sum = ARRAY_WEIGHT[13]*digital_IR[13]+ARRAY_WEIGHT[14]*digital_IR[14]+
 8000e10:	ee07 3a90 	vmov	s15, r3
 8000e14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000e18:	edc7 7a11 	vstr	s15, [r7, #68]	@ 0x44
//	  for (int i=1; i<IR_MID_VAL;i++) right_sum += ARRAY_WEIGHT[i]*digital_IR[i+IR_MID_VAL];

	  //Calculate the current Error
	  int position = left_sum + right_sum;
 8000e1c:	ed97 7a12 	vldr	s14, [r7, #72]	@ 0x48
 8000e20:	edd7 7a11 	vldr	s15, [r7, #68]	@ 0x44
 8000e24:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e28:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e2c:	ee17 3a90 	vmov	r3, s15
 8000e30:	643b      	str	r3, [r7, #64]	@ 0x40

	  int derivative = position - prevError;
 8000e32:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000e34:	f7ff fc98 	bl	8000768 <__aeabi_i2d>
 8000e38:	4b3d      	ldr	r3, [pc, #244]	@ (8000f30 <PID_control+0x2f8>)
 8000e3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e3e:	f7ff fb45 	bl	80004cc <__aeabi_dsub>
 8000e42:	4602      	mov	r2, r0
 8000e44:	460b      	mov	r3, r1
 8000e46:	4610      	mov	r0, r2
 8000e48:	4619      	mov	r1, r3
 8000e4a:	f7ff fcf7 	bl	800083c <__aeabi_d2iz>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	63fb      	str	r3, [r7, #60]	@ 0x3c

	  int PID_constant = Kp * position + Kd * derivative;
 8000e52:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000e54:	f7ff fc88 	bl	8000768 <__aeabi_i2d>
 8000e58:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8000e5c:	f7ff fa08 	bl	8000270 <__aeabi_dmul>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	4614      	mov	r4, r2
 8000e66:	461d      	mov	r5, r3
 8000e68:	6bf8      	ldr	r0, [r7, #60]	@ 0x3c
 8000e6a:	f7ff fc7d 	bl	8000768 <__aeabi_i2d>
 8000e6e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000e72:	f7ff f9fd 	bl	8000270 <__aeabi_dmul>
 8000e76:	4602      	mov	r2, r0
 8000e78:	460b      	mov	r3, r1
 8000e7a:	4620      	mov	r0, r4
 8000e7c:	4629      	mov	r1, r5
 8000e7e:	f7ff fb27 	bl	80004d0 <__adddf3>
 8000e82:	4602      	mov	r2, r0
 8000e84:	460b      	mov	r3, r1
 8000e86:	4610      	mov	r0, r2
 8000e88:	4619      	mov	r1, r3
 8000e8a:	f7ff fcd7 	bl	800083c <__aeabi_d2iz>
 8000e8e:	4603      	mov	r3, r0
 8000e90:	63bb      	str	r3, [r7, #56]	@ 0x38

	  prevError = position;
 8000e92:	6c38      	ldr	r0, [r7, #64]	@ 0x40
 8000e94:	f7ff fc68 	bl	8000768 <__aeabi_i2d>
 8000e98:	4602      	mov	r2, r0
 8000e9a:	460b      	mov	r3, r1
 8000e9c:	4924      	ldr	r1, [pc, #144]	@ (8000f30 <PID_control+0x2f8>)
 8000e9e:	e9c1 2300 	strd	r2, r3, [r1]

	  Drive_constant = 500;
 8000ea2:	4b24      	ldr	r3, [pc, #144]	@ (8000f34 <PID_control+0x2fc>)
 8000ea4:	f44f 72fa 	mov.w	r2, #500	@ 0x1f4
 8000ea8:	601a      	str	r2, [r3, #0]

	  int offset = 0; // For correcting motor speeds
 8000eaa:	2300      	movs	r3, #0
 8000eac:	637b      	str	r3, [r7, #52]	@ 0x34
	  int Left_drive = Drive_constant + offset - PID_constant;
 8000eae:	4b21      	ldr	r3, [pc, #132]	@ (8000f34 <PID_control+0x2fc>)
 8000eb0:	681a      	ldr	r2, [r3, #0]
 8000eb2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000eb4:	441a      	add	r2, r3
 8000eb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8000eb8:	1ad3      	subs	r3, r2, r3
 8000eba:	657b      	str	r3, [r7, #84]	@ 0x54
	  int Right_drive = Drive_constant - offset + PID_constant;
 8000ebc:	4b1d      	ldr	r3, [pc, #116]	@ (8000f34 <PID_control+0x2fc>)
 8000ebe:	681a      	ldr	r2, [r3, #0]
 8000ec0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8000ec2:	1ad3      	subs	r3, r2, r3
 8000ec4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8000ec6:	4413      	add	r3, r2
 8000ec8:	653b      	str	r3, [r7, #80]	@ 0x50

	  const int MIN_VALUE = -1024;
 8000eca:	4b1b      	ldr	r3, [pc, #108]	@ (8000f38 <PID_control+0x300>)
 8000ecc:	633b      	str	r3, [r7, #48]	@ 0x30
	  const int MAX_VALUE = 1024;
 8000ece:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000ed2:	62fb      	str	r3, [r7, #44]	@ 0x2c

	  if (Left_drive < MIN_VALUE) {
 8000ed4:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000ed6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ed8:	429a      	cmp	r2, r3
 8000eda:	da02      	bge.n	8000ee2 <PID_control+0x2aa>
		  Left_drive = MIN_VALUE;
 8000edc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ede:	657b      	str	r3, [r7, #84]	@ 0x54
 8000ee0:	e005      	b.n	8000eee <PID_control+0x2b6>
	  } else if (Left_drive > MAX_VALUE) {
 8000ee2:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8000ee4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000ee6:	429a      	cmp	r2, r3
 8000ee8:	dd01      	ble.n	8000eee <PID_control+0x2b6>
		  Left_drive = MAX_VALUE;
 8000eea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000eec:	657b      	str	r3, [r7, #84]	@ 0x54
	  }

	  if (Right_drive < MIN_VALUE) {
 8000eee:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000ef0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef2:	429a      	cmp	r2, r3
 8000ef4:	da02      	bge.n	8000efc <PID_control+0x2c4>
		  Right_drive = MIN_VALUE;
 8000ef6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8000ef8:	653b      	str	r3, [r7, #80]	@ 0x50
 8000efa:	e005      	b.n	8000f08 <PID_control+0x2d0>
	  } else if (Right_drive > MAX_VALUE) {
 8000efc:	6d3a      	ldr	r2, [r7, #80]	@ 0x50
 8000efe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f00:	429a      	cmp	r2, r3
 8000f02:	dd01      	ble.n	8000f08 <PID_control+0x2d0>
		  Right_drive = MAX_VALUE;
 8000f04:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000f06:	653b      	str	r3, [r7, #80]	@ 0x50
	  }

	  // Example return statement, replace with actual calculated values
	  struct DriveValues result;
	  result.LEFT = Left_drive; // Example value
 8000f08:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8000f0a:	627b      	str	r3, [r7, #36]	@ 0x24
	  result.RIGHT = Right_drive; // Example value
 8000f0c:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8000f0e:	62bb      	str	r3, [r7, #40]	@ 0x28
	  return result;
 8000f10:	69fb      	ldr	r3, [r7, #28]
 8000f12:	461a      	mov	r2, r3
 8000f14:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8000f18:	e893 0003 	ldmia.w	r3, {r0, r1}
 8000f1c:	e882 0003 	stmia.w	r2, {r0, r1}

}
 8000f20:	69f8      	ldr	r0, [r7, #28]
 8000f22:	3760      	adds	r7, #96	@ 0x60
 8000f24:	46bd      	mov	sp, r7
 8000f26:	bdb0      	pop	{r4, r5, r7, pc}
 8000f28:	20000004 	.word	0x20000004
 8000f2c:	200001f8 	.word	0x200001f8
 8000f30:	200001f0 	.word	0x200001f0
 8000f34:	20000000 	.word	0x20000000
 8000f38:	fffffc00 	.word	0xfffffc00

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b590      	push	{r4, r7, lr}
 8000f3e:	b085      	sub	sp, #20
 8000f40:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f42:	f001 fcdf 	bl	8002904 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f46:	f000 f88f 	bl	8001068 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f4a:	f000 fd4f 	bl	80019ec <MX_GPIO_Init>
  MX_ADC1_Init();
 8000f4e:	f000 f8f5 	bl	800113c <MX_ADC1_Init>
  MX_I2C2_Init();
 8000f52:	f000 f997 	bl	8001284 <MX_I2C2_Init>
  MX_TIM1_Init();
 8000f56:	f000 f9f9 	bl	800134c <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f5a:	f000 faf7 	bl	800154c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f5e:	f000 fb49 	bl	80015f4 <MX_TIM4_Init>
  MX_TIM8_Init();
 8000f62:	f000 fbf3 	bl	800174c <MX_TIM8_Init>
  MX_TIM9_Init();
 8000f66:	f000 fcb5 	bl	80018d4 <MX_TIM9_Init>
  MX_UART4_Init();
 8000f6a:	f000 fd15 	bl	8001998 <MX_UART4_Init>
  MX_SPI1_Init();
 8000f6e:	f000 f9b7 	bl	80012e0 <MX_SPI1_Init>
  MX_ADC2_Init();
 8000f72:	f000 f935 	bl	80011e0 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000f76:	f000 fa95 	bl	80014a4 <MX_TIM2_Init>
  MX_TIM6_Init();
 8000f7a:	f000 fbb1 	bl	80016e0 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

//  #define ADDRESS_TO 0x40
  HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL);
 8000f7e:	213c      	movs	r1, #60	@ 0x3c
 8000f80:	4831      	ldr	r0, [pc, #196]	@ (8001048 <main+0x10c>)
 8000f82:	f004 f8bd 	bl	8005100 <HAL_TIM_Encoder_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000f86:	2100      	movs	r1, #0
 8000f88:	4830      	ldr	r0, [pc, #192]	@ (800104c <main+0x110>)
 8000f8a:	f003 ff4b 	bl	8004e24 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000f8e:	2104      	movs	r1, #4
 8000f90:	482e      	ldr	r0, [pc, #184]	@ (800104c <main+0x110>)
 8000f92:	f003 ff47 	bl	8004e24 <HAL_TIM_PWM_Start>

  //Initialize MPU6050 module
  mpu6050_init();
 8000f96:	f000 ffb1 	bl	8001efc <mpu6050_init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

//  calibrate();
  printf("Caliberation Done!");
 8000f9a:	482d      	ldr	r0, [pc, #180]	@ (8001050 <main+0x114>)
 8000f9c:	f005 fb64 	bl	8006668 <iprintf>
  while (1)
  {
	  counter = htim3.Instance->CNT;
 8000fa0:	4b29      	ldr	r3, [pc, #164]	@ (8001048 <main+0x10c>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000fa6:	4a2b      	ldr	r2, [pc, #172]	@ (8001054 <main+0x118>)
 8000fa8:	6013      	str	r3, [r2, #0]


	  //Start motors at full speed
	  motor(left, Forward);motor(right, Forward);
 8000faa:	2101      	movs	r1, #1
 8000fac:	2000      	movs	r0, #0
 8000fae:	f7ff fdfb 	bl	8000ba8 <motor>
 8000fb2:	2101      	movs	r1, #1
 8000fb4:	2001      	movs	r0, #1
 8000fb6:	f7ff fdf7 	bl	8000ba8 <motor>

	  //update the IR array with current data
	  updateIR();
 8000fba:	f000 fe31 	bl	8001c20 <updateIR>

	  int Left_drive, Right_drive; // Variables to store the returned drive values

	  // Call the PID_control function and store the returned values
	  struct DriveValues driveValues = PID_control(Kp, Kd, Ki, digital_IR);
 8000fbe:	4b26      	ldr	r3, [pc, #152]	@ (8001058 <main+0x11c>)
 8000fc0:	ed93 7b00 	vldr	d7, [r3]
 8000fc4:	4b25      	ldr	r3, [pc, #148]	@ (800105c <main+0x120>)
 8000fc6:	ed93 6b00 	vldr	d6, [r3]
 8000fca:	4b25      	ldr	r3, [pc, #148]	@ (8001060 <main+0x124>)
 8000fcc:	ed93 5b00 	vldr	d5, [r3]
 8000fd0:	463b      	mov	r3, r7
 8000fd2:	4924      	ldr	r1, [pc, #144]	@ (8001064 <main+0x128>)
 8000fd4:	eeb0 2a45 	vmov.f32	s4, s10
 8000fd8:	eef0 2a65 	vmov.f32	s5, s11
 8000fdc:	eeb0 1a46 	vmov.f32	s2, s12
 8000fe0:	eef0 1a66 	vmov.f32	s3, s13
 8000fe4:	eeb0 0a47 	vmov.f32	s0, s14
 8000fe8:	eef0 0a67 	vmov.f32	s1, s15
 8000fec:	4618      	mov	r0, r3
 8000fee:	f7ff fe23 	bl	8000c38 <PID_control>

	  // Extract the returned values from the structure
	  Left_drive = driveValues.LEFT;
 8000ff2:	683b      	ldr	r3, [r7, #0]
 8000ff4:	60fb      	str	r3, [r7, #12]
	  Right_drive = driveValues.RIGHT;
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	60bb      	str	r3, [r7, #8]

	  if(Right_drive < 0){
 8000ffa:	68bb      	ldr	r3, [r7, #8]
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	da05      	bge.n	800100c <main+0xd0>
		  motor(right, Backward);
 8001000:	f04f 31ff 	mov.w	r1, #4294967295
 8001004:	2001      	movs	r0, #1
 8001006:	f7ff fdcf 	bl	8000ba8 <motor>
 800100a:	e003      	b.n	8001014 <main+0xd8>
	  } else {
		  motor(right, Forward);
 800100c:	2101      	movs	r1, #1
 800100e:	2001      	movs	r0, #1
 8001010:	f7ff fdca 	bl	8000ba8 <motor>
	  }


	  if(Left_drive < 0){
 8001014:	68fb      	ldr	r3, [r7, #12]
 8001016:	2b00      	cmp	r3, #0
 8001018:	da05      	bge.n	8001026 <main+0xea>
		  motor(left, Backward);
 800101a:	f04f 31ff 	mov.w	r1, #4294967295
 800101e:	2000      	movs	r0, #0
 8001020:	f7ff fdc2 	bl	8000ba8 <motor>
 8001024:	e003      	b.n	800102e <main+0xf2>
	  } else {
		  motor(left, Forward);
 8001026:	2101      	movs	r1, #1
 8001028:	2000      	movs	r0, #0
 800102a:	f7ff fdbd 	bl	8000ba8 <motor>
	  }


	  speed(Get_abs(Left_drive), Get_abs(Right_drive));
 800102e:	68f8      	ldr	r0, [r7, #12]
 8001030:	f000 ff4c 	bl	8001ecc <Get_abs>
 8001034:	4604      	mov	r4, r0
 8001036:	68b8      	ldr	r0, [r7, #8]
 8001038:	f000 ff48 	bl	8001ecc <Get_abs>
 800103c:	4603      	mov	r3, r0
 800103e:	4619      	mov	r1, r3
 8001040:	4620      	mov	r0, r4
 8001042:	f7ff fd9b 	bl	8000b7c <speed>
  {
 8001046:	e7ab      	b.n	8000fa0 <main+0x64>
 8001048:	20000490 	.word	0x20000490
 800104c:	20000400 	.word	0x20000400
 8001050:	08007418 	.word	0x08007418
 8001054:	20000664 	.word	0x20000664
 8001058:	200000d0 	.word	0x200000d0
 800105c:	200000e0 	.word	0x200000e0
 8001060:	200000d8 	.word	0x200000d8
 8001064:	20000260 	.word	0x20000260

08001068 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b094      	sub	sp, #80	@ 0x50
 800106c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800106e:	f107 0320 	add.w	r3, r7, #32
 8001072:	2230      	movs	r2, #48	@ 0x30
 8001074:	2100      	movs	r1, #0
 8001076:	4618      	mov	r0, r3
 8001078:	f005 fc3e 	bl	80068f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800107c:	f107 030c 	add.w	r3, r7, #12
 8001080:	2200      	movs	r2, #0
 8001082:	601a      	str	r2, [r3, #0]
 8001084:	605a      	str	r2, [r3, #4]
 8001086:	609a      	str	r2, [r3, #8]
 8001088:	60da      	str	r2, [r3, #12]
 800108a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	4b28      	ldr	r3, [pc, #160]	@ (8001134 <SystemClock_Config+0xcc>)
 8001092:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001094:	4a27      	ldr	r2, [pc, #156]	@ (8001134 <SystemClock_Config+0xcc>)
 8001096:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800109a:	6413      	str	r3, [r2, #64]	@ 0x40
 800109c:	4b25      	ldr	r3, [pc, #148]	@ (8001134 <SystemClock_Config+0xcc>)
 800109e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80010a0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80010a4:	60bb      	str	r3, [r7, #8]
 80010a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010a8:	2300      	movs	r3, #0
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	4b22      	ldr	r3, [pc, #136]	@ (8001138 <SystemClock_Config+0xd0>)
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	4a21      	ldr	r2, [pc, #132]	@ (8001138 <SystemClock_Config+0xd0>)
 80010b2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80010b6:	6013      	str	r3, [r2, #0]
 80010b8:	4b1f      	ldr	r3, [pc, #124]	@ (8001138 <SystemClock_Config+0xd0>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80010c0:	607b      	str	r3, [r7, #4]
 80010c2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010c4:	2302      	movs	r3, #2
 80010c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010c8:	2301      	movs	r3, #1
 80010ca:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010cc:	2310      	movs	r3, #16
 80010ce:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010d0:	2302      	movs	r3, #2
 80010d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010d4:	2300      	movs	r3, #0
 80010d6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80010d8:	2308      	movs	r3, #8
 80010da:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80010dc:	23a8      	movs	r3, #168	@ 0xa8
 80010de:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80010e0:	2302      	movs	r3, #2
 80010e2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010e4:	2304      	movs	r3, #4
 80010e6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010e8:	f107 0320 	add.w	r3, r7, #32
 80010ec:	4618      	mov	r0, r3
 80010ee:	f003 f90f 	bl	8004310 <HAL_RCC_OscConfig>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80010f8:	f000 fef9 	bl	8001eee <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80010fc:	230f      	movs	r3, #15
 80010fe:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001100:	2302      	movs	r3, #2
 8001102:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001104:	2300      	movs	r3, #0
 8001106:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8001108:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 800110c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800110e:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001112:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8001114:	f107 030c 	add.w	r3, r7, #12
 8001118:	2105      	movs	r1, #5
 800111a:	4618      	mov	r0, r3
 800111c:	f003 fb70 	bl	8004800 <HAL_RCC_ClockConfig>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d001      	beq.n	800112a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001126:	f000 fee2 	bl	8001eee <Error_Handler>
  }
}
 800112a:	bf00      	nop
 800112c:	3750      	adds	r7, #80	@ 0x50
 800112e:	46bd      	mov	sp, r7
 8001130:	bd80      	pop	{r7, pc}
 8001132:	bf00      	nop
 8001134:	40023800 	.word	0x40023800
 8001138:	40007000 	.word	0x40007000

0800113c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800113c:	b580      	push	{r7, lr}
 800113e:	b084      	sub	sp, #16
 8001140:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8001142:	463b      	mov	r3, r7
 8001144:	2200      	movs	r2, #0
 8001146:	601a      	str	r2, [r3, #0]
 8001148:	605a      	str	r2, [r3, #4]
 800114a:	609a      	str	r2, [r3, #8]
 800114c:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800114e:	4b21      	ldr	r3, [pc, #132]	@ (80011d4 <MX_ADC1_Init+0x98>)
 8001150:	4a21      	ldr	r2, [pc, #132]	@ (80011d8 <MX_ADC1_Init+0x9c>)
 8001152:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001154:	4b1f      	ldr	r3, [pc, #124]	@ (80011d4 <MX_ADC1_Init+0x98>)
 8001156:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 800115a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800115c:	4b1d      	ldr	r3, [pc, #116]	@ (80011d4 <MX_ADC1_Init+0x98>)
 800115e:	2200      	movs	r2, #0
 8001160:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8001162:	4b1c      	ldr	r3, [pc, #112]	@ (80011d4 <MX_ADC1_Init+0x98>)
 8001164:	2200      	movs	r2, #0
 8001166:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001168:	4b1a      	ldr	r3, [pc, #104]	@ (80011d4 <MX_ADC1_Init+0x98>)
 800116a:	2200      	movs	r2, #0
 800116c:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800116e:	4b19      	ldr	r3, [pc, #100]	@ (80011d4 <MX_ADC1_Init+0x98>)
 8001170:	2200      	movs	r2, #0
 8001172:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001176:	4b17      	ldr	r3, [pc, #92]	@ (80011d4 <MX_ADC1_Init+0x98>)
 8001178:	2200      	movs	r2, #0
 800117a:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800117c:	4b15      	ldr	r3, [pc, #84]	@ (80011d4 <MX_ADC1_Init+0x98>)
 800117e:	4a17      	ldr	r2, [pc, #92]	@ (80011dc <MX_ADC1_Init+0xa0>)
 8001180:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001182:	4b14      	ldr	r3, [pc, #80]	@ (80011d4 <MX_ADC1_Init+0x98>)
 8001184:	2200      	movs	r2, #0
 8001186:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8001188:	4b12      	ldr	r3, [pc, #72]	@ (80011d4 <MX_ADC1_Init+0x98>)
 800118a:	2201      	movs	r2, #1
 800118c:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800118e:	4b11      	ldr	r3, [pc, #68]	@ (80011d4 <MX_ADC1_Init+0x98>)
 8001190:	2200      	movs	r2, #0
 8001192:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001196:	4b0f      	ldr	r3, [pc, #60]	@ (80011d4 <MX_ADC1_Init+0x98>)
 8001198:	2201      	movs	r2, #1
 800119a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800119c:	480d      	ldr	r0, [pc, #52]	@ (80011d4 <MX_ADC1_Init+0x98>)
 800119e:	f001 fc47 	bl	8002a30 <HAL_ADC_Init>
 80011a2:	4603      	mov	r3, r0
 80011a4:	2b00      	cmp	r3, #0
 80011a6:	d001      	beq.n	80011ac <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011a8:	f000 fea1 	bl	8001eee <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 80011ac:	230a      	movs	r3, #10
 80011ae:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011b0:	2301      	movs	r3, #1
 80011b2:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80011b4:	2305      	movs	r3, #5
 80011b6:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011b8:	463b      	mov	r3, r7
 80011ba:	4619      	mov	r1, r3
 80011bc:	4805      	ldr	r0, [pc, #20]	@ (80011d4 <MX_ADC1_Init+0x98>)
 80011be:	f001 fde5 	bl	8002d8c <HAL_ADC_ConfigChannel>
 80011c2:	4603      	mov	r3, r0
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d001      	beq.n	80011cc <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 80011c8:	f000 fe91 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80011cc:	bf00      	nop
 80011ce:	3710      	adds	r7, #16
 80011d0:	46bd      	mov	sp, r7
 80011d2:	bd80      	pop	{r7, pc}
 80011d4:	200002c4 	.word	0x200002c4
 80011d8:	40012000 	.word	0x40012000
 80011dc:	0f000001 	.word	0x0f000001

080011e0 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 80011e0:	b580      	push	{r7, lr}
 80011e2:	b084      	sub	sp, #16
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011e6:	463b      	mov	r3, r7
 80011e8:	2200      	movs	r2, #0
 80011ea:	601a      	str	r2, [r3, #0]
 80011ec:	605a      	str	r2, [r3, #4]
 80011ee:	609a      	str	r2, [r3, #8]
 80011f0:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 80011f2:	4b21      	ldr	r3, [pc, #132]	@ (8001278 <MX_ADC2_Init+0x98>)
 80011f4:	4a21      	ldr	r2, [pc, #132]	@ (800127c <MX_ADC2_Init+0x9c>)
 80011f6:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80011f8:	4b1f      	ldr	r3, [pc, #124]	@ (8001278 <MX_ADC2_Init+0x98>)
 80011fa:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80011fe:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001200:	4b1d      	ldr	r3, [pc, #116]	@ (8001278 <MX_ADC2_Init+0x98>)
 8001202:	2200      	movs	r2, #0
 8001204:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 8001206:	4b1c      	ldr	r3, [pc, #112]	@ (8001278 <MX_ADC2_Init+0x98>)
 8001208:	2200      	movs	r2, #0
 800120a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800120c:	4b1a      	ldr	r3, [pc, #104]	@ (8001278 <MX_ADC2_Init+0x98>)
 800120e:	2200      	movs	r2, #0
 8001210:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001212:	4b19      	ldr	r3, [pc, #100]	@ (8001278 <MX_ADC2_Init+0x98>)
 8001214:	2200      	movs	r2, #0
 8001216:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800121a:	4b17      	ldr	r3, [pc, #92]	@ (8001278 <MX_ADC2_Init+0x98>)
 800121c:	2200      	movs	r2, #0
 800121e:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001220:	4b15      	ldr	r3, [pc, #84]	@ (8001278 <MX_ADC2_Init+0x98>)
 8001222:	4a17      	ldr	r2, [pc, #92]	@ (8001280 <MX_ADC2_Init+0xa0>)
 8001224:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8001226:	4b14      	ldr	r3, [pc, #80]	@ (8001278 <MX_ADC2_Init+0x98>)
 8001228:	2200      	movs	r2, #0
 800122a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800122c:	4b12      	ldr	r3, [pc, #72]	@ (8001278 <MX_ADC2_Init+0x98>)
 800122e:	2201      	movs	r2, #1
 8001230:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001232:	4b11      	ldr	r3, [pc, #68]	@ (8001278 <MX_ADC2_Init+0x98>)
 8001234:	2200      	movs	r2, #0
 8001236:	f883 2030 	strb.w	r2, [r3, #48]	@ 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800123a:	4b0f      	ldr	r3, [pc, #60]	@ (8001278 <MX_ADC2_Init+0x98>)
 800123c:	2201      	movs	r2, #1
 800123e:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001240:	480d      	ldr	r0, [pc, #52]	@ (8001278 <MX_ADC2_Init+0x98>)
 8001242:	f001 fbf5 	bl	8002a30 <HAL_ADC_Init>
 8001246:	4603      	mov	r3, r0
 8001248:	2b00      	cmp	r3, #0
 800124a:	d001      	beq.n	8001250 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 800124c:	f000 fe4f 	bl	8001eee <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 8001250:	230b      	movs	r3, #11
 8001252:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001254:	2301      	movs	r3, #1
 8001256:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 8001258:	2305      	movs	r3, #5
 800125a:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800125c:	463b      	mov	r3, r7
 800125e:	4619      	mov	r1, r3
 8001260:	4805      	ldr	r0, [pc, #20]	@ (8001278 <MX_ADC2_Init+0x98>)
 8001262:	f001 fd93 	bl	8002d8c <HAL_ADC_ConfigChannel>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 800126c:	f000 fe3f 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	3710      	adds	r7, #16
 8001274:	46bd      	mov	sp, r7
 8001276:	bd80      	pop	{r7, pc}
 8001278:	2000030c 	.word	0x2000030c
 800127c:	40012100 	.word	0x40012100
 8001280:	0f000001 	.word	0x0f000001

08001284 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001284:	b580      	push	{r7, lr}
 8001286:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001288:	4b12      	ldr	r3, [pc, #72]	@ (80012d4 <MX_I2C2_Init+0x50>)
 800128a:	4a13      	ldr	r2, [pc, #76]	@ (80012d8 <MX_I2C2_Init+0x54>)
 800128c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800128e:	4b11      	ldr	r3, [pc, #68]	@ (80012d4 <MX_I2C2_Init+0x50>)
 8001290:	4a12      	ldr	r2, [pc, #72]	@ (80012dc <MX_I2C2_Init+0x58>)
 8001292:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001294:	4b0f      	ldr	r3, [pc, #60]	@ (80012d4 <MX_I2C2_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 800129a:	4b0e      	ldr	r3, [pc, #56]	@ (80012d4 <MX_I2C2_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80012a0:	4b0c      	ldr	r3, [pc, #48]	@ (80012d4 <MX_I2C2_Init+0x50>)
 80012a2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012a6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80012a8:	4b0a      	ldr	r3, [pc, #40]	@ (80012d4 <MX_I2C2_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80012ae:	4b09      	ldr	r3, [pc, #36]	@ (80012d4 <MX_I2C2_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012b4:	4b07      	ldr	r3, [pc, #28]	@ (80012d4 <MX_I2C2_Init+0x50>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ba:	4b06      	ldr	r3, [pc, #24]	@ (80012d4 <MX_I2C2_Init+0x50>)
 80012bc:	2200      	movs	r2, #0
 80012be:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80012c0:	4804      	ldr	r0, [pc, #16]	@ (80012d4 <MX_I2C2_Init+0x50>)
 80012c2:	f002 fa49 	bl	8003758 <HAL_I2C_Init>
 80012c6:	4603      	mov	r3, r0
 80012c8:	2b00      	cmp	r3, #0
 80012ca:	d001      	beq.n	80012d0 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80012cc:	f000 fe0f 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80012d0:	bf00      	nop
 80012d2:	bd80      	pop	{r7, pc}
 80012d4:	20000354 	.word	0x20000354
 80012d8:	40005800 	.word	0x40005800
 80012dc:	000186a0 	.word	0x000186a0

080012e0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80012e0:	b580      	push	{r7, lr}
 80012e2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80012e4:	4b17      	ldr	r3, [pc, #92]	@ (8001344 <MX_SPI1_Init+0x64>)
 80012e6:	4a18      	ldr	r2, [pc, #96]	@ (8001348 <MX_SPI1_Init+0x68>)
 80012e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80012ea:	4b16      	ldr	r3, [pc, #88]	@ (8001344 <MX_SPI1_Init+0x64>)
 80012ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80012f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80012f2:	4b14      	ldr	r3, [pc, #80]	@ (8001344 <MX_SPI1_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80012f8:	4b12      	ldr	r3, [pc, #72]	@ (8001344 <MX_SPI1_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012fe:	4b11      	ldr	r3, [pc, #68]	@ (8001344 <MX_SPI1_Init+0x64>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001304:	4b0f      	ldr	r3, [pc, #60]	@ (8001344 <MX_SPI1_Init+0x64>)
 8001306:	2200      	movs	r2, #0
 8001308:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800130a:	4b0e      	ldr	r3, [pc, #56]	@ (8001344 <MX_SPI1_Init+0x64>)
 800130c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001310:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001312:	4b0c      	ldr	r3, [pc, #48]	@ (8001344 <MX_SPI1_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001318:	4b0a      	ldr	r3, [pc, #40]	@ (8001344 <MX_SPI1_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800131e:	4b09      	ldr	r3, [pc, #36]	@ (8001344 <MX_SPI1_Init+0x64>)
 8001320:	2200      	movs	r2, #0
 8001322:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001324:	4b07      	ldr	r3, [pc, #28]	@ (8001344 <MX_SPI1_Init+0x64>)
 8001326:	2200      	movs	r2, #0
 8001328:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800132a:	4b06      	ldr	r3, [pc, #24]	@ (8001344 <MX_SPI1_Init+0x64>)
 800132c:	220a      	movs	r2, #10
 800132e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001330:	4804      	ldr	r0, [pc, #16]	@ (8001344 <MX_SPI1_Init+0x64>)
 8001332:	f003 fc45 	bl	8004bc0 <HAL_SPI_Init>
 8001336:	4603      	mov	r3, r0
 8001338:	2b00      	cmp	r3, #0
 800133a:	d001      	beq.n	8001340 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800133c:	f000 fdd7 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001340:	bf00      	nop
 8001342:	bd80      	pop	{r7, pc}
 8001344:	200003a8 	.word	0x200003a8
 8001348:	40013000 	.word	0x40013000

0800134c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 800134c:	b580      	push	{r7, lr}
 800134e:	b096      	sub	sp, #88	@ 0x58
 8001350:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001352:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]
 800135c:	609a      	str	r2, [r3, #8]
 800135e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001360:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800136a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
 8001374:	609a      	str	r2, [r3, #8]
 8001376:	60da      	str	r2, [r3, #12]
 8001378:	611a      	str	r2, [r3, #16]
 800137a:	615a      	str	r2, [r3, #20]
 800137c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137e:	1d3b      	adds	r3, r7, #4
 8001380:	2220      	movs	r2, #32
 8001382:	2100      	movs	r1, #0
 8001384:	4618      	mov	r0, r3
 8001386:	f005 fab7 	bl	80068f8 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800138a:	4b44      	ldr	r3, [pc, #272]	@ (800149c <MX_TIM1_Init+0x150>)
 800138c:	4a44      	ldr	r2, [pc, #272]	@ (80014a0 <MX_TIM1_Init+0x154>)
 800138e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 8001390:	4b42      	ldr	r3, [pc, #264]	@ (800149c <MX_TIM1_Init+0x150>)
 8001392:	220f      	movs	r2, #15
 8001394:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001396:	4b41      	ldr	r3, [pc, #260]	@ (800149c <MX_TIM1_Init+0x150>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 800139c:	4b3f      	ldr	r3, [pc, #252]	@ (800149c <MX_TIM1_Init+0x150>)
 800139e:	f240 32ff 	movw	r2, #1023	@ 0x3ff
 80013a2:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a4:	4b3d      	ldr	r3, [pc, #244]	@ (800149c <MX_TIM1_Init+0x150>)
 80013a6:	2200      	movs	r2, #0
 80013a8:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013aa:	4b3c      	ldr	r3, [pc, #240]	@ (800149c <MX_TIM1_Init+0x150>)
 80013ac:	2200      	movs	r2, #0
 80013ae:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013b0:	4b3a      	ldr	r3, [pc, #232]	@ (800149c <MX_TIM1_Init+0x150>)
 80013b2:	2200      	movs	r2, #0
 80013b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b6:	4839      	ldr	r0, [pc, #228]	@ (800149c <MX_TIM1_Init+0x150>)
 80013b8:	f003 fc8b 	bl	8004cd2 <HAL_TIM_Base_Init>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013c2:	f000 fd94 	bl	8001eee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80013ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80013d0:	4619      	mov	r1, r3
 80013d2:	4832      	ldr	r0, [pc, #200]	@ (800149c <MX_TIM1_Init+0x150>)
 80013d4:	f004 f8d4 	bl	8005580 <HAL_TIM_ConfigClockSource>
 80013d8:	4603      	mov	r3, r0
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d001      	beq.n	80013e2 <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013de:	f000 fd86 	bl	8001eee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013e2:	482e      	ldr	r0, [pc, #184]	@ (800149c <MX_TIM1_Init+0x150>)
 80013e4:	f003 fcc4 	bl	8004d70 <HAL_TIM_PWM_Init>
 80013e8:	4603      	mov	r3, r0
 80013ea:	2b00      	cmp	r3, #0
 80013ec:	d001      	beq.n	80013f2 <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013ee:	f000 fd7e 	bl	8001eee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013f2:	2300      	movs	r3, #0
 80013f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f6:	2300      	movs	r3, #0
 80013f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80013fe:	4619      	mov	r1, r3
 8001400:	4826      	ldr	r0, [pc, #152]	@ (800149c <MX_TIM1_Init+0x150>)
 8001402:	f004 fcc9 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 800140c:	f000 fd6f 	bl	8001eee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001410:	2360      	movs	r3, #96	@ 0x60
 8001412:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001414:	2300      	movs	r3, #0
 8001416:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001418:	2300      	movs	r3, #0
 800141a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800141c:	2300      	movs	r3, #0
 800141e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001420:	2300      	movs	r3, #0
 8001422:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001424:	2300      	movs	r3, #0
 8001426:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001428:	2300      	movs	r3, #0
 800142a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800142c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001430:	2200      	movs	r2, #0
 8001432:	4619      	mov	r1, r3
 8001434:	4819      	ldr	r0, [pc, #100]	@ (800149c <MX_TIM1_Init+0x150>)
 8001436:	f003 ffe1 	bl	80053fc <HAL_TIM_PWM_ConfigChannel>
 800143a:	4603      	mov	r3, r0
 800143c:	2b00      	cmp	r3, #0
 800143e:	d001      	beq.n	8001444 <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001440:	f000 fd55 	bl	8001eee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001444:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001448:	2204      	movs	r2, #4
 800144a:	4619      	mov	r1, r3
 800144c:	4813      	ldr	r0, [pc, #76]	@ (800149c <MX_TIM1_Init+0x150>)
 800144e:	f003 ffd5 	bl	80053fc <HAL_TIM_PWM_ConfigChannel>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 8001458:	f000 fd49 	bl	8001eee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001464:	2300      	movs	r3, #0
 8001466:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001468:	2300      	movs	r3, #0
 800146a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800146c:	2300      	movs	r3, #0
 800146e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001470:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001474:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800147a:	1d3b      	adds	r3, r7, #4
 800147c:	4619      	mov	r1, r3
 800147e:	4807      	ldr	r0, [pc, #28]	@ (800149c <MX_TIM1_Init+0x150>)
 8001480:	f004 fd06 	bl	8005e90 <HAL_TIMEx_ConfigBreakDeadTime>
 8001484:	4603      	mov	r3, r0
 8001486:	2b00      	cmp	r3, #0
 8001488:	d001      	beq.n	800148e <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 800148a:	f000 fd30 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800148e:	4803      	ldr	r0, [pc, #12]	@ (800149c <MX_TIM1_Init+0x150>)
 8001490:	f001 f818 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 8001494:	bf00      	nop
 8001496:	3758      	adds	r7, #88	@ 0x58
 8001498:	46bd      	mov	sp, r7
 800149a:	bd80      	pop	{r7, pc}
 800149c:	20000400 	.word	0x20000400
 80014a0:	40010000 	.word	0x40010000

080014a4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80014a4:	b580      	push	{r7, lr}
 80014a6:	b08c      	sub	sp, #48	@ 0x30
 80014a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80014aa:	f107 030c 	add.w	r3, r7, #12
 80014ae:	2224      	movs	r2, #36	@ 0x24
 80014b0:	2100      	movs	r1, #0
 80014b2:	4618      	mov	r0, r3
 80014b4:	f005 fa20 	bl	80068f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014b8:	1d3b      	adds	r3, r7, #4
 80014ba:	2200      	movs	r2, #0
 80014bc:	601a      	str	r2, [r3, #0]
 80014be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014c0:	4b21      	ldr	r3, [pc, #132]	@ (8001548 <MX_TIM2_Init+0xa4>)
 80014c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80014c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014c8:	4b1f      	ldr	r3, [pc, #124]	@ (8001548 <MX_TIM2_Init+0xa4>)
 80014ca:	2200      	movs	r2, #0
 80014cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ce:	4b1e      	ldr	r3, [pc, #120]	@ (8001548 <MX_TIM2_Init+0xa4>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014d4:	4b1c      	ldr	r3, [pc, #112]	@ (8001548 <MX_TIM2_Init+0xa4>)
 80014d6:	f04f 32ff 	mov.w	r2, #4294967295
 80014da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014dc:	4b1a      	ldr	r3, [pc, #104]	@ (8001548 <MX_TIM2_Init+0xa4>)
 80014de:	2200      	movs	r2, #0
 80014e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014e2:	4b19      	ldr	r3, [pc, #100]	@ (8001548 <MX_TIM2_Init+0xa4>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014e8:	2303      	movs	r3, #3
 80014ea:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 80014ec:	2302      	movs	r3, #2
 80014ee:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014f0:	2301      	movs	r3, #1
 80014f2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80014fc:	2302      	movs	r3, #2
 80014fe:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001500:	2301      	movs	r3, #1
 8001502:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001504:	2300      	movs	r3, #0
 8001506:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 8001508:	2300      	movs	r3, #0
 800150a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 800150c:	f107 030c 	add.w	r3, r7, #12
 8001510:	4619      	mov	r1, r3
 8001512:	480d      	ldr	r0, [pc, #52]	@ (8001548 <MX_TIM2_Init+0xa4>)
 8001514:	f003 fd4e 	bl	8004fb4 <HAL_TIM_Encoder_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800151e:	f000 fce6 	bl	8001eee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001526:	2300      	movs	r3, #0
 8001528:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800152a:	1d3b      	adds	r3, r7, #4
 800152c:	4619      	mov	r1, r3
 800152e:	4806      	ldr	r0, [pc, #24]	@ (8001548 <MX_TIM2_Init+0xa4>)
 8001530:	f004 fc32 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001534:	4603      	mov	r3, r0
 8001536:	2b00      	cmp	r3, #0
 8001538:	d001      	beq.n	800153e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800153a:	f000 fcd8 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800153e:	bf00      	nop
 8001540:	3730      	adds	r7, #48	@ 0x30
 8001542:	46bd      	mov	sp, r7
 8001544:	bd80      	pop	{r7, pc}
 8001546:	bf00      	nop
 8001548:	20000448 	.word	0x20000448

0800154c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800154c:	b580      	push	{r7, lr}
 800154e:	b08c      	sub	sp, #48	@ 0x30
 8001550:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001552:	f107 030c 	add.w	r3, r7, #12
 8001556:	2224      	movs	r2, #36	@ 0x24
 8001558:	2100      	movs	r1, #0
 800155a:	4618      	mov	r0, r3
 800155c:	f005 f9cc 	bl	80068f8 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001560:	1d3b      	adds	r3, r7, #4
 8001562:	2200      	movs	r2, #0
 8001564:	601a      	str	r2, [r3, #0]
 8001566:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001568:	4b20      	ldr	r3, [pc, #128]	@ (80015ec <MX_TIM3_Init+0xa0>)
 800156a:	4a21      	ldr	r2, [pc, #132]	@ (80015f0 <MX_TIM3_Init+0xa4>)
 800156c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800156e:	4b1f      	ldr	r3, [pc, #124]	@ (80015ec <MX_TIM3_Init+0xa0>)
 8001570:	2200      	movs	r2, #0
 8001572:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001574:	4b1d      	ldr	r3, [pc, #116]	@ (80015ec <MX_TIM3_Init+0xa0>)
 8001576:	2200      	movs	r2, #0
 8001578:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800157a:	4b1c      	ldr	r3, [pc, #112]	@ (80015ec <MX_TIM3_Init+0xa0>)
 800157c:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001580:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001582:	4b1a      	ldr	r3, [pc, #104]	@ (80015ec <MX_TIM3_Init+0xa0>)
 8001584:	2200      	movs	r2, #0
 8001586:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001588:	4b18      	ldr	r3, [pc, #96]	@ (80015ec <MX_TIM3_Init+0xa0>)
 800158a:	2200      	movs	r2, #0
 800158c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800158e:	2303      	movs	r3, #3
 8001590:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_FALLING;
 8001592:	2302      	movs	r3, #2
 8001594:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001596:	2301      	movs	r3, #1
 8001598:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800159a:	2300      	movs	r3, #0
 800159c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_FALLING;
 80015a2:	2302      	movs	r3, #2
 80015a4:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80015a6:	2301      	movs	r3, #1
 80015a8:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80015aa:	2300      	movs	r3, #0
 80015ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfig.IC2Filter = 0;
 80015ae:	2300      	movs	r3, #0
 80015b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	480c      	ldr	r0, [pc, #48]	@ (80015ec <MX_TIM3_Init+0xa0>)
 80015ba:	f003 fcfb 	bl	8004fb4 <HAL_TIM_Encoder_Init>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d001      	beq.n	80015c8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015c4:	f000 fc93 	bl	8001eee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015c8:	2300      	movs	r3, #0
 80015ca:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015cc:	2300      	movs	r3, #0
 80015ce:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015d0:	1d3b      	adds	r3, r7, #4
 80015d2:	4619      	mov	r1, r3
 80015d4:	4805      	ldr	r0, [pc, #20]	@ (80015ec <MX_TIM3_Init+0xa0>)
 80015d6:	f004 fbdf 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 80015da:	4603      	mov	r3, r0
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d001      	beq.n	80015e4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015e0:	f000 fc85 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015e4:	bf00      	nop
 80015e6:	3730      	adds	r7, #48	@ 0x30
 80015e8:	46bd      	mov	sp, r7
 80015ea:	bd80      	pop	{r7, pc}
 80015ec:	20000490 	.word	0x20000490
 80015f0:	40000400 	.word	0x40000400

080015f4 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015f4:	b580      	push	{r7, lr}
 80015f6:	b08e      	sub	sp, #56	@ 0x38
 80015f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80015fe:	2200      	movs	r2, #0
 8001600:	601a      	str	r2, [r3, #0]
 8001602:	605a      	str	r2, [r3, #4]
 8001604:	609a      	str	r2, [r3, #8]
 8001606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001608:	f107 0320 	add.w	r3, r7, #32
 800160c:	2200      	movs	r2, #0
 800160e:	601a      	str	r2, [r3, #0]
 8001610:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001612:	1d3b      	adds	r3, r7, #4
 8001614:	2200      	movs	r2, #0
 8001616:	601a      	str	r2, [r3, #0]
 8001618:	605a      	str	r2, [r3, #4]
 800161a:	609a      	str	r2, [r3, #8]
 800161c:	60da      	str	r2, [r3, #12]
 800161e:	611a      	str	r2, [r3, #16]
 8001620:	615a      	str	r2, [r3, #20]
 8001622:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001624:	4b2c      	ldr	r3, [pc, #176]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 8001626:	4a2d      	ldr	r2, [pc, #180]	@ (80016dc <MX_TIM4_Init+0xe8>)
 8001628:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 800162a:	4b2b      	ldr	r3, [pc, #172]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 800162c:	2200      	movs	r2, #0
 800162e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001630:	4b29      	ldr	r3, [pc, #164]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 8001632:	2200      	movs	r2, #0
 8001634:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 8001636:	4b28      	ldr	r3, [pc, #160]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 8001638:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 800163c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800163e:	4b26      	ldr	r3, [pc, #152]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 8001640:	2200      	movs	r2, #0
 8001642:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001644:	4b24      	ldr	r3, [pc, #144]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 8001646:	2200      	movs	r2, #0
 8001648:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 800164a:	4823      	ldr	r0, [pc, #140]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 800164c:	f003 fb41 	bl	8004cd2 <HAL_TIM_Base_Init>
 8001650:	4603      	mov	r3, r0
 8001652:	2b00      	cmp	r3, #0
 8001654:	d001      	beq.n	800165a <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 8001656:	f000 fc4a 	bl	8001eee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800165a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800165e:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001660:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001664:	4619      	mov	r1, r3
 8001666:	481c      	ldr	r0, [pc, #112]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 8001668:	f003 ff8a 	bl	8005580 <HAL_TIM_ConfigClockSource>
 800166c:	4603      	mov	r3, r0
 800166e:	2b00      	cmp	r3, #0
 8001670:	d001      	beq.n	8001676 <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 8001672:	f000 fc3c 	bl	8001eee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001676:	4818      	ldr	r0, [pc, #96]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 8001678:	f003 fb7a 	bl	8004d70 <HAL_TIM_PWM_Init>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d001      	beq.n	8001686 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 8001682:	f000 fc34 	bl	8001eee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001686:	2300      	movs	r3, #0
 8001688:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800168a:	2300      	movs	r3, #0
 800168c:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 800168e:	f107 0320 	add.w	r3, r7, #32
 8001692:	4619      	mov	r1, r3
 8001694:	4810      	ldr	r0, [pc, #64]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 8001696:	f004 fb7f 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 800169a:	4603      	mov	r3, r0
 800169c:	2b00      	cmp	r3, #0
 800169e:	d001      	beq.n	80016a4 <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80016a0:	f000 fc25 	bl	8001eee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80016a4:	2360      	movs	r3, #96	@ 0x60
 80016a6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016ac:	2300      	movs	r3, #0
 80016ae:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016b0:	2300      	movs	r3, #0
 80016b2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016b4:	1d3b      	adds	r3, r7, #4
 80016b6:	2204      	movs	r2, #4
 80016b8:	4619      	mov	r1, r3
 80016ba:	4807      	ldr	r0, [pc, #28]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 80016bc:	f003 fe9e 	bl	80053fc <HAL_TIM_PWM_ConfigChannel>
 80016c0:	4603      	mov	r3, r0
 80016c2:	2b00      	cmp	r3, #0
 80016c4:	d001      	beq.n	80016ca <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 80016c6:	f000 fc12 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016ca:	4803      	ldr	r0, [pc, #12]	@ (80016d8 <MX_TIM4_Init+0xe4>)
 80016cc:	f000 fefa 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 80016d0:	bf00      	nop
 80016d2:	3738      	adds	r7, #56	@ 0x38
 80016d4:	46bd      	mov	sp, r7
 80016d6:	bd80      	pop	{r7, pc}
 80016d8:	200004d8 	.word	0x200004d8
 80016dc:	40000800 	.word	0x40000800

080016e0 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80016e6:	463b      	mov	r3, r7
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 80016ee:	4b15      	ldr	r3, [pc, #84]	@ (8001744 <MX_TIM6_Init+0x64>)
 80016f0:	4a15      	ldr	r2, [pc, #84]	@ (8001748 <MX_TIM6_Init+0x68>)
 80016f2:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 16800-1;
 80016f4:	4b13      	ldr	r3, [pc, #76]	@ (8001744 <MX_TIM6_Init+0x64>)
 80016f6:	f244 129f 	movw	r2, #16799	@ 0x419f
 80016fa:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80016fc:	4b11      	ldr	r3, [pc, #68]	@ (8001744 <MX_TIM6_Init+0x64>)
 80016fe:	2200      	movs	r2, #0
 8001700:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 10000-1;
 8001702:	4b10      	ldr	r3, [pc, #64]	@ (8001744 <MX_TIM6_Init+0x64>)
 8001704:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001708:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800170a:	4b0e      	ldr	r3, [pc, #56]	@ (8001744 <MX_TIM6_Init+0x64>)
 800170c:	2200      	movs	r2, #0
 800170e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001710:	480c      	ldr	r0, [pc, #48]	@ (8001744 <MX_TIM6_Init+0x64>)
 8001712:	f003 fade 	bl	8004cd2 <HAL_TIM_Base_Init>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <MX_TIM6_Init+0x40>
  {
    Error_Handler();
 800171c:	f000 fbe7 	bl	8001eee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001720:	2300      	movs	r3, #0
 8001722:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001724:	2300      	movs	r3, #0
 8001726:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 8001728:	463b      	mov	r3, r7
 800172a:	4619      	mov	r1, r3
 800172c:	4805      	ldr	r0, [pc, #20]	@ (8001744 <MX_TIM6_Init+0x64>)
 800172e:	f004 fb33 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001732:	4603      	mov	r3, r0
 8001734:	2b00      	cmp	r3, #0
 8001736:	d001      	beq.n	800173c <MX_TIM6_Init+0x5c>
  {
    Error_Handler();
 8001738:	f000 fbd9 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000520 	.word	0x20000520
 8001748:	40001000 	.word	0x40001000

0800174c <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b096      	sub	sp, #88	@ 0x58
 8001750:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001752:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001756:	2200      	movs	r2, #0
 8001758:	601a      	str	r2, [r3, #0]
 800175a:	605a      	str	r2, [r3, #4]
 800175c:	609a      	str	r2, [r3, #8]
 800175e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001760:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 8001764:	2200      	movs	r2, #0
 8001766:	601a      	str	r2, [r3, #0]
 8001768:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800176a:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 800176e:	2200      	movs	r2, #0
 8001770:	601a      	str	r2, [r3, #0]
 8001772:	605a      	str	r2, [r3, #4]
 8001774:	609a      	str	r2, [r3, #8]
 8001776:	60da      	str	r2, [r3, #12]
 8001778:	611a      	str	r2, [r3, #16]
 800177a:	615a      	str	r2, [r3, #20]
 800177c:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800177e:	1d3b      	adds	r3, r7, #4
 8001780:	2220      	movs	r2, #32
 8001782:	2100      	movs	r1, #0
 8001784:	4618      	mov	r0, r3
 8001786:	f005 f8b7 	bl	80068f8 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 800178a:	4b50      	ldr	r3, [pc, #320]	@ (80018cc <MX_TIM8_Init+0x180>)
 800178c:	4a50      	ldr	r2, [pc, #320]	@ (80018d0 <MX_TIM8_Init+0x184>)
 800178e:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 59;
 8001790:	4b4e      	ldr	r3, [pc, #312]	@ (80018cc <MX_TIM8_Init+0x180>)
 8001792:	223b      	movs	r2, #59	@ 0x3b
 8001794:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001796:	4b4d      	ldr	r3, [pc, #308]	@ (80018cc <MX_TIM8_Init+0x180>)
 8001798:	2200      	movs	r2, #0
 800179a:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 55999;
 800179c:	4b4b      	ldr	r3, [pc, #300]	@ (80018cc <MX_TIM8_Init+0x180>)
 800179e:	f64d 22bf 	movw	r2, #55999	@ 0xdabf
 80017a2:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017a4:	4b49      	ldr	r3, [pc, #292]	@ (80018cc <MX_TIM8_Init+0x180>)
 80017a6:	2200      	movs	r2, #0
 80017a8:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 80017aa:	4b48      	ldr	r3, [pc, #288]	@ (80018cc <MX_TIM8_Init+0x180>)
 80017ac:	2200      	movs	r2, #0
 80017ae:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80017b0:	4b46      	ldr	r3, [pc, #280]	@ (80018cc <MX_TIM8_Init+0x180>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 80017b6:	4845      	ldr	r0, [pc, #276]	@ (80018cc <MX_TIM8_Init+0x180>)
 80017b8:	f003 fa8b 	bl	8004cd2 <HAL_TIM_Base_Init>
 80017bc:	4603      	mov	r3, r0
 80017be:	2b00      	cmp	r3, #0
 80017c0:	d001      	beq.n	80017c6 <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 80017c2:	f000 fb94 	bl	8001eee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80017c6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ca:	64bb      	str	r3, [r7, #72]	@ 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 80017cc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 80017d0:	4619      	mov	r1, r3
 80017d2:	483e      	ldr	r0, [pc, #248]	@ (80018cc <MX_TIM8_Init+0x180>)
 80017d4:	f003 fed4 	bl	8005580 <HAL_TIM_ConfigClockSource>
 80017d8:	4603      	mov	r3, r0
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d001      	beq.n	80017e2 <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 80017de:	f000 fb86 	bl	8001eee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 80017e2:	483a      	ldr	r0, [pc, #232]	@ (80018cc <MX_TIM8_Init+0x180>)
 80017e4:	f003 fac4 	bl	8004d70 <HAL_TIM_PWM_Init>
 80017e8:	4603      	mov	r3, r0
 80017ea:	2b00      	cmp	r3, #0
 80017ec:	d001      	beq.n	80017f2 <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 80017ee:	f000 fb7e 	bl	8001eee <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80017f2:	2300      	movs	r3, #0
 80017f4:	643b      	str	r3, [r7, #64]	@ 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017f6:	2300      	movs	r3, #0
 80017f8:	647b      	str	r3, [r7, #68]	@ 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 80017fa:	f107 0340 	add.w	r3, r7, #64	@ 0x40
 80017fe:	4619      	mov	r1, r3
 8001800:	4832      	ldr	r0, [pc, #200]	@ (80018cc <MX_TIM8_Init+0x180>)
 8001802:	f004 fac9 	bl	8005d98 <HAL_TIMEx_MasterConfigSynchronization>
 8001806:	4603      	mov	r3, r0
 8001808:	2b00      	cmp	r3, #0
 800180a:	d001      	beq.n	8001810 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 800180c:	f000 fb6f 	bl	8001eee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001810:	2360      	movs	r3, #96	@ 0x60
 8001812:	627b      	str	r3, [r7, #36]	@ 0x24
  sConfigOC.Pulse = 0;
 8001814:	2300      	movs	r3, #0
 8001816:	62bb      	str	r3, [r7, #40]	@ 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001818:	2300      	movs	r3, #0
 800181a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 800181c:	2300      	movs	r3, #0
 800181e:	633b      	str	r3, [r7, #48]	@ 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001820:	2300      	movs	r3, #0
 8001822:	637b      	str	r3, [r7, #52]	@ 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001824:	2300      	movs	r3, #0
 8001826:	63bb      	str	r3, [r7, #56]	@ 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001828:	2300      	movs	r3, #0
 800182a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800182c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001830:	2200      	movs	r2, #0
 8001832:	4619      	mov	r1, r3
 8001834:	4825      	ldr	r0, [pc, #148]	@ (80018cc <MX_TIM8_Init+0x180>)
 8001836:	f003 fde1 	bl	80053fc <HAL_TIM_PWM_ConfigChannel>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001840:	f000 fb55 	bl	8001eee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001844:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001848:	2204      	movs	r2, #4
 800184a:	4619      	mov	r1, r3
 800184c:	481f      	ldr	r0, [pc, #124]	@ (80018cc <MX_TIM8_Init+0x180>)
 800184e:	f003 fdd5 	bl	80053fc <HAL_TIM_PWM_ConfigChannel>
 8001852:	4603      	mov	r3, r0
 8001854:	2b00      	cmp	r3, #0
 8001856:	d001      	beq.n	800185c <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 8001858:	f000 fb49 	bl	8001eee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800185c:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001860:	2208      	movs	r2, #8
 8001862:	4619      	mov	r1, r3
 8001864:	4819      	ldr	r0, [pc, #100]	@ (80018cc <MX_TIM8_Init+0x180>)
 8001866:	f003 fdc9 	bl	80053fc <HAL_TIM_PWM_ConfigChannel>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 8001870:	f000 fb3d 	bl	8001eee <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001874:	f107 0324 	add.w	r3, r7, #36	@ 0x24
 8001878:	220c      	movs	r2, #12
 800187a:	4619      	mov	r1, r3
 800187c:	4813      	ldr	r0, [pc, #76]	@ (80018cc <MX_TIM8_Init+0x180>)
 800187e:	f003 fdbd 	bl	80053fc <HAL_TIM_PWM_ConfigChannel>
 8001882:	4603      	mov	r3, r0
 8001884:	2b00      	cmp	r3, #0
 8001886:	d001      	beq.n	800188c <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 8001888:	f000 fb31 	bl	8001eee <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800188c:	2300      	movs	r3, #0
 800188e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001890:	2300      	movs	r3, #0
 8001892:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001894:	2300      	movs	r3, #0
 8001896:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001898:	2300      	movs	r3, #0
 800189a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800189c:	2300      	movs	r3, #0
 800189e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80018a0:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80018a4:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80018a6:	2300      	movs	r3, #0
 80018a8:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 80018aa:	1d3b      	adds	r3, r7, #4
 80018ac:	4619      	mov	r1, r3
 80018ae:	4807      	ldr	r0, [pc, #28]	@ (80018cc <MX_TIM8_Init+0x180>)
 80018b0:	f004 faee 	bl	8005e90 <HAL_TIMEx_ConfigBreakDeadTime>
 80018b4:	4603      	mov	r3, r0
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d001      	beq.n	80018be <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 80018ba:	f000 fb18 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 80018be:	4803      	ldr	r0, [pc, #12]	@ (80018cc <MX_TIM8_Init+0x180>)
 80018c0:	f000 fe00 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 80018c4:	bf00      	nop
 80018c6:	3758      	adds	r7, #88	@ 0x58
 80018c8:	46bd      	mov	sp, r7
 80018ca:	bd80      	pop	{r7, pc}
 80018cc:	20000568 	.word	0x20000568
 80018d0:	40010400 	.word	0x40010400

080018d4 <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b08c      	sub	sp, #48	@ 0x30
 80018d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018da:	f107 0320 	add.w	r3, r7, #32
 80018de:	2200      	movs	r2, #0
 80018e0:	601a      	str	r2, [r3, #0]
 80018e2:	605a      	str	r2, [r3, #4]
 80018e4:	609a      	str	r2, [r3, #8]
 80018e6:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018e8:	1d3b      	adds	r3, r7, #4
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
 80018f4:	611a      	str	r2, [r3, #16]
 80018f6:	615a      	str	r2, [r3, #20]
 80018f8:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 80018fa:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <MX_TIM9_Init+0xbc>)
 80018fc:	4a25      	ldr	r2, [pc, #148]	@ (8001994 <MX_TIM9_Init+0xc0>)
 80018fe:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001900:	4b23      	ldr	r3, [pc, #140]	@ (8001990 <MX_TIM9_Init+0xbc>)
 8001902:	2200      	movs	r2, #0
 8001904:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001906:	4b22      	ldr	r3, [pc, #136]	@ (8001990 <MX_TIM9_Init+0xbc>)
 8001908:	2200      	movs	r2, #0
 800190a:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 800190c:	4b20      	ldr	r3, [pc, #128]	@ (8001990 <MX_TIM9_Init+0xbc>)
 800190e:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8001912:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001914:	4b1e      	ldr	r3, [pc, #120]	@ (8001990 <MX_TIM9_Init+0xbc>)
 8001916:	2200      	movs	r2, #0
 8001918:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800191a:	4b1d      	ldr	r3, [pc, #116]	@ (8001990 <MX_TIM9_Init+0xbc>)
 800191c:	2200      	movs	r2, #0
 800191e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001920:	481b      	ldr	r0, [pc, #108]	@ (8001990 <MX_TIM9_Init+0xbc>)
 8001922:	f003 f9d6 	bl	8004cd2 <HAL_TIM_Base_Init>
 8001926:	4603      	mov	r3, r0
 8001928:	2b00      	cmp	r3, #0
 800192a:	d001      	beq.n	8001930 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 800192c:	f000 fadf 	bl	8001eee <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001930:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001934:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 8001936:	f107 0320 	add.w	r3, r7, #32
 800193a:	4619      	mov	r1, r3
 800193c:	4814      	ldr	r0, [pc, #80]	@ (8001990 <MX_TIM9_Init+0xbc>)
 800193e:	f003 fe1f 	bl	8005580 <HAL_TIM_ConfigClockSource>
 8001942:	4603      	mov	r3, r0
 8001944:	2b00      	cmp	r3, #0
 8001946:	d001      	beq.n	800194c <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 8001948:	f000 fad1 	bl	8001eee <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 800194c:	4810      	ldr	r0, [pc, #64]	@ (8001990 <MX_TIM9_Init+0xbc>)
 800194e:	f003 fa0f 	bl	8004d70 <HAL_TIM_PWM_Init>
 8001952:	4603      	mov	r3, r0
 8001954:	2b00      	cmp	r3, #0
 8001956:	d001      	beq.n	800195c <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 8001958:	f000 fac9 	bl	8001eee <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195c:	2360      	movs	r3, #96	@ 0x60
 800195e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001960:	2300      	movs	r3, #0
 8001962:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001964:	2300      	movs	r3, #0
 8001966:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001968:	2300      	movs	r3, #0
 800196a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196c:	1d3b      	adds	r3, r7, #4
 800196e:	2200      	movs	r2, #0
 8001970:	4619      	mov	r1, r3
 8001972:	4807      	ldr	r0, [pc, #28]	@ (8001990 <MX_TIM9_Init+0xbc>)
 8001974:	f003 fd42 	bl	80053fc <HAL_TIM_PWM_ConfigChannel>
 8001978:	4603      	mov	r3, r0
 800197a:	2b00      	cmp	r3, #0
 800197c:	d001      	beq.n	8001982 <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 800197e:	f000 fab6 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 8001982:	4803      	ldr	r0, [pc, #12]	@ (8001990 <MX_TIM9_Init+0xbc>)
 8001984:	f000 fd9e 	bl	80024c4 <HAL_TIM_MspPostInit>

}
 8001988:	bf00      	nop
 800198a:	3730      	adds	r7, #48	@ 0x30
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}
 8001990:	200005b0 	.word	0x200005b0
 8001994:	40014000 	.word	0x40014000

08001998 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 800199c:	4b11      	ldr	r3, [pc, #68]	@ (80019e4 <MX_UART4_Init+0x4c>)
 800199e:	4a12      	ldr	r2, [pc, #72]	@ (80019e8 <MX_UART4_Init+0x50>)
 80019a0:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80019a2:	4b10      	ldr	r3, [pc, #64]	@ (80019e4 <MX_UART4_Init+0x4c>)
 80019a4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80019a8:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80019aa:	4b0e      	ldr	r3, [pc, #56]	@ (80019e4 <MX_UART4_Init+0x4c>)
 80019ac:	2200      	movs	r2, #0
 80019ae:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80019b0:	4b0c      	ldr	r3, [pc, #48]	@ (80019e4 <MX_UART4_Init+0x4c>)
 80019b2:	2200      	movs	r2, #0
 80019b4:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80019b6:	4b0b      	ldr	r3, [pc, #44]	@ (80019e4 <MX_UART4_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80019bc:	4b09      	ldr	r3, [pc, #36]	@ (80019e4 <MX_UART4_Init+0x4c>)
 80019be:	220c      	movs	r2, #12
 80019c0:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019c2:	4b08      	ldr	r3, [pc, #32]	@ (80019e4 <MX_UART4_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80019c8:	4b06      	ldr	r3, [pc, #24]	@ (80019e4 <MX_UART4_Init+0x4c>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 80019ce:	4805      	ldr	r0, [pc, #20]	@ (80019e4 <MX_UART4_Init+0x4c>)
 80019d0:	f004 fac4 	bl	8005f5c <HAL_UART_Init>
 80019d4:	4603      	mov	r3, r0
 80019d6:	2b00      	cmp	r3, #0
 80019d8:	d001      	beq.n	80019de <MX_UART4_Init+0x46>
  {
    Error_Handler();
 80019da:	f000 fa88 	bl	8001eee <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 80019de:	bf00      	nop
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	200005f8 	.word	0x200005f8
 80019e8:	40004c00 	.word	0x40004c00

080019ec <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	b08c      	sub	sp, #48	@ 0x30
 80019f0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019f2:	f107 031c 	add.w	r3, r7, #28
 80019f6:	2200      	movs	r2, #0
 80019f8:	601a      	str	r2, [r3, #0]
 80019fa:	605a      	str	r2, [r3, #4]
 80019fc:	609a      	str	r2, [r3, #8]
 80019fe:	60da      	str	r2, [r3, #12]
 8001a00:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a02:	2300      	movs	r3, #0
 8001a04:	61bb      	str	r3, [r7, #24]
 8001a06:	4b74      	ldr	r3, [pc, #464]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a08:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a0a:	4a73      	ldr	r2, [pc, #460]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a0c:	f043 0310 	orr.w	r3, r3, #16
 8001a10:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a12:	4b71      	ldr	r3, [pc, #452]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a14:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a16:	f003 0310 	and.w	r3, r3, #16
 8001a1a:	61bb      	str	r3, [r7, #24]
 8001a1c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a1e:	2300      	movs	r3, #0
 8001a20:	617b      	str	r3, [r7, #20]
 8001a22:	4b6d      	ldr	r3, [pc, #436]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a24:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a26:	4a6c      	ldr	r2, [pc, #432]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a28:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a2c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a2e:	4b6a      	ldr	r3, [pc, #424]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a30:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a32:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001a36:	617b      	str	r3, [r7, #20]
 8001a38:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	613b      	str	r3, [r7, #16]
 8001a3e:	4b66      	ldr	r3, [pc, #408]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a42:	4a65      	ldr	r2, [pc, #404]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a44:	f043 0304 	orr.w	r3, r3, #4
 8001a48:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a4a:	4b63      	ldr	r3, [pc, #396]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a4e:	f003 0304 	and.w	r3, r3, #4
 8001a52:	613b      	str	r3, [r7, #16]
 8001a54:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a56:	2300      	movs	r3, #0
 8001a58:	60fb      	str	r3, [r7, #12]
 8001a5a:	4b5f      	ldr	r3, [pc, #380]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a5e:	4a5e      	ldr	r2, [pc, #376]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a60:	f043 0301 	orr.w	r3, r3, #1
 8001a64:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a66:	4b5c      	ldr	r3, [pc, #368]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a6a:	f003 0301 	and.w	r3, r3, #1
 8001a6e:	60fb      	str	r3, [r7, #12]
 8001a70:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a72:	2300      	movs	r3, #0
 8001a74:	60bb      	str	r3, [r7, #8]
 8001a76:	4b58      	ldr	r3, [pc, #352]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a7a:	4a57      	ldr	r2, [pc, #348]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a7c:	f043 0302 	orr.w	r3, r3, #2
 8001a80:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a82:	4b55      	ldr	r3, [pc, #340]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a86:	f003 0302 	and.w	r3, r3, #2
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001a8e:	2300      	movs	r3, #0
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	4b51      	ldr	r3, [pc, #324]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a96:	4a50      	ldr	r2, [pc, #320]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001a98:	f043 0308 	orr.w	r3, r3, #8
 8001a9c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9e:	4b4e      	ldr	r3, [pc, #312]	@ (8001bd8 <MX_GPIO_Init+0x1ec>)
 8001aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aa2:	f003 0308 	and.w	r3, r3, #8
 8001aa6:	607b      	str	r3, [r7, #4]
 8001aa8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CLR_LED_4_Pin|CLR_INT_3_Pin|CLR_LED_3_Pin|RR_ARRAY_MUX_3_Pin
 8001aaa:	2200      	movs	r2, #0
 8001aac:	f249 11ba 	movw	r1, #37306	@ 0x91ba
 8001ab0:	484a      	ldr	r0, [pc, #296]	@ (8001bdc <MX_GPIO_Init+0x1f0>)
 8001ab2:	f001 fe37 	bl	8003724 <HAL_GPIO_WritePin>
                          |RR_ARRAY_MUX_4_Pin|TOF_LPIN_1_Pin|TOF_INT_6_Pin|CLR_LED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RR_ARRAY_ODD_Pin|RR_ARRAY_EVEN_Pin|FR_ARRAY_EVEN_Pin, GPIO_PIN_RESET);
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	f241 0130 	movw	r1, #4144	@ 0x1030
 8001abc:	4848      	ldr	r0, [pc, #288]	@ (8001be0 <MX_GPIO_Init+0x1f4>)
 8001abe:	f001 fe31 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RR_ARRAY_MUX_1_Pin|RR_ARRAY_MUX_2_Pin|FR_INA_Pin|FR_INB_Pin
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	f24f 11c6 	movw	r1, #61894	@ 0xf1c6
 8001ac8:	4846      	ldr	r0, [pc, #280]	@ (8001be4 <MX_GPIO_Init+0x1f8>)
 8001aca:	f001 fe2b 	bl	8003724 <HAL_GPIO_WritePin>
                          |RR_INA_Pin|RR_INB_Pin|LCD_DS_Pin|LCD_RESET_Pin
                          |LCD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TOF_LPIN_5_Pin|TOF_LPIN_4_Pin|TOF_LPIN_3_Pin|FR_ARRAY_SB2_Pin
 8001ace:	2200      	movs	r2, #0
 8001ad0:	f644 21ff 	movw	r1, #19199	@ 0x4aff
 8001ad4:	4844      	ldr	r0, [pc, #272]	@ (8001be8 <MX_GPIO_Init+0x1fc>)
 8001ad6:	f001 fe25 	bl	8003724 <HAL_GPIO_WritePin>
                          |FR_ARRAY_SB3_Pin|FR_ARRAY_SB0_Pin|FR_ARRAY_SB1_Pin|FR_ARRAY_SA0_Pin
                          |FR_ARRAY_SA1_Pin|FR_ARRAY_SA2_Pin|FR_ARRAY_SA3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TOF_LPIN_2_Pin|CLR_LED_1_Pin|FR_ARRAY_ODD_Pin, GPIO_PIN_RESET);
 8001ada:	2200      	movs	r2, #0
 8001adc:	f44f 4111 	mov.w	r1, #37120	@ 0x9100
 8001ae0:	4842      	ldr	r0, [pc, #264]	@ (8001bec <MX_GPIO_Init+0x200>)
 8001ae2:	f001 fe1f 	bl	8003724 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLR_INT_4_Pin IMU_INT_Pin TOF_INT_1_Pin TOF_LPIN_6_Pin
                           CLR_INT_2_Pin */
  GPIO_InitStruct.Pin = CLR_INT_4_Pin|IMU_INT_Pin|TOF_INT_1_Pin|TOF_LPIN_6_Pin
 8001ae6:	f246 0345 	movw	r3, #24645	@ 0x6045
 8001aea:	61fb      	str	r3, [r7, #28]
                          |CLR_INT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001aec:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001af6:	f107 031c 	add.w	r3, r7, #28
 8001afa:	4619      	mov	r1, r3
 8001afc:	4837      	ldr	r0, [pc, #220]	@ (8001bdc <MX_GPIO_Init+0x1f0>)
 8001afe:	f001 fc75 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : CLR_LED_4_Pin CLR_INT_3_Pin CLR_LED_3_Pin RR_ARRAY_MUX_3_Pin
                           RR_ARRAY_MUX_4_Pin TOF_LPIN_1_Pin TOF_INT_6_Pin CLR_LED_2_Pin */
  GPIO_InitStruct.Pin = CLR_LED_4_Pin|CLR_INT_3_Pin|CLR_LED_3_Pin|RR_ARRAY_MUX_3_Pin
 8001b02:	f249 13ba 	movw	r3, #37306	@ 0x91ba
 8001b06:	61fb      	str	r3, [r7, #28]
                          |RR_ARRAY_MUX_4_Pin|TOF_LPIN_1_Pin|TOF_INT_6_Pin|CLR_LED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b08:	2301      	movs	r3, #1
 8001b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b10:	2300      	movs	r3, #0
 8001b12:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001b14:	f107 031c 	add.w	r3, r7, #28
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4830      	ldr	r0, [pc, #192]	@ (8001bdc <MX_GPIO_Init+0x1f0>)
 8001b1c:	f001 fc66 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PROX_IN_Pin TOF_INT_2_Pin CLR_INT_1_Pin */
  GPIO_InitStruct.Pin = PROX_IN_Pin|TOF_INT_2_Pin|CLR_INT_1_Pin;
 8001b20:	f640 2308 	movw	r3, #2568	@ 0xa08
 8001b24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b26:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001b2a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b2c:	2300      	movs	r3, #0
 8001b2e:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 031c 	add.w	r3, r7, #28
 8001b34:	4619      	mov	r1, r3
 8001b36:	482d      	ldr	r0, [pc, #180]	@ (8001bec <MX_GPIO_Init+0x200>)
 8001b38:	f001 fc58 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_ARRAY_ODD_Pin RR_ARRAY_EVEN_Pin FR_ARRAY_EVEN_Pin */
  GPIO_InitStruct.Pin = RR_ARRAY_ODD_Pin|RR_ARRAY_EVEN_Pin|FR_ARRAY_EVEN_Pin;
 8001b3c:	f241 0330 	movw	r3, #4144	@ 0x1030
 8001b40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b42:	2301      	movs	r3, #1
 8001b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b46:	2300      	movs	r3, #0
 8001b48:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b4a:	2300      	movs	r3, #0
 8001b4c:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b4e:	f107 031c 	add.w	r3, r7, #28
 8001b52:	4619      	mov	r1, r3
 8001b54:	4822      	ldr	r0, [pc, #136]	@ (8001be0 <MX_GPIO_Init+0x1f4>)
 8001b56:	f001 fc49 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_ARRAY_MUX_1_Pin RR_ARRAY_MUX_2_Pin FR_INA_Pin FR_INB_Pin
                           RR_INA_Pin RR_INB_Pin LCD_DS_Pin LCD_RESET_Pin
                           LCD_CS_Pin */
  GPIO_InitStruct.Pin = RR_ARRAY_MUX_1_Pin|RR_ARRAY_MUX_2_Pin|FR_INA_Pin|FR_INB_Pin
 8001b5a:	f24f 13c6 	movw	r3, #61894	@ 0xf1c6
 8001b5e:	61fb      	str	r3, [r7, #28]
                          |RR_INA_Pin|RR_INB_Pin|LCD_DS_Pin|LCD_RESET_Pin
                          |LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b6c:	f107 031c 	add.w	r3, r7, #28
 8001b70:	4619      	mov	r1, r3
 8001b72:	481c      	ldr	r0, [pc, #112]	@ (8001be4 <MX_GPIO_Init+0x1f8>)
 8001b74:	f001 fc3a 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_LPIN_5_Pin TOF_LPIN_4_Pin TOF_LPIN_3_Pin FR_ARRAY_SB2_Pin
                           FR_ARRAY_SB3_Pin FR_ARRAY_SB0_Pin FR_ARRAY_SB1_Pin FR_ARRAY_SA0_Pin
                           FR_ARRAY_SA1_Pin FR_ARRAY_SA2_Pin FR_ARRAY_SA3_Pin */
  GPIO_InitStruct.Pin = TOF_LPIN_5_Pin|TOF_LPIN_4_Pin|TOF_LPIN_3_Pin|FR_ARRAY_SB2_Pin
 8001b78:	f644 23ff 	movw	r3, #19199	@ 0x4aff
 8001b7c:	61fb      	str	r3, [r7, #28]
                          |FR_ARRAY_SB3_Pin|FR_ARRAY_SB0_Pin|FR_ARRAY_SB1_Pin|FR_ARRAY_SA0_Pin
                          |FR_ARRAY_SA1_Pin|FR_ARRAY_SA2_Pin|FR_ARRAY_SA3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b82:	2300      	movs	r3, #0
 8001b84:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b86:	2300      	movs	r3, #0
 8001b88:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001b8a:	f107 031c 	add.w	r3, r7, #28
 8001b8e:	4619      	mov	r1, r3
 8001b90:	4815      	ldr	r0, [pc, #84]	@ (8001be8 <MX_GPIO_Init+0x1fc>)
 8001b92:	f001 fc2b 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_INT_5_Pin TOF_INT_4_Pin TOF_INT_3_Pin */
  GPIO_InitStruct.Pin = TOF_INT_5_Pin|TOF_INT_4_Pin|TOF_INT_3_Pin;
 8001b96:	f44f 4314 	mov.w	r3, #37888	@ 0x9400
 8001b9a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001b9c:	f44f 1388 	mov.w	r3, #1114112	@ 0x110000
 8001ba0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	627b      	str	r3, [r7, #36]	@ 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba6:	f107 031c 	add.w	r3, r7, #28
 8001baa:	4619      	mov	r1, r3
 8001bac:	480e      	ldr	r0, [pc, #56]	@ (8001be8 <MX_GPIO_Init+0x1fc>)
 8001bae:	f001 fc1d 	bl	80033ec <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_LPIN_2_Pin CLR_LED_1_Pin FR_ARRAY_ODD_Pin */
  GPIO_InitStruct.Pin = TOF_LPIN_2_Pin|CLR_LED_1_Pin|FR_ARRAY_ODD_Pin;
 8001bb2:	f44f 4311 	mov.w	r3, #37120	@ 0x9100
 8001bb6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb8:	2301      	movs	r3, #1
 8001bba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bbc:	2300      	movs	r3, #0
 8001bbe:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bc0:	2300      	movs	r3, #0
 8001bc2:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001bc4:	f107 031c 	add.w	r3, r7, #28
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4808      	ldr	r0, [pc, #32]	@ (8001bec <MX_GPIO_Init+0x200>)
 8001bcc:	f001 fc0e 	bl	80033ec <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001bd0:	bf00      	nop
 8001bd2:	3730      	adds	r7, #48	@ 0x30
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40021000 	.word	0x40021000
 8001be0:	40020800 	.word	0x40020800
 8001be4:	40020400 	.word	0x40020400
 8001be8:	40020c00 	.word	0x40020c00
 8001bec:	40020000 	.word	0x40020000

08001bf0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) {
 8001bf0:	b480      	push	{r7}
 8001bf2:	b083      	sub	sp, #12
 8001bf4:	af00      	add	r7, sp, #0
 8001bf6:	6078      	str	r0, [r7, #4]
  if (htim->Instance == TIM6) {
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	681b      	ldr	r3, [r3, #0]
 8001bfc:	4a06      	ldr	r2, [pc, #24]	@ (8001c18 <HAL_TIM_PeriodElapsedCallback+0x28>)
 8001bfe:	4293      	cmp	r3, r2
 8001c00:	d104      	bne.n	8001c0c <HAL_TIM_PeriodElapsedCallback+0x1c>
    millis_counter++;
 8001c02:	4b06      	ldr	r3, [pc, #24]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	3301      	adds	r3, #1
 8001c08:	4a04      	ldr	r2, [pc, #16]	@ (8001c1c <HAL_TIM_PeriodElapsedCallback+0x2c>)
 8001c0a:	6013      	str	r3, [r2, #0]
  }
}
 8001c0c:	bf00      	nop
 8001c0e:	370c      	adds	r7, #12
 8001c10:	46bd      	mov	sp, r7
 8001c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c16:	4770      	bx	lr
 8001c18:	40001000 	.word	0x40001000
 8001c1c:	20000640 	.word	0x20000640

08001c20 <updateIR>:
uint32_t millis() {
  return millis_counter;
}


void updateIR(){
 8001c20:	b580      	push	{r7, lr}
 8001c22:	b082      	sub	sp, #8
 8001c24:	af00      	add	r7, sp, #0
	  // loop through amount of leds. ARRAY STARTS FROM 1
	   HAL_GPIO_WritePin(FR_ARRAY_EVEN_GPIO_Port, FR_ARRAY_EVEN_Pin, GPIO_PIN_SET);
 8001c26:	2201      	movs	r2, #1
 8001c28:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8001c2c:	485d      	ldr	r0, [pc, #372]	@ (8001da4 <updateIR+0x184>)
 8001c2e:	f001 fd79 	bl	8003724 <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(FR_ARRAY_ODD_GPIO_Port, FR_ARRAY_ODD_Pin, GPIO_PIN_SET);
 8001c32:	2201      	movs	r2, #1
 8001c34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001c38:	485b      	ldr	r0, [pc, #364]	@ (8001da8 <updateIR+0x188>)
 8001c3a:	f001 fd73 	bl	8003724 <HAL_GPIO_WritePin>
	  for (int i = 0; i < 25; i=i+2) {
 8001c3e:	2300      	movs	r3, #0
 8001c40:	607b      	str	r3, [r7, #4]
 8001c42:	e050      	b.n	8001ce6 <updateIR+0xc6>
			FR_Array_Mux_In_Select(i+1);
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	3301      	adds	r3, #1
 8001c48:	4618      	mov	r0, r3
 8001c4a:	f000 f8bd 	bl	8001dc8 <FR_Array_Mux_In_Select>
		  if(i <= 15){
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	2b0f      	cmp	r3, #15
 8001c52:	dc18      	bgt.n	8001c86 <updateIR+0x66>
	  		  	adc1ConfigPrivate.Channel = ADC_CHANNEL_10;
 8001c54:	4b55      	ldr	r3, [pc, #340]	@ (8001dac <updateIR+0x18c>)
 8001c56:	220a      	movs	r2, #10
 8001c58:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc1, &adc1ConfigPrivate);
 8001c5a:	4954      	ldr	r1, [pc, #336]	@ (8001dac <updateIR+0x18c>)
 8001c5c:	4854      	ldr	r0, [pc, #336]	@ (8001db0 <updateIR+0x190>)
 8001c5e:	f001 f895 	bl	8002d8c <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc1);
 8001c62:	4853      	ldr	r0, [pc, #332]	@ (8001db0 <updateIR+0x190>)
 8001c64:	f000 ff28 	bl	8002ab8 <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001c68:	f04f 31ff 	mov.w	r1, #4294967295
 8001c6c:	4850      	ldr	r0, [pc, #320]	@ (8001db0 <updateIR+0x190>)
 8001c6e:	f000 fff5 	bl	8002c5c <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc1);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc1);
 8001c72:	484f      	ldr	r0, [pc, #316]	@ (8001db0 <updateIR+0x190>)
 8001c74:	f001 f87d 	bl	8002d72 <HAL_ADC_GetValue>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	4619      	mov	r1, r3
 8001c7c:	4a4d      	ldr	r2, [pc, #308]	@ (8001db4 <updateIR+0x194>)
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001c84:	e017      	b.n	8001cb6 <updateIR+0x96>
//		  			delay_us(2);

		  }else{
			adc2ConfigPrivate.Channel = ADC_CHANNEL_11;
 8001c86:	4b4c      	ldr	r3, [pc, #304]	@ (8001db8 <updateIR+0x198>)
 8001c88:	220b      	movs	r2, #11
 8001c8a:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc2, &adc2ConfigPrivate);
 8001c8c:	494a      	ldr	r1, [pc, #296]	@ (8001db8 <updateIR+0x198>)
 8001c8e:	484b      	ldr	r0, [pc, #300]	@ (8001dbc <updateIR+0x19c>)
 8001c90:	f001 f87c 	bl	8002d8c <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc2);
 8001c94:	4849      	ldr	r0, [pc, #292]	@ (8001dbc <updateIR+0x19c>)
 8001c96:	f000 ff0f 	bl	8002ab8 <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001c9a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c9e:	4847      	ldr	r0, [pc, #284]	@ (8001dbc <updateIR+0x19c>)
 8001ca0:	f000 ffdc 	bl	8002c5c <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc2);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc2);
 8001ca4:	4845      	ldr	r0, [pc, #276]	@ (8001dbc <updateIR+0x19c>)
 8001ca6:	f001 f864 	bl	8002d72 <HAL_ADC_GetValue>
 8001caa:	4603      	mov	r3, r0
 8001cac:	4619      	mov	r1, r3
 8001cae:	4a41      	ldr	r2, [pc, #260]	@ (8001db4 <updateIR+0x194>)
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//		  			delay_us(2);
		  }
		  digital_IR[i] = IR_array[i] < Ir_thresholds[i];
 8001cb6:	4a3f      	ldr	r2, [pc, #252]	@ (8001db4 <updateIR+0x194>)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001cbe:	4940      	ldr	r1, [pc, #256]	@ (8001dc0 <updateIR+0x1a0>)
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001cc6:	429a      	cmp	r2, r3
 8001cc8:	bfb4      	ite	lt
 8001cca:	2301      	movlt	r3, #1
 8001ccc:	2300      	movge	r3, #0
 8001cce:	b2db      	uxtb	r3, r3
 8001cd0:	4619      	mov	r1, r3
 8001cd2:	4a3c      	ldr	r2, [pc, #240]	@ (8001dc4 <updateIR+0x1a4>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  HAL_Delay(1);
 8001cda:	2001      	movs	r0, #1
 8001cdc:	f000 fe84 	bl	80029e8 <HAL_Delay>
	  for (int i = 0; i < 25; i=i+2) {
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	3302      	adds	r3, #2
 8001ce4:	607b      	str	r3, [r7, #4]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	2b18      	cmp	r3, #24
 8001cea:	ddab      	ble.n	8001c44 <updateIR+0x24>
	  }
	  for (int i = 1; i < 25; i=i+2) {
 8001cec:	2301      	movs	r3, #1
 8001cee:	603b      	str	r3, [r7, #0]
 8001cf0:	e050      	b.n	8001d94 <updateIR+0x174>
			FR_Array_Mux_In_Select(i+1);
 8001cf2:	683b      	ldr	r3, [r7, #0]
 8001cf4:	3301      	adds	r3, #1
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	f000 f866 	bl	8001dc8 <FR_Array_Mux_In_Select>
		  if(i <= 15){
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	2b0f      	cmp	r3, #15
 8001d00:	dc18      	bgt.n	8001d34 <updateIR+0x114>
	  		  	adc1ConfigPrivate.Channel = ADC_CHANNEL_10;
 8001d02:	4b2a      	ldr	r3, [pc, #168]	@ (8001dac <updateIR+0x18c>)
 8001d04:	220a      	movs	r2, #10
 8001d06:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc1, &adc1ConfigPrivate);
 8001d08:	4928      	ldr	r1, [pc, #160]	@ (8001dac <updateIR+0x18c>)
 8001d0a:	4829      	ldr	r0, [pc, #164]	@ (8001db0 <updateIR+0x190>)
 8001d0c:	f001 f83e 	bl	8002d8c <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc1);
 8001d10:	4827      	ldr	r0, [pc, #156]	@ (8001db0 <updateIR+0x190>)
 8001d12:	f000 fed1 	bl	8002ab8 <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001d16:	f04f 31ff 	mov.w	r1, #4294967295
 8001d1a:	4825      	ldr	r0, [pc, #148]	@ (8001db0 <updateIR+0x190>)
 8001d1c:	f000 ff9e 	bl	8002c5c <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc1);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc1);
 8001d20:	4823      	ldr	r0, [pc, #140]	@ (8001db0 <updateIR+0x190>)
 8001d22:	f001 f826 	bl	8002d72 <HAL_ADC_GetValue>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4a22      	ldr	r2, [pc, #136]	@ (8001db4 <updateIR+0x194>)
 8001d2c:	683b      	ldr	r3, [r7, #0]
 8001d2e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001d32:	e017      	b.n	8001d64 <updateIR+0x144>
//		  			delay_us(2);
		  }else{
			adc2ConfigPrivate.Channel = ADC_CHANNEL_11;
 8001d34:	4b20      	ldr	r3, [pc, #128]	@ (8001db8 <updateIR+0x198>)
 8001d36:	220b      	movs	r2, #11
 8001d38:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc2, &adc2ConfigPrivate);
 8001d3a:	491f      	ldr	r1, [pc, #124]	@ (8001db8 <updateIR+0x198>)
 8001d3c:	481f      	ldr	r0, [pc, #124]	@ (8001dbc <updateIR+0x19c>)
 8001d3e:	f001 f825 	bl	8002d8c <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc2);
 8001d42:	481e      	ldr	r0, [pc, #120]	@ (8001dbc <updateIR+0x19c>)
 8001d44:	f000 feb8 	bl	8002ab8 <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001d48:	f04f 31ff 	mov.w	r1, #4294967295
 8001d4c:	481b      	ldr	r0, [pc, #108]	@ (8001dbc <updateIR+0x19c>)
 8001d4e:	f000 ff85 	bl	8002c5c <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc2);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc2);
 8001d52:	481a      	ldr	r0, [pc, #104]	@ (8001dbc <updateIR+0x19c>)
 8001d54:	f001 f80d 	bl	8002d72 <HAL_ADC_GetValue>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4a15      	ldr	r2, [pc, #84]	@ (8001db4 <updateIR+0x194>)
 8001d5e:	683b      	ldr	r3, [r7, #0]
 8001d60:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//		  			delay_us(2);

		  }
		  digital_IR[i] = IR_array[i] < Ir_thresholds[i];
 8001d64:	4a13      	ldr	r2, [pc, #76]	@ (8001db4 <updateIR+0x194>)
 8001d66:	683b      	ldr	r3, [r7, #0]
 8001d68:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001d6c:	4914      	ldr	r1, [pc, #80]	@ (8001dc0 <updateIR+0x1a0>)
 8001d6e:	683b      	ldr	r3, [r7, #0]
 8001d70:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001d74:	429a      	cmp	r2, r3
 8001d76:	bfb4      	ite	lt
 8001d78:	2301      	movlt	r3, #1
 8001d7a:	2300      	movge	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	4619      	mov	r1, r3
 8001d80:	4a10      	ldr	r2, [pc, #64]	@ (8001dc4 <updateIR+0x1a4>)
 8001d82:	683b      	ldr	r3, [r7, #0]
 8001d84:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  HAL_Delay(1);
 8001d88:	2001      	movs	r0, #1
 8001d8a:	f000 fe2d 	bl	80029e8 <HAL_Delay>
	  for (int i = 1; i < 25; i=i+2) {
 8001d8e:	683b      	ldr	r3, [r7, #0]
 8001d90:	3302      	adds	r3, #2
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	683b      	ldr	r3, [r7, #0]
 8001d96:	2b18      	cmp	r3, #24
 8001d98:	ddab      	ble.n	8001cf2 <updateIR+0xd2>
	  }
}
 8001d9a:	bf00      	nop
 8001d9c:	bf00      	nop
 8001d9e:	3708      	adds	r7, #8
 8001da0:	46bd      	mov	sp, r7
 8001da2:	bd80      	pop	{r7, pc}
 8001da4:	40020800 	.word	0x40020800
 8001da8:	40020000 	.word	0x40020000
 8001dac:	20000644 	.word	0x20000644
 8001db0:	200002c4 	.word	0x200002c4
 8001db4:	200001fc 	.word	0x200001fc
 8001db8:	20000654 	.word	0x20000654
 8001dbc:	2000030c 	.word	0x2000030c
 8001dc0:	20000068 	.word	0x20000068
 8001dc4:	20000260 	.word	0x20000260

08001dc8 <FR_Array_Mux_In_Select>:


void FR_Array_Mux_In_Select(int IR_LED_Num){
 8001dc8:	b580      	push	{r7, lr}
 8001dca:	b082      	sub	sp, #8
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	6078      	str	r0, [r7, #4]
	if(IR_LED_Num <= 16){
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	2b10      	cmp	r3, #16
 8001dd4:	dc37      	bgt.n	8001e46 <FR_Array_Mux_In_Select+0x7e>
	    HAL_GPIO_WritePin(FR_ARRAY_SA0_GPIO_Port, FR_ARRAY_SA0_Pin, FR_IR_LED_ARR[IR_LED_Num-1][4]);
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	1e5a      	subs	r2, r3, #1
 8001dda:	493a      	ldr	r1, [pc, #232]	@ (8001ec4 <FR_Array_Mux_In_Select+0xfc>)
 8001ddc:	4613      	mov	r3, r2
 8001dde:	009b      	lsls	r3, r3, #2
 8001de0:	4413      	add	r3, r2
 8001de2:	440b      	add	r3, r1
 8001de4:	3304      	adds	r3, #4
 8001de6:	781b      	ldrb	r3, [r3, #0]
 8001de8:	461a      	mov	r2, r3
 8001dea:	2110      	movs	r1, #16
 8001dec:	4836      	ldr	r0, [pc, #216]	@ (8001ec8 <FR_Array_Mux_In_Select+0x100>)
 8001dee:	f001 fc99 	bl	8003724 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SA1_GPIO_Port, FR_ARRAY_SA1_Pin, FR_IR_LED_ARR[IR_LED_Num-1][3]);
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	1e5a      	subs	r2, r3, #1
 8001df6:	4933      	ldr	r1, [pc, #204]	@ (8001ec4 <FR_Array_Mux_In_Select+0xfc>)
 8001df8:	4613      	mov	r3, r2
 8001dfa:	009b      	lsls	r3, r3, #2
 8001dfc:	4413      	add	r3, r2
 8001dfe:	440b      	add	r3, r1
 8001e00:	3303      	adds	r3, #3
 8001e02:	781b      	ldrb	r3, [r3, #0]
 8001e04:	461a      	mov	r2, r3
 8001e06:	2120      	movs	r1, #32
 8001e08:	482f      	ldr	r0, [pc, #188]	@ (8001ec8 <FR_Array_Mux_In_Select+0x100>)
 8001e0a:	f001 fc8b 	bl	8003724 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SA2_GPIO_Port, FR_ARRAY_SA2_Pin, FR_IR_LED_ARR[IR_LED_Num-1][2]);
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	1e5a      	subs	r2, r3, #1
 8001e12:	492c      	ldr	r1, [pc, #176]	@ (8001ec4 <FR_Array_Mux_In_Select+0xfc>)
 8001e14:	4613      	mov	r3, r2
 8001e16:	009b      	lsls	r3, r3, #2
 8001e18:	4413      	add	r3, r2
 8001e1a:	440b      	add	r3, r1
 8001e1c:	3302      	adds	r3, #2
 8001e1e:	781b      	ldrb	r3, [r3, #0]
 8001e20:	461a      	mov	r2, r3
 8001e22:	2140      	movs	r1, #64	@ 0x40
 8001e24:	4828      	ldr	r0, [pc, #160]	@ (8001ec8 <FR_Array_Mux_In_Select+0x100>)
 8001e26:	f001 fc7d 	bl	8003724 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SA3_GPIO_Port, FR_ARRAY_SA3_Pin, FR_IR_LED_ARR[IR_LED_Num-1][1]);
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	1e5a      	subs	r2, r3, #1
 8001e2e:	4925      	ldr	r1, [pc, #148]	@ (8001ec4 <FR_Array_Mux_In_Select+0xfc>)
 8001e30:	4613      	mov	r3, r2
 8001e32:	009b      	lsls	r3, r3, #2
 8001e34:	4413      	add	r3, r2
 8001e36:	440b      	add	r3, r1
 8001e38:	3301      	adds	r3, #1
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	461a      	mov	r2, r3
 8001e3e:	2180      	movs	r1, #128	@ 0x80
 8001e40:	4821      	ldr	r0, [pc, #132]	@ (8001ec8 <FR_Array_Mux_In_Select+0x100>)
 8001e42:	f001 fc6f 	bl	8003724 <HAL_GPIO_WritePin>
	}	if(IR_LED_Num > 16){
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	2b10      	cmp	r3, #16
 8001e4a:	dd37      	ble.n	8001ebc <FR_Array_Mux_In_Select+0xf4>
	    HAL_GPIO_WritePin(FR_ARRAY_SB0_GPIO_Port, FR_ARRAY_SB0_Pin, FR_IR_LED_ARR[IR_LED_Num-1][4]);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	1e5a      	subs	r2, r3, #1
 8001e50:	491c      	ldr	r1, [pc, #112]	@ (8001ec4 <FR_Array_Mux_In_Select+0xfc>)
 8001e52:	4613      	mov	r3, r2
 8001e54:	009b      	lsls	r3, r3, #2
 8001e56:	4413      	add	r3, r2
 8001e58:	440b      	add	r3, r1
 8001e5a:	3304      	adds	r3, #4
 8001e5c:	781b      	ldrb	r3, [r3, #0]
 8001e5e:	461a      	mov	r2, r3
 8001e60:	2104      	movs	r1, #4
 8001e62:	4819      	ldr	r0, [pc, #100]	@ (8001ec8 <FR_Array_Mux_In_Select+0x100>)
 8001e64:	f001 fc5e 	bl	8003724 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SB1_GPIO_Port, FR_ARRAY_SB1_Pin, FR_IR_LED_ARR[IR_LED_Num-1][3]);
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	1e5a      	subs	r2, r3, #1
 8001e6c:	4915      	ldr	r1, [pc, #84]	@ (8001ec4 <FR_Array_Mux_In_Select+0xfc>)
 8001e6e:	4613      	mov	r3, r2
 8001e70:	009b      	lsls	r3, r3, #2
 8001e72:	4413      	add	r3, r2
 8001e74:	440b      	add	r3, r1
 8001e76:	3303      	adds	r3, #3
 8001e78:	781b      	ldrb	r3, [r3, #0]
 8001e7a:	461a      	mov	r2, r3
 8001e7c:	2108      	movs	r1, #8
 8001e7e:	4812      	ldr	r0, [pc, #72]	@ (8001ec8 <FR_Array_Mux_In_Select+0x100>)
 8001e80:	f001 fc50 	bl	8003724 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SB2_GPIO_Port, FR_ARRAY_SB2_Pin, FR_IR_LED_ARR[IR_LED_Num-1][2]);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	1e5a      	subs	r2, r3, #1
 8001e88:	490e      	ldr	r1, [pc, #56]	@ (8001ec4 <FR_Array_Mux_In_Select+0xfc>)
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	009b      	lsls	r3, r3, #2
 8001e8e:	4413      	add	r3, r2
 8001e90:	440b      	add	r3, r1
 8001e92:	3302      	adds	r3, #2
 8001e94:	781b      	ldrb	r3, [r3, #0]
 8001e96:	461a      	mov	r2, r3
 8001e98:	2101      	movs	r1, #1
 8001e9a:	480b      	ldr	r0, [pc, #44]	@ (8001ec8 <FR_Array_Mux_In_Select+0x100>)
 8001e9c:	f001 fc42 	bl	8003724 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SB3_GPIO_Port, FR_ARRAY_SB3_Pin, FR_IR_LED_ARR[IR_LED_Num-1][1]);
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	1e5a      	subs	r2, r3, #1
 8001ea4:	4907      	ldr	r1, [pc, #28]	@ (8001ec4 <FR_Array_Mux_In_Select+0xfc>)
 8001ea6:	4613      	mov	r3, r2
 8001ea8:	009b      	lsls	r3, r3, #2
 8001eaa:	4413      	add	r3, r2
 8001eac:	440b      	add	r3, r1
 8001eae:	3301      	adds	r3, #1
 8001eb0:	781b      	ldrb	r3, [r3, #0]
 8001eb2:	461a      	mov	r2, r3
 8001eb4:	2102      	movs	r1, #2
 8001eb6:	4804      	ldr	r0, [pc, #16]	@ (8001ec8 <FR_Array_Mux_In_Select+0x100>)
 8001eb8:	f001 fc34 	bl	8003724 <HAL_GPIO_WritePin>
	}

}
 8001ebc:	bf00      	nop
 8001ebe:	3708      	adds	r7, #8
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	200000e8 	.word	0x200000e8
 8001ec8:	40020c00 	.word	0x40020c00

08001ecc <Get_abs>:
		HAL_Delay(3);
	  }
}

int Get_abs(int num)
{
 8001ecc:	b480      	push	{r7}
 8001ece:	b083      	sub	sp, #12
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
	if (num>=0)
 8001ed4:	687b      	ldr	r3, [r7, #4]
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	db01      	blt.n	8001ede <Get_abs+0x12>
	{
		return num;
 8001eda:	687b      	ldr	r3, [r7, #4]
 8001edc:	e001      	b.n	8001ee2 <Get_abs+0x16>
	}
	else
	{
		return -num;
 8001ede:	687b      	ldr	r3, [r7, #4]
 8001ee0:	425b      	negs	r3, r3
	}
}
 8001ee2:	4618      	mov	r0, r3
 8001ee4:	370c      	adds	r7, #12
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eec:	4770      	bx	lr

08001eee <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001eee:	b480      	push	{r7}
 8001ef0:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001ef2:	b672      	cpsid	i
}
 8001ef4:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001ef6:	bf00      	nop
 8001ef8:	e7fd      	b.n	8001ef6 <Error_Handler+0x8>
	...

08001efc <mpu6050_init>:

extern I2C_HandleTypeDef hi2c2;


void mpu6050_init()
{
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b086      	sub	sp, #24
 8001f00:	af04      	add	r7, sp, #16
    HAL_StatusTypeDef ret = HAL_I2C_IsDeviceReady(&hi2c2, (DEVICE_ADDRESS << 1) + 0, 1, 100);
 8001f02:	2364      	movs	r3, #100	@ 0x64
 8001f04:	2201      	movs	r2, #1
 8001f06:	21d0      	movs	r1, #208	@ 0xd0
 8001f08:	4830      	ldr	r0, [pc, #192]	@ (8001fcc <mpu6050_init+0xd0>)
 8001f0a:	f001 fe63 	bl	8003bd4 <HAL_I2C_IsDeviceReady>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 8001f12:	79fb      	ldrb	r3, [r7, #7]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d103      	bne.n	8001f20 <mpu6050_init+0x24>
    {
        printf("The device is ready \n");
 8001f18:	482d      	ldr	r0, [pc, #180]	@ (8001fd0 <mpu6050_init+0xd4>)
 8001f1a:	f004 fc0d 	bl	8006738 <puts>
 8001f1e:	e002      	b.n	8001f26 <mpu6050_init+0x2a>
    }
    else
    {
        printf("The device is not ready. Check cables \n ");
 8001f20:	482c      	ldr	r0, [pc, #176]	@ (8001fd4 <mpu6050_init+0xd8>)
 8001f22:	f004 fba1 	bl	8006668 <iprintf>
    }

    uint8_t temp_data = FS_GYRO_500;
 8001f26:	2308      	movs	r3, #8
 8001f28:	71bb      	strb	r3, [r7, #6]
    ret = HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_GYRO, 1, &temp_data, 1, 100);
 8001f2a:	2364      	movs	r3, #100	@ 0x64
 8001f2c:	9302      	str	r3, [sp, #8]
 8001f2e:	2301      	movs	r3, #1
 8001f30:	9301      	str	r3, [sp, #4]
 8001f32:	1dbb      	adds	r3, r7, #6
 8001f34:	9300      	str	r3, [sp, #0]
 8001f36:	2301      	movs	r3, #1
 8001f38:	221b      	movs	r2, #27
 8001f3a:	21d0      	movs	r1, #208	@ 0xd0
 8001f3c:	4823      	ldr	r0, [pc, #140]	@ (8001fcc <mpu6050_init+0xd0>)
 8001f3e:	f001 fd4f 	bl	80039e0 <HAL_I2C_Mem_Write>
 8001f42:	4603      	mov	r3, r0
 8001f44:	71fb      	strb	r3, [r7, #7]
    if (ret == HAL_OK)
 8001f46:	79fb      	ldrb	r3, [r7, #7]
 8001f48:	2b00      	cmp	r3, #0
 8001f4a:	d103      	bne.n	8001f54 <mpu6050_init+0x58>
    {
        printf("Configuring gyro \n");
 8001f4c:	4822      	ldr	r0, [pc, #136]	@ (8001fd8 <mpu6050_init+0xdc>)
 8001f4e:	f004 fbf3 	bl	8006738 <puts>
 8001f52:	e002      	b.n	8001f5a <mpu6050_init+0x5e>
    }
    else
    {
        printf("Failed to configure gyro \n");
 8001f54:	4821      	ldr	r0, [pc, #132]	@ (8001fdc <mpu6050_init+0xe0>)
 8001f56:	f004 fbef 	bl	8006738 <puts>
    }

    temp_data = FS_ACC_4G;
 8001f5a:	2308      	movs	r3, #8
 8001f5c:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, REG_CONFIG_ACC, 1, &temp_data, 1, 100);
 8001f5e:	2364      	movs	r3, #100	@ 0x64
 8001f60:	9302      	str	r3, [sp, #8]
 8001f62:	2301      	movs	r3, #1
 8001f64:	9301      	str	r3, [sp, #4]
 8001f66:	1dbb      	adds	r3, r7, #6
 8001f68:	9300      	str	r3, [sp, #0]
 8001f6a:	2301      	movs	r3, #1
 8001f6c:	221c      	movs	r2, #28
 8001f6e:	21d0      	movs	r1, #208	@ 0xd0
 8001f70:	4816      	ldr	r0, [pc, #88]	@ (8001fcc <mpu6050_init+0xd0>)
 8001f72:	f001 fd35 	bl	80039e0 <HAL_I2C_Mem_Write>
 8001f76:	4603      	mov	r3, r0
 8001f78:	71fb      	strb	r3, [r7, #7]
	if (ret == HAL_OK)
 8001f7a:	79fb      	ldrb	r3, [r7, #7]
 8001f7c:	2b00      	cmp	r3, #0
 8001f7e:	d103      	bne.n	8001f88 <mpu6050_init+0x8c>
	{
		printf("Configuring Acc \n");
 8001f80:	4817      	ldr	r0, [pc, #92]	@ (8001fe0 <mpu6050_init+0xe4>)
 8001f82:	f004 fbd9 	bl	8006738 <puts>
 8001f86:	e002      	b.n	8001f8e <mpu6050_init+0x92>
	}
	else
	{
		printf("Failed to configure acc \n");
 8001f88:	4816      	ldr	r0, [pc, #88]	@ (8001fe4 <mpu6050_init+0xe8>)
 8001f8a:	f004 fbd5 	bl	8006738 <puts>
	}

	temp_data = 0;
 8001f8e:	2300      	movs	r3, #0
 8001f90:	71bb      	strb	r3, [r7, #6]
	ret = HAL_I2C_Mem_Write(&hi2c2, (DEVICE_ADDRESS << 1) + 0, REG_USR_CTRL, 1, &temp_data, 1, 100);
 8001f92:	2364      	movs	r3, #100	@ 0x64
 8001f94:	9302      	str	r3, [sp, #8]
 8001f96:	2301      	movs	r3, #1
 8001f98:	9301      	str	r3, [sp, #4]
 8001f9a:	1dbb      	adds	r3, r7, #6
 8001f9c:	9300      	str	r3, [sp, #0]
 8001f9e:	2301      	movs	r3, #1
 8001fa0:	226b      	movs	r2, #107	@ 0x6b
 8001fa2:	21d0      	movs	r1, #208	@ 0xd0
 8001fa4:	4809      	ldr	r0, [pc, #36]	@ (8001fcc <mpu6050_init+0xd0>)
 8001fa6:	f001 fd1b 	bl	80039e0 <HAL_I2C_Mem_Write>
 8001faa:	4603      	mov	r3, r0
 8001fac:	71fb      	strb	r3, [r7, #7]
	if (ret == HAL_OK)
 8001fae:	79fb      	ldrb	r3, [r7, #7]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d103      	bne.n	8001fbc <mpu6050_init+0xc0>
	{
		printf("Exiting from sleep mode \n");
 8001fb4:	480c      	ldr	r0, [pc, #48]	@ (8001fe8 <mpu6050_init+0xec>)
 8001fb6:	f004 fbbf 	bl	8006738 <puts>
	}
	else
	{
		printf("Failed to exit from sleep mode \n");
	}
}
 8001fba:	e002      	b.n	8001fc2 <mpu6050_init+0xc6>
		printf("Failed to exit from sleep mode \n");
 8001fbc:	480b      	ldr	r0, [pc, #44]	@ (8001fec <mpu6050_init+0xf0>)
 8001fbe:	f004 fbbb 	bl	8006738 <puts>
}
 8001fc2:	bf00      	nop
 8001fc4:	3708      	adds	r7, #8
 8001fc6:	46bd      	mov	sp, r7
 8001fc8:	bd80      	pop	{r7, pc}
 8001fca:	bf00      	nop
 8001fcc:	20000354 	.word	0x20000354
 8001fd0:	0800742c 	.word	0x0800742c
 8001fd4:	08007444 	.word	0x08007444
 8001fd8:	08007470 	.word	0x08007470
 8001fdc:	08007484 	.word	0x08007484
 8001fe0:	080074a0 	.word	0x080074a0
 8001fe4:	080074b4 	.word	0x080074b4
 8001fe8:	080074d0 	.word	0x080074d0
 8001fec:	080074ec 	.word	0x080074ec

08001ff0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ff0:	b480      	push	{r7}
 8001ff2:	b083      	sub	sp, #12
 8001ff4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	607b      	str	r3, [r7, #4]
 8001ffa:	4b10      	ldr	r3, [pc, #64]	@ (800203c <HAL_MspInit+0x4c>)
 8001ffc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ffe:	4a0f      	ldr	r2, [pc, #60]	@ (800203c <HAL_MspInit+0x4c>)
 8002000:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002004:	6453      	str	r3, [r2, #68]	@ 0x44
 8002006:	4b0d      	ldr	r3, [pc, #52]	@ (800203c <HAL_MspInit+0x4c>)
 8002008:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800200a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800200e:	607b      	str	r3, [r7, #4]
 8002010:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002012:	2300      	movs	r3, #0
 8002014:	603b      	str	r3, [r7, #0]
 8002016:	4b09      	ldr	r3, [pc, #36]	@ (800203c <HAL_MspInit+0x4c>)
 8002018:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800201a:	4a08      	ldr	r2, [pc, #32]	@ (800203c <HAL_MspInit+0x4c>)
 800201c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002020:	6413      	str	r3, [r2, #64]	@ 0x40
 8002022:	4b06      	ldr	r3, [pc, #24]	@ (800203c <HAL_MspInit+0x4c>)
 8002024:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002026:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800202a:	603b      	str	r3, [r7, #0]
 800202c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800202e:	bf00      	nop
 8002030:	370c      	adds	r7, #12
 8002032:	46bd      	mov	sp, r7
 8002034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002038:	4770      	bx	lr
 800203a:	bf00      	nop
 800203c:	40023800 	.word	0x40023800

08002040 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002040:	b580      	push	{r7, lr}
 8002042:	b08c      	sub	sp, #48	@ 0x30
 8002044:	af00      	add	r7, sp, #0
 8002046:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002048:	f107 031c 	add.w	r3, r7, #28
 800204c:	2200      	movs	r2, #0
 800204e:	601a      	str	r2, [r3, #0]
 8002050:	605a      	str	r2, [r3, #4]
 8002052:	609a      	str	r2, [r3, #8]
 8002054:	60da      	str	r2, [r3, #12]
 8002056:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	681b      	ldr	r3, [r3, #0]
 800205c:	4a3b      	ldr	r2, [pc, #236]	@ (800214c <HAL_ADC_MspInit+0x10c>)
 800205e:	4293      	cmp	r3, r2
 8002060:	d142      	bne.n	80020e8 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	61bb      	str	r3, [r7, #24]
 8002066:	4b3a      	ldr	r3, [pc, #232]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	4a39      	ldr	r2, [pc, #228]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 800206c:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002070:	6453      	str	r3, [r2, #68]	@ 0x44
 8002072:	4b37      	ldr	r3, [pc, #220]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800207a:	61bb      	str	r3, [r7, #24]
 800207c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	617b      	str	r3, [r7, #20]
 8002082:	4b33      	ldr	r3, [pc, #204]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 8002084:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002086:	4a32      	ldr	r2, [pc, #200]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 8002088:	f043 0304 	orr.w	r3, r3, #4
 800208c:	6313      	str	r3, [r2, #48]	@ 0x30
 800208e:	4b30      	ldr	r3, [pc, #192]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 8002090:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002092:	f003 0304 	and.w	r3, r3, #4
 8002096:	617b      	str	r3, [r7, #20]
 8002098:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800209a:	2300      	movs	r3, #0
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	4b2c      	ldr	r3, [pc, #176]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 80020a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020a2:	4a2b      	ldr	r2, [pc, #172]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 80020a4:	f043 0302 	orr.w	r3, r3, #2
 80020a8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020aa:	4b29      	ldr	r3, [pc, #164]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 80020ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ae:	f003 0302 	and.w	r3, r3, #2
 80020b2:	613b      	str	r3, [r7, #16]
 80020b4:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = FR_ARRAY_OUTA_Pin|BAT_MEASURE_Pin;
 80020b6:	2305      	movs	r3, #5
 80020b8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020ba:	2303      	movs	r3, #3
 80020bc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020be:	2300      	movs	r3, #0
 80020c0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80020c2:	f107 031c 	add.w	r3, r7, #28
 80020c6:	4619      	mov	r1, r3
 80020c8:	4822      	ldr	r0, [pc, #136]	@ (8002154 <HAL_ADC_MspInit+0x114>)
 80020ca:	f001 f98f 	bl	80033ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_ARR_OUT_Pin;
 80020ce:	2301      	movs	r3, #1
 80020d0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80020d2:	2303      	movs	r3, #3
 80020d4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d6:	2300      	movs	r3, #0
 80020d8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(RR_ARR_OUT_GPIO_Port, &GPIO_InitStruct);
 80020da:	f107 031c 	add.w	r3, r7, #28
 80020de:	4619      	mov	r1, r3
 80020e0:	481d      	ldr	r0, [pc, #116]	@ (8002158 <HAL_ADC_MspInit+0x118>)
 80020e2:	f001 f983 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 80020e6:	e02c      	b.n	8002142 <HAL_ADC_MspInit+0x102>
  else if(hadc->Instance==ADC2)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	4a1b      	ldr	r2, [pc, #108]	@ (800215c <HAL_ADC_MspInit+0x11c>)
 80020ee:	4293      	cmp	r3, r2
 80020f0:	d127      	bne.n	8002142 <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC2_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b16      	ldr	r3, [pc, #88]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 80020f8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020fa:	4a15      	ldr	r2, [pc, #84]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 80020fc:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002100:	6453      	str	r3, [r2, #68]	@ 0x44
 8002102:	4b13      	ldr	r3, [pc, #76]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 8002104:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002106:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800210e:	2300      	movs	r3, #0
 8002110:	60bb      	str	r3, [r7, #8]
 8002112:	4b0f      	ldr	r3, [pc, #60]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 8002114:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002116:	4a0e      	ldr	r2, [pc, #56]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	6313      	str	r3, [r2, #48]	@ 0x30
 800211e:	4b0c      	ldr	r3, [pc, #48]	@ (8002150 <HAL_ADC_MspInit+0x110>)
 8002120:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FR_ARRAY_OUTB_Pin;
 800212a:	2302      	movs	r3, #2
 800212c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800212e:	2303      	movs	r3, #3
 8002130:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(FR_ARRAY_OUTB_GPIO_Port, &GPIO_InitStruct);
 8002136:	f107 031c 	add.w	r3, r7, #28
 800213a:	4619      	mov	r1, r3
 800213c:	4805      	ldr	r0, [pc, #20]	@ (8002154 <HAL_ADC_MspInit+0x114>)
 800213e:	f001 f955 	bl	80033ec <HAL_GPIO_Init>
}
 8002142:	bf00      	nop
 8002144:	3730      	adds	r7, #48	@ 0x30
 8002146:	46bd      	mov	sp, r7
 8002148:	bd80      	pop	{r7, pc}
 800214a:	bf00      	nop
 800214c:	40012000 	.word	0x40012000
 8002150:	40023800 	.word	0x40023800
 8002154:	40020800 	.word	0x40020800
 8002158:	40020400 	.word	0x40020400
 800215c:	40012100 	.word	0x40012100

08002160 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002160:	b580      	push	{r7, lr}
 8002162:	b08a      	sub	sp, #40	@ 0x28
 8002164:	af00      	add	r7, sp, #0
 8002166:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002168:	f107 0314 	add.w	r3, r7, #20
 800216c:	2200      	movs	r2, #0
 800216e:	601a      	str	r2, [r3, #0]
 8002170:	605a      	str	r2, [r3, #4]
 8002172:	609a      	str	r2, [r3, #8]
 8002174:	60da      	str	r2, [r3, #12]
 8002176:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a19      	ldr	r2, [pc, #100]	@ (80021e4 <HAL_I2C_MspInit+0x84>)
 800217e:	4293      	cmp	r3, r2
 8002180:	d12c      	bne.n	80021dc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	613b      	str	r3, [r7, #16]
 8002186:	4b18      	ldr	r3, [pc, #96]	@ (80021e8 <HAL_I2C_MspInit+0x88>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a17      	ldr	r2, [pc, #92]	@ (80021e8 <HAL_I2C_MspInit+0x88>)
 800218c:	f043 0302 	orr.w	r3, r3, #2
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b15      	ldr	r3, [pc, #84]	@ (80021e8 <HAL_I2C_MspInit+0x88>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0302 	and.w	r3, r3, #2
 800219a:	613b      	str	r3, [r7, #16]
 800219c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800219e:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 80021a2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80021a4:	2312      	movs	r3, #18
 80021a6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021a8:	2301      	movs	r3, #1
 80021aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021ac:	2303      	movs	r3, #3
 80021ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80021b0:	2304      	movs	r3, #4
 80021b2:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80021b4:	f107 0314 	add.w	r3, r7, #20
 80021b8:	4619      	mov	r1, r3
 80021ba:	480c      	ldr	r0, [pc, #48]	@ (80021ec <HAL_I2C_MspInit+0x8c>)
 80021bc:	f001 f916 	bl	80033ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 80021c0:	2300      	movs	r3, #0
 80021c2:	60fb      	str	r3, [r7, #12]
 80021c4:	4b08      	ldr	r3, [pc, #32]	@ (80021e8 <HAL_I2C_MspInit+0x88>)
 80021c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021c8:	4a07      	ldr	r2, [pc, #28]	@ (80021e8 <HAL_I2C_MspInit+0x88>)
 80021ca:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80021ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80021d0:	4b05      	ldr	r3, [pc, #20]	@ (80021e8 <HAL_I2C_MspInit+0x88>)
 80021d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021d4:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80021d8:	60fb      	str	r3, [r7, #12]
 80021da:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 80021dc:	bf00      	nop
 80021de:	3728      	adds	r7, #40	@ 0x28
 80021e0:	46bd      	mov	sp, r7
 80021e2:	bd80      	pop	{r7, pc}
 80021e4:	40005800 	.word	0x40005800
 80021e8:	40023800 	.word	0x40023800
 80021ec:	40020400 	.word	0x40020400

080021f0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80021f0:	b580      	push	{r7, lr}
 80021f2:	b08a      	sub	sp, #40	@ 0x28
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021f8:	f107 0314 	add.w	r3, r7, #20
 80021fc:	2200      	movs	r2, #0
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	605a      	str	r2, [r3, #4]
 8002202:	609a      	str	r2, [r3, #8]
 8002204:	60da      	str	r2, [r3, #12]
 8002206:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	4a28      	ldr	r2, [pc, #160]	@ (80022b0 <HAL_SPI_MspInit+0xc0>)
 800220e:	4293      	cmp	r3, r2
 8002210:	d149      	bne.n	80022a6 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002212:	2300      	movs	r3, #0
 8002214:	613b      	str	r3, [r7, #16]
 8002216:	4b27      	ldr	r3, [pc, #156]	@ (80022b4 <HAL_SPI_MspInit+0xc4>)
 8002218:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800221a:	4a26      	ldr	r2, [pc, #152]	@ (80022b4 <HAL_SPI_MspInit+0xc4>)
 800221c:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002220:	6453      	str	r3, [r2, #68]	@ 0x44
 8002222:	4b24      	ldr	r3, [pc, #144]	@ (80022b4 <HAL_SPI_MspInit+0xc4>)
 8002224:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002226:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800222a:	613b      	str	r3, [r7, #16]
 800222c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800222e:	2300      	movs	r3, #0
 8002230:	60fb      	str	r3, [r7, #12]
 8002232:	4b20      	ldr	r3, [pc, #128]	@ (80022b4 <HAL_SPI_MspInit+0xc4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002236:	4a1f      	ldr	r2, [pc, #124]	@ (80022b4 <HAL_SPI_MspInit+0xc4>)
 8002238:	f043 0301 	orr.w	r3, r3, #1
 800223c:	6313      	str	r3, [r2, #48]	@ 0x30
 800223e:	4b1d      	ldr	r3, [pc, #116]	@ (80022b4 <HAL_SPI_MspInit+0xc4>)
 8002240:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002242:	f003 0301 	and.w	r3, r3, #1
 8002246:	60fb      	str	r3, [r7, #12]
 8002248:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800224a:	2300      	movs	r3, #0
 800224c:	60bb      	str	r3, [r7, #8]
 800224e:	4b19      	ldr	r3, [pc, #100]	@ (80022b4 <HAL_SPI_MspInit+0xc4>)
 8002250:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002252:	4a18      	ldr	r2, [pc, #96]	@ (80022b4 <HAL_SPI_MspInit+0xc4>)
 8002254:	f043 0302 	orr.w	r3, r3, #2
 8002258:	6313      	str	r3, [r2, #48]	@ 0x30
 800225a:	4b16      	ldr	r3, [pc, #88]	@ (80022b4 <HAL_SPI_MspInit+0xc4>)
 800225c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800225e:	f003 0302 	and.w	r3, r3, #2
 8002262:	60bb      	str	r3, [r7, #8]
 8002264:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002266:	2320      	movs	r3, #32
 8002268:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800226a:	2302      	movs	r3, #2
 800226c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800226e:	2300      	movs	r3, #0
 8002270:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002272:	2303      	movs	r3, #3
 8002274:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002276:	2305      	movs	r3, #5
 8002278:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800227a:	f107 0314 	add.w	r3, r7, #20
 800227e:	4619      	mov	r1, r3
 8002280:	480d      	ldr	r0, [pc, #52]	@ (80022b8 <HAL_SPI_MspInit+0xc8>)
 8002282:	f001 f8b3 	bl	80033ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002286:	2330      	movs	r3, #48	@ 0x30
 8002288:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800228a:	2302      	movs	r3, #2
 800228c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800228e:	2300      	movs	r3, #0
 8002290:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002292:	2303      	movs	r3, #3
 8002294:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002296:	2305      	movs	r3, #5
 8002298:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800229a:	f107 0314 	add.w	r3, r7, #20
 800229e:	4619      	mov	r1, r3
 80022a0:	4806      	ldr	r0, [pc, #24]	@ (80022bc <HAL_SPI_MspInit+0xcc>)
 80022a2:	f001 f8a3 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 80022a6:	bf00      	nop
 80022a8:	3728      	adds	r7, #40	@ 0x28
 80022aa:	46bd      	mov	sp, r7
 80022ac:	bd80      	pop	{r7, pc}
 80022ae:	bf00      	nop
 80022b0:	40013000 	.word	0x40013000
 80022b4:	40023800 	.word	0x40023800
 80022b8:	40020000 	.word	0x40020000
 80022bc:	40020400 	.word	0x40020400

080022c0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80022c0:	b580      	push	{r7, lr}
 80022c2:	b088      	sub	sp, #32
 80022c4:	af00      	add	r7, sp, #0
 80022c6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	4a36      	ldr	r2, [pc, #216]	@ (80023a8 <HAL_TIM_Base_MspInit+0xe8>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d10e      	bne.n	80022f0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80022d2:	2300      	movs	r3, #0
 80022d4:	61fb      	str	r3, [r7, #28]
 80022d6:	4b35      	ldr	r3, [pc, #212]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 80022d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022da:	4a34      	ldr	r2, [pc, #208]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 80022dc:	f043 0301 	orr.w	r3, r3, #1
 80022e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80022e2:	4b32      	ldr	r3, [pc, #200]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 80022e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80022e6:	f003 0301 	and.w	r3, r3, #1
 80022ea:	61fb      	str	r3, [r7, #28]
 80022ec:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80022ee:	e056      	b.n	800239e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM4)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	4a2e      	ldr	r2, [pc, #184]	@ (80023b0 <HAL_TIM_Base_MspInit+0xf0>)
 80022f6:	4293      	cmp	r3, r2
 80022f8:	d10e      	bne.n	8002318 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80022fa:	2300      	movs	r3, #0
 80022fc:	61bb      	str	r3, [r7, #24]
 80022fe:	4b2b      	ldr	r3, [pc, #172]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 8002300:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002302:	4a2a      	ldr	r2, [pc, #168]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 8002304:	f043 0304 	orr.w	r3, r3, #4
 8002308:	6413      	str	r3, [r2, #64]	@ 0x40
 800230a:	4b28      	ldr	r3, [pc, #160]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 800230c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800230e:	f003 0304 	and.w	r3, r3, #4
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	69bb      	ldr	r3, [r7, #24]
}
 8002316:	e042      	b.n	800239e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM6)
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	4a25      	ldr	r2, [pc, #148]	@ (80023b4 <HAL_TIM_Base_MspInit+0xf4>)
 800231e:	4293      	cmp	r3, r2
 8002320:	d116      	bne.n	8002350 <HAL_TIM_Base_MspInit+0x90>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002322:	2300      	movs	r3, #0
 8002324:	617b      	str	r3, [r7, #20]
 8002326:	4b21      	ldr	r3, [pc, #132]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 8002328:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800232a:	4a20      	ldr	r2, [pc, #128]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 800232c:	f043 0310 	orr.w	r3, r3, #16
 8002330:	6413      	str	r3, [r2, #64]	@ 0x40
 8002332:	4b1e      	ldr	r3, [pc, #120]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 8002334:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002336:	f003 0310 	and.w	r3, r3, #16
 800233a:	617b      	str	r3, [r7, #20]
 800233c:	697b      	ldr	r3, [r7, #20]
    HAL_NVIC_SetPriority(TIM6_DAC_IRQn, 0, 0);
 800233e:	2200      	movs	r2, #0
 8002340:	2100      	movs	r1, #0
 8002342:	2036      	movs	r0, #54	@ 0x36
 8002344:	f001 f81b 	bl	800337e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8002348:	2036      	movs	r0, #54	@ 0x36
 800234a:	f001 f834 	bl	80033b6 <HAL_NVIC_EnableIRQ>
}
 800234e:	e026      	b.n	800239e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM8)
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	4a18      	ldr	r2, [pc, #96]	@ (80023b8 <HAL_TIM_Base_MspInit+0xf8>)
 8002356:	4293      	cmp	r3, r2
 8002358:	d10e      	bne.n	8002378 <HAL_TIM_Base_MspInit+0xb8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	613b      	str	r3, [r7, #16]
 800235e:	4b13      	ldr	r3, [pc, #76]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 8002360:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002362:	4a12      	ldr	r2, [pc, #72]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 8002364:	f043 0302 	orr.w	r3, r3, #2
 8002368:	6453      	str	r3, [r2, #68]	@ 0x44
 800236a:	4b10      	ldr	r3, [pc, #64]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 800236c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800236e:	f003 0302 	and.w	r3, r3, #2
 8002372:	613b      	str	r3, [r7, #16]
 8002374:	693b      	ldr	r3, [r7, #16]
}
 8002376:	e012      	b.n	800239e <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM9)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	4a0f      	ldr	r2, [pc, #60]	@ (80023bc <HAL_TIM_Base_MspInit+0xfc>)
 800237e:	4293      	cmp	r3, r2
 8002380:	d10d      	bne.n	800239e <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002382:	2300      	movs	r3, #0
 8002384:	60fb      	str	r3, [r7, #12]
 8002386:	4b09      	ldr	r3, [pc, #36]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 8002388:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800238a:	4a08      	ldr	r2, [pc, #32]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 800238c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002390:	6453      	str	r3, [r2, #68]	@ 0x44
 8002392:	4b06      	ldr	r3, [pc, #24]	@ (80023ac <HAL_TIM_Base_MspInit+0xec>)
 8002394:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002396:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800239a:	60fb      	str	r3, [r7, #12]
 800239c:	68fb      	ldr	r3, [r7, #12]
}
 800239e:	bf00      	nop
 80023a0:	3720      	adds	r7, #32
 80023a2:	46bd      	mov	sp, r7
 80023a4:	bd80      	pop	{r7, pc}
 80023a6:	bf00      	nop
 80023a8:	40010000 	.word	0x40010000
 80023ac:	40023800 	.word	0x40023800
 80023b0:	40000800 	.word	0x40000800
 80023b4:	40001000 	.word	0x40001000
 80023b8:	40010400 	.word	0x40010400
 80023bc:	40014000 	.word	0x40014000

080023c0 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b08c      	sub	sp, #48	@ 0x30
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023c8:	f107 031c 	add.w	r3, r7, #28
 80023cc:	2200      	movs	r2, #0
 80023ce:	601a      	str	r2, [r3, #0]
 80023d0:	605a      	str	r2, [r3, #4]
 80023d2:	609a      	str	r2, [r3, #8]
 80023d4:	60da      	str	r2, [r3, #12]
 80023d6:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80023d8:	687b      	ldr	r3, [r7, #4]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80023e0:	d12c      	bne.n	800243c <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023e2:	2300      	movs	r3, #0
 80023e4:	61bb      	str	r3, [r7, #24]
 80023e6:	4b34      	ldr	r3, [pc, #208]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80023e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ea:	4a33      	ldr	r2, [pc, #204]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80023ec:	f043 0301 	orr.w	r3, r3, #1
 80023f0:	6413      	str	r3, [r2, #64]	@ 0x40
 80023f2:	4b31      	ldr	r3, [pc, #196]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 80023f4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023f6:	f003 0301 	and.w	r3, r3, #1
 80023fa:	61bb      	str	r3, [r7, #24]
 80023fc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023fe:	2300      	movs	r3, #0
 8002400:	617b      	str	r3, [r7, #20]
 8002402:	4b2d      	ldr	r3, [pc, #180]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002404:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002406:	4a2c      	ldr	r2, [pc, #176]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002408:	f043 0301 	orr.w	r3, r3, #1
 800240c:	6313      	str	r3, [r2, #48]	@ 0x30
 800240e:	4b2a      	ldr	r3, [pc, #168]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002410:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002412:	f003 0301 	and.w	r3, r3, #1
 8002416:	617b      	str	r3, [r7, #20]
 8002418:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = RR_ENCODER_A_Pin|RR_ENCODER_B_Pin;
 800241a:	2303      	movs	r3, #3
 800241c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800241e:	2302      	movs	r3, #2
 8002420:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002426:	2300      	movs	r3, #0
 8002428:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800242a:	2301      	movs	r3, #1
 800242c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800242e:	f107 031c 	add.w	r3, r7, #28
 8002432:	4619      	mov	r1, r3
 8002434:	4821      	ldr	r0, [pc, #132]	@ (80024bc <HAL_TIM_Encoder_MspInit+0xfc>)
 8002436:	f000 ffd9 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800243a:	e038      	b.n	80024ae <HAL_TIM_Encoder_MspInit+0xee>
  else if(htim_encoder->Instance==TIM3)
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	4a1f      	ldr	r2, [pc, #124]	@ (80024c0 <HAL_TIM_Encoder_MspInit+0x100>)
 8002442:	4293      	cmp	r3, r2
 8002444:	d133      	bne.n	80024ae <HAL_TIM_Encoder_MspInit+0xee>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002446:	2300      	movs	r3, #0
 8002448:	613b      	str	r3, [r7, #16]
 800244a:	4b1b      	ldr	r3, [pc, #108]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800244c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800244e:	4a1a      	ldr	r2, [pc, #104]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002450:	f043 0302 	orr.w	r3, r3, #2
 8002454:	6413      	str	r3, [r2, #64]	@ 0x40
 8002456:	4b18      	ldr	r3, [pc, #96]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002458:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800245a:	f003 0302 	and.w	r3, r3, #2
 800245e:	613b      	str	r3, [r7, #16]
 8002460:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002462:	2300      	movs	r3, #0
 8002464:	60fb      	str	r3, [r7, #12]
 8002466:	4b14      	ldr	r3, [pc, #80]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800246a:	4a13      	ldr	r2, [pc, #76]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 800246c:	f043 0301 	orr.w	r3, r3, #1
 8002470:	6313      	str	r3, [r2, #48]	@ 0x30
 8002472:	4b11      	ldr	r3, [pc, #68]	@ (80024b8 <HAL_TIM_Encoder_MspInit+0xf8>)
 8002474:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002476:	f003 0301 	and.w	r3, r3, #1
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FR_ENCODER_A_Pin|FR_ENCODER_B_Pin;
 800247e:	23c0      	movs	r3, #192	@ 0xc0
 8002480:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002482:	2302      	movs	r3, #2
 8002484:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002486:	2300      	movs	r3, #0
 8002488:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800248a:	2300      	movs	r3, #0
 800248c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800248e:	2302      	movs	r3, #2
 8002490:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002492:	f107 031c 	add.w	r3, r7, #28
 8002496:	4619      	mov	r1, r3
 8002498:	4808      	ldr	r0, [pc, #32]	@ (80024bc <HAL_TIM_Encoder_MspInit+0xfc>)
 800249a:	f000 ffa7 	bl	80033ec <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800249e:	2200      	movs	r2, #0
 80024a0:	2100      	movs	r1, #0
 80024a2:	201d      	movs	r0, #29
 80024a4:	f000 ff6b 	bl	800337e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80024a8:	201d      	movs	r0, #29
 80024aa:	f000 ff84 	bl	80033b6 <HAL_NVIC_EnableIRQ>
}
 80024ae:	bf00      	nop
 80024b0:	3730      	adds	r7, #48	@ 0x30
 80024b2:	46bd      	mov	sp, r7
 80024b4:	bd80      	pop	{r7, pc}
 80024b6:	bf00      	nop
 80024b8:	40023800 	.word	0x40023800
 80024bc:	40020000 	.word	0x40020000
 80024c0:	40000400 	.word	0x40000400

080024c4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	b08c      	sub	sp, #48	@ 0x30
 80024c8:	af00      	add	r7, sp, #0
 80024ca:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024cc:	f107 031c 	add.w	r3, r7, #28
 80024d0:	2200      	movs	r2, #0
 80024d2:	601a      	str	r2, [r3, #0]
 80024d4:	605a      	str	r2, [r3, #4]
 80024d6:	609a      	str	r2, [r3, #8]
 80024d8:	60da      	str	r2, [r3, #12]
 80024da:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	4a49      	ldr	r2, [pc, #292]	@ (8002608 <HAL_TIM_MspPostInit+0x144>)
 80024e2:	4293      	cmp	r3, r2
 80024e4:	d11f      	bne.n	8002526 <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80024e6:	2300      	movs	r3, #0
 80024e8:	61bb      	str	r3, [r7, #24]
 80024ea:	4b48      	ldr	r3, [pc, #288]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 80024ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ee:	4a47      	ldr	r2, [pc, #284]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 80024f0:	f043 0310 	orr.w	r3, r3, #16
 80024f4:	6313      	str	r3, [r2, #48]	@ 0x30
 80024f6:	4b45      	ldr	r3, [pc, #276]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024fa:	f003 0310 	and.w	r3, r3, #16
 80024fe:	61bb      	str	r3, [r7, #24]
 8002500:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FR_MOTOR_PWM_Pin|RR_MOTOR_PWM_Pin;
 8002502:	f44f 6320 	mov.w	r3, #2560	@ 0xa00
 8002506:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002508:	2302      	movs	r3, #2
 800250a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800250c:	2300      	movs	r3, #0
 800250e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002510:	2300      	movs	r3, #0
 8002512:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002514:	2301      	movs	r3, #1
 8002516:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002518:	f107 031c 	add.w	r3, r7, #28
 800251c:	4619      	mov	r1, r3
 800251e:	483c      	ldr	r0, [pc, #240]	@ (8002610 <HAL_TIM_MspPostInit+0x14c>)
 8002520:	f000 ff64 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 8002524:	e06c      	b.n	8002600 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 8002526:	687b      	ldr	r3, [r7, #4]
 8002528:	681b      	ldr	r3, [r3, #0]
 800252a:	4a3a      	ldr	r2, [pc, #232]	@ (8002614 <HAL_TIM_MspPostInit+0x150>)
 800252c:	4293      	cmp	r3, r2
 800252e:	d11f      	bne.n	8002570 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002530:	2300      	movs	r3, #0
 8002532:	617b      	str	r3, [r7, #20]
 8002534:	4b35      	ldr	r3, [pc, #212]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 8002536:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002538:	4a34      	ldr	r2, [pc, #208]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 800253a:	f043 0308 	orr.w	r3, r3, #8
 800253e:	6313      	str	r3, [r2, #48]	@ 0x30
 8002540:	4b32      	ldr	r3, [pc, #200]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 8002542:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002544:	f003 0308 	and.w	r3, r3, #8
 8002548:	617b      	str	r3, [r7, #20]
 800254a:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO_5_Pin;
 800254c:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002550:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002552:	2302      	movs	r3, #2
 8002554:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002556:	2300      	movs	r3, #0
 8002558:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800255a:	2300      	movs	r3, #0
 800255c:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800255e:	2302      	movs	r3, #2
 8002560:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SERVO_5_GPIO_Port, &GPIO_InitStruct);
 8002562:	f107 031c 	add.w	r3, r7, #28
 8002566:	4619      	mov	r1, r3
 8002568:	482b      	ldr	r0, [pc, #172]	@ (8002618 <HAL_TIM_MspPostInit+0x154>)
 800256a:	f000 ff3f 	bl	80033ec <HAL_GPIO_Init>
}
 800256e:	e047      	b.n	8002600 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	4a29      	ldr	r2, [pc, #164]	@ (800261c <HAL_TIM_MspPostInit+0x158>)
 8002576:	4293      	cmp	r3, r2
 8002578:	d11f      	bne.n	80025ba <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800257a:	2300      	movs	r3, #0
 800257c:	613b      	str	r3, [r7, #16]
 800257e:	4b23      	ldr	r3, [pc, #140]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 8002580:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002582:	4a22      	ldr	r2, [pc, #136]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 8002584:	f043 0304 	orr.w	r3, r3, #4
 8002588:	6313      	str	r3, [r2, #48]	@ 0x30
 800258a:	4b20      	ldr	r3, [pc, #128]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 800258c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800258e:	f003 0304 	and.w	r3, r3, #4
 8002592:	613b      	str	r3, [r7, #16]
 8002594:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_4_Pin|SERVO_3_Pin|SERVO_2_Pin|SERVO_1_Pin;
 8002596:	f44f 7370 	mov.w	r3, #960	@ 0x3c0
 800259a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800259c:	2302      	movs	r3, #2
 800259e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025a0:	2300      	movs	r3, #0
 80025a2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025a4:	2300      	movs	r3, #0
 80025a6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80025a8:	2303      	movs	r3, #3
 80025aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025ac:	f107 031c 	add.w	r3, r7, #28
 80025b0:	4619      	mov	r1, r3
 80025b2:	481b      	ldr	r0, [pc, #108]	@ (8002620 <HAL_TIM_MspPostInit+0x15c>)
 80025b4:	f000 ff1a 	bl	80033ec <HAL_GPIO_Init>
}
 80025b8:	e022      	b.n	8002600 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM9)
 80025ba:	687b      	ldr	r3, [r7, #4]
 80025bc:	681b      	ldr	r3, [r3, #0]
 80025be:	4a19      	ldr	r2, [pc, #100]	@ (8002624 <HAL_TIM_MspPostInit+0x160>)
 80025c0:	4293      	cmp	r3, r2
 80025c2:	d11d      	bne.n	8002600 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025c4:	2300      	movs	r3, #0
 80025c6:	60fb      	str	r3, [r7, #12]
 80025c8:	4b10      	ldr	r3, [pc, #64]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 80025ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025cc:	4a0f      	ldr	r2, [pc, #60]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6313      	str	r3, [r2, #48]	@ 0x30
 80025d4:	4b0d      	ldr	r3, [pc, #52]	@ (800260c <HAL_TIM_MspPostInit+0x148>)
 80025d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80025d8:	f003 0301 	and.w	r3, r3, #1
 80025dc:	60fb      	str	r3, [r7, #12]
 80025de:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHOOTER_PWM_Pin;
 80025e0:	2304      	movs	r3, #4
 80025e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025e4:	2302      	movs	r3, #2
 80025e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025e8:	2300      	movs	r3, #0
 80025ea:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025ec:	2300      	movs	r3, #0
 80025ee:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80025f0:	2303      	movs	r3, #3
 80025f2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(SHOOTER_PWM_GPIO_Port, &GPIO_InitStruct);
 80025f4:	f107 031c 	add.w	r3, r7, #28
 80025f8:	4619      	mov	r1, r3
 80025fa:	480b      	ldr	r0, [pc, #44]	@ (8002628 <HAL_TIM_MspPostInit+0x164>)
 80025fc:	f000 fef6 	bl	80033ec <HAL_GPIO_Init>
}
 8002600:	bf00      	nop
 8002602:	3730      	adds	r7, #48	@ 0x30
 8002604:	46bd      	mov	sp, r7
 8002606:	bd80      	pop	{r7, pc}
 8002608:	40010000 	.word	0x40010000
 800260c:	40023800 	.word	0x40023800
 8002610:	40021000 	.word	0x40021000
 8002614:	40000800 	.word	0x40000800
 8002618:	40020c00 	.word	0x40020c00
 800261c:	40010400 	.word	0x40010400
 8002620:	40020800 	.word	0x40020800
 8002624:	40014000 	.word	0x40014000
 8002628:	40020000 	.word	0x40020000

0800262c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	b08a      	sub	sp, #40	@ 0x28
 8002630:	af00      	add	r7, sp, #0
 8002632:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002634:	f107 0314 	add.w	r3, r7, #20
 8002638:	2200      	movs	r2, #0
 800263a:	601a      	str	r2, [r3, #0]
 800263c:	605a      	str	r2, [r3, #4]
 800263e:	609a      	str	r2, [r3, #8]
 8002640:	60da      	str	r2, [r3, #12]
 8002642:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	4a19      	ldr	r2, [pc, #100]	@ (80026b0 <HAL_UART_MspInit+0x84>)
 800264a:	4293      	cmp	r3, r2
 800264c:	d12c      	bne.n	80026a8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 800264e:	2300      	movs	r3, #0
 8002650:	613b      	str	r3, [r7, #16]
 8002652:	4b18      	ldr	r3, [pc, #96]	@ (80026b4 <HAL_UART_MspInit+0x88>)
 8002654:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002656:	4a17      	ldr	r2, [pc, #92]	@ (80026b4 <HAL_UART_MspInit+0x88>)
 8002658:	f443 2300 	orr.w	r3, r3, #524288	@ 0x80000
 800265c:	6413      	str	r3, [r2, #64]	@ 0x40
 800265e:	4b15      	ldr	r3, [pc, #84]	@ (80026b4 <HAL_UART_MspInit+0x88>)
 8002660:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002662:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002666:	613b      	str	r3, [r7, #16]
 8002668:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b11      	ldr	r3, [pc, #68]	@ (80026b4 <HAL_UART_MspInit+0x88>)
 8002670:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002672:	4a10      	ldr	r2, [pc, #64]	@ (80026b4 <HAL_UART_MspInit+0x88>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6313      	str	r3, [r2, #48]	@ 0x30
 800267a:	4b0e      	ldr	r3, [pc, #56]	@ (80026b4 <HAL_UART_MspInit+0x88>)
 800267c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = BLUTOOTH_TX_Pin|BLUTOOTH_RX_Pin;
 8002686:	f44f 6340 	mov.w	r3, #3072	@ 0xc00
 800268a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800268c:	2302      	movs	r3, #2
 800268e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002690:	2300      	movs	r3, #0
 8002692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002694:	2303      	movs	r3, #3
 8002696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002698:	2308      	movs	r3, #8
 800269a:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800269c:	f107 0314 	add.w	r3, r7, #20
 80026a0:	4619      	mov	r1, r3
 80026a2:	4805      	ldr	r0, [pc, #20]	@ (80026b8 <HAL_UART_MspInit+0x8c>)
 80026a4:	f000 fea2 	bl	80033ec <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 80026a8:	bf00      	nop
 80026aa:	3728      	adds	r7, #40	@ 0x28
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bd80      	pop	{r7, pc}
 80026b0:	40004c00 	.word	0x40004c00
 80026b4:	40023800 	.word	0x40023800
 80026b8:	40020800 	.word	0x40020800

080026bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <NMI_Handler+0x4>

080026c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80026c4:	b480      	push	{r7}
 80026c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80026c8:	bf00      	nop
 80026ca:	e7fd      	b.n	80026c8 <HardFault_Handler+0x4>

080026cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80026cc:	b480      	push	{r7}
 80026ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80026d0:	bf00      	nop
 80026d2:	e7fd      	b.n	80026d0 <MemManage_Handler+0x4>

080026d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80026d8:	bf00      	nop
 80026da:	e7fd      	b.n	80026d8 <BusFault_Handler+0x4>

080026dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80026e0:	bf00      	nop
 80026e2:	e7fd      	b.n	80026e0 <UsageFault_Handler+0x4>

080026e4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80026e4:	b480      	push	{r7}
 80026e6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80026e8:	bf00      	nop
 80026ea:	46bd      	mov	sp, r7
 80026ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f0:	4770      	bx	lr

080026f2 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80026f2:	b480      	push	{r7}
 80026f4:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80026f6:	bf00      	nop
 80026f8:	46bd      	mov	sp, r7
 80026fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026fe:	4770      	bx	lr

08002700 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002700:	b480      	push	{r7}
 8002702:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002704:	bf00      	nop
 8002706:	46bd      	mov	sp, r7
 8002708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800270c:	4770      	bx	lr

0800270e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800270e:	b580      	push	{r7, lr}
 8002710:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002712:	f000 f949 	bl	80029a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
	...

0800271c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800271c:	b580      	push	{r7, lr}
 800271e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002720:	4802      	ldr	r0, [pc, #8]	@ (800272c <TIM3_IRQHandler+0x10>)
 8002722:	f002 fd7b 	bl	800521c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002726:	bf00      	nop
 8002728:	bd80      	pop	{r7, pc}
 800272a:	bf00      	nop
 800272c:	20000490 	.word	0x20000490

08002730 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8002734:	4802      	ldr	r0, [pc, #8]	@ (8002740 <TIM6_DAC_IRQHandler+0x10>)
 8002736:	f002 fd71 	bl	800521c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 800273a:	bf00      	nop
 800273c:	bd80      	pop	{r7, pc}
 800273e:	bf00      	nop
 8002740:	20000520 	.word	0x20000520

08002744 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002744:	b580      	push	{r7, lr}
 8002746:	b086      	sub	sp, #24
 8002748:	af00      	add	r7, sp, #0
 800274a:	60f8      	str	r0, [r7, #12]
 800274c:	60b9      	str	r1, [r7, #8]
 800274e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002750:	2300      	movs	r3, #0
 8002752:	617b      	str	r3, [r7, #20]
 8002754:	e00a      	b.n	800276c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002756:	f3af 8000 	nop.w
 800275a:	4601      	mov	r1, r0
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	1c5a      	adds	r2, r3, #1
 8002760:	60ba      	str	r2, [r7, #8]
 8002762:	b2ca      	uxtb	r2, r1
 8002764:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	3301      	adds	r3, #1
 800276a:	617b      	str	r3, [r7, #20]
 800276c:	697a      	ldr	r2, [r7, #20]
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	429a      	cmp	r2, r3
 8002772:	dbf0      	blt.n	8002756 <_read+0x12>
  }

  return len;
 8002774:	687b      	ldr	r3, [r7, #4]
}
 8002776:	4618      	mov	r0, r3
 8002778:	3718      	adds	r7, #24
 800277a:	46bd      	mov	sp, r7
 800277c:	bd80      	pop	{r7, pc}

0800277e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800277e:	b580      	push	{r7, lr}
 8002780:	b086      	sub	sp, #24
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800278a:	2300      	movs	r3, #0
 800278c:	617b      	str	r3, [r7, #20]
 800278e:	e009      	b.n	80027a4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	1c5a      	adds	r2, r3, #1
 8002794:	60ba      	str	r2, [r7, #8]
 8002796:	781b      	ldrb	r3, [r3, #0]
 8002798:	4618      	mov	r0, r3
 800279a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800279e:	697b      	ldr	r3, [r7, #20]
 80027a0:	3301      	adds	r3, #1
 80027a2:	617b      	str	r3, [r7, #20]
 80027a4:	697a      	ldr	r2, [r7, #20]
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	429a      	cmp	r2, r3
 80027aa:	dbf1      	blt.n	8002790 <_write+0x12>
  }
  return len;
 80027ac:	687b      	ldr	r3, [r7, #4]
}
 80027ae:	4618      	mov	r0, r3
 80027b0:	3718      	adds	r7, #24
 80027b2:	46bd      	mov	sp, r7
 80027b4:	bd80      	pop	{r7, pc}

080027b6 <_close>:

int _close(int file)
{
 80027b6:	b480      	push	{r7}
 80027b8:	b083      	sub	sp, #12
 80027ba:	af00      	add	r7, sp, #0
 80027bc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80027be:	f04f 33ff 	mov.w	r3, #4294967295
}
 80027c2:	4618      	mov	r0, r3
 80027c4:	370c      	adds	r7, #12
 80027c6:	46bd      	mov	sp, r7
 80027c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027cc:	4770      	bx	lr

080027ce <_fstat>:


int _fstat(int file, struct stat *st)
{
 80027ce:	b480      	push	{r7}
 80027d0:	b083      	sub	sp, #12
 80027d2:	af00      	add	r7, sp, #0
 80027d4:	6078      	str	r0, [r7, #4]
 80027d6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80027d8:	683b      	ldr	r3, [r7, #0]
 80027da:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80027de:	605a      	str	r2, [r3, #4]
  return 0;
 80027e0:	2300      	movs	r3, #0
}
 80027e2:	4618      	mov	r0, r3
 80027e4:	370c      	adds	r7, #12
 80027e6:	46bd      	mov	sp, r7
 80027e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027ec:	4770      	bx	lr

080027ee <_isatty>:

int _isatty(int file)
{
 80027ee:	b480      	push	{r7}
 80027f0:	b083      	sub	sp, #12
 80027f2:	af00      	add	r7, sp, #0
 80027f4:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027f6:	2301      	movs	r3, #1
}
 80027f8:	4618      	mov	r0, r3
 80027fa:	370c      	adds	r7, #12
 80027fc:	46bd      	mov	sp, r7
 80027fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002802:	4770      	bx	lr

08002804 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002804:	b480      	push	{r7}
 8002806:	b085      	sub	sp, #20
 8002808:	af00      	add	r7, sp, #0
 800280a:	60f8      	str	r0, [r7, #12]
 800280c:	60b9      	str	r1, [r7, #8]
 800280e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002810:	2300      	movs	r3, #0
}
 8002812:	4618      	mov	r0, r3
 8002814:	3714      	adds	r7, #20
 8002816:	46bd      	mov	sp, r7
 8002818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281c:	4770      	bx	lr
	...

08002820 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002820:	b580      	push	{r7, lr}
 8002822:	b086      	sub	sp, #24
 8002824:	af00      	add	r7, sp, #0
 8002826:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002828:	4a14      	ldr	r2, [pc, #80]	@ (800287c <_sbrk+0x5c>)
 800282a:	4b15      	ldr	r3, [pc, #84]	@ (8002880 <_sbrk+0x60>)
 800282c:	1ad3      	subs	r3, r2, r3
 800282e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002830:	697b      	ldr	r3, [r7, #20]
 8002832:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002834:	4b13      	ldr	r3, [pc, #76]	@ (8002884 <_sbrk+0x64>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	2b00      	cmp	r3, #0
 800283a:	d102      	bne.n	8002842 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800283c:	4b11      	ldr	r3, [pc, #68]	@ (8002884 <_sbrk+0x64>)
 800283e:	4a12      	ldr	r2, [pc, #72]	@ (8002888 <_sbrk+0x68>)
 8002840:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002842:	4b10      	ldr	r3, [pc, #64]	@ (8002884 <_sbrk+0x64>)
 8002844:	681a      	ldr	r2, [r3, #0]
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4413      	add	r3, r2
 800284a:	693a      	ldr	r2, [r7, #16]
 800284c:	429a      	cmp	r2, r3
 800284e:	d207      	bcs.n	8002860 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002850:	f004 f8a0 	bl	8006994 <__errno>
 8002854:	4603      	mov	r3, r0
 8002856:	220c      	movs	r2, #12
 8002858:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800285a:	f04f 33ff 	mov.w	r3, #4294967295
 800285e:	e009      	b.n	8002874 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002860:	4b08      	ldr	r3, [pc, #32]	@ (8002884 <_sbrk+0x64>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002866:	4b07      	ldr	r3, [pc, #28]	@ (8002884 <_sbrk+0x64>)
 8002868:	681a      	ldr	r2, [r3, #0]
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	4413      	add	r3, r2
 800286e:	4a05      	ldr	r2, [pc, #20]	@ (8002884 <_sbrk+0x64>)
 8002870:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002872:	68fb      	ldr	r3, [r7, #12]
}
 8002874:	4618      	mov	r0, r3
 8002876:	3718      	adds	r7, #24
 8002878:	46bd      	mov	sp, r7
 800287a:	bd80      	pop	{r7, pc}
 800287c:	20020000 	.word	0x20020000
 8002880:	00000400 	.word	0x00000400
 8002884:	20000668 	.word	0x20000668
 8002888:	200007c0 	.word	0x200007c0

0800288c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002890:	4b06      	ldr	r3, [pc, #24]	@ (80028ac <SystemInit+0x20>)
 8002892:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002896:	4a05      	ldr	r2, [pc, #20]	@ (80028ac <SystemInit+0x20>)
 8002898:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800289c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80028a0:	bf00      	nop
 80028a2:	46bd      	mov	sp, r7
 80028a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a8:	4770      	bx	lr
 80028aa:	bf00      	nop
 80028ac:	e000ed00 	.word	0xe000ed00

080028b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80028b0:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028e8 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80028b4:	f7ff ffea 	bl	800288c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80028b8:	480c      	ldr	r0, [pc, #48]	@ (80028ec <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80028ba:	490d      	ldr	r1, [pc, #52]	@ (80028f0 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028bc:	4a0d      	ldr	r2, [pc, #52]	@ (80028f4 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028c0:	e002      	b.n	80028c8 <LoopCopyDataInit>

080028c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028c6:	3304      	adds	r3, #4

080028c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028cc:	d3f9      	bcc.n	80028c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028ce:	4a0a      	ldr	r2, [pc, #40]	@ (80028f8 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028d0:	4c0a      	ldr	r4, [pc, #40]	@ (80028fc <LoopFillZerobss+0x22>)
  movs r3, #0
 80028d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028d4:	e001      	b.n	80028da <LoopFillZerobss>

080028d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028d8:	3204      	adds	r2, #4

080028da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028dc:	d3fb      	bcc.n	80028d6 <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 80028de:	f004 f85f 	bl	80069a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028e2:	f7fe fb2b 	bl	8000f3c <main>
  bx  lr    
 80028e6:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80028e8:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028f0:	200001d0 	.word	0x200001d0
  ldr r2, =_sidata
 80028f4:	08007578 	.word	0x08007578
  ldr r2, =_sbss
 80028f8:	200001d0 	.word	0x200001d0
  ldr r4, =_ebss
 80028fc:	200007bc 	.word	0x200007bc

08002900 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002900:	e7fe      	b.n	8002900 <ADC_IRQHandler>
	...

08002904 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002904:	b580      	push	{r7, lr}
 8002906:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002908:	4b0e      	ldr	r3, [pc, #56]	@ (8002944 <HAL_Init+0x40>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a0d      	ldr	r2, [pc, #52]	@ (8002944 <HAL_Init+0x40>)
 800290e:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002912:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002914:	4b0b      	ldr	r3, [pc, #44]	@ (8002944 <HAL_Init+0x40>)
 8002916:	681b      	ldr	r3, [r3, #0]
 8002918:	4a0a      	ldr	r2, [pc, #40]	@ (8002944 <HAL_Init+0x40>)
 800291a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800291e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002920:	4b08      	ldr	r3, [pc, #32]	@ (8002944 <HAL_Init+0x40>)
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	4a07      	ldr	r2, [pc, #28]	@ (8002944 <HAL_Init+0x40>)
 8002926:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800292a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800292c:	2003      	movs	r0, #3
 800292e:	f000 fd1b 	bl	8003368 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002932:	200f      	movs	r0, #15
 8002934:	f000 f808 	bl	8002948 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002938:	f7ff fb5a 	bl	8001ff0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800293c:	2300      	movs	r3, #0
}
 800293e:	4618      	mov	r0, r3
 8002940:	bd80      	pop	{r7, pc}
 8002942:	bf00      	nop
 8002944:	40023c00 	.word	0x40023c00

08002948 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	b082      	sub	sp, #8
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002950:	4b12      	ldr	r3, [pc, #72]	@ (800299c <HAL_InitTick+0x54>)
 8002952:	681a      	ldr	r2, [r3, #0]
 8002954:	4b12      	ldr	r3, [pc, #72]	@ (80029a0 <HAL_InitTick+0x58>)
 8002956:	781b      	ldrb	r3, [r3, #0]
 8002958:	4619      	mov	r1, r3
 800295a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800295e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002962:	fbb2 f3f3 	udiv	r3, r2, r3
 8002966:	4618      	mov	r0, r3
 8002968:	f000 fd33 	bl	80033d2 <HAL_SYSTICK_Config>
 800296c:	4603      	mov	r3, r0
 800296e:	2b00      	cmp	r3, #0
 8002970:	d001      	beq.n	8002976 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002972:	2301      	movs	r3, #1
 8002974:	e00e      	b.n	8002994 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	2b0f      	cmp	r3, #15
 800297a:	d80a      	bhi.n	8002992 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800297c:	2200      	movs	r2, #0
 800297e:	6879      	ldr	r1, [r7, #4]
 8002980:	f04f 30ff 	mov.w	r0, #4294967295
 8002984:	f000 fcfb 	bl	800337e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002988:	4a06      	ldr	r2, [pc, #24]	@ (80029a4 <HAL_InitTick+0x5c>)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800298e:	2300      	movs	r3, #0
 8002990:	e000      	b.n	8002994 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002992:	2301      	movs	r3, #1
}
 8002994:	4618      	mov	r0, r3
 8002996:	3708      	adds	r7, #8
 8002998:	46bd      	mov	sp, r7
 800299a:	bd80      	pop	{r7, pc}
 800299c:	20000168 	.word	0x20000168
 80029a0:	20000170 	.word	0x20000170
 80029a4:	2000016c 	.word	0x2000016c

080029a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80029a8:	b480      	push	{r7}
 80029aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80029ac:	4b06      	ldr	r3, [pc, #24]	@ (80029c8 <HAL_IncTick+0x20>)
 80029ae:	781b      	ldrb	r3, [r3, #0]
 80029b0:	461a      	mov	r2, r3
 80029b2:	4b06      	ldr	r3, [pc, #24]	@ (80029cc <HAL_IncTick+0x24>)
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4413      	add	r3, r2
 80029b8:	4a04      	ldr	r2, [pc, #16]	@ (80029cc <HAL_IncTick+0x24>)
 80029ba:	6013      	str	r3, [r2, #0]
}
 80029bc:	bf00      	nop
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	20000170 	.word	0x20000170
 80029cc:	2000066c 	.word	0x2000066c

080029d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  return uwTick;
 80029d4:	4b03      	ldr	r3, [pc, #12]	@ (80029e4 <HAL_GetTick+0x14>)
 80029d6:	681b      	ldr	r3, [r3, #0]
}
 80029d8:	4618      	mov	r0, r3
 80029da:	46bd      	mov	sp, r7
 80029dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e0:	4770      	bx	lr
 80029e2:	bf00      	nop
 80029e4:	2000066c 	.word	0x2000066c

080029e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029e8:	b580      	push	{r7, lr}
 80029ea:	b084      	sub	sp, #16
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029f0:	f7ff ffee 	bl	80029d0 <HAL_GetTick>
 80029f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002a00:	d005      	beq.n	8002a0e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a02:	4b0a      	ldr	r3, [pc, #40]	@ (8002a2c <HAL_Delay+0x44>)
 8002a04:	781b      	ldrb	r3, [r3, #0]
 8002a06:	461a      	mov	r2, r3
 8002a08:	68fb      	ldr	r3, [r7, #12]
 8002a0a:	4413      	add	r3, r2
 8002a0c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a0e:	bf00      	nop
 8002a10:	f7ff ffde 	bl	80029d0 <HAL_GetTick>
 8002a14:	4602      	mov	r2, r0
 8002a16:	68bb      	ldr	r3, [r7, #8]
 8002a18:	1ad3      	subs	r3, r2, r3
 8002a1a:	68fa      	ldr	r2, [r7, #12]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d8f7      	bhi.n	8002a10 <HAL_Delay+0x28>
  {
  }
}
 8002a20:	bf00      	nop
 8002a22:	bf00      	nop
 8002a24:	3710      	adds	r7, #16
 8002a26:	46bd      	mov	sp, r7
 8002a28:	bd80      	pop	{r7, pc}
 8002a2a:	bf00      	nop
 8002a2c:	20000170 	.word	0x20000170

08002a30 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002a30:	b580      	push	{r7, lr}
 8002a32:	b084      	sub	sp, #16
 8002a34:	af00      	add	r7, sp, #0
 8002a36:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a38:	2300      	movs	r3, #0
 8002a3a:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d101      	bne.n	8002a46 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002a42:	2301      	movs	r3, #1
 8002a44:	e033      	b.n	8002aae <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d109      	bne.n	8002a62 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff faf6 	bl	8002040 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	2200      	movs	r2, #0
 8002a58:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a66:	f003 0310 	and.w	r3, r3, #16
 8002a6a:	2b00      	cmp	r3, #0
 8002a6c:	d118      	bne.n	8002aa0 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a72:	f423 5388 	bic.w	r3, r3, #4352	@ 0x1100
 8002a76:	f023 0302 	bic.w	r3, r3, #2
 8002a7a:	f043 0202 	orr.w	r2, r3, #2
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 8002a82:	6878      	ldr	r0, [r7, #4]
 8002a84:	f000 faa4 	bl	8002fd0 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2200      	movs	r2, #0
 8002a8c:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f023 0303 	bic.w	r3, r3, #3
 8002a96:	f043 0201 	orr.w	r2, r3, #1
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	641a      	str	r2, [r3, #64]	@ 0x40
 8002a9e:	e001      	b.n	8002aa4 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002aa0:	2301      	movs	r3, #1
 8002aa2:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002aac:	7bfb      	ldrb	r3, [r7, #15]
}
 8002aae:	4618      	mov	r0, r3
 8002ab0:	3710      	adds	r7, #16
 8002ab2:	46bd      	mov	sp, r7
 8002ab4:	bd80      	pop	{r7, pc}
	...

08002ab8 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b085      	sub	sp, #20
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002ac0:	2300      	movs	r3, #0
 8002ac2:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002aca:	2b01      	cmp	r3, #1
 8002acc:	d101      	bne.n	8002ad2 <HAL_ADC_Start+0x1a>
 8002ace:	2302      	movs	r3, #2
 8002ad0:	e0b2      	b.n	8002c38 <HAL_ADC_Start+0x180>
 8002ad2:	687b      	ldr	r3, [r7, #4]
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	689b      	ldr	r3, [r3, #8]
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	2b01      	cmp	r3, #1
 8002ae6:	d018      	beq.n	8002b1a <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	681b      	ldr	r3, [r3, #0]
 8002aec:	689a      	ldr	r2, [r3, #8]
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	f042 0201 	orr.w	r2, r2, #1
 8002af6:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002af8:	4b52      	ldr	r3, [pc, #328]	@ (8002c44 <HAL_ADC_Start+0x18c>)
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	4a52      	ldr	r2, [pc, #328]	@ (8002c48 <HAL_ADC_Start+0x190>)
 8002afe:	fba2 2303 	umull	r2, r3, r2, r3
 8002b02:	0c9a      	lsrs	r2, r3, #18
 8002b04:	4613      	mov	r3, r2
 8002b06:	005b      	lsls	r3, r3, #1
 8002b08:	4413      	add	r3, r2
 8002b0a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b0c:	e002      	b.n	8002b14 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b0e:	68bb      	ldr	r3, [r7, #8]
 8002b10:	3b01      	subs	r3, #1
 8002b12:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002b14:	68bb      	ldr	r3, [r7, #8]
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d1f9      	bne.n	8002b0e <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	689b      	ldr	r3, [r3, #8]
 8002b20:	f003 0301 	and.w	r3, r3, #1
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d17a      	bne.n	8002c1e <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b2c:	f423 63e0 	bic.w	r3, r3, #1792	@ 0x700
 8002b30:	f023 0301 	bic.w	r3, r3, #1
 8002b34:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	641a      	str	r2, [r3, #64]	@ 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	681b      	ldr	r3, [r3, #0]
 8002b40:	685b      	ldr	r3, [r3, #4]
 8002b42:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002b46:	2b00      	cmp	r3, #0
 8002b48:	d007      	beq.n	8002b5a <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4e:	f423 5340 	bic.w	r3, r3, #12288	@ 0x3000
 8002b52:	f443 5280 	orr.w	r2, r3, #4096	@ 0x1000
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	641a      	str	r2, [r3, #64]	@ 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b5e:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002b62:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002b66:	d106      	bne.n	8002b76 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b6c:	f023 0206 	bic.w	r2, r3, #6
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	645a      	str	r2, [r3, #68]	@ 0x44
 8002b74:	e002      	b.n	8002b7c <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	2200      	movs	r2, #0
 8002b80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b84:	4b31      	ldr	r3, [pc, #196]	@ (8002c4c <HAL_ADC_Start+0x194>)
 8002b86:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	f06f 0222 	mvn.w	r2, #34	@ 0x22
 8002b90:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	685b      	ldr	r3, [r3, #4]
 8002b96:	f003 031f 	and.w	r3, r3, #31
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d12a      	bne.n	8002bf4 <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4a2b      	ldr	r2, [pc, #172]	@ (8002c50 <HAL_ADC_Start+0x198>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d015      	beq.n	8002bd4 <HAL_ADC_Start+0x11c>
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	4a29      	ldr	r2, [pc, #164]	@ (8002c54 <HAL_ADC_Start+0x19c>)
 8002bae:	4293      	cmp	r3, r2
 8002bb0:	d105      	bne.n	8002bbe <HAL_ADC_Start+0x106>
 8002bb2:	4b26      	ldr	r3, [pc, #152]	@ (8002c4c <HAL_ADC_Start+0x194>)
 8002bb4:	685b      	ldr	r3, [r3, #4]
 8002bb6:	f003 031f 	and.w	r3, r3, #31
 8002bba:	2b00      	cmp	r3, #0
 8002bbc:	d00a      	beq.n	8002bd4 <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	4a25      	ldr	r2, [pc, #148]	@ (8002c58 <HAL_ADC_Start+0x1a0>)
 8002bc4:	4293      	cmp	r3, r2
 8002bc6:	d136      	bne.n	8002c36 <HAL_ADC_Start+0x17e>
 8002bc8:	4b20      	ldr	r3, [pc, #128]	@ (8002c4c <HAL_ADC_Start+0x194>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0310 	and.w	r3, r3, #16
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d130      	bne.n	8002c36 <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	689b      	ldr	r3, [r3, #8]
 8002bda:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d129      	bne.n	8002c36 <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	689a      	ldr	r2, [r3, #8]
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002bf0:	609a      	str	r2, [r3, #8]
 8002bf2:	e020      	b.n	8002c36 <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	4a15      	ldr	r2, [pc, #84]	@ (8002c50 <HAL_ADC_Start+0x198>)
 8002bfa:	4293      	cmp	r3, r2
 8002bfc:	d11b      	bne.n	8002c36 <HAL_ADC_Start+0x17e>
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d114      	bne.n	8002c36 <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 4280 	orr.w	r2, r2, #1073741824	@ 0x40000000
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	e00b      	b.n	8002c36 <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c22:	f043 0210 	orr.w	r2, r3, #16
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c2e:	f043 0201 	orr.w	r2, r3, #1
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Return function status */
  return HAL_OK;
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	3714      	adds	r7, #20
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr
 8002c44:	20000168 	.word	0x20000168
 8002c48:	431bde83 	.word	0x431bde83
 8002c4c:	40012300 	.word	0x40012300
 8002c50:	40012000 	.word	0x40012000
 8002c54:	40012100 	.word	0x40012100
 8002c58:	40012200 	.word	0x40012200

08002c5c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	b084      	sub	sp, #16
 8002c60:	af00      	add	r7, sp, #0
 8002c62:	6078      	str	r0, [r7, #4]
 8002c64:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c66:	2300      	movs	r3, #0
 8002c68:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	689b      	ldr	r3, [r3, #8]
 8002c70:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c74:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8002c78:	d113      	bne.n	8002ca2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	689b      	ldr	r3, [r3, #8]
 8002c80:	f403 7380 	and.w	r3, r3, #256	@ 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c84:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002c88:	d10b      	bne.n	8002ca2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8e:	f043 0220 	orr.w	r2, r3, #32
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	2200      	movs	r2, #0
 8002c9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8002c9e:	2301      	movs	r3, #1
 8002ca0:	e063      	b.n	8002d6a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 8002ca2:	f7ff fe95 	bl	80029d0 <HAL_GetTick>
 8002ca6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ca8:	e021      	b.n	8002cee <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002cb0:	d01d      	beq.n	8002cee <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 8002cb2:	683b      	ldr	r3, [r7, #0]
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d007      	beq.n	8002cc8 <HAL_ADC_PollForConversion+0x6c>
 8002cb8:	f7ff fe8a 	bl	80029d0 <HAL_GetTick>
 8002cbc:	4602      	mov	r2, r0
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	1ad3      	subs	r3, r2, r3
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d212      	bcs.n	8002cee <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f003 0302 	and.w	r3, r3, #2
 8002cd2:	2b02      	cmp	r3, #2
 8002cd4:	d00b      	beq.n	8002cee <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002cda:	f043 0204 	orr.w	r2, r3, #4
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_TIMEOUT;
 8002cea:	2303      	movs	r3, #3
 8002cec:	e03d      	b.n	8002d6a <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0302 	and.w	r3, r3, #2
 8002cf8:	2b02      	cmp	r3, #2
 8002cfa:	d1d6      	bne.n	8002caa <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f06f 0212 	mvn.w	r2, #18
 8002d04:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d0a:	f443 7200 	orr.w	r2, r3, #512	@ 0x200
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	641a      	str	r2, [r3, #64]	@ 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	689b      	ldr	r3, [r3, #8]
 8002d18:	f003 5340 	and.w	r3, r3, #805306368	@ 0x30000000
 8002d1c:	2b00      	cmp	r3, #0
 8002d1e:	d123      	bne.n	8002d68 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d24:	2b00      	cmp	r3, #0
 8002d26:	d11f      	bne.n	8002d68 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002d2e:	f403 0370 	and.w	r3, r3, #15728640	@ 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d32:	2b00      	cmp	r3, #0
 8002d34:	d006      	beq.n	8002d44 <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d111      	bne.n	8002d68 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d48:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	641a      	str	r2, [r3, #64]	@ 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d54:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d105      	bne.n	8002d68 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d5c:	687b      	ldr	r3, [r7, #4]
 8002d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d60:	f043 0201 	orr.w	r2, r3, #1
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	641a      	str	r2, [r3, #64]	@ 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 8002d68:	2300      	movs	r3, #0
}
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	3710      	adds	r7, #16
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	bd80      	pop	{r7, pc}

08002d72 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8002d72:	b480      	push	{r7}
 8002d74:	b083      	sub	sp, #12
 8002d76:	af00      	add	r7, sp, #0
 8002d78:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
}
 8002d80:	4618      	mov	r0, r3
 8002d82:	370c      	adds	r7, #12
 8002d84:	46bd      	mov	sp, r7
 8002d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d8a:	4770      	bx	lr

08002d8c <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	b085      	sub	sp, #20
 8002d90:	af00      	add	r7, sp, #0
 8002d92:	6078      	str	r0, [r7, #4]
 8002d94:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002d96:	2300      	movs	r3, #0
 8002d98:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002da0:	2b01      	cmp	r3, #1
 8002da2:	d101      	bne.n	8002da8 <HAL_ADC_ConfigChannel+0x1c>
 8002da4:	2302      	movs	r3, #2
 8002da6:	e105      	b.n	8002fb4 <HAL_ADC_ConfigChannel+0x228>
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	2201      	movs	r2, #1
 8002dac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b09      	cmp	r3, #9
 8002db6:	d925      	bls.n	8002e04 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	68d9      	ldr	r1, [r3, #12]
 8002dbe:	683b      	ldr	r3, [r7, #0]
 8002dc0:	681b      	ldr	r3, [r3, #0]
 8002dc2:	b29b      	uxth	r3, r3
 8002dc4:	461a      	mov	r2, r3
 8002dc6:	4613      	mov	r3, r2
 8002dc8:	005b      	lsls	r3, r3, #1
 8002dca:	4413      	add	r3, r2
 8002dcc:	3b1e      	subs	r3, #30
 8002dce:	2207      	movs	r2, #7
 8002dd0:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd4:	43da      	mvns	r2, r3
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	400a      	ands	r2, r1
 8002ddc:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	68d9      	ldr	r1, [r3, #12]
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	689a      	ldr	r2, [r3, #8]
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	b29b      	uxth	r3, r3
 8002dee:	4618      	mov	r0, r3
 8002df0:	4603      	mov	r3, r0
 8002df2:	005b      	lsls	r3, r3, #1
 8002df4:	4403      	add	r3, r0
 8002df6:	3b1e      	subs	r3, #30
 8002df8:	409a      	lsls	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	430a      	orrs	r2, r1
 8002e00:	60da      	str	r2, [r3, #12]
 8002e02:	e022      	b.n	8002e4a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	6919      	ldr	r1, [r3, #16]
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	b29b      	uxth	r3, r3
 8002e10:	461a      	mov	r2, r3
 8002e12:	4613      	mov	r3, r2
 8002e14:	005b      	lsls	r3, r3, #1
 8002e16:	4413      	add	r3, r2
 8002e18:	2207      	movs	r2, #7
 8002e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1e:	43da      	mvns	r2, r3
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	400a      	ands	r2, r1
 8002e26:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6919      	ldr	r1, [r3, #16]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	689a      	ldr	r2, [r3, #8]
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	b29b      	uxth	r3, r3
 8002e38:	4618      	mov	r0, r3
 8002e3a:	4603      	mov	r3, r0
 8002e3c:	005b      	lsls	r3, r3, #1
 8002e3e:	4403      	add	r3, r0
 8002e40:	409a      	lsls	r2, r3
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	430a      	orrs	r2, r1
 8002e48:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	685b      	ldr	r3, [r3, #4]
 8002e4e:	2b06      	cmp	r3, #6
 8002e50:	d824      	bhi.n	8002e9c <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	681b      	ldr	r3, [r3, #0]
 8002e56:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e58:	683b      	ldr	r3, [r7, #0]
 8002e5a:	685a      	ldr	r2, [r3, #4]
 8002e5c:	4613      	mov	r3, r2
 8002e5e:	009b      	lsls	r3, r3, #2
 8002e60:	4413      	add	r3, r2
 8002e62:	3b05      	subs	r3, #5
 8002e64:	221f      	movs	r2, #31
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43da      	mvns	r2, r3
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	400a      	ands	r2, r1
 8002e72:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 8002e7a:	683b      	ldr	r3, [r7, #0]
 8002e7c:	681b      	ldr	r3, [r3, #0]
 8002e7e:	b29b      	uxth	r3, r3
 8002e80:	4618      	mov	r0, r3
 8002e82:	683b      	ldr	r3, [r7, #0]
 8002e84:	685a      	ldr	r2, [r3, #4]
 8002e86:	4613      	mov	r3, r2
 8002e88:	009b      	lsls	r3, r3, #2
 8002e8a:	4413      	add	r3, r2
 8002e8c:	3b05      	subs	r3, #5
 8002e8e:	fa00 f203 	lsl.w	r2, r0, r3
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	681b      	ldr	r3, [r3, #0]
 8002e96:	430a      	orrs	r2, r1
 8002e98:	635a      	str	r2, [r3, #52]	@ 0x34
 8002e9a:	e04c      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002e9c:	683b      	ldr	r3, [r7, #0]
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	2b0c      	cmp	r3, #12
 8002ea2:	d824      	bhi.n	8002eee <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002eaa:	683b      	ldr	r3, [r7, #0]
 8002eac:	685a      	ldr	r2, [r3, #4]
 8002eae:	4613      	mov	r3, r2
 8002eb0:	009b      	lsls	r3, r3, #2
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3b23      	subs	r3, #35	@ 0x23
 8002eb6:	221f      	movs	r2, #31
 8002eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	400a      	ands	r2, r1
 8002ec4:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	6b19      	ldr	r1, [r3, #48]	@ 0x30
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	b29b      	uxth	r3, r3
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685a      	ldr	r2, [r3, #4]
 8002ed8:	4613      	mov	r3, r2
 8002eda:	009b      	lsls	r3, r3, #2
 8002edc:	4413      	add	r3, r2
 8002ede:	3b23      	subs	r3, #35	@ 0x23
 8002ee0:	fa00 f203 	lsl.w	r2, r0, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	430a      	orrs	r2, r1
 8002eea:	631a      	str	r2, [r3, #48]	@ 0x30
 8002eec:	e023      	b.n	8002f36 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685a      	ldr	r2, [r3, #4]
 8002ef8:	4613      	mov	r3, r2
 8002efa:	009b      	lsls	r3, r3, #2
 8002efc:	4413      	add	r3, r2
 8002efe:	3b41      	subs	r3, #65	@ 0x41
 8002f00:	221f      	movs	r2, #31
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43da      	mvns	r2, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	400a      	ands	r2, r1
 8002f0e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 8002f16:	683b      	ldr	r3, [r7, #0]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685a      	ldr	r2, [r3, #4]
 8002f22:	4613      	mov	r3, r2
 8002f24:	009b      	lsls	r3, r3, #2
 8002f26:	4413      	add	r3, r2
 8002f28:	3b41      	subs	r3, #65	@ 0x41
 8002f2a:	fa00 f203 	lsl.w	r2, r0, r3
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	430a      	orrs	r2, r1
 8002f34:	62da      	str	r2, [r3, #44]	@ 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f36:	4b22      	ldr	r3, [pc, #136]	@ (8002fc0 <HAL_ADC_ConfigChannel+0x234>)
 8002f38:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a21      	ldr	r2, [pc, #132]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x238>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d109      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x1cc>
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b12      	cmp	r3, #18
 8002f4a:	d105      	bne.n	8002f58 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f4c:	68fb      	ldr	r3, [r7, #12]
 8002f4e:	685b      	ldr	r3, [r3, #4]
 8002f50:	f443 0280 	orr.w	r2, r3, #4194304	@ 0x400000
 8002f54:	68fb      	ldr	r3, [r7, #12]
 8002f56:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	4a19      	ldr	r2, [pc, #100]	@ (8002fc4 <HAL_ADC_ConfigChannel+0x238>)
 8002f5e:	4293      	cmp	r3, r2
 8002f60:	d123      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x21e>
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	2b10      	cmp	r3, #16
 8002f68:	d003      	beq.n	8002f72 <HAL_ADC_ConfigChannel+0x1e6>
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	2b11      	cmp	r3, #17
 8002f70:	d11b      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f443 0200 	orr.w	r2, r3, #8388608	@ 0x800000
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	2b10      	cmp	r3, #16
 8002f84:	d111      	bne.n	8002faa <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002f86:	4b10      	ldr	r3, [pc, #64]	@ (8002fc8 <HAL_ADC_ConfigChannel+0x23c>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	4a10      	ldr	r2, [pc, #64]	@ (8002fcc <HAL_ADC_ConfigChannel+0x240>)
 8002f8c:	fba2 2303 	umull	r2, r3, r2, r3
 8002f90:	0c9a      	lsrs	r2, r3, #18
 8002f92:	4613      	mov	r3, r2
 8002f94:	009b      	lsls	r3, r3, #2
 8002f96:	4413      	add	r3, r2
 8002f98:	005b      	lsls	r3, r3, #1
 8002f9a:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002f9c:	e002      	b.n	8002fa4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002f9e:	68bb      	ldr	r3, [r7, #8]
 8002fa0:	3b01      	subs	r3, #1
 8002fa2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002fa4:	68bb      	ldr	r3, [r7, #8]
 8002fa6:	2b00      	cmp	r3, #0
 8002fa8:	d1f9      	bne.n	8002f9e <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	2200      	movs	r2, #0
 8002fae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Return function status */
  return HAL_OK;
 8002fb2:	2300      	movs	r3, #0
}
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	3714      	adds	r7, #20
 8002fb8:	46bd      	mov	sp, r7
 8002fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbe:	4770      	bx	lr
 8002fc0:	40012300 	.word	0x40012300
 8002fc4:	40012000 	.word	0x40012000
 8002fc8:	20000168 	.word	0x20000168
 8002fcc:	431bde83 	.word	0x431bde83

08002fd0 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002fd0:	b480      	push	{r7}
 8002fd2:	b085      	sub	sp, #20
 8002fd4:	af00      	add	r7, sp, #0
 8002fd6:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002fd8:	4b79      	ldr	r3, [pc, #484]	@ (80031c0 <ADC_Init+0x1f0>)
 8002fda:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002fdc:	68fb      	ldr	r3, [r7, #12]
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	f423 3240 	bic.w	r2, r3, #196608	@ 0x30000
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002fe8:	68fb      	ldr	r3, [r7, #12]
 8002fea:	685a      	ldr	r2, [r3, #4]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	431a      	orrs	r2, r3
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	685a      	ldr	r2, [r3, #4]
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8003004:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	6859      	ldr	r1, [r3, #4]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	691b      	ldr	r3, [r3, #16]
 8003010:	021a      	lsls	r2, r3, #8
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	430a      	orrs	r2, r1
 8003018:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f022 7240 	bic.w	r2, r2, #50331648	@ 0x3000000
 8003028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	689a      	ldr	r2, [r3, #8]
 8003034:	687b      	ldr	r3, [r7, #4]
 8003036:	681b      	ldr	r3, [r3, #0]
 8003038:	430a      	orrs	r2, r1
 800303a:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	689a      	ldr	r2, [r3, #8]
 8003042:	687b      	ldr	r3, [r7, #4]
 8003044:	681b      	ldr	r3, [r3, #0]
 8003046:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800304a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	6899      	ldr	r1, [r3, #8]
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	68da      	ldr	r2, [r3, #12]
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	430a      	orrs	r2, r1
 800305c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003062:	4a58      	ldr	r2, [pc, #352]	@ (80031c4 <ADC_Init+0x1f4>)
 8003064:	4293      	cmp	r3, r2
 8003066:	d022      	beq.n	80030ae <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	689a      	ldr	r2, [r3, #8]
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	681b      	ldr	r3, [r3, #0]
 8003072:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 8003076:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	6899      	ldr	r1, [r3, #8]
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	430a      	orrs	r2, r1
 8003088:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	689a      	ldr	r2, [r3, #8]
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 8003098:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	6899      	ldr	r1, [r3, #8]
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80030a4:	687b      	ldr	r3, [r7, #4]
 80030a6:	681b      	ldr	r3, [r3, #0]
 80030a8:	430a      	orrs	r2, r1
 80030aa:	609a      	str	r2, [r3, #8]
 80030ac:	e00f      	b.n	80030ce <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 6270 	bic.w	r2, r2, #251658240	@ 0xf000000
 80030bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	689a      	ldr	r2, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f022 5240 	bic.w	r2, r2, #805306368	@ 0x30000000
 80030cc:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	689a      	ldr	r2, [r3, #8]
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f022 0202 	bic.w	r2, r2, #2
 80030dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	6899      	ldr	r1, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	7e1b      	ldrb	r3, [r3, #24]
 80030e8:	005a      	lsls	r2, r3, #1
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	430a      	orrs	r2, r1
 80030f0:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	f893 3020 	ldrb.w	r3, [r3, #32]
 80030f8:	2b00      	cmp	r3, #0
 80030fa:	d01b      	beq.n	8003134 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	685a      	ldr	r2, [r3, #4]
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800310a:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	685a      	ldr	r2, [r3, #4]
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f422 4260 	bic.w	r2, r2, #57344	@ 0xe000
 800311a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	681b      	ldr	r3, [r3, #0]
 8003120:	6859      	ldr	r1, [r3, #4]
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003126:	3b01      	subs	r3, #1
 8003128:	035a      	lsls	r2, r3, #13
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	430a      	orrs	r2, r1
 8003130:	605a      	str	r2, [r3, #4]
 8003132:	e007      	b.n	8003144 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	685a      	ldr	r2, [r3, #4]
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003142:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 0270 	bic.w	r2, r2, #15728640	@ 0xf00000
 8003152:	62da      	str	r2, [r3, #44]	@ 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	6ad9      	ldr	r1, [r3, #44]	@ 0x2c
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	69db      	ldr	r3, [r3, #28]
 800315e:	3b01      	subs	r3, #1
 8003160:	051a      	lsls	r2, r3, #20
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	430a      	orrs	r2, r1
 8003168:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	681b      	ldr	r3, [r3, #0]
 800316e:	689a      	ldr	r2, [r3, #8]
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f422 7200 	bic.w	r2, r2, #512	@ 0x200
 8003178:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	6899      	ldr	r1, [r3, #8]
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	f893 3030 	ldrb.w	r3, [r3, #48]	@ 0x30
 8003186:	025a      	lsls	r2, r3, #9
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	681b      	ldr	r3, [r3, #0]
 800318c:	430a      	orrs	r2, r1
 800318e:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	689a      	ldr	r2, [r3, #8]
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800319e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	6899      	ldr	r1, [r3, #8]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	695b      	ldr	r3, [r3, #20]
 80031aa:	029a      	lsls	r2, r3, #10
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
}
 80031b4:	bf00      	nop
 80031b6:	3714      	adds	r7, #20
 80031b8:	46bd      	mov	sp, r7
 80031ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031be:	4770      	bx	lr
 80031c0:	40012300 	.word	0x40012300
 80031c4:	0f000001 	.word	0x0f000001

080031c8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031c8:	b480      	push	{r7}
 80031ca:	b085      	sub	sp, #20
 80031cc:	af00      	add	r7, sp, #0
 80031ce:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	f003 0307 	and.w	r3, r3, #7
 80031d6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031d8:	4b0c      	ldr	r3, [pc, #48]	@ (800320c <__NVIC_SetPriorityGrouping+0x44>)
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80031de:	68ba      	ldr	r2, [r7, #8]
 80031e0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031e4:	4013      	ands	r3, r2
 80031e6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031f0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031f4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031f8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031fa:	4a04      	ldr	r2, [pc, #16]	@ (800320c <__NVIC_SetPriorityGrouping+0x44>)
 80031fc:	68bb      	ldr	r3, [r7, #8]
 80031fe:	60d3      	str	r3, [r2, #12]
}
 8003200:	bf00      	nop
 8003202:	3714      	adds	r7, #20
 8003204:	46bd      	mov	sp, r7
 8003206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320a:	4770      	bx	lr
 800320c:	e000ed00 	.word	0xe000ed00

08003210 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003210:	b480      	push	{r7}
 8003212:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003214:	4b04      	ldr	r3, [pc, #16]	@ (8003228 <__NVIC_GetPriorityGrouping+0x18>)
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	0a1b      	lsrs	r3, r3, #8
 800321a:	f003 0307 	and.w	r3, r3, #7
}
 800321e:	4618      	mov	r0, r3
 8003220:	46bd      	mov	sp, r7
 8003222:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003226:	4770      	bx	lr
 8003228:	e000ed00 	.word	0xe000ed00

0800322c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800322c:	b480      	push	{r7}
 800322e:	b083      	sub	sp, #12
 8003230:	af00      	add	r7, sp, #0
 8003232:	4603      	mov	r3, r0
 8003234:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003236:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800323a:	2b00      	cmp	r3, #0
 800323c:	db0b      	blt.n	8003256 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800323e:	79fb      	ldrb	r3, [r7, #7]
 8003240:	f003 021f 	and.w	r2, r3, #31
 8003244:	4907      	ldr	r1, [pc, #28]	@ (8003264 <__NVIC_EnableIRQ+0x38>)
 8003246:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800324a:	095b      	lsrs	r3, r3, #5
 800324c:	2001      	movs	r0, #1
 800324e:	fa00 f202 	lsl.w	r2, r0, r2
 8003252:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8003256:	bf00      	nop
 8003258:	370c      	adds	r7, #12
 800325a:	46bd      	mov	sp, r7
 800325c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003260:	4770      	bx	lr
 8003262:	bf00      	nop
 8003264:	e000e100 	.word	0xe000e100

08003268 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003268:	b480      	push	{r7}
 800326a:	b083      	sub	sp, #12
 800326c:	af00      	add	r7, sp, #0
 800326e:	4603      	mov	r3, r0
 8003270:	6039      	str	r1, [r7, #0]
 8003272:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003274:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003278:	2b00      	cmp	r3, #0
 800327a:	db0a      	blt.n	8003292 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	b2da      	uxtb	r2, r3
 8003280:	490c      	ldr	r1, [pc, #48]	@ (80032b4 <__NVIC_SetPriority+0x4c>)
 8003282:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003286:	0112      	lsls	r2, r2, #4
 8003288:	b2d2      	uxtb	r2, r2
 800328a:	440b      	add	r3, r1
 800328c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003290:	e00a      	b.n	80032a8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003292:	683b      	ldr	r3, [r7, #0]
 8003294:	b2da      	uxtb	r2, r3
 8003296:	4908      	ldr	r1, [pc, #32]	@ (80032b8 <__NVIC_SetPriority+0x50>)
 8003298:	79fb      	ldrb	r3, [r7, #7]
 800329a:	f003 030f 	and.w	r3, r3, #15
 800329e:	3b04      	subs	r3, #4
 80032a0:	0112      	lsls	r2, r2, #4
 80032a2:	b2d2      	uxtb	r2, r2
 80032a4:	440b      	add	r3, r1
 80032a6:	761a      	strb	r2, [r3, #24]
}
 80032a8:	bf00      	nop
 80032aa:	370c      	adds	r7, #12
 80032ac:	46bd      	mov	sp, r7
 80032ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032b2:	4770      	bx	lr
 80032b4:	e000e100 	.word	0xe000e100
 80032b8:	e000ed00 	.word	0xe000ed00

080032bc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032bc:	b480      	push	{r7}
 80032be:	b089      	sub	sp, #36	@ 0x24
 80032c0:	af00      	add	r7, sp, #0
 80032c2:	60f8      	str	r0, [r7, #12]
 80032c4:	60b9      	str	r1, [r7, #8]
 80032c6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	f003 0307 	and.w	r3, r3, #7
 80032ce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	f1c3 0307 	rsb	r3, r3, #7
 80032d6:	2b04      	cmp	r3, #4
 80032d8:	bf28      	it	cs
 80032da:	2304      	movcs	r3, #4
 80032dc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032de:	69fb      	ldr	r3, [r7, #28]
 80032e0:	3304      	adds	r3, #4
 80032e2:	2b06      	cmp	r3, #6
 80032e4:	d902      	bls.n	80032ec <NVIC_EncodePriority+0x30>
 80032e6:	69fb      	ldr	r3, [r7, #28]
 80032e8:	3b03      	subs	r3, #3
 80032ea:	e000      	b.n	80032ee <NVIC_EncodePriority+0x32>
 80032ec:	2300      	movs	r3, #0
 80032ee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	f04f 32ff 	mov.w	r2, #4294967295
 80032f4:	69bb      	ldr	r3, [r7, #24]
 80032f6:	fa02 f303 	lsl.w	r3, r2, r3
 80032fa:	43da      	mvns	r2, r3
 80032fc:	68bb      	ldr	r3, [r7, #8]
 80032fe:	401a      	ands	r2, r3
 8003300:	697b      	ldr	r3, [r7, #20]
 8003302:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003304:	f04f 31ff 	mov.w	r1, #4294967295
 8003308:	697b      	ldr	r3, [r7, #20]
 800330a:	fa01 f303 	lsl.w	r3, r1, r3
 800330e:	43d9      	mvns	r1, r3
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	4313      	orrs	r3, r2
         );
}
 8003316:	4618      	mov	r0, r3
 8003318:	3724      	adds	r7, #36	@ 0x24
 800331a:	46bd      	mov	sp, r7
 800331c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003320:	4770      	bx	lr
	...

08003324 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003324:	b580      	push	{r7, lr}
 8003326:	b082      	sub	sp, #8
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	3b01      	subs	r3, #1
 8003330:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8003334:	d301      	bcc.n	800333a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003336:	2301      	movs	r3, #1
 8003338:	e00f      	b.n	800335a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800333a:	4a0a      	ldr	r2, [pc, #40]	@ (8003364 <SysTick_Config+0x40>)
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	3b01      	subs	r3, #1
 8003340:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003342:	210f      	movs	r1, #15
 8003344:	f04f 30ff 	mov.w	r0, #4294967295
 8003348:	f7ff ff8e 	bl	8003268 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800334c:	4b05      	ldr	r3, [pc, #20]	@ (8003364 <SysTick_Config+0x40>)
 800334e:	2200      	movs	r2, #0
 8003350:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003352:	4b04      	ldr	r3, [pc, #16]	@ (8003364 <SysTick_Config+0x40>)
 8003354:	2207      	movs	r2, #7
 8003356:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003358:	2300      	movs	r3, #0
}
 800335a:	4618      	mov	r0, r3
 800335c:	3708      	adds	r7, #8
 800335e:	46bd      	mov	sp, r7
 8003360:	bd80      	pop	{r7, pc}
 8003362:	bf00      	nop
 8003364:	e000e010 	.word	0xe000e010

08003368 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
 800336e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003370:	6878      	ldr	r0, [r7, #4]
 8003372:	f7ff ff29 	bl	80031c8 <__NVIC_SetPriorityGrouping>
}
 8003376:	bf00      	nop
 8003378:	3708      	adds	r7, #8
 800337a:	46bd      	mov	sp, r7
 800337c:	bd80      	pop	{r7, pc}

0800337e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800337e:	b580      	push	{r7, lr}
 8003380:	b086      	sub	sp, #24
 8003382:	af00      	add	r7, sp, #0
 8003384:	4603      	mov	r3, r0
 8003386:	60b9      	str	r1, [r7, #8]
 8003388:	607a      	str	r2, [r7, #4]
 800338a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800338c:	2300      	movs	r3, #0
 800338e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003390:	f7ff ff3e 	bl	8003210 <__NVIC_GetPriorityGrouping>
 8003394:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003396:	687a      	ldr	r2, [r7, #4]
 8003398:	68b9      	ldr	r1, [r7, #8]
 800339a:	6978      	ldr	r0, [r7, #20]
 800339c:	f7ff ff8e 	bl	80032bc <NVIC_EncodePriority>
 80033a0:	4602      	mov	r2, r0
 80033a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033a6:	4611      	mov	r1, r2
 80033a8:	4618      	mov	r0, r3
 80033aa:	f7ff ff5d 	bl	8003268 <__NVIC_SetPriority>
}
 80033ae:	bf00      	nop
 80033b0:	3718      	adds	r7, #24
 80033b2:	46bd      	mov	sp, r7
 80033b4:	bd80      	pop	{r7, pc}

080033b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033b6:	b580      	push	{r7, lr}
 80033b8:	b082      	sub	sp, #8
 80033ba:	af00      	add	r7, sp, #0
 80033bc:	4603      	mov	r3, r0
 80033be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033c4:	4618      	mov	r0, r3
 80033c6:	f7ff ff31 	bl	800322c <__NVIC_EnableIRQ>
}
 80033ca:	bf00      	nop
 80033cc:	3708      	adds	r7, #8
 80033ce:	46bd      	mov	sp, r7
 80033d0:	bd80      	pop	{r7, pc}

080033d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033d2:	b580      	push	{r7, lr}
 80033d4:	b082      	sub	sp, #8
 80033d6:	af00      	add	r7, sp, #0
 80033d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033da:	6878      	ldr	r0, [r7, #4]
 80033dc:	f7ff ffa2 	bl	8003324 <SysTick_Config>
 80033e0:	4603      	mov	r3, r0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80033ec:	b480      	push	{r7}
 80033ee:	b089      	sub	sp, #36	@ 0x24
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80033f6:	2300      	movs	r3, #0
 80033f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80033fa:	2300      	movs	r3, #0
 80033fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80033fe:	2300      	movs	r3, #0
 8003400:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003402:	2300      	movs	r3, #0
 8003404:	61fb      	str	r3, [r7, #28]
 8003406:	e16b      	b.n	80036e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003408:	2201      	movs	r2, #1
 800340a:	69fb      	ldr	r3, [r7, #28]
 800340c:	fa02 f303 	lsl.w	r3, r2, r3
 8003410:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003412:	683b      	ldr	r3, [r7, #0]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	697a      	ldr	r2, [r7, #20]
 8003418:	4013      	ands	r3, r2
 800341a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800341c:	693a      	ldr	r2, [r7, #16]
 800341e:	697b      	ldr	r3, [r7, #20]
 8003420:	429a      	cmp	r2, r3
 8003422:	f040 815a 	bne.w	80036da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003426:	683b      	ldr	r3, [r7, #0]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	f003 0303 	and.w	r3, r3, #3
 800342e:	2b01      	cmp	r3, #1
 8003430:	d005      	beq.n	800343e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003432:	683b      	ldr	r3, [r7, #0]
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800343a:	2b02      	cmp	r3, #2
 800343c:	d130      	bne.n	80034a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	689b      	ldr	r3, [r3, #8]
 8003442:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003444:	69fb      	ldr	r3, [r7, #28]
 8003446:	005b      	lsls	r3, r3, #1
 8003448:	2203      	movs	r2, #3
 800344a:	fa02 f303 	lsl.w	r3, r2, r3
 800344e:	43db      	mvns	r3, r3
 8003450:	69ba      	ldr	r2, [r7, #24]
 8003452:	4013      	ands	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	68da      	ldr	r2, [r3, #12]
 800345a:	69fb      	ldr	r3, [r7, #28]
 800345c:	005b      	lsls	r3, r3, #1
 800345e:	fa02 f303 	lsl.w	r3, r2, r3
 8003462:	69ba      	ldr	r2, [r7, #24]
 8003464:	4313      	orrs	r3, r2
 8003466:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	69ba      	ldr	r2, [r7, #24]
 800346c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003474:	2201      	movs	r2, #1
 8003476:	69fb      	ldr	r3, [r7, #28]
 8003478:	fa02 f303 	lsl.w	r3, r2, r3
 800347c:	43db      	mvns	r3, r3
 800347e:	69ba      	ldr	r2, [r7, #24]
 8003480:	4013      	ands	r3, r2
 8003482:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003484:	683b      	ldr	r3, [r7, #0]
 8003486:	685b      	ldr	r3, [r3, #4]
 8003488:	091b      	lsrs	r3, r3, #4
 800348a:	f003 0201 	and.w	r2, r3, #1
 800348e:	69fb      	ldr	r3, [r7, #28]
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	69ba      	ldr	r2, [r7, #24]
 8003496:	4313      	orrs	r3, r2
 8003498:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	69ba      	ldr	r2, [r7, #24]
 800349e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034a0:	683b      	ldr	r3, [r7, #0]
 80034a2:	685b      	ldr	r3, [r3, #4]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	2b03      	cmp	r3, #3
 80034aa:	d017      	beq.n	80034dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	68db      	ldr	r3, [r3, #12]
 80034b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	005b      	lsls	r3, r3, #1
 80034b6:	2203      	movs	r2, #3
 80034b8:	fa02 f303 	lsl.w	r3, r2, r3
 80034bc:	43db      	mvns	r3, r3
 80034be:	69ba      	ldr	r2, [r7, #24]
 80034c0:	4013      	ands	r3, r2
 80034c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	689a      	ldr	r2, [r3, #8]
 80034c8:	69fb      	ldr	r3, [r7, #28]
 80034ca:	005b      	lsls	r3, r3, #1
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	69ba      	ldr	r2, [r7, #24]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	69ba      	ldr	r2, [r7, #24]
 80034da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80034dc:	683b      	ldr	r3, [r7, #0]
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f003 0303 	and.w	r3, r3, #3
 80034e4:	2b02      	cmp	r3, #2
 80034e6:	d123      	bne.n	8003530 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80034e8:	69fb      	ldr	r3, [r7, #28]
 80034ea:	08da      	lsrs	r2, r3, #3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	3208      	adds	r2, #8
 80034f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80034f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80034f6:	69fb      	ldr	r3, [r7, #28]
 80034f8:	f003 0307 	and.w	r3, r3, #7
 80034fc:	009b      	lsls	r3, r3, #2
 80034fe:	220f      	movs	r2, #15
 8003500:	fa02 f303 	lsl.w	r3, r2, r3
 8003504:	43db      	mvns	r3, r3
 8003506:	69ba      	ldr	r2, [r7, #24]
 8003508:	4013      	ands	r3, r2
 800350a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	691a      	ldr	r2, [r3, #16]
 8003510:	69fb      	ldr	r3, [r7, #28]
 8003512:	f003 0307 	and.w	r3, r3, #7
 8003516:	009b      	lsls	r3, r3, #2
 8003518:	fa02 f303 	lsl.w	r3, r2, r3
 800351c:	69ba      	ldr	r2, [r7, #24]
 800351e:	4313      	orrs	r3, r2
 8003520:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003522:	69fb      	ldr	r3, [r7, #28]
 8003524:	08da      	lsrs	r2, r3, #3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	3208      	adds	r2, #8
 800352a:	69b9      	ldr	r1, [r7, #24]
 800352c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003536:	69fb      	ldr	r3, [r7, #28]
 8003538:	005b      	lsls	r3, r3, #1
 800353a:	2203      	movs	r2, #3
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	43db      	mvns	r3, r3
 8003542:	69ba      	ldr	r2, [r7, #24]
 8003544:	4013      	ands	r3, r2
 8003546:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003548:	683b      	ldr	r3, [r7, #0]
 800354a:	685b      	ldr	r3, [r3, #4]
 800354c:	f003 0203 	and.w	r2, r3, #3
 8003550:	69fb      	ldr	r3, [r7, #28]
 8003552:	005b      	lsls	r3, r3, #1
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	69ba      	ldr	r2, [r7, #24]
 800355a:	4313      	orrs	r3, r2
 800355c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	69ba      	ldr	r2, [r7, #24]
 8003562:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	685b      	ldr	r3, [r3, #4]
 8003568:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800356c:	2b00      	cmp	r3, #0
 800356e:	f000 80b4 	beq.w	80036da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	60fb      	str	r3, [r7, #12]
 8003576:	4b60      	ldr	r3, [pc, #384]	@ (80036f8 <HAL_GPIO_Init+0x30c>)
 8003578:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800357a:	4a5f      	ldr	r2, [pc, #380]	@ (80036f8 <HAL_GPIO_Init+0x30c>)
 800357c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003580:	6453      	str	r3, [r2, #68]	@ 0x44
 8003582:	4b5d      	ldr	r3, [pc, #372]	@ (80036f8 <HAL_GPIO_Init+0x30c>)
 8003584:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003586:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800358a:	60fb      	str	r3, [r7, #12]
 800358c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800358e:	4a5b      	ldr	r2, [pc, #364]	@ (80036fc <HAL_GPIO_Init+0x310>)
 8003590:	69fb      	ldr	r3, [r7, #28]
 8003592:	089b      	lsrs	r3, r3, #2
 8003594:	3302      	adds	r3, #2
 8003596:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800359a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800359c:	69fb      	ldr	r3, [r7, #28]
 800359e:	f003 0303 	and.w	r3, r3, #3
 80035a2:	009b      	lsls	r3, r3, #2
 80035a4:	220f      	movs	r2, #15
 80035a6:	fa02 f303 	lsl.w	r3, r2, r3
 80035aa:	43db      	mvns	r3, r3
 80035ac:	69ba      	ldr	r2, [r7, #24]
 80035ae:	4013      	ands	r3, r2
 80035b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	4a52      	ldr	r2, [pc, #328]	@ (8003700 <HAL_GPIO_Init+0x314>)
 80035b6:	4293      	cmp	r3, r2
 80035b8:	d02b      	beq.n	8003612 <HAL_GPIO_Init+0x226>
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	4a51      	ldr	r2, [pc, #324]	@ (8003704 <HAL_GPIO_Init+0x318>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d025      	beq.n	800360e <HAL_GPIO_Init+0x222>
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	4a50      	ldr	r2, [pc, #320]	@ (8003708 <HAL_GPIO_Init+0x31c>)
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d01f      	beq.n	800360a <HAL_GPIO_Init+0x21e>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	4a4f      	ldr	r2, [pc, #316]	@ (800370c <HAL_GPIO_Init+0x320>)
 80035ce:	4293      	cmp	r3, r2
 80035d0:	d019      	beq.n	8003606 <HAL_GPIO_Init+0x21a>
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003710 <HAL_GPIO_Init+0x324>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d013      	beq.n	8003602 <HAL_GPIO_Init+0x216>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003714 <HAL_GPIO_Init+0x328>)
 80035de:	4293      	cmp	r3, r2
 80035e0:	d00d      	beq.n	80035fe <HAL_GPIO_Init+0x212>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003718 <HAL_GPIO_Init+0x32c>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d007      	beq.n	80035fa <HAL_GPIO_Init+0x20e>
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	4a4b      	ldr	r2, [pc, #300]	@ (800371c <HAL_GPIO_Init+0x330>)
 80035ee:	4293      	cmp	r3, r2
 80035f0:	d101      	bne.n	80035f6 <HAL_GPIO_Init+0x20a>
 80035f2:	2307      	movs	r3, #7
 80035f4:	e00e      	b.n	8003614 <HAL_GPIO_Init+0x228>
 80035f6:	2308      	movs	r3, #8
 80035f8:	e00c      	b.n	8003614 <HAL_GPIO_Init+0x228>
 80035fa:	2306      	movs	r3, #6
 80035fc:	e00a      	b.n	8003614 <HAL_GPIO_Init+0x228>
 80035fe:	2305      	movs	r3, #5
 8003600:	e008      	b.n	8003614 <HAL_GPIO_Init+0x228>
 8003602:	2304      	movs	r3, #4
 8003604:	e006      	b.n	8003614 <HAL_GPIO_Init+0x228>
 8003606:	2303      	movs	r3, #3
 8003608:	e004      	b.n	8003614 <HAL_GPIO_Init+0x228>
 800360a:	2302      	movs	r3, #2
 800360c:	e002      	b.n	8003614 <HAL_GPIO_Init+0x228>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_GPIO_Init+0x228>
 8003612:	2300      	movs	r3, #0
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	f002 0203 	and.w	r2, r2, #3
 800361a:	0092      	lsls	r2, r2, #2
 800361c:	4093      	lsls	r3, r2
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003624:	4935      	ldr	r1, [pc, #212]	@ (80036fc <HAL_GPIO_Init+0x310>)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	3302      	adds	r3, #2
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003632:	4b3b      	ldr	r3, [pc, #236]	@ (8003720 <HAL_GPIO_Init+0x334>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003656:	4a32      	ldr	r2, [pc, #200]	@ (8003720 <HAL_GPIO_Init+0x334>)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800365c:	4b30      	ldr	r3, [pc, #192]	@ (8003720 <HAL_GPIO_Init+0x334>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003680:	4a27      	ldr	r2, [pc, #156]	@ (8003720 <HAL_GPIO_Init+0x334>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003686:	4b26      	ldr	r3, [pc, #152]	@ (8003720 <HAL_GPIO_Init+0x334>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003720 <HAL_GPIO_Init+0x334>)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003720 <HAL_GPIO_Init+0x334>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036d4:	4a12      	ldr	r2, [pc, #72]	@ (8003720 <HAL_GPIO_Init+0x334>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3301      	adds	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b0f      	cmp	r3, #15
 80036e4:	f67f ae90 	bls.w	8003408 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	3724      	adds	r7, #36	@ 0x24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40013800 	.word	0x40013800
 8003700:	40020000 	.word	0x40020000
 8003704:	40020400 	.word	0x40020400
 8003708:	40020800 	.word	0x40020800
 800370c:	40020c00 	.word	0x40020c00
 8003710:	40021000 	.word	0x40021000
 8003714:	40021400 	.word	0x40021400
 8003718:	40021800 	.word	0x40021800
 800371c:	40021c00 	.word	0x40021c00
 8003720:	40013c00 	.word	0x40013c00

08003724 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003724:	b480      	push	{r7}
 8003726:	b083      	sub	sp, #12
 8003728:	af00      	add	r7, sp, #0
 800372a:	6078      	str	r0, [r7, #4]
 800372c:	460b      	mov	r3, r1
 800372e:	807b      	strh	r3, [r7, #2]
 8003730:	4613      	mov	r3, r2
 8003732:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003734:	787b      	ldrb	r3, [r7, #1]
 8003736:	2b00      	cmp	r3, #0
 8003738:	d003      	beq.n	8003742 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800373a:	887a      	ldrh	r2, [r7, #2]
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003740:	e003      	b.n	800374a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003742:	887b      	ldrh	r3, [r7, #2]
 8003744:	041a      	lsls	r2, r3, #16
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	619a      	str	r2, [r3, #24]
}
 800374a:	bf00      	nop
 800374c:	370c      	adds	r7, #12
 800374e:	46bd      	mov	sp, r7
 8003750:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003754:	4770      	bx	lr
	...

08003758 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003758:	b580      	push	{r7, lr}
 800375a:	b084      	sub	sp, #16
 800375c:	af00      	add	r7, sp, #0
 800375e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	2b00      	cmp	r3, #0
 8003764:	d101      	bne.n	800376a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003766:	2301      	movs	r3, #1
 8003768:	e12b      	b.n	80039c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003770:	b2db      	uxtb	r3, r3
 8003772:	2b00      	cmp	r3, #0
 8003774:	d106      	bne.n	8003784 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	2200      	movs	r2, #0
 800377a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fe fcee 	bl	8002160 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2224      	movs	r2, #36	@ 0x24
 8003788:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	681a      	ldr	r2, [r3, #0]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f022 0201 	bic.w	r2, r2, #1
 800379a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	681a      	ldr	r2, [r3, #0]
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80037aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	681a      	ldr	r2, [r3, #0]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80037ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037bc:	f001 f9d8 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 80037c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	4a81      	ldr	r2, [pc, #516]	@ (80039cc <HAL_I2C_Init+0x274>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d807      	bhi.n	80037dc <HAL_I2C_Init+0x84>
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	4a80      	ldr	r2, [pc, #512]	@ (80039d0 <HAL_I2C_Init+0x278>)
 80037d0:	4293      	cmp	r3, r2
 80037d2:	bf94      	ite	ls
 80037d4:	2301      	movls	r3, #1
 80037d6:	2300      	movhi	r3, #0
 80037d8:	b2db      	uxtb	r3, r3
 80037da:	e006      	b.n	80037ea <HAL_I2C_Init+0x92>
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	4a7d      	ldr	r2, [pc, #500]	@ (80039d4 <HAL_I2C_Init+0x27c>)
 80037e0:	4293      	cmp	r3, r2
 80037e2:	bf94      	ite	ls
 80037e4:	2301      	movls	r3, #1
 80037e6:	2300      	movhi	r3, #0
 80037e8:	b2db      	uxtb	r3, r3
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d001      	beq.n	80037f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e0e7      	b.n	80039c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	4a78      	ldr	r2, [pc, #480]	@ (80039d8 <HAL_I2C_Init+0x280>)
 80037f6:	fba2 2303 	umull	r2, r3, r2, r3
 80037fa:	0c9b      	lsrs	r3, r3, #18
 80037fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	68ba      	ldr	r2, [r7, #8]
 800380e:	430a      	orrs	r2, r1
 8003810:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	6a1b      	ldr	r3, [r3, #32]
 8003818:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	685b      	ldr	r3, [r3, #4]
 8003820:	4a6a      	ldr	r2, [pc, #424]	@ (80039cc <HAL_I2C_Init+0x274>)
 8003822:	4293      	cmp	r3, r2
 8003824:	d802      	bhi.n	800382c <HAL_I2C_Init+0xd4>
 8003826:	68bb      	ldr	r3, [r7, #8]
 8003828:	3301      	adds	r3, #1
 800382a:	e009      	b.n	8003840 <HAL_I2C_Init+0xe8>
 800382c:	68bb      	ldr	r3, [r7, #8]
 800382e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003832:	fb02 f303 	mul.w	r3, r2, r3
 8003836:	4a69      	ldr	r2, [pc, #420]	@ (80039dc <HAL_I2C_Init+0x284>)
 8003838:	fba2 2303 	umull	r2, r3, r2, r3
 800383c:	099b      	lsrs	r3, r3, #6
 800383e:	3301      	adds	r3, #1
 8003840:	687a      	ldr	r2, [r7, #4]
 8003842:	6812      	ldr	r2, [r2, #0]
 8003844:	430b      	orrs	r3, r1
 8003846:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	69db      	ldr	r3, [r3, #28]
 800384e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003852:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	685b      	ldr	r3, [r3, #4]
 800385a:	495c      	ldr	r1, [pc, #368]	@ (80039cc <HAL_I2C_Init+0x274>)
 800385c:	428b      	cmp	r3, r1
 800385e:	d819      	bhi.n	8003894 <HAL_I2C_Init+0x13c>
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	1e59      	subs	r1, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	685b      	ldr	r3, [r3, #4]
 8003868:	005b      	lsls	r3, r3, #1
 800386a:	fbb1 f3f3 	udiv	r3, r1, r3
 800386e:	1c59      	adds	r1, r3, #1
 8003870:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003874:	400b      	ands	r3, r1
 8003876:	2b00      	cmp	r3, #0
 8003878:	d00a      	beq.n	8003890 <HAL_I2C_Init+0x138>
 800387a:	68fb      	ldr	r3, [r7, #12]
 800387c:	1e59      	subs	r1, r3, #1
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	685b      	ldr	r3, [r3, #4]
 8003882:	005b      	lsls	r3, r3, #1
 8003884:	fbb1 f3f3 	udiv	r3, r1, r3
 8003888:	3301      	adds	r3, #1
 800388a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800388e:	e051      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003890:	2304      	movs	r3, #4
 8003892:	e04f      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	689b      	ldr	r3, [r3, #8]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d111      	bne.n	80038c0 <HAL_I2C_Init+0x168>
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	1e58      	subs	r0, r3, #1
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	6859      	ldr	r1, [r3, #4]
 80038a4:	460b      	mov	r3, r1
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	440b      	add	r3, r1
 80038aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ae:	3301      	adds	r3, #1
 80038b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	bf0c      	ite	eq
 80038b8:	2301      	moveq	r3, #1
 80038ba:	2300      	movne	r3, #0
 80038bc:	b2db      	uxtb	r3, r3
 80038be:	e012      	b.n	80038e6 <HAL_I2C_Init+0x18e>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1e58      	subs	r0, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6859      	ldr	r1, [r3, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	009b      	lsls	r3, r3, #2
 80038cc:	440b      	add	r3, r1
 80038ce:	0099      	lsls	r1, r3, #2
 80038d0:	440b      	add	r3, r1
 80038d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d6:	3301      	adds	r3, #1
 80038d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038dc:	2b00      	cmp	r3, #0
 80038de:	bf0c      	ite	eq
 80038e0:	2301      	moveq	r3, #1
 80038e2:	2300      	movne	r3, #0
 80038e4:	b2db      	uxtb	r3, r3
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d001      	beq.n	80038ee <HAL_I2C_Init+0x196>
 80038ea:	2301      	movs	r3, #1
 80038ec:	e022      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	689b      	ldr	r3, [r3, #8]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d10e      	bne.n	8003914 <HAL_I2C_Init+0x1bc>
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	1e58      	subs	r0, r3, #1
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6859      	ldr	r1, [r3, #4]
 80038fe:	460b      	mov	r3, r1
 8003900:	005b      	lsls	r3, r3, #1
 8003902:	440b      	add	r3, r1
 8003904:	fbb0 f3f3 	udiv	r3, r0, r3
 8003908:	3301      	adds	r3, #1
 800390a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800390e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003912:	e00f      	b.n	8003934 <HAL_I2C_Init+0x1dc>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e58      	subs	r0, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	6859      	ldr	r1, [r3, #4]
 800391c:	460b      	mov	r3, r1
 800391e:	009b      	lsls	r3, r3, #2
 8003920:	440b      	add	r3, r1
 8003922:	0099      	lsls	r1, r3, #2
 8003924:	440b      	add	r3, r1
 8003926:	fbb0 f3f3 	udiv	r3, r0, r3
 800392a:	3301      	adds	r3, #1
 800392c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003930:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003934:	6879      	ldr	r1, [r7, #4]
 8003936:	6809      	ldr	r1, [r1, #0]
 8003938:	4313      	orrs	r3, r2
 800393a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	69da      	ldr	r2, [r3, #28]
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	6a1b      	ldr	r3, [r3, #32]
 800394e:	431a      	orrs	r2, r3
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	430a      	orrs	r2, r1
 8003956:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	689b      	ldr	r3, [r3, #8]
 800395e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003962:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003966:	687a      	ldr	r2, [r7, #4]
 8003968:	6911      	ldr	r1, [r2, #16]
 800396a:	687a      	ldr	r2, [r7, #4]
 800396c:	68d2      	ldr	r2, [r2, #12]
 800396e:	4311      	orrs	r1, r2
 8003970:	687a      	ldr	r2, [r7, #4]
 8003972:	6812      	ldr	r2, [r2, #0]
 8003974:	430b      	orrs	r3, r1
 8003976:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	68db      	ldr	r3, [r3, #12]
 800397e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	695a      	ldr	r2, [r3, #20]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	699b      	ldr	r3, [r3, #24]
 800398a:	431a      	orrs	r2, r3
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	430a      	orrs	r2, r1
 8003992:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0201 	orr.w	r2, r2, #1
 80039a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2200      	movs	r2, #0
 80039a8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	2220      	movs	r2, #32
 80039ae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	2200      	movs	r2, #0
 80039b6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2200      	movs	r2, #0
 80039bc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3710      	adds	r7, #16
 80039c6:	46bd      	mov	sp, r7
 80039c8:	bd80      	pop	{r7, pc}
 80039ca:	bf00      	nop
 80039cc:	000186a0 	.word	0x000186a0
 80039d0:	001e847f 	.word	0x001e847f
 80039d4:	003d08ff 	.word	0x003d08ff
 80039d8:	431bde83 	.word	0x431bde83
 80039dc:	10624dd3 	.word	0x10624dd3

080039e0 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80039e0:	b580      	push	{r7, lr}
 80039e2:	b088      	sub	sp, #32
 80039e4:	af02      	add	r7, sp, #8
 80039e6:	60f8      	str	r0, [r7, #12]
 80039e8:	4608      	mov	r0, r1
 80039ea:	4611      	mov	r1, r2
 80039ec:	461a      	mov	r2, r3
 80039ee:	4603      	mov	r3, r0
 80039f0:	817b      	strh	r3, [r7, #10]
 80039f2:	460b      	mov	r3, r1
 80039f4:	813b      	strh	r3, [r7, #8]
 80039f6:	4613      	mov	r3, r2
 80039f8:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80039fa:	f7fe ffe9 	bl	80029d0 <HAL_GetTick>
 80039fe:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a06:	b2db      	uxtb	r3, r3
 8003a08:	2b20      	cmp	r3, #32
 8003a0a:	f040 80d9 	bne.w	8003bc0 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a0e:	697b      	ldr	r3, [r7, #20]
 8003a10:	9300      	str	r3, [sp, #0]
 8003a12:	2319      	movs	r3, #25
 8003a14:	2201      	movs	r2, #1
 8003a16:	496d      	ldr	r1, [pc, #436]	@ (8003bcc <HAL_I2C_Mem_Write+0x1ec>)
 8003a18:	68f8      	ldr	r0, [r7, #12]
 8003a1a:	f000 fa9f 	bl	8003f5c <I2C_WaitOnFlagUntilTimeout>
 8003a1e:	4603      	mov	r3, r0
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d001      	beq.n	8003a28 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003a24:	2302      	movs	r3, #2
 8003a26:	e0cc      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003a2e:	2b01      	cmp	r3, #1
 8003a30:	d101      	bne.n	8003a36 <HAL_I2C_Mem_Write+0x56>
 8003a32:	2302      	movs	r3, #2
 8003a34:	e0c5      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	2201      	movs	r2, #1
 8003a3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	2b01      	cmp	r3, #1
 8003a4a:	d007      	beq.n	8003a5c <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	681a      	ldr	r2, [r3, #0]
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	f042 0201 	orr.w	r2, r2, #1
 8003a5a:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681a      	ldr	r2, [r3, #0]
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003a6a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	2221      	movs	r2, #33	@ 0x21
 8003a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	2240      	movs	r2, #64	@ 0x40
 8003a78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a7c:	68fb      	ldr	r3, [r7, #12]
 8003a7e:	2200      	movs	r2, #0
 8003a80:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a3a      	ldr	r2, [r7, #32]
 8003a86:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8003a8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a92:	b29a      	uxth	r2, r3
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	4a4d      	ldr	r2, [pc, #308]	@ (8003bd0 <HAL_I2C_Mem_Write+0x1f0>)
 8003a9c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a9e:	88f8      	ldrh	r0, [r7, #6]
 8003aa0:	893a      	ldrh	r2, [r7, #8]
 8003aa2:	8979      	ldrh	r1, [r7, #10]
 8003aa4:	697b      	ldr	r3, [r7, #20]
 8003aa6:	9301      	str	r3, [sp, #4]
 8003aa8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003aaa:	9300      	str	r3, [sp, #0]
 8003aac:	4603      	mov	r3, r0
 8003aae:	68f8      	ldr	r0, [r7, #12]
 8003ab0:	f000 f9be 	bl	8003e30 <I2C_RequestMemoryWrite>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d052      	beq.n	8003b60 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003aba:	2301      	movs	r3, #1
 8003abc:	e081      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003abe:	697a      	ldr	r2, [r7, #20]
 8003ac0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 fb64 	bl	8004190 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00d      	beq.n	8003aea <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ad2:	2b04      	cmp	r3, #4
 8003ad4:	d107      	bne.n	8003ae6 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	681a      	ldr	r2, [r3, #0]
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ae4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ae6:	2301      	movs	r3, #1
 8003ae8:	e06b      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aee:	781a      	ldrb	r2, [r3, #0]
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003afa:	1c5a      	adds	r2, r3, #1
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b04:	3b01      	subs	r3, #1
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b10:	b29b      	uxth	r3, r3
 8003b12:	3b01      	subs	r3, #1
 8003b14:	b29a      	uxth	r2, r3
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	695b      	ldr	r3, [r3, #20]
 8003b20:	f003 0304 	and.w	r3, r3, #4
 8003b24:	2b04      	cmp	r3, #4
 8003b26:	d11b      	bne.n	8003b60 <HAL_I2C_Mem_Write+0x180>
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d017      	beq.n	8003b60 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b34:	781a      	ldrb	r2, [r3, #0]
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	681b      	ldr	r3, [r3, #0]
 8003b3a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b40:	1c5a      	adds	r2, r3, #1
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b4a:	3b01      	subs	r3, #1
 8003b4c:	b29a      	uxth	r2, r3
 8003b4e:	68fb      	ldr	r3, [r7, #12]
 8003b50:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b56:	b29b      	uxth	r3, r3
 8003b58:	3b01      	subs	r3, #1
 8003b5a:	b29a      	uxth	r2, r3
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b64:	2b00      	cmp	r3, #0
 8003b66:	d1aa      	bne.n	8003abe <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b68:	697a      	ldr	r2, [r7, #20]
 8003b6a:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003b6c:	68f8      	ldr	r0, [r7, #12]
 8003b6e:	f000 fb57 	bl	8004220 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b72:	4603      	mov	r3, r0
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d00d      	beq.n	8003b94 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b7c:	2b04      	cmp	r3, #4
 8003b7e:	d107      	bne.n	8003b90 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	681a      	ldr	r2, [r3, #0]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b8e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003b90:	2301      	movs	r3, #1
 8003b92:	e016      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	681a      	ldr	r2, [r3, #0]
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba2:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	2220      	movs	r2, #32
 8003ba8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	e000      	b.n	8003bc2 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003bc0:	2302      	movs	r3, #2
  }
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	3718      	adds	r7, #24
 8003bc6:	46bd      	mov	sp, r7
 8003bc8:	bd80      	pop	{r7, pc}
 8003bca:	bf00      	nop
 8003bcc:	00100002 	.word	0x00100002
 8003bd0:	ffff0000 	.word	0xffff0000

08003bd4 <HAL_I2C_IsDeviceReady>:
  * @param  Trials Number of trials
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_IsDeviceReady(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Trials, uint32_t Timeout)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b08a      	sub	sp, #40	@ 0x28
 8003bd8:	af02      	add	r7, sp, #8
 8003bda:	60f8      	str	r0, [r7, #12]
 8003bdc:	607a      	str	r2, [r7, #4]
 8003bde:	603b      	str	r3, [r7, #0]
 8003be0:	460b      	mov	r3, r1
 8003be2:	817b      	strh	r3, [r7, #10]
  /* Get tick */
  uint32_t tickstart = HAL_GetTick();
 8003be4:	f7fe fef4 	bl	80029d0 <HAL_GetTick>
 8003be8:	61f8      	str	r0, [r7, #28]
  uint32_t I2C_Trials = 0U;
 8003bea:	2300      	movs	r3, #0
 8003bec:	61bb      	str	r3, [r7, #24]
  FlagStatus tmp1;
  FlagStatus tmp2;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b20      	cmp	r3, #32
 8003bf8:	f040 8111 	bne.w	8003e1e <HAL_I2C_IsDeviceReady+0x24a>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003bfc:	69fb      	ldr	r3, [r7, #28]
 8003bfe:	9300      	str	r3, [sp, #0]
 8003c00:	2319      	movs	r3, #25
 8003c02:	2201      	movs	r2, #1
 8003c04:	4988      	ldr	r1, [pc, #544]	@ (8003e28 <HAL_I2C_IsDeviceReady+0x254>)
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f000 f9a8 	bl	8003f5c <I2C_WaitOnFlagUntilTimeout>
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d001      	beq.n	8003c16 <HAL_I2C_IsDeviceReady+0x42>
    {
      return HAL_BUSY;
 8003c12:	2302      	movs	r3, #2
 8003c14:	e104      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003c16:	68fb      	ldr	r3, [r7, #12]
 8003c18:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003c1c:	2b01      	cmp	r3, #1
 8003c1e:	d101      	bne.n	8003c24 <HAL_I2C_IsDeviceReady+0x50>
 8003c20:	2302      	movs	r3, #2
 8003c22:	e0fd      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	2201      	movs	r2, #1
 8003c28:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f003 0301 	and.w	r3, r3, #1
 8003c36:	2b01      	cmp	r3, #1
 8003c38:	d007      	beq.n	8003c4a <HAL_I2C_IsDeviceReady+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	681a      	ldr	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f042 0201 	orr.w	r2, r2, #1
 8003c48:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003c58:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_BUSY;
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	2224      	movs	r2, #36	@ 0x24
 8003c5e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003c62:	68fb      	ldr	r3, [r7, #12]
 8003c64:	2200      	movs	r2, #0
 8003c66:	641a      	str	r2, [r3, #64]	@ 0x40
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	4a70      	ldr	r2, [pc, #448]	@ (8003e2c <HAL_I2C_IsDeviceReady+0x258>)
 8003c6c:	62da      	str	r2, [r3, #44]	@ 0x2c

    do
    {
      /* Generate Start */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	681a      	ldr	r2, [r3, #0]
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003c7c:	601a      	str	r2, [r3, #0]

      /* Wait until SB flag is set */
      if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, tickstart) != HAL_OK)
 8003c7e:	69fb      	ldr	r3, [r7, #28]
 8003c80:	9300      	str	r3, [sp, #0]
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	2200      	movs	r2, #0
 8003c86:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003c8a:	68f8      	ldr	r0, [r7, #12]
 8003c8c:	f000 f966 	bl	8003f5c <I2C_WaitOnFlagUntilTimeout>
 8003c90:	4603      	mov	r3, r0
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d00d      	beq.n	8003cb2 <HAL_I2C_IsDeviceReady+0xde>
      {
        if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003ca0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003ca4:	d103      	bne.n	8003cae <HAL_I2C_IsDeviceReady+0xda>
        {
          hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003cac:	641a      	str	r2, [r3, #64]	@ 0x40
        }
        return HAL_TIMEOUT;
 8003cae:	2303      	movs	r3, #3
 8003cb0:	e0b6      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
      }

      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003cb2:	897b      	ldrh	r3, [r7, #10]
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	461a      	mov	r2, r3
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003cc0:	611a      	str	r2, [r3, #16]

      /* Wait until ADDR or AF flag are set */
      /* Get tick */
      tickstart = HAL_GetTick();
 8003cc2:	f7fe fe85 	bl	80029d0 <HAL_GetTick>
 8003cc6:	61f8      	str	r0, [r7, #28]

      tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	695b      	ldr	r3, [r3, #20]
 8003cce:	f003 0302 	and.w	r3, r3, #2
 8003cd2:	2b02      	cmp	r3, #2
 8003cd4:	bf0c      	ite	eq
 8003cd6:	2301      	moveq	r3, #1
 8003cd8:	2300      	movne	r3, #0
 8003cda:	b2db      	uxtb	r3, r3
 8003cdc:	75fb      	strb	r3, [r7, #23]
      tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	695b      	ldr	r3, [r3, #20]
 8003ce4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ce8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cec:	bf0c      	ite	eq
 8003cee:	2301      	moveq	r3, #1
 8003cf0:	2300      	movne	r3, #0
 8003cf2:	b2db      	uxtb	r3, r3
 8003cf4:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003cf6:	e025      	b.n	8003d44 <HAL_I2C_IsDeviceReady+0x170>
      {
        if (((HAL_GetTick() - tickstart) > Timeout) || (Timeout == 0U))
 8003cf8:	f7fe fe6a 	bl	80029d0 <HAL_GetTick>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	69fb      	ldr	r3, [r7, #28]
 8003d00:	1ad3      	subs	r3, r2, r3
 8003d02:	683a      	ldr	r2, [r7, #0]
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d302      	bcc.n	8003d0e <HAL_I2C_IsDeviceReady+0x13a>
 8003d08:	683b      	ldr	r3, [r7, #0]
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d103      	bne.n	8003d16 <HAL_I2C_IsDeviceReady+0x142>
        {
          hi2c->State = HAL_I2C_STATE_TIMEOUT;
 8003d0e:	68fb      	ldr	r3, [r7, #12]
 8003d10:	22a0      	movs	r2, #160	@ 0xa0
 8003d12:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        }
        tmp1 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR);
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	695b      	ldr	r3, [r3, #20]
 8003d1c:	f003 0302 	and.w	r3, r3, #2
 8003d20:	2b02      	cmp	r3, #2
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	75fb      	strb	r3, [r7, #23]
        tmp2 = __HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF);
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003d36:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003d3a:	bf0c      	ite	eq
 8003d3c:	2301      	moveq	r3, #1
 8003d3e:	2300      	movne	r3, #0
 8003d40:	b2db      	uxtb	r3, r3
 8003d42:	75bb      	strb	r3, [r7, #22]
      while ((hi2c->State != HAL_I2C_STATE_TIMEOUT) && (tmp1 == RESET) && (tmp2 == RESET))
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d4a:	b2db      	uxtb	r3, r3
 8003d4c:	2ba0      	cmp	r3, #160	@ 0xa0
 8003d4e:	d005      	beq.n	8003d5c <HAL_I2C_IsDeviceReady+0x188>
 8003d50:	7dfb      	ldrb	r3, [r7, #23]
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d102      	bne.n	8003d5c <HAL_I2C_IsDeviceReady+0x188>
 8003d56:	7dbb      	ldrb	r3, [r7, #22]
 8003d58:	2b00      	cmp	r3, #0
 8003d5a:	d0cd      	beq.n	8003cf8 <HAL_I2C_IsDeviceReady+0x124>
      }

      hi2c->State = HAL_I2C_STATE_READY;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	2220      	movs	r2, #32
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

      /* Check if the ADDR flag has been set */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_ADDR) == SET)
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	695b      	ldr	r3, [r3, #20]
 8003d6a:	f003 0302 	and.w	r3, r3, #2
 8003d6e:	2b02      	cmp	r3, #2
 8003d70:	d129      	bne.n	8003dc6 <HAL_I2C_IsDeviceReady+0x1f2>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d80:	601a      	str	r2, [r3, #0]

        /* Clear ADDR Flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d82:	2300      	movs	r3, #0
 8003d84:	613b      	str	r3, [r7, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	695b      	ldr	r3, [r3, #20]
 8003d8c:	613b      	str	r3, [r7, #16]
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	613b      	str	r3, [r7, #16]
 8003d96:	693b      	ldr	r3, [r7, #16]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003d98:	69fb      	ldr	r3, [r7, #28]
 8003d9a:	9300      	str	r3, [sp, #0]
 8003d9c:	2319      	movs	r3, #25
 8003d9e:	2201      	movs	r2, #1
 8003da0:	4921      	ldr	r1, [pc, #132]	@ (8003e28 <HAL_I2C_IsDeviceReady+0x254>)
 8003da2:	68f8      	ldr	r0, [r7, #12]
 8003da4:	f000 f8da 	bl	8003f5c <I2C_WaitOnFlagUntilTimeout>
 8003da8:	4603      	mov	r3, r0
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d001      	beq.n	8003db2 <HAL_I2C_IsDeviceReady+0x1de>
        {
          return HAL_ERROR;
 8003dae:	2301      	movs	r3, #1
 8003db0:	e036      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
        }

        hi2c->State = HAL_I2C_STATE_READY;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2220      	movs	r2, #32
 8003db6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_OK;
 8003dc2:	2300      	movs	r3, #0
 8003dc4:	e02c      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
      }
      else
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	681a      	ldr	r2, [r3, #0]
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dd4:	601a      	str	r2, [r3, #0]

        /* Clear AF Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003dde:	615a      	str	r2, [r3, #20]

        /* Wait until BUSY flag is reset */
        if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003de0:	69fb      	ldr	r3, [r7, #28]
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	2319      	movs	r3, #25
 8003de6:	2201      	movs	r2, #1
 8003de8:	490f      	ldr	r1, [pc, #60]	@ (8003e28 <HAL_I2C_IsDeviceReady+0x254>)
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 f8b6 	bl	8003f5c <I2C_WaitOnFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_IsDeviceReady+0x226>
        {
          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e012      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
        }
      }

      /* Increment Trials */
      I2C_Trials++;
 8003dfa:	69bb      	ldr	r3, [r7, #24]
 8003dfc:	3301      	adds	r3, #1
 8003dfe:	61bb      	str	r3, [r7, #24]
    }
    while (I2C_Trials < Trials);
 8003e00:	69ba      	ldr	r2, [r7, #24]
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	429a      	cmp	r2, r3
 8003e06:	f4ff af32 	bcc.w	8003c6e <HAL_I2C_IsDeviceReady+0x9a>

    hi2c->State = HAL_I2C_STATE_READY;
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	2220      	movs	r2, #32
 8003e0e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	2200      	movs	r2, #0
 8003e16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e000      	b.n	8003e20 <HAL_I2C_IsDeviceReady+0x24c>
  }
  else
  {
    return HAL_BUSY;
 8003e1e:	2302      	movs	r3, #2
  }
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	3720      	adds	r7, #32
 8003e24:	46bd      	mov	sp, r7
 8003e26:	bd80      	pop	{r7, pc}
 8003e28:	00100002 	.word	0x00100002
 8003e2c:	ffff0000 	.word	0xffff0000

08003e30 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	b088      	sub	sp, #32
 8003e34:	af02      	add	r7, sp, #8
 8003e36:	60f8      	str	r0, [r7, #12]
 8003e38:	4608      	mov	r0, r1
 8003e3a:	4611      	mov	r1, r2
 8003e3c:	461a      	mov	r2, r3
 8003e3e:	4603      	mov	r3, r0
 8003e40:	817b      	strh	r3, [r7, #10]
 8003e42:	460b      	mov	r3, r1
 8003e44:	813b      	strh	r3, [r7, #8]
 8003e46:	4613      	mov	r3, r2
 8003e48:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	681a      	ldr	r2, [r3, #0]
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003e58:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e5c:	9300      	str	r3, [sp, #0]
 8003e5e:	6a3b      	ldr	r3, [r7, #32]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003e66:	68f8      	ldr	r0, [r7, #12]
 8003e68:	f000 f878 	bl	8003f5c <I2C_WaitOnFlagUntilTimeout>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d00d      	beq.n	8003e8e <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003e7c:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003e80:	d103      	bne.n	8003e8a <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003e88:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003e8a:	2303      	movs	r3, #3
 8003e8c:	e05f      	b.n	8003f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003e8e:	897b      	ldrh	r3, [r7, #10]
 8003e90:	b2db      	uxtb	r3, r3
 8003e92:	461a      	mov	r2, r3
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003e9c:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003ea0:	6a3a      	ldr	r2, [r7, #32]
 8003ea2:	492d      	ldr	r1, [pc, #180]	@ (8003f58 <I2C_RequestMemoryWrite+0x128>)
 8003ea4:	68f8      	ldr	r0, [r7, #12]
 8003ea6:	f000 f8d3 	bl	8004050 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003eaa:	4603      	mov	r3, r0
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	d001      	beq.n	8003eb4 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e04c      	b.n	8003f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	695b      	ldr	r3, [r3, #20]
 8003ebe:	617b      	str	r3, [r7, #20]
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699b      	ldr	r3, [r3, #24]
 8003ec6:	617b      	str	r3, [r7, #20]
 8003ec8:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003eca:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ecc:	6a39      	ldr	r1, [r7, #32]
 8003ece:	68f8      	ldr	r0, [r7, #12]
 8003ed0:	f000 f95e 	bl	8004190 <I2C_WaitOnTXEFlagUntilTimeout>
 8003ed4:	4603      	mov	r3, r0
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d00d      	beq.n	8003ef6 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ede:	2b04      	cmp	r3, #4
 8003ee0:	d107      	bne.n	8003ef2 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ef0:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003ef2:	2301      	movs	r3, #1
 8003ef4:	e02b      	b.n	8003f4e <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003ef6:	88fb      	ldrh	r3, [r7, #6]
 8003ef8:	2b01      	cmp	r3, #1
 8003efa:	d105      	bne.n	8003f08 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003efc:	893b      	ldrh	r3, [r7, #8]
 8003efe:	b2da      	uxtb	r2, r3
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	611a      	str	r2, [r3, #16]
 8003f06:	e021      	b.n	8003f4c <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8003f08:	893b      	ldrh	r3, [r7, #8]
 8003f0a:	0a1b      	lsrs	r3, r3, #8
 8003f0c:	b29b      	uxth	r3, r3
 8003f0e:	b2da      	uxtb	r2, r3
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003f16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003f18:	6a39      	ldr	r1, [r7, #32]
 8003f1a:	68f8      	ldr	r0, [r7, #12]
 8003f1c:	f000 f938 	bl	8004190 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f20:	4603      	mov	r3, r0
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d00d      	beq.n	8003f42 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d107      	bne.n	8003f3e <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003f3c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003f3e:	2301      	movs	r3, #1
 8003f40:	e005      	b.n	8003f4e <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003f42:	893b      	ldrh	r3, [r7, #8]
 8003f44:	b2da      	uxtb	r2, r3
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8003f4c:	2300      	movs	r3, #0
}
 8003f4e:	4618      	mov	r0, r3
 8003f50:	3718      	adds	r7, #24
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}
 8003f56:	bf00      	nop
 8003f58:	00010002 	.word	0x00010002

08003f5c <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003f5c:	b580      	push	{r7, lr}
 8003f5e:	b084      	sub	sp, #16
 8003f60:	af00      	add	r7, sp, #0
 8003f62:	60f8      	str	r0, [r7, #12]
 8003f64:	60b9      	str	r1, [r7, #8]
 8003f66:	603b      	str	r3, [r7, #0]
 8003f68:	4613      	mov	r3, r2
 8003f6a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003f6c:	e048      	b.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f74:	d044      	beq.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f76:	f7fe fd2b 	bl	80029d0 <HAL_GetTick>
 8003f7a:	4602      	mov	r2, r0
 8003f7c:	69bb      	ldr	r3, [r7, #24]
 8003f7e:	1ad3      	subs	r3, r2, r3
 8003f80:	683a      	ldr	r2, [r7, #0]
 8003f82:	429a      	cmp	r2, r3
 8003f84:	d302      	bcc.n	8003f8c <I2C_WaitOnFlagUntilTimeout+0x30>
 8003f86:	683b      	ldr	r3, [r7, #0]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d139      	bne.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003f8c:	68bb      	ldr	r3, [r7, #8]
 8003f8e:	0c1b      	lsrs	r3, r3, #16
 8003f90:	b2db      	uxtb	r3, r3
 8003f92:	2b01      	cmp	r3, #1
 8003f94:	d10d      	bne.n	8003fb2 <I2C_WaitOnFlagUntilTimeout+0x56>
 8003f96:	68fb      	ldr	r3, [r7, #12]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	695b      	ldr	r3, [r3, #20]
 8003f9c:	43da      	mvns	r2, r3
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	4013      	ands	r3, r2
 8003fa2:	b29b      	uxth	r3, r3
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	bf0c      	ite	eq
 8003fa8:	2301      	moveq	r3, #1
 8003faa:	2300      	movne	r3, #0
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	461a      	mov	r2, r3
 8003fb0:	e00c      	b.n	8003fcc <I2C_WaitOnFlagUntilTimeout+0x70>
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	699b      	ldr	r3, [r3, #24]
 8003fb8:	43da      	mvns	r2, r3
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	4013      	ands	r3, r2
 8003fbe:	b29b      	uxth	r3, r3
 8003fc0:	2b00      	cmp	r3, #0
 8003fc2:	bf0c      	ite	eq
 8003fc4:	2301      	moveq	r3, #1
 8003fc6:	2300      	movne	r3, #0
 8003fc8:	b2db      	uxtb	r3, r3
 8003fca:	461a      	mov	r2, r3
 8003fcc:	79fb      	ldrb	r3, [r7, #7]
 8003fce:	429a      	cmp	r2, r3
 8003fd0:	d116      	bne.n	8004000 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2200      	movs	r2, #0
 8003fd6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	2220      	movs	r2, #32
 8003fdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003fec:	f043 0220 	orr.w	r2, r3, #32
 8003ff0:	68fb      	ldr	r3, [r7, #12]
 8003ff2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	2200      	movs	r2, #0
 8003ff8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e023      	b.n	8004048 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004000:	68bb      	ldr	r3, [r7, #8]
 8004002:	0c1b      	lsrs	r3, r3, #16
 8004004:	b2db      	uxtb	r3, r3
 8004006:	2b01      	cmp	r3, #1
 8004008:	d10d      	bne.n	8004026 <I2C_WaitOnFlagUntilTimeout+0xca>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	695b      	ldr	r3, [r3, #20]
 8004010:	43da      	mvns	r2, r3
 8004012:	68bb      	ldr	r3, [r7, #8]
 8004014:	4013      	ands	r3, r2
 8004016:	b29b      	uxth	r3, r3
 8004018:	2b00      	cmp	r3, #0
 800401a:	bf0c      	ite	eq
 800401c:	2301      	moveq	r3, #1
 800401e:	2300      	movne	r3, #0
 8004020:	b2db      	uxtb	r3, r3
 8004022:	461a      	mov	r2, r3
 8004024:	e00c      	b.n	8004040 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	43da      	mvns	r2, r3
 800402e:	68bb      	ldr	r3, [r7, #8]
 8004030:	4013      	ands	r3, r2
 8004032:	b29b      	uxth	r3, r3
 8004034:	2b00      	cmp	r3, #0
 8004036:	bf0c      	ite	eq
 8004038:	2301      	moveq	r3, #1
 800403a:	2300      	movne	r3, #0
 800403c:	b2db      	uxtb	r3, r3
 800403e:	461a      	mov	r2, r3
 8004040:	79fb      	ldrb	r3, [r7, #7]
 8004042:	429a      	cmp	r2, r3
 8004044:	d093      	beq.n	8003f6e <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004050:	b580      	push	{r7, lr}
 8004052:	b084      	sub	sp, #16
 8004054:	af00      	add	r7, sp, #0
 8004056:	60f8      	str	r0, [r7, #12]
 8004058:	60b9      	str	r1, [r7, #8]
 800405a:	607a      	str	r2, [r7, #4]
 800405c:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800405e:	e071      	b.n	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	695b      	ldr	r3, [r3, #20]
 8004066:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800406a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800406e:	d123      	bne.n	80040b8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	681a      	ldr	r2, [r3, #0]
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800407e:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004088:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800408a:	68fb      	ldr	r3, [r7, #12]
 800408c:	2200      	movs	r2, #0
 800408e:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	2220      	movs	r2, #32
 8004094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004098:	68fb      	ldr	r3, [r7, #12]
 800409a:	2200      	movs	r2, #0
 800409c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80040a0:	68fb      	ldr	r3, [r7, #12]
 80040a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80040a4:	f043 0204 	orr.w	r2, r3, #4
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	2200      	movs	r2, #0
 80040b0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e067      	b.n	8004188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040be:	d041      	beq.n	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80040c0:	f7fe fc86 	bl	80029d0 <HAL_GetTick>
 80040c4:	4602      	mov	r2, r0
 80040c6:	683b      	ldr	r3, [r7, #0]
 80040c8:	1ad3      	subs	r3, r2, r3
 80040ca:	687a      	ldr	r2, [r7, #4]
 80040cc:	429a      	cmp	r2, r3
 80040ce:	d302      	bcc.n	80040d6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d136      	bne.n	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80040d6:	68bb      	ldr	r3, [r7, #8]
 80040d8:	0c1b      	lsrs	r3, r3, #16
 80040da:	b2db      	uxtb	r3, r3
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d10c      	bne.n	80040fa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	695b      	ldr	r3, [r3, #20]
 80040e6:	43da      	mvns	r2, r3
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	4013      	ands	r3, r2
 80040ec:	b29b      	uxth	r3, r3
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	bf14      	ite	ne
 80040f2:	2301      	movne	r3, #1
 80040f4:	2300      	moveq	r3, #0
 80040f6:	b2db      	uxtb	r3, r3
 80040f8:	e00b      	b.n	8004112 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	43da      	mvns	r2, r3
 8004102:	68bb      	ldr	r3, [r7, #8]
 8004104:	4013      	ands	r3, r2
 8004106:	b29b      	uxth	r3, r3
 8004108:	2b00      	cmp	r3, #0
 800410a:	bf14      	ite	ne
 800410c:	2301      	movne	r3, #1
 800410e:	2300      	moveq	r3, #0
 8004110:	b2db      	uxtb	r3, r3
 8004112:	2b00      	cmp	r3, #0
 8004114:	d016      	beq.n	8004144 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	2200      	movs	r2, #0
 800411a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2220      	movs	r2, #32
 8004120:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	2200      	movs	r2, #0
 8004128:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004130:	f043 0220 	orr.w	r2, r3, #32
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004138:	68fb      	ldr	r3, [r7, #12]
 800413a:	2200      	movs	r2, #0
 800413c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004140:	2301      	movs	r3, #1
 8004142:	e021      	b.n	8004188 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004144:	68bb      	ldr	r3, [r7, #8]
 8004146:	0c1b      	lsrs	r3, r3, #16
 8004148:	b2db      	uxtb	r3, r3
 800414a:	2b01      	cmp	r3, #1
 800414c:	d10c      	bne.n	8004168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	695b      	ldr	r3, [r3, #20]
 8004154:	43da      	mvns	r2, r3
 8004156:	68bb      	ldr	r3, [r7, #8]
 8004158:	4013      	ands	r3, r2
 800415a:	b29b      	uxth	r3, r3
 800415c:	2b00      	cmp	r3, #0
 800415e:	bf14      	ite	ne
 8004160:	2301      	movne	r3, #1
 8004162:	2300      	moveq	r3, #0
 8004164:	b2db      	uxtb	r3, r3
 8004166:	e00b      	b.n	8004180 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	699b      	ldr	r3, [r3, #24]
 800416e:	43da      	mvns	r2, r3
 8004170:	68bb      	ldr	r3, [r7, #8]
 8004172:	4013      	ands	r3, r2
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	bf14      	ite	ne
 800417a:	2301      	movne	r3, #1
 800417c:	2300      	moveq	r3, #0
 800417e:	b2db      	uxtb	r3, r3
 8004180:	2b00      	cmp	r3, #0
 8004182:	f47f af6d 	bne.w	8004060 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004186:	2300      	movs	r3, #0
}
 8004188:	4618      	mov	r0, r3
 800418a:	3710      	adds	r7, #16
 800418c:	46bd      	mov	sp, r7
 800418e:	bd80      	pop	{r7, pc}

08004190 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004190:	b580      	push	{r7, lr}
 8004192:	b084      	sub	sp, #16
 8004194:	af00      	add	r7, sp, #0
 8004196:	60f8      	str	r0, [r7, #12]
 8004198:	60b9      	str	r1, [r7, #8]
 800419a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800419c:	e034      	b.n	8004208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 f886 	bl	80042b0 <I2C_IsAcknowledgeFailed>
 80041a4:	4603      	mov	r3, r0
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d001      	beq.n	80041ae <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80041aa:	2301      	movs	r3, #1
 80041ac:	e034      	b.n	8004218 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041ae:	68bb      	ldr	r3, [r7, #8]
 80041b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b4:	d028      	beq.n	8004208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b6:	f7fe fc0b 	bl	80029d0 <HAL_GetTick>
 80041ba:	4602      	mov	r2, r0
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	1ad3      	subs	r3, r2, r3
 80041c0:	68ba      	ldr	r2, [r7, #8]
 80041c2:	429a      	cmp	r2, r3
 80041c4:	d302      	bcc.n	80041cc <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80041c6:	68bb      	ldr	r3, [r7, #8]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d11d      	bne.n	8004208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	695b      	ldr	r3, [r3, #20]
 80041d2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80041d6:	2b80      	cmp	r3, #128	@ 0x80
 80041d8:	d016      	beq.n	8004208 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	2220      	movs	r2, #32
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	2200      	movs	r2, #0
 80041ec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041f4:	f043 0220 	orr.w	r2, r3, #32
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	2200      	movs	r2, #0
 8004200:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004204:	2301      	movs	r3, #1
 8004206:	e007      	b.n	8004218 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004208:	68fb      	ldr	r3, [r7, #12]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	695b      	ldr	r3, [r3, #20]
 800420e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004212:	2b80      	cmp	r3, #128	@ 0x80
 8004214:	d1c3      	bne.n	800419e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004216:	2300      	movs	r3, #0
}
 8004218:	4618      	mov	r0, r3
 800421a:	3710      	adds	r7, #16
 800421c:	46bd      	mov	sp, r7
 800421e:	bd80      	pop	{r7, pc}

08004220 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004220:	b580      	push	{r7, lr}
 8004222:	b084      	sub	sp, #16
 8004224:	af00      	add	r7, sp, #0
 8004226:	60f8      	str	r0, [r7, #12]
 8004228:	60b9      	str	r1, [r7, #8]
 800422a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800422c:	e034      	b.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800422e:	68f8      	ldr	r0, [r7, #12]
 8004230:	f000 f83e 	bl	80042b0 <I2C_IsAcknowledgeFailed>
 8004234:	4603      	mov	r3, r0
 8004236:	2b00      	cmp	r3, #0
 8004238:	d001      	beq.n	800423e <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800423a:	2301      	movs	r3, #1
 800423c:	e034      	b.n	80042a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800423e:	68bb      	ldr	r3, [r7, #8]
 8004240:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004244:	d028      	beq.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004246:	f7fe fbc3 	bl	80029d0 <HAL_GetTick>
 800424a:	4602      	mov	r2, r0
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	1ad3      	subs	r3, r2, r3
 8004250:	68ba      	ldr	r2, [r7, #8]
 8004252:	429a      	cmp	r2, r3
 8004254:	d302      	bcc.n	800425c <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004256:	68bb      	ldr	r3, [r7, #8]
 8004258:	2b00      	cmp	r3, #0
 800425a:	d11d      	bne.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	f003 0304 	and.w	r3, r3, #4
 8004266:	2b04      	cmp	r3, #4
 8004268:	d016      	beq.n	8004298 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	2200      	movs	r2, #0
 800426e:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	2220      	movs	r2, #32
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	2200      	movs	r2, #0
 800427c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004284:	f043 0220 	orr.w	r2, r3, #32
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	2200      	movs	r2, #0
 8004290:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004294:	2301      	movs	r3, #1
 8004296:	e007      	b.n	80042a8 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	f003 0304 	and.w	r3, r3, #4
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	d1c3      	bne.n	800422e <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80042a6:	2300      	movs	r3, #0
}
 80042a8:	4618      	mov	r0, r3
 80042aa:	3710      	adds	r7, #16
 80042ac:	46bd      	mov	sp, r7
 80042ae:	bd80      	pop	{r7, pc}

080042b0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80042b0:	b480      	push	{r7}
 80042b2:	b083      	sub	sp, #12
 80042b4:	af00      	add	r7, sp, #0
 80042b6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	695b      	ldr	r3, [r3, #20]
 80042be:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 80042c2:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 80042c6:	d11b      	bne.n	8004300 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 80042d0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	2200      	movs	r2, #0
 80042d6:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	2220      	movs	r2, #32
 80042dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	2200      	movs	r2, #0
 80042e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042ec:	f043 0204 	orr.w	r2, r3, #4
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2200      	movs	r2, #0
 80042f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80042fc:	2301      	movs	r3, #1
 80042fe:	e000      	b.n	8004302 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004300:	2300      	movs	r3, #0
}
 8004302:	4618      	mov	r0, r3
 8004304:	370c      	adds	r7, #12
 8004306:	46bd      	mov	sp, r7
 8004308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430c:	4770      	bx	lr
	...

08004310 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004310:	b580      	push	{r7, lr}
 8004312:	b086      	sub	sp, #24
 8004314:	af00      	add	r7, sp, #0
 8004316:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	2b00      	cmp	r3, #0
 800431c:	d101      	bne.n	8004322 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800431e:	2301      	movs	r3, #1
 8004320:	e267      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	681b      	ldr	r3, [r3, #0]
 8004326:	f003 0301 	and.w	r3, r3, #1
 800432a:	2b00      	cmp	r3, #0
 800432c:	d075      	beq.n	800441a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800432e:	4b88      	ldr	r3, [pc, #544]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004330:	689b      	ldr	r3, [r3, #8]
 8004332:	f003 030c 	and.w	r3, r3, #12
 8004336:	2b04      	cmp	r3, #4
 8004338:	d00c      	beq.n	8004354 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800433a:	4b85      	ldr	r3, [pc, #532]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 800433c:	689b      	ldr	r3, [r3, #8]
 800433e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004342:	2b08      	cmp	r3, #8
 8004344:	d112      	bne.n	800436c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004346:	4b82      	ldr	r3, [pc, #520]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004348:	685b      	ldr	r3, [r3, #4]
 800434a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800434e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004352:	d10b      	bne.n	800436c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004354:	4b7e      	ldr	r3, [pc, #504]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800435c:	2b00      	cmp	r3, #0
 800435e:	d05b      	beq.n	8004418 <HAL_RCC_OscConfig+0x108>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	685b      	ldr	r3, [r3, #4]
 8004364:	2b00      	cmp	r3, #0
 8004366:	d157      	bne.n	8004418 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004368:	2301      	movs	r3, #1
 800436a:	e242      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	685b      	ldr	r3, [r3, #4]
 8004370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004374:	d106      	bne.n	8004384 <HAL_RCC_OscConfig+0x74>
 8004376:	4b76      	ldr	r3, [pc, #472]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	4a75      	ldr	r2, [pc, #468]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 800437c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004380:	6013      	str	r3, [r2, #0]
 8004382:	e01d      	b.n	80043c0 <HAL_RCC_OscConfig+0xb0>
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	685b      	ldr	r3, [r3, #4]
 8004388:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800438c:	d10c      	bne.n	80043a8 <HAL_RCC_OscConfig+0x98>
 800438e:	4b70      	ldr	r3, [pc, #448]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	4a6f      	ldr	r2, [pc, #444]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004394:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004398:	6013      	str	r3, [r2, #0]
 800439a:	4b6d      	ldr	r3, [pc, #436]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	4a6c      	ldr	r2, [pc, #432]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 80043a0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80043a4:	6013      	str	r3, [r2, #0]
 80043a6:	e00b      	b.n	80043c0 <HAL_RCC_OscConfig+0xb0>
 80043a8:	4b69      	ldr	r3, [pc, #420]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	4a68      	ldr	r2, [pc, #416]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 80043ae:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80043b2:	6013      	str	r3, [r2, #0]
 80043b4:	4b66      	ldr	r3, [pc, #408]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	4a65      	ldr	r2, [pc, #404]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 80043ba:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80043be:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	685b      	ldr	r3, [r3, #4]
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d013      	beq.n	80043f0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043c8:	f7fe fb02 	bl	80029d0 <HAL_GetTick>
 80043cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043ce:	e008      	b.n	80043e2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043d0:	f7fe fafe 	bl	80029d0 <HAL_GetTick>
 80043d4:	4602      	mov	r2, r0
 80043d6:	693b      	ldr	r3, [r7, #16]
 80043d8:	1ad3      	subs	r3, r2, r3
 80043da:	2b64      	cmp	r3, #100	@ 0x64
 80043dc:	d901      	bls.n	80043e2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e207      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80043e2:	4b5b      	ldr	r3, [pc, #364]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d0f0      	beq.n	80043d0 <HAL_RCC_OscConfig+0xc0>
 80043ee:	e014      	b.n	800441a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043f0:	f7fe faee 	bl	80029d0 <HAL_GetTick>
 80043f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80043f6:	e008      	b.n	800440a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80043f8:	f7fe faea 	bl	80029d0 <HAL_GetTick>
 80043fc:	4602      	mov	r2, r0
 80043fe:	693b      	ldr	r3, [r7, #16]
 8004400:	1ad3      	subs	r3, r2, r3
 8004402:	2b64      	cmp	r3, #100	@ 0x64
 8004404:	d901      	bls.n	800440a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004406:	2303      	movs	r3, #3
 8004408:	e1f3      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800440a:	4b51      	ldr	r3, [pc, #324]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004412:	2b00      	cmp	r3, #0
 8004414:	d1f0      	bne.n	80043f8 <HAL_RCC_OscConfig+0xe8>
 8004416:	e000      	b.n	800441a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004418:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f003 0302 	and.w	r3, r3, #2
 8004422:	2b00      	cmp	r3, #0
 8004424:	d063      	beq.n	80044ee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004426:	4b4a      	ldr	r3, [pc, #296]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	f003 030c 	and.w	r3, r3, #12
 800442e:	2b00      	cmp	r3, #0
 8004430:	d00b      	beq.n	800444a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004432:	4b47      	ldr	r3, [pc, #284]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800443a:	2b08      	cmp	r3, #8
 800443c:	d11c      	bne.n	8004478 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800443e:	4b44      	ldr	r3, [pc, #272]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004446:	2b00      	cmp	r3, #0
 8004448:	d116      	bne.n	8004478 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800444a:	4b41      	ldr	r3, [pc, #260]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	f003 0302 	and.w	r3, r3, #2
 8004452:	2b00      	cmp	r3, #0
 8004454:	d005      	beq.n	8004462 <HAL_RCC_OscConfig+0x152>
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	68db      	ldr	r3, [r3, #12]
 800445a:	2b01      	cmp	r3, #1
 800445c:	d001      	beq.n	8004462 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e1c7      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004462:	4b3b      	ldr	r3, [pc, #236]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	691b      	ldr	r3, [r3, #16]
 800446e:	00db      	lsls	r3, r3, #3
 8004470:	4937      	ldr	r1, [pc, #220]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004472:	4313      	orrs	r3, r2
 8004474:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004476:	e03a      	b.n	80044ee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	68db      	ldr	r3, [r3, #12]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d020      	beq.n	80044c2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004480:	4b34      	ldr	r3, [pc, #208]	@ (8004554 <HAL_RCC_OscConfig+0x244>)
 8004482:	2201      	movs	r2, #1
 8004484:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004486:	f7fe faa3 	bl	80029d0 <HAL_GetTick>
 800448a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800448c:	e008      	b.n	80044a0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800448e:	f7fe fa9f 	bl	80029d0 <HAL_GetTick>
 8004492:	4602      	mov	r2, r0
 8004494:	693b      	ldr	r3, [r7, #16]
 8004496:	1ad3      	subs	r3, r2, r3
 8004498:	2b02      	cmp	r3, #2
 800449a:	d901      	bls.n	80044a0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800449c:	2303      	movs	r3, #3
 800449e:	e1a8      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044a0:	4b2b      	ldr	r3, [pc, #172]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 80044a2:	681b      	ldr	r3, [r3, #0]
 80044a4:	f003 0302 	and.w	r3, r3, #2
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d0f0      	beq.n	800448e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80044ac:	4b28      	ldr	r3, [pc, #160]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	691b      	ldr	r3, [r3, #16]
 80044b8:	00db      	lsls	r3, r3, #3
 80044ba:	4925      	ldr	r1, [pc, #148]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 80044bc:	4313      	orrs	r3, r2
 80044be:	600b      	str	r3, [r1, #0]
 80044c0:	e015      	b.n	80044ee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80044c2:	4b24      	ldr	r3, [pc, #144]	@ (8004554 <HAL_RCC_OscConfig+0x244>)
 80044c4:	2200      	movs	r2, #0
 80044c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80044c8:	f7fe fa82 	bl	80029d0 <HAL_GetTick>
 80044cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044ce:	e008      	b.n	80044e2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80044d0:	f7fe fa7e 	bl	80029d0 <HAL_GetTick>
 80044d4:	4602      	mov	r2, r0
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	1ad3      	subs	r3, r2, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d901      	bls.n	80044e2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80044de:	2303      	movs	r3, #3
 80044e0:	e187      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80044e2:	4b1b      	ldr	r3, [pc, #108]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 0302 	and.w	r3, r3, #2
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d1f0      	bne.n	80044d0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	f003 0308 	and.w	r3, r3, #8
 80044f6:	2b00      	cmp	r3, #0
 80044f8:	d036      	beq.n	8004568 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	695b      	ldr	r3, [r3, #20]
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d016      	beq.n	8004530 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004502:	4b15      	ldr	r3, [pc, #84]	@ (8004558 <HAL_RCC_OscConfig+0x248>)
 8004504:	2201      	movs	r2, #1
 8004506:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004508:	f7fe fa62 	bl	80029d0 <HAL_GetTick>
 800450c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800450e:	e008      	b.n	8004522 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004510:	f7fe fa5e 	bl	80029d0 <HAL_GetTick>
 8004514:	4602      	mov	r2, r0
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	1ad3      	subs	r3, r2, r3
 800451a:	2b02      	cmp	r3, #2
 800451c:	d901      	bls.n	8004522 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800451e:	2303      	movs	r3, #3
 8004520:	e167      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004522:	4b0b      	ldr	r3, [pc, #44]	@ (8004550 <HAL_RCC_OscConfig+0x240>)
 8004524:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004526:	f003 0302 	and.w	r3, r3, #2
 800452a:	2b00      	cmp	r3, #0
 800452c:	d0f0      	beq.n	8004510 <HAL_RCC_OscConfig+0x200>
 800452e:	e01b      	b.n	8004568 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004530:	4b09      	ldr	r3, [pc, #36]	@ (8004558 <HAL_RCC_OscConfig+0x248>)
 8004532:	2200      	movs	r2, #0
 8004534:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004536:	f7fe fa4b 	bl	80029d0 <HAL_GetTick>
 800453a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800453c:	e00e      	b.n	800455c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800453e:	f7fe fa47 	bl	80029d0 <HAL_GetTick>
 8004542:	4602      	mov	r2, r0
 8004544:	693b      	ldr	r3, [r7, #16]
 8004546:	1ad3      	subs	r3, r2, r3
 8004548:	2b02      	cmp	r3, #2
 800454a:	d907      	bls.n	800455c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800454c:	2303      	movs	r3, #3
 800454e:	e150      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
 8004550:	40023800 	.word	0x40023800
 8004554:	42470000 	.word	0x42470000
 8004558:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800455c:	4b88      	ldr	r3, [pc, #544]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 800455e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004560:	f003 0302 	and.w	r3, r3, #2
 8004564:	2b00      	cmp	r3, #0
 8004566:	d1ea      	bne.n	800453e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f003 0304 	and.w	r3, r3, #4
 8004570:	2b00      	cmp	r3, #0
 8004572:	f000 8097 	beq.w	80046a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004576:	2300      	movs	r3, #0
 8004578:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800457a:	4b81      	ldr	r3, [pc, #516]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 800457c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800457e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004582:	2b00      	cmp	r3, #0
 8004584:	d10f      	bne.n	80045a6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	4b7d      	ldr	r3, [pc, #500]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 800458c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800458e:	4a7c      	ldr	r2, [pc, #496]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 8004590:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004594:	6413      	str	r3, [r2, #64]	@ 0x40
 8004596:	4b7a      	ldr	r3, [pc, #488]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 8004598:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800459e:	60bb      	str	r3, [r7, #8]
 80045a0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80045a2:	2301      	movs	r3, #1
 80045a4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045a6:	4b77      	ldr	r3, [pc, #476]	@ (8004784 <HAL_RCC_OscConfig+0x474>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045ae:	2b00      	cmp	r3, #0
 80045b0:	d118      	bne.n	80045e4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80045b2:	4b74      	ldr	r3, [pc, #464]	@ (8004784 <HAL_RCC_OscConfig+0x474>)
 80045b4:	681b      	ldr	r3, [r3, #0]
 80045b6:	4a73      	ldr	r2, [pc, #460]	@ (8004784 <HAL_RCC_OscConfig+0x474>)
 80045b8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80045bc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80045be:	f7fe fa07 	bl	80029d0 <HAL_GetTick>
 80045c2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045c4:	e008      	b.n	80045d8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80045c6:	f7fe fa03 	bl	80029d0 <HAL_GetTick>
 80045ca:	4602      	mov	r2, r0
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	1ad3      	subs	r3, r2, r3
 80045d0:	2b02      	cmp	r3, #2
 80045d2:	d901      	bls.n	80045d8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80045d4:	2303      	movs	r3, #3
 80045d6:	e10c      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80045d8:	4b6a      	ldr	r3, [pc, #424]	@ (8004784 <HAL_RCC_OscConfig+0x474>)
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80045e0:	2b00      	cmp	r3, #0
 80045e2:	d0f0      	beq.n	80045c6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	689b      	ldr	r3, [r3, #8]
 80045e8:	2b01      	cmp	r3, #1
 80045ea:	d106      	bne.n	80045fa <HAL_RCC_OscConfig+0x2ea>
 80045ec:	4b64      	ldr	r3, [pc, #400]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 80045ee:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80045f0:	4a63      	ldr	r2, [pc, #396]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 80045f2:	f043 0301 	orr.w	r3, r3, #1
 80045f6:	6713      	str	r3, [r2, #112]	@ 0x70
 80045f8:	e01c      	b.n	8004634 <HAL_RCC_OscConfig+0x324>
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	689b      	ldr	r3, [r3, #8]
 80045fe:	2b05      	cmp	r3, #5
 8004600:	d10c      	bne.n	800461c <HAL_RCC_OscConfig+0x30c>
 8004602:	4b5f      	ldr	r3, [pc, #380]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 8004604:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004606:	4a5e      	ldr	r2, [pc, #376]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 8004608:	f043 0304 	orr.w	r3, r3, #4
 800460c:	6713      	str	r3, [r2, #112]	@ 0x70
 800460e:	4b5c      	ldr	r3, [pc, #368]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 8004610:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004612:	4a5b      	ldr	r2, [pc, #364]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 8004614:	f043 0301 	orr.w	r3, r3, #1
 8004618:	6713      	str	r3, [r2, #112]	@ 0x70
 800461a:	e00b      	b.n	8004634 <HAL_RCC_OscConfig+0x324>
 800461c:	4b58      	ldr	r3, [pc, #352]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 800461e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004620:	4a57      	ldr	r2, [pc, #348]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 8004622:	f023 0301 	bic.w	r3, r3, #1
 8004626:	6713      	str	r3, [r2, #112]	@ 0x70
 8004628:	4b55      	ldr	r3, [pc, #340]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 800462a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800462c:	4a54      	ldr	r2, [pc, #336]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 800462e:	f023 0304 	bic.w	r3, r3, #4
 8004632:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	689b      	ldr	r3, [r3, #8]
 8004638:	2b00      	cmp	r3, #0
 800463a:	d015      	beq.n	8004668 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800463c:	f7fe f9c8 	bl	80029d0 <HAL_GetTick>
 8004640:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004642:	e00a      	b.n	800465a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004644:	f7fe f9c4 	bl	80029d0 <HAL_GetTick>
 8004648:	4602      	mov	r2, r0
 800464a:	693b      	ldr	r3, [r7, #16]
 800464c:	1ad3      	subs	r3, r2, r3
 800464e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004652:	4293      	cmp	r3, r2
 8004654:	d901      	bls.n	800465a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004656:	2303      	movs	r3, #3
 8004658:	e0cb      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800465a:	4b49      	ldr	r3, [pc, #292]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 800465c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800465e:	f003 0302 	and.w	r3, r3, #2
 8004662:	2b00      	cmp	r3, #0
 8004664:	d0ee      	beq.n	8004644 <HAL_RCC_OscConfig+0x334>
 8004666:	e014      	b.n	8004692 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004668:	f7fe f9b2 	bl	80029d0 <HAL_GetTick>
 800466c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800466e:	e00a      	b.n	8004686 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004670:	f7fe f9ae 	bl	80029d0 <HAL_GetTick>
 8004674:	4602      	mov	r2, r0
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	1ad3      	subs	r3, r2, r3
 800467a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800467e:	4293      	cmp	r3, r2
 8004680:	d901      	bls.n	8004686 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004682:	2303      	movs	r3, #3
 8004684:	e0b5      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004686:	4b3e      	ldr	r3, [pc, #248]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 8004688:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800468a:	f003 0302 	and.w	r3, r3, #2
 800468e:	2b00      	cmp	r3, #0
 8004690:	d1ee      	bne.n	8004670 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004692:	7dfb      	ldrb	r3, [r7, #23]
 8004694:	2b01      	cmp	r3, #1
 8004696:	d105      	bne.n	80046a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004698:	4b39      	ldr	r3, [pc, #228]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 800469a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800469c:	4a38      	ldr	r2, [pc, #224]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 800469e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80046a2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	2b00      	cmp	r3, #0
 80046aa:	f000 80a1 	beq.w	80047f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80046ae:	4b34      	ldr	r3, [pc, #208]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 80046b0:	689b      	ldr	r3, [r3, #8]
 80046b2:	f003 030c 	and.w	r3, r3, #12
 80046b6:	2b08      	cmp	r3, #8
 80046b8:	d05c      	beq.n	8004774 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	699b      	ldr	r3, [r3, #24]
 80046be:	2b02      	cmp	r3, #2
 80046c0:	d141      	bne.n	8004746 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80046c2:	4b31      	ldr	r3, [pc, #196]	@ (8004788 <HAL_RCC_OscConfig+0x478>)
 80046c4:	2200      	movs	r2, #0
 80046c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80046c8:	f7fe f982 	bl	80029d0 <HAL_GetTick>
 80046cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046ce:	e008      	b.n	80046e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80046d0:	f7fe f97e 	bl	80029d0 <HAL_GetTick>
 80046d4:	4602      	mov	r2, r0
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	1ad3      	subs	r3, r2, r3
 80046da:	2b02      	cmp	r3, #2
 80046dc:	d901      	bls.n	80046e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80046de:	2303      	movs	r3, #3
 80046e0:	e087      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80046e2:	4b27      	ldr	r3, [pc, #156]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80046ea:	2b00      	cmp	r3, #0
 80046ec:	d1f0      	bne.n	80046d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	69da      	ldr	r2, [r3, #28]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a1b      	ldr	r3, [r3, #32]
 80046f6:	431a      	orrs	r2, r3
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046fc:	019b      	lsls	r3, r3, #6
 80046fe:	431a      	orrs	r2, r3
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004704:	085b      	lsrs	r3, r3, #1
 8004706:	3b01      	subs	r3, #1
 8004708:	041b      	lsls	r3, r3, #16
 800470a:	431a      	orrs	r2, r3
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004710:	061b      	lsls	r3, r3, #24
 8004712:	491b      	ldr	r1, [pc, #108]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 8004714:	4313      	orrs	r3, r2
 8004716:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004718:	4b1b      	ldr	r3, [pc, #108]	@ (8004788 <HAL_RCC_OscConfig+0x478>)
 800471a:	2201      	movs	r2, #1
 800471c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800471e:	f7fe f957 	bl	80029d0 <HAL_GetTick>
 8004722:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004724:	e008      	b.n	8004738 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004726:	f7fe f953 	bl	80029d0 <HAL_GetTick>
 800472a:	4602      	mov	r2, r0
 800472c:	693b      	ldr	r3, [r7, #16]
 800472e:	1ad3      	subs	r3, r2, r3
 8004730:	2b02      	cmp	r3, #2
 8004732:	d901      	bls.n	8004738 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004734:	2303      	movs	r3, #3
 8004736:	e05c      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004738:	4b11      	ldr	r3, [pc, #68]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004740:	2b00      	cmp	r3, #0
 8004742:	d0f0      	beq.n	8004726 <HAL_RCC_OscConfig+0x416>
 8004744:	e054      	b.n	80047f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004746:	4b10      	ldr	r3, [pc, #64]	@ (8004788 <HAL_RCC_OscConfig+0x478>)
 8004748:	2200      	movs	r2, #0
 800474a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800474c:	f7fe f940 	bl	80029d0 <HAL_GetTick>
 8004750:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004752:	e008      	b.n	8004766 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004754:	f7fe f93c 	bl	80029d0 <HAL_GetTick>
 8004758:	4602      	mov	r2, r0
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	1ad3      	subs	r3, r2, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d901      	bls.n	8004766 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004762:	2303      	movs	r3, #3
 8004764:	e045      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004766:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <HAL_RCC_OscConfig+0x470>)
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800476e:	2b00      	cmp	r3, #0
 8004770:	d1f0      	bne.n	8004754 <HAL_RCC_OscConfig+0x444>
 8004772:	e03d      	b.n	80047f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	699b      	ldr	r3, [r3, #24]
 8004778:	2b01      	cmp	r3, #1
 800477a:	d107      	bne.n	800478c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800477c:	2301      	movs	r3, #1
 800477e:	e038      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
 8004780:	40023800 	.word	0x40023800
 8004784:	40007000 	.word	0x40007000
 8004788:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800478c:	4b1b      	ldr	r3, [pc, #108]	@ (80047fc <HAL_RCC_OscConfig+0x4ec>)
 800478e:	685b      	ldr	r3, [r3, #4]
 8004790:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	2b01      	cmp	r3, #1
 8004798:	d028      	beq.n	80047ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800479a:	68fb      	ldr	r3, [r7, #12]
 800479c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80047a4:	429a      	cmp	r2, r3
 80047a6:	d121      	bne.n	80047ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80047b2:	429a      	cmp	r2, r3
 80047b4:	d11a      	bne.n	80047ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047b6:	68fa      	ldr	r2, [r7, #12]
 80047b8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80047bc:	4013      	ands	r3, r2
 80047be:	687a      	ldr	r2, [r7, #4]
 80047c0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80047c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80047c4:	4293      	cmp	r3, r2
 80047c6:	d111      	bne.n	80047ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80047d2:	085b      	lsrs	r3, r3, #1
 80047d4:	3b01      	subs	r3, #1
 80047d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80047d8:	429a      	cmp	r2, r3
 80047da:	d107      	bne.n	80047ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80047e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80047e8:	429a      	cmp	r2, r3
 80047ea:	d001      	beq.n	80047f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80047ec:	2301      	movs	r3, #1
 80047ee:	e000      	b.n	80047f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80047f0:	2300      	movs	r3, #0
}
 80047f2:	4618      	mov	r0, r3
 80047f4:	3718      	adds	r7, #24
 80047f6:	46bd      	mov	sp, r7
 80047f8:	bd80      	pop	{r7, pc}
 80047fa:	bf00      	nop
 80047fc:	40023800 	.word	0x40023800

08004800 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004800:	b580      	push	{r7, lr}
 8004802:	b084      	sub	sp, #16
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
 8004808:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	2b00      	cmp	r3, #0
 800480e:	d101      	bne.n	8004814 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004810:	2301      	movs	r3, #1
 8004812:	e0cc      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004814:	4b68      	ldr	r3, [pc, #416]	@ (80049b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004816:	681b      	ldr	r3, [r3, #0]
 8004818:	f003 0307 	and.w	r3, r3, #7
 800481c:	683a      	ldr	r2, [r7, #0]
 800481e:	429a      	cmp	r2, r3
 8004820:	d90c      	bls.n	800483c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004822:	4b65      	ldr	r3, [pc, #404]	@ (80049b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004824:	683a      	ldr	r2, [r7, #0]
 8004826:	b2d2      	uxtb	r2, r2
 8004828:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800482a:	4b63      	ldr	r3, [pc, #396]	@ (80049b8 <HAL_RCC_ClockConfig+0x1b8>)
 800482c:	681b      	ldr	r3, [r3, #0]
 800482e:	f003 0307 	and.w	r3, r3, #7
 8004832:	683a      	ldr	r2, [r7, #0]
 8004834:	429a      	cmp	r2, r3
 8004836:	d001      	beq.n	800483c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004838:	2301      	movs	r3, #1
 800483a:	e0b8      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f003 0302 	and.w	r3, r3, #2
 8004844:	2b00      	cmp	r3, #0
 8004846:	d020      	beq.n	800488a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f003 0304 	and.w	r3, r3, #4
 8004850:	2b00      	cmp	r3, #0
 8004852:	d005      	beq.n	8004860 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004854:	4b59      	ldr	r3, [pc, #356]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 8004856:	689b      	ldr	r3, [r3, #8]
 8004858:	4a58      	ldr	r2, [pc, #352]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 800485a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800485e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	f003 0308 	and.w	r3, r3, #8
 8004868:	2b00      	cmp	r3, #0
 800486a:	d005      	beq.n	8004878 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800486c:	4b53      	ldr	r3, [pc, #332]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 800486e:	689b      	ldr	r3, [r3, #8]
 8004870:	4a52      	ldr	r2, [pc, #328]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 8004872:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004876:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004878:	4b50      	ldr	r3, [pc, #320]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 800487a:	689b      	ldr	r3, [r3, #8]
 800487c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	689b      	ldr	r3, [r3, #8]
 8004884:	494d      	ldr	r1, [pc, #308]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 8004886:	4313      	orrs	r3, r2
 8004888:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	f003 0301 	and.w	r3, r3, #1
 8004892:	2b00      	cmp	r3, #0
 8004894:	d044      	beq.n	8004920 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	2b01      	cmp	r3, #1
 800489c:	d107      	bne.n	80048ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800489e:	4b47      	ldr	r3, [pc, #284]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d119      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e07f      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	685b      	ldr	r3, [r3, #4]
 80048b2:	2b02      	cmp	r3, #2
 80048b4:	d003      	beq.n	80048be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80048ba:	2b03      	cmp	r3, #3
 80048bc:	d107      	bne.n	80048ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80048be:	4b3f      	ldr	r3, [pc, #252]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d109      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048ca:	2301      	movs	r3, #1
 80048cc:	e06f      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80048ce:	4b3b      	ldr	r3, [pc, #236]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f003 0302 	and.w	r3, r3, #2
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	d101      	bne.n	80048de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80048da:	2301      	movs	r3, #1
 80048dc:	e067      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80048de:	4b37      	ldr	r3, [pc, #220]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f023 0203 	bic.w	r2, r3, #3
 80048e6:	687b      	ldr	r3, [r7, #4]
 80048e8:	685b      	ldr	r3, [r3, #4]
 80048ea:	4934      	ldr	r1, [pc, #208]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 80048ec:	4313      	orrs	r3, r2
 80048ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80048f0:	f7fe f86e 	bl	80029d0 <HAL_GetTick>
 80048f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80048f6:	e00a      	b.n	800490e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80048f8:	f7fe f86a 	bl	80029d0 <HAL_GetTick>
 80048fc:	4602      	mov	r2, r0
 80048fe:	68fb      	ldr	r3, [r7, #12]
 8004900:	1ad3      	subs	r3, r2, r3
 8004902:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004906:	4293      	cmp	r3, r2
 8004908:	d901      	bls.n	800490e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800490a:	2303      	movs	r3, #3
 800490c:	e04f      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800490e:	4b2b      	ldr	r3, [pc, #172]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 8004910:	689b      	ldr	r3, [r3, #8]
 8004912:	f003 020c 	and.w	r2, r3, #12
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	685b      	ldr	r3, [r3, #4]
 800491a:	009b      	lsls	r3, r3, #2
 800491c:	429a      	cmp	r2, r3
 800491e:	d1eb      	bne.n	80048f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004920:	4b25      	ldr	r3, [pc, #148]	@ (80049b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	f003 0307 	and.w	r3, r3, #7
 8004928:	683a      	ldr	r2, [r7, #0]
 800492a:	429a      	cmp	r2, r3
 800492c:	d20c      	bcs.n	8004948 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800492e:	4b22      	ldr	r3, [pc, #136]	@ (80049b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004930:	683a      	ldr	r2, [r7, #0]
 8004932:	b2d2      	uxtb	r2, r2
 8004934:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004936:	4b20      	ldr	r3, [pc, #128]	@ (80049b8 <HAL_RCC_ClockConfig+0x1b8>)
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	683a      	ldr	r2, [r7, #0]
 8004940:	429a      	cmp	r2, r3
 8004942:	d001      	beq.n	8004948 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004944:	2301      	movs	r3, #1
 8004946:	e032      	b.n	80049ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	681b      	ldr	r3, [r3, #0]
 800494c:	f003 0304 	and.w	r3, r3, #4
 8004950:	2b00      	cmp	r3, #0
 8004952:	d008      	beq.n	8004966 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004954:	4b19      	ldr	r3, [pc, #100]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	68db      	ldr	r3, [r3, #12]
 8004960:	4916      	ldr	r1, [pc, #88]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 8004962:	4313      	orrs	r3, r2
 8004964:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f003 0308 	and.w	r3, r3, #8
 800496e:	2b00      	cmp	r3, #0
 8004970:	d009      	beq.n	8004986 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004972:	4b12      	ldr	r3, [pc, #72]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 8004974:	689b      	ldr	r3, [r3, #8]
 8004976:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	691b      	ldr	r3, [r3, #16]
 800497e:	00db      	lsls	r3, r3, #3
 8004980:	490e      	ldr	r1, [pc, #56]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 8004982:	4313      	orrs	r3, r2
 8004984:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004986:	f000 f821 	bl	80049cc <HAL_RCC_GetSysClockFreq>
 800498a:	4602      	mov	r2, r0
 800498c:	4b0b      	ldr	r3, [pc, #44]	@ (80049bc <HAL_RCC_ClockConfig+0x1bc>)
 800498e:	689b      	ldr	r3, [r3, #8]
 8004990:	091b      	lsrs	r3, r3, #4
 8004992:	f003 030f 	and.w	r3, r3, #15
 8004996:	490a      	ldr	r1, [pc, #40]	@ (80049c0 <HAL_RCC_ClockConfig+0x1c0>)
 8004998:	5ccb      	ldrb	r3, [r1, r3]
 800499a:	fa22 f303 	lsr.w	r3, r2, r3
 800499e:	4a09      	ldr	r2, [pc, #36]	@ (80049c4 <HAL_RCC_ClockConfig+0x1c4>)
 80049a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80049a2:	4b09      	ldr	r3, [pc, #36]	@ (80049c8 <HAL_RCC_ClockConfig+0x1c8>)
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	4618      	mov	r0, r3
 80049a8:	f7fd ffce 	bl	8002948 <HAL_InitTick>

  return HAL_OK;
 80049ac:	2300      	movs	r3, #0
}
 80049ae:	4618      	mov	r0, r3
 80049b0:	3710      	adds	r7, #16
 80049b2:	46bd      	mov	sp, r7
 80049b4:	bd80      	pop	{r7, pc}
 80049b6:	bf00      	nop
 80049b8:	40023c00 	.word	0x40023c00
 80049bc:	40023800 	.word	0x40023800
 80049c0:	0800751c 	.word	0x0800751c
 80049c4:	20000168 	.word	0x20000168
 80049c8:	2000016c 	.word	0x2000016c

080049cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80049cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80049d0:	b090      	sub	sp, #64	@ 0x40
 80049d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80049d4:	2300      	movs	r3, #0
 80049d6:	637b      	str	r3, [r7, #52]	@ 0x34
 80049d8:	2300      	movs	r3, #0
 80049da:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80049dc:	2300      	movs	r3, #0
 80049de:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80049e0:	2300      	movs	r3, #0
 80049e2:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80049e4:	4b59      	ldr	r3, [pc, #356]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x180>)
 80049e6:	689b      	ldr	r3, [r3, #8]
 80049e8:	f003 030c 	and.w	r3, r3, #12
 80049ec:	2b08      	cmp	r3, #8
 80049ee:	d00d      	beq.n	8004a0c <HAL_RCC_GetSysClockFreq+0x40>
 80049f0:	2b08      	cmp	r3, #8
 80049f2:	f200 80a1 	bhi.w	8004b38 <HAL_RCC_GetSysClockFreq+0x16c>
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d002      	beq.n	8004a00 <HAL_RCC_GetSysClockFreq+0x34>
 80049fa:	2b04      	cmp	r3, #4
 80049fc:	d003      	beq.n	8004a06 <HAL_RCC_GetSysClockFreq+0x3a>
 80049fe:	e09b      	b.n	8004b38 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004a00:	4b53      	ldr	r3, [pc, #332]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8004a02:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 8004a04:	e09b      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004a06:	4b53      	ldr	r3, [pc, #332]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a08:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004a0a:	e098      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004a0c:	4b4f      	ldr	r3, [pc, #316]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004a14:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004a16:	4b4d      	ldr	r3, [pc, #308]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004a1e:	2b00      	cmp	r3, #0
 8004a20:	d028      	beq.n	8004a74 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a22:	4b4a      	ldr	r3, [pc, #296]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	099b      	lsrs	r3, r3, #6
 8004a28:	2200      	movs	r2, #0
 8004a2a:	623b      	str	r3, [r7, #32]
 8004a2c:	627a      	str	r2, [r7, #36]	@ 0x24
 8004a2e:	6a3b      	ldr	r3, [r7, #32]
 8004a30:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8004a34:	2100      	movs	r1, #0
 8004a36:	4b47      	ldr	r3, [pc, #284]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a38:	fb03 f201 	mul.w	r2, r3, r1
 8004a3c:	2300      	movs	r3, #0
 8004a3e:	fb00 f303 	mul.w	r3, r0, r3
 8004a42:	4413      	add	r3, r2
 8004a44:	4a43      	ldr	r2, [pc, #268]	@ (8004b54 <HAL_RCC_GetSysClockFreq+0x188>)
 8004a46:	fba0 1202 	umull	r1, r2, r0, r2
 8004a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a4c:	460a      	mov	r2, r1
 8004a4e:	62ba      	str	r2, [r7, #40]	@ 0x28
 8004a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a52:	4413      	add	r3, r2
 8004a54:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004a56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a58:	2200      	movs	r2, #0
 8004a5a:	61bb      	str	r3, [r7, #24]
 8004a5c:	61fa      	str	r2, [r7, #28]
 8004a5e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004a62:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8004a66:	f7fb ff11 	bl	800088c <__aeabi_uldivmod>
 8004a6a:	4602      	mov	r2, r0
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	4613      	mov	r3, r2
 8004a70:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004a72:	e053      	b.n	8004b1c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004a74:	4b35      	ldr	r3, [pc, #212]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004a76:	685b      	ldr	r3, [r3, #4]
 8004a78:	099b      	lsrs	r3, r3, #6
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	613b      	str	r3, [r7, #16]
 8004a7e:	617a      	str	r2, [r7, #20]
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8004a86:	f04f 0b00 	mov.w	fp, #0
 8004a8a:	4652      	mov	r2, sl
 8004a8c:	465b      	mov	r3, fp
 8004a8e:	f04f 0000 	mov.w	r0, #0
 8004a92:	f04f 0100 	mov.w	r1, #0
 8004a96:	0159      	lsls	r1, r3, #5
 8004a98:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004a9c:	0150      	lsls	r0, r2, #5
 8004a9e:	4602      	mov	r2, r0
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	ebb2 080a 	subs.w	r8, r2, sl
 8004aa6:	eb63 090b 	sbc.w	r9, r3, fp
 8004aaa:	f04f 0200 	mov.w	r2, #0
 8004aae:	f04f 0300 	mov.w	r3, #0
 8004ab2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8004ab6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8004aba:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8004abe:	ebb2 0408 	subs.w	r4, r2, r8
 8004ac2:	eb63 0509 	sbc.w	r5, r3, r9
 8004ac6:	f04f 0200 	mov.w	r2, #0
 8004aca:	f04f 0300 	mov.w	r3, #0
 8004ace:	00eb      	lsls	r3, r5, #3
 8004ad0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004ad4:	00e2      	lsls	r2, r4, #3
 8004ad6:	4614      	mov	r4, r2
 8004ad8:	461d      	mov	r5, r3
 8004ada:	eb14 030a 	adds.w	r3, r4, sl
 8004ade:	603b      	str	r3, [r7, #0]
 8004ae0:	eb45 030b 	adc.w	r3, r5, fp
 8004ae4:	607b      	str	r3, [r7, #4]
 8004ae6:	f04f 0200 	mov.w	r2, #0
 8004aea:	f04f 0300 	mov.w	r3, #0
 8004aee:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004af2:	4629      	mov	r1, r5
 8004af4:	028b      	lsls	r3, r1, #10
 8004af6:	4621      	mov	r1, r4
 8004af8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004afc:	4621      	mov	r1, r4
 8004afe:	028a      	lsls	r2, r1, #10
 8004b00:	4610      	mov	r0, r2
 8004b02:	4619      	mov	r1, r3
 8004b04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b06:	2200      	movs	r2, #0
 8004b08:	60bb      	str	r3, [r7, #8]
 8004b0a:	60fa      	str	r2, [r7, #12]
 8004b0c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004b10:	f7fb febc 	bl	800088c <__aeabi_uldivmod>
 8004b14:	4602      	mov	r2, r0
 8004b16:	460b      	mov	r3, r1
 8004b18:	4613      	mov	r3, r2
 8004b1a:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8004b1c:	4b0b      	ldr	r3, [pc, #44]	@ (8004b4c <HAL_RCC_GetSysClockFreq+0x180>)
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	0c1b      	lsrs	r3, r3, #16
 8004b22:	f003 0303 	and.w	r3, r3, #3
 8004b26:	3301      	adds	r3, #1
 8004b28:	005b      	lsls	r3, r3, #1
 8004b2a:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8004b2c:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8004b2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b30:	fbb2 f3f3 	udiv	r3, r2, r3
 8004b34:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b36:	e002      	b.n	8004b3e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004b38:	4b05      	ldr	r3, [pc, #20]	@ (8004b50 <HAL_RCC_GetSysClockFreq+0x184>)
 8004b3a:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8004b3c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8004b3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8004b40:	4618      	mov	r0, r3
 8004b42:	3740      	adds	r7, #64	@ 0x40
 8004b44:	46bd      	mov	sp, r7
 8004b46:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b4a:	bf00      	nop
 8004b4c:	40023800 	.word	0x40023800
 8004b50:	00f42400 	.word	0x00f42400
 8004b54:	016e3600 	.word	0x016e3600

08004b58 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004b58:	b480      	push	{r7}
 8004b5a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004b5c:	4b03      	ldr	r3, [pc, #12]	@ (8004b6c <HAL_RCC_GetHCLKFreq+0x14>)
 8004b5e:	681b      	ldr	r3, [r3, #0]
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	46bd      	mov	sp, r7
 8004b64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b68:	4770      	bx	lr
 8004b6a:	bf00      	nop
 8004b6c:	20000168 	.word	0x20000168

08004b70 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004b70:	b580      	push	{r7, lr}
 8004b72:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004b74:	f7ff fff0 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	4b05      	ldr	r3, [pc, #20]	@ (8004b90 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	0a9b      	lsrs	r3, r3, #10
 8004b80:	f003 0307 	and.w	r3, r3, #7
 8004b84:	4903      	ldr	r1, [pc, #12]	@ (8004b94 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004b86:	5ccb      	ldrb	r3, [r1, r3]
 8004b88:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004b8c:	4618      	mov	r0, r3
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	40023800 	.word	0x40023800
 8004b94:	0800752c 	.word	0x0800752c

08004b98 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004b98:	b580      	push	{r7, lr}
 8004b9a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004b9c:	f7ff ffdc 	bl	8004b58 <HAL_RCC_GetHCLKFreq>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	4b05      	ldr	r3, [pc, #20]	@ (8004bb8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004ba4:	689b      	ldr	r3, [r3, #8]
 8004ba6:	0b5b      	lsrs	r3, r3, #13
 8004ba8:	f003 0307 	and.w	r3, r3, #7
 8004bac:	4903      	ldr	r1, [pc, #12]	@ (8004bbc <HAL_RCC_GetPCLK2Freq+0x24>)
 8004bae:	5ccb      	ldrb	r3, [r1, r3]
 8004bb0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004bb4:	4618      	mov	r0, r3
 8004bb6:	bd80      	pop	{r7, pc}
 8004bb8:	40023800 	.word	0x40023800
 8004bbc:	0800752c 	.word	0x0800752c

08004bc0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004bc0:	b580      	push	{r7, lr}
 8004bc2:	b082      	sub	sp, #8
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d101      	bne.n	8004bd2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004bce:	2301      	movs	r3, #1
 8004bd0:	e07b      	b.n	8004cca <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004bd6:	2b00      	cmp	r3, #0
 8004bd8:	d108      	bne.n	8004bec <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	685b      	ldr	r3, [r3, #4]
 8004bde:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004be2:	d009      	beq.n	8004bf8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	2200      	movs	r2, #0
 8004be8:	61da      	str	r2, [r3, #28]
 8004bea:	e005      	b.n	8004bf8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2200      	movs	r2, #0
 8004bf0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	2200      	movs	r2, #0
 8004bf6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	2200      	movs	r2, #0
 8004bfc:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004bfe:	687b      	ldr	r3, [r7, #4]
 8004c00:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004c04:	b2db      	uxtb	r3, r3
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d106      	bne.n	8004c18 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004c12:	6878      	ldr	r0, [r7, #4]
 8004c14:	f7fd faec 	bl	80021f0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	2202      	movs	r2, #2
 8004c1c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	681b      	ldr	r3, [r3, #0]
 8004c24:	681a      	ldr	r2, [r3, #0]
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004c2e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	685b      	ldr	r3, [r3, #4]
 8004c34:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	689b      	ldr	r3, [r3, #8]
 8004c3c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8004c40:	431a      	orrs	r2, r3
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68db      	ldr	r3, [r3, #12]
 8004c46:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8004c4a:	431a      	orrs	r2, r3
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	691b      	ldr	r3, [r3, #16]
 8004c50:	f003 0302 	and.w	r3, r3, #2
 8004c54:	431a      	orrs	r2, r3
 8004c56:	687b      	ldr	r3, [r7, #4]
 8004c58:	695b      	ldr	r3, [r3, #20]
 8004c5a:	f003 0301 	and.w	r3, r3, #1
 8004c5e:	431a      	orrs	r2, r3
 8004c60:	687b      	ldr	r3, [r7, #4]
 8004c62:	699b      	ldr	r3, [r3, #24]
 8004c64:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8004c68:	431a      	orrs	r2, r3
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	69db      	ldr	r3, [r3, #28]
 8004c6e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8004c72:	431a      	orrs	r2, r3
 8004c74:	687b      	ldr	r3, [r7, #4]
 8004c76:	6a1b      	ldr	r3, [r3, #32]
 8004c78:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004c7c:	ea42 0103 	orr.w	r1, r2, r3
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c84:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	681b      	ldr	r3, [r3, #0]
 8004c8c:	430a      	orrs	r2, r1
 8004c8e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	699b      	ldr	r3, [r3, #24]
 8004c94:	0c1b      	lsrs	r3, r3, #16
 8004c96:	f003 0104 	and.w	r1, r3, #4
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004c9e:	f003 0210 	and.w	r2, r3, #16
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	430a      	orrs	r2, r1
 8004ca8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	69da      	ldr	r2, [r3, #28]
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004cb8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	2200      	movs	r2, #0
 8004cbe:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8004cc8:	2300      	movs	r3, #0
}
 8004cca:	4618      	mov	r0, r3
 8004ccc:	3708      	adds	r7, #8
 8004cce:	46bd      	mov	sp, r7
 8004cd0:	bd80      	pop	{r7, pc}

08004cd2 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004cd2:	b580      	push	{r7, lr}
 8004cd4:	b082      	sub	sp, #8
 8004cd6:	af00      	add	r7, sp, #0
 8004cd8:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	d101      	bne.n	8004ce4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004ce0:	2301      	movs	r3, #1
 8004ce2:	e041      	b.n	8004d68 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004cea:	b2db      	uxtb	r3, r3
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d106      	bne.n	8004cfe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	2200      	movs	r2, #0
 8004cf4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004cf8:	6878      	ldr	r0, [r7, #4]
 8004cfa:	f7fd fae1 	bl	80022c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004cfe:	687b      	ldr	r3, [r7, #4]
 8004d00:	2202      	movs	r2, #2
 8004d02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	3304      	adds	r3, #4
 8004d0e:	4619      	mov	r1, r3
 8004d10:	4610      	mov	r0, r2
 8004d12:	f000 fd25 	bl	8005760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	2201      	movs	r2, #1
 8004d1a:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	2201      	movs	r2, #1
 8004d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	2201      	movs	r2, #1
 8004d2a:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	2201      	movs	r2, #1
 8004d32:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	2201      	movs	r2, #1
 8004d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2201      	movs	r2, #1
 8004d42:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	2201      	movs	r2, #1
 8004d4a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	2201      	movs	r2, #1
 8004d52:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	2201      	movs	r2, #1
 8004d5a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	2201      	movs	r2, #1
 8004d62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004d66:	2300      	movs	r3, #0
}
 8004d68:	4618      	mov	r0, r3
 8004d6a:	3708      	adds	r7, #8
 8004d6c:	46bd      	mov	sp, r7
 8004d6e:	bd80      	pop	{r7, pc}

08004d70 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004d70:	b580      	push	{r7, lr}
 8004d72:	b082      	sub	sp, #8
 8004d74:	af00      	add	r7, sp, #0
 8004d76:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d101      	bne.n	8004d82 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004d7e:	2301      	movs	r3, #1
 8004d80:	e041      	b.n	8004e06 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004d88:	b2db      	uxtb	r3, r3
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d106      	bne.n	8004d9c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	2200      	movs	r2, #0
 8004d92:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004d96:	6878      	ldr	r0, [r7, #4]
 8004d98:	f000 f839 	bl	8004e0e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	2202      	movs	r2, #2
 8004da0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	681a      	ldr	r2, [r3, #0]
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	3304      	adds	r3, #4
 8004dac:	4619      	mov	r1, r3
 8004dae:	4610      	mov	r0, r2
 8004db0:	f000 fcd6 	bl	8005760 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2201      	movs	r2, #1
 8004db8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2201      	movs	r2, #1
 8004dc0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	2201      	movs	r2, #1
 8004dc8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2201      	movs	r2, #1
 8004dd0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	2201      	movs	r2, #1
 8004dd8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2201      	movs	r2, #1
 8004de0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	2201      	movs	r2, #1
 8004de8:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	2201      	movs	r2, #1
 8004df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	2201      	movs	r2, #1
 8004df8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2201      	movs	r2, #1
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8004e04:	2300      	movs	r3, #0
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	3708      	adds	r7, #8
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	bd80      	pop	{r7, pc}

08004e0e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8004e0e:	b480      	push	{r7}
 8004e10:	b083      	sub	sp, #12
 8004e12:	af00      	add	r7, sp, #0
 8004e14:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8004e16:	bf00      	nop
 8004e18:	370c      	adds	r7, #12
 8004e1a:	46bd      	mov	sp, r7
 8004e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e20:	4770      	bx	lr
	...

08004e24 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e24:	b580      	push	{r7, lr}
 8004e26:	b084      	sub	sp, #16
 8004e28:	af00      	add	r7, sp, #0
 8004e2a:	6078      	str	r0, [r7, #4]
 8004e2c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004e2e:	683b      	ldr	r3, [r7, #0]
 8004e30:	2b00      	cmp	r3, #0
 8004e32:	d109      	bne.n	8004e48 <HAL_TIM_PWM_Start+0x24>
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8004e3a:	b2db      	uxtb	r3, r3
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	bf14      	ite	ne
 8004e40:	2301      	movne	r3, #1
 8004e42:	2300      	moveq	r3, #0
 8004e44:	b2db      	uxtb	r3, r3
 8004e46:	e022      	b.n	8004e8e <HAL_TIM_PWM_Start+0x6a>
 8004e48:	683b      	ldr	r3, [r7, #0]
 8004e4a:	2b04      	cmp	r3, #4
 8004e4c:	d109      	bne.n	8004e62 <HAL_TIM_PWM_Start+0x3e>
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8004e54:	b2db      	uxtb	r3, r3
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	bf14      	ite	ne
 8004e5a:	2301      	movne	r3, #1
 8004e5c:	2300      	moveq	r3, #0
 8004e5e:	b2db      	uxtb	r3, r3
 8004e60:	e015      	b.n	8004e8e <HAL_TIM_PWM_Start+0x6a>
 8004e62:	683b      	ldr	r3, [r7, #0]
 8004e64:	2b08      	cmp	r3, #8
 8004e66:	d109      	bne.n	8004e7c <HAL_TIM_PWM_Start+0x58>
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8004e6e:	b2db      	uxtb	r3, r3
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	bf14      	ite	ne
 8004e74:	2301      	movne	r3, #1
 8004e76:	2300      	moveq	r3, #0
 8004e78:	b2db      	uxtb	r3, r3
 8004e7a:	e008      	b.n	8004e8e <HAL_TIM_PWM_Start+0x6a>
 8004e7c:	687b      	ldr	r3, [r7, #4]
 8004e7e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	2b01      	cmp	r3, #1
 8004e86:	bf14      	ite	ne
 8004e88:	2301      	movne	r3, #1
 8004e8a:	2300      	moveq	r3, #0
 8004e8c:	b2db      	uxtb	r3, r3
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d001      	beq.n	8004e96 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004e92:	2301      	movs	r3, #1
 8004e94:	e07c      	b.n	8004f90 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d104      	bne.n	8004ea6 <HAL_TIM_PWM_Start+0x82>
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	2202      	movs	r2, #2
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004ea4:	e013      	b.n	8004ece <HAL_TIM_PWM_Start+0xaa>
 8004ea6:	683b      	ldr	r3, [r7, #0]
 8004ea8:	2b04      	cmp	r3, #4
 8004eaa:	d104      	bne.n	8004eb6 <HAL_TIM_PWM_Start+0x92>
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2202      	movs	r2, #2
 8004eb0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004eb4:	e00b      	b.n	8004ece <HAL_TIM_PWM_Start+0xaa>
 8004eb6:	683b      	ldr	r3, [r7, #0]
 8004eb8:	2b08      	cmp	r3, #8
 8004eba:	d104      	bne.n	8004ec6 <HAL_TIM_PWM_Start+0xa2>
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	2202      	movs	r2, #2
 8004ec0:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004ec4:	e003      	b.n	8004ece <HAL_TIM_PWM_Start+0xaa>
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	2202      	movs	r2, #2
 8004eca:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	681b      	ldr	r3, [r3, #0]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	6839      	ldr	r1, [r7, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f000 ff38 	bl	8005d4c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	4a2d      	ldr	r2, [pc, #180]	@ (8004f98 <HAL_TIM_PWM_Start+0x174>)
 8004ee2:	4293      	cmp	r3, r2
 8004ee4:	d004      	beq.n	8004ef0 <HAL_TIM_PWM_Start+0xcc>
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	4a2c      	ldr	r2, [pc, #176]	@ (8004f9c <HAL_TIM_PWM_Start+0x178>)
 8004eec:	4293      	cmp	r3, r2
 8004eee:	d101      	bne.n	8004ef4 <HAL_TIM_PWM_Start+0xd0>
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e000      	b.n	8004ef6 <HAL_TIM_PWM_Start+0xd2>
 8004ef4:	2300      	movs	r3, #0
 8004ef6:	2b00      	cmp	r3, #0
 8004ef8:	d007      	beq.n	8004f0a <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8004f08:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a22      	ldr	r2, [pc, #136]	@ (8004f98 <HAL_TIM_PWM_Start+0x174>)
 8004f10:	4293      	cmp	r3, r2
 8004f12:	d022      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004f1c:	d01d      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	4a1f      	ldr	r2, [pc, #124]	@ (8004fa0 <HAL_TIM_PWM_Start+0x17c>)
 8004f24:	4293      	cmp	r3, r2
 8004f26:	d018      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f28:	687b      	ldr	r3, [r7, #4]
 8004f2a:	681b      	ldr	r3, [r3, #0]
 8004f2c:	4a1d      	ldr	r2, [pc, #116]	@ (8004fa4 <HAL_TIM_PWM_Start+0x180>)
 8004f2e:	4293      	cmp	r3, r2
 8004f30:	d013      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a1c      	ldr	r2, [pc, #112]	@ (8004fa8 <HAL_TIM_PWM_Start+0x184>)
 8004f38:	4293      	cmp	r3, r2
 8004f3a:	d00e      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a16      	ldr	r2, [pc, #88]	@ (8004f9c <HAL_TIM_PWM_Start+0x178>)
 8004f42:	4293      	cmp	r3, r2
 8004f44:	d009      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	4a18      	ldr	r2, [pc, #96]	@ (8004fac <HAL_TIM_PWM_Start+0x188>)
 8004f4c:	4293      	cmp	r3, r2
 8004f4e:	d004      	beq.n	8004f5a <HAL_TIM_PWM_Start+0x136>
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	4a16      	ldr	r2, [pc, #88]	@ (8004fb0 <HAL_TIM_PWM_Start+0x18c>)
 8004f56:	4293      	cmp	r3, r2
 8004f58:	d111      	bne.n	8004f7e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	689b      	ldr	r3, [r3, #8]
 8004f60:	f003 0307 	and.w	r3, r3, #7
 8004f64:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2b06      	cmp	r3, #6
 8004f6a:	d010      	beq.n	8004f8e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f042 0201 	orr.w	r2, r2, #1
 8004f7a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7c:	e007      	b.n	8004f8e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	681b      	ldr	r3, [r3, #0]
 8004f82:	681a      	ldr	r2, [r3, #0]
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	f042 0201 	orr.w	r2, r2, #1
 8004f8c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f8e:	2300      	movs	r3, #0
}
 8004f90:	4618      	mov	r0, r3
 8004f92:	3710      	adds	r7, #16
 8004f94:	46bd      	mov	sp, r7
 8004f96:	bd80      	pop	{r7, pc}
 8004f98:	40010000 	.word	0x40010000
 8004f9c:	40010400 	.word	0x40010400
 8004fa0:	40000400 	.word	0x40000400
 8004fa4:	40000800 	.word	0x40000800
 8004fa8:	40000c00 	.word	0x40000c00
 8004fac:	40014000 	.word	0x40014000
 8004fb0:	40001800 	.word	0x40001800

08004fb4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004fb4:	b580      	push	{r7, lr}
 8004fb6:	b086      	sub	sp, #24
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
 8004fbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d101      	bne.n	8004fc8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004fc4:	2301      	movs	r3, #1
 8004fc6:	e097      	b.n	80050f8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004fce:	b2db      	uxtb	r3, r3
 8004fd0:	2b00      	cmp	r3, #0
 8004fd2:	d106      	bne.n	8004fe2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8004fdc:	6878      	ldr	r0, [r7, #4]
 8004fde:	f7fd f9ef 	bl	80023c0 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	2202      	movs	r2, #2
 8004fe6:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	681b      	ldr	r3, [r3, #0]
 8004fee:	689b      	ldr	r3, [r3, #8]
 8004ff0:	687a      	ldr	r2, [r7, #4]
 8004ff2:	6812      	ldr	r2, [r2, #0]
 8004ff4:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004ff8:	f023 0307 	bic.w	r3, r3, #7
 8004ffc:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	681a      	ldr	r2, [r3, #0]
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	3304      	adds	r3, #4
 8005006:	4619      	mov	r1, r3
 8005008:	4610      	mov	r0, r2
 800500a:	f000 fba9 	bl	8005760 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	681b      	ldr	r3, [r3, #0]
 8005012:	689b      	ldr	r3, [r3, #8]
 8005014:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	699b      	ldr	r3, [r3, #24]
 800501c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	6a1b      	ldr	r3, [r3, #32]
 8005024:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005026:	683b      	ldr	r3, [r7, #0]
 8005028:	681b      	ldr	r3, [r3, #0]
 800502a:	697a      	ldr	r2, [r7, #20]
 800502c:	4313      	orrs	r3, r2
 800502e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005036:	f023 0303 	bic.w	r3, r3, #3
 800503a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	689a      	ldr	r2, [r3, #8]
 8005040:	683b      	ldr	r3, [r7, #0]
 8005042:	699b      	ldr	r3, [r3, #24]
 8005044:	021b      	lsls	r3, r3, #8
 8005046:	4313      	orrs	r3, r2
 8005048:	693a      	ldr	r2, [r7, #16]
 800504a:	4313      	orrs	r3, r2
 800504c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800504e:	693b      	ldr	r3, [r7, #16]
 8005050:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8005054:	f023 030c 	bic.w	r3, r3, #12
 8005058:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800505a:	693b      	ldr	r3, [r7, #16]
 800505c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005060:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005064:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	68da      	ldr	r2, [r3, #12]
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	021b      	lsls	r3, r3, #8
 8005070:	4313      	orrs	r3, r2
 8005072:	693a      	ldr	r2, [r7, #16]
 8005074:	4313      	orrs	r3, r2
 8005076:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005078:	683b      	ldr	r3, [r7, #0]
 800507a:	691b      	ldr	r3, [r3, #16]
 800507c:	011a      	lsls	r2, r3, #4
 800507e:	683b      	ldr	r3, [r7, #0]
 8005080:	6a1b      	ldr	r3, [r3, #32]
 8005082:	031b      	lsls	r3, r3, #12
 8005084:	4313      	orrs	r3, r2
 8005086:	693a      	ldr	r2, [r7, #16]
 8005088:	4313      	orrs	r3, r2
 800508a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800508c:	68fb      	ldr	r3, [r7, #12]
 800508e:	f023 0322 	bic.w	r3, r3, #34	@ 0x22
 8005092:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	f023 0388 	bic.w	r3, r3, #136	@ 0x88
 800509a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685a      	ldr	r2, [r3, #4]
 80050a0:	683b      	ldr	r3, [r7, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	011b      	lsls	r3, r3, #4
 80050a6:	4313      	orrs	r3, r2
 80050a8:	68fa      	ldr	r2, [r7, #12]
 80050aa:	4313      	orrs	r3, r2
 80050ac:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80050ae:	687b      	ldr	r3, [r7, #4]
 80050b0:	681b      	ldr	r3, [r3, #0]
 80050b2:	697a      	ldr	r2, [r7, #20]
 80050b4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	693a      	ldr	r2, [r7, #16]
 80050bc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	68fa      	ldr	r2, [r7, #12]
 80050c4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	2201      	movs	r2, #1
 80050ca:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	2201      	movs	r2, #1
 80050d2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	2201      	movs	r2, #1
 80050da:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	2201      	movs	r2, #1
 80050e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	2201      	movs	r2, #1
 80050ea:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	2201      	movs	r2, #1
 80050f2:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80050f6:	2300      	movs	r3, #0
}
 80050f8:	4618      	mov	r0, r3
 80050fa:	3718      	adds	r7, #24
 80050fc:	46bd      	mov	sp, r7
 80050fe:	bd80      	pop	{r7, pc}

08005100 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005100:	b580      	push	{r7, lr}
 8005102:	b084      	sub	sp, #16
 8005104:	af00      	add	r7, sp, #0
 8005106:	6078      	str	r0, [r7, #4]
 8005108:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8005110:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8005118:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800511a:	687b      	ldr	r3, [r7, #4]
 800511c:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005120:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	f893 3043 	ldrb.w	r3, [r3, #67]	@ 0x43
 8005128:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800512a:	683b      	ldr	r3, [r7, #0]
 800512c:	2b00      	cmp	r3, #0
 800512e:	d110      	bne.n	8005152 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005130:	7bfb      	ldrb	r3, [r7, #15]
 8005132:	2b01      	cmp	r3, #1
 8005134:	d102      	bne.n	800513c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005136:	7b7b      	ldrb	r3, [r7, #13]
 8005138:	2b01      	cmp	r3, #1
 800513a:	d001      	beq.n	8005140 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800513c:	2301      	movs	r3, #1
 800513e:	e069      	b.n	8005214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2202      	movs	r2, #2
 8005144:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	2202      	movs	r2, #2
 800514c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8005150:	e031      	b.n	80051b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	2b04      	cmp	r3, #4
 8005156:	d110      	bne.n	800517a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005158:	7bbb      	ldrb	r3, [r7, #14]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d102      	bne.n	8005164 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800515e:	7b3b      	ldrb	r3, [r7, #12]
 8005160:	2b01      	cmp	r3, #1
 8005162:	d001      	beq.n	8005168 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005164:	2301      	movs	r3, #1
 8005166:	e055      	b.n	8005214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	2202      	movs	r2, #2
 800516c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	2202      	movs	r2, #2
 8005174:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005178:	e01d      	b.n	80051b6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800517a:	7bfb      	ldrb	r3, [r7, #15]
 800517c:	2b01      	cmp	r3, #1
 800517e:	d108      	bne.n	8005192 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005180:	7bbb      	ldrb	r3, [r7, #14]
 8005182:	2b01      	cmp	r3, #1
 8005184:	d105      	bne.n	8005192 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005186:	7b7b      	ldrb	r3, [r7, #13]
 8005188:	2b01      	cmp	r3, #1
 800518a:	d102      	bne.n	8005192 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800518c:	7b3b      	ldrb	r3, [r7, #12]
 800518e:	2b01      	cmp	r3, #1
 8005190:	d001      	beq.n	8005196 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005192:	2301      	movs	r3, #1
 8005194:	e03e      	b.n	8005214 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2202      	movs	r2, #2
 800519a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	2202      	movs	r2, #2
 80051a2:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	2202      	movs	r2, #2
 80051aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80051ae:	687b      	ldr	r3, [r7, #4]
 80051b0:	2202      	movs	r2, #2
 80051b2:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d003      	beq.n	80051c4 <HAL_TIM_Encoder_Start+0xc4>
 80051bc:	683b      	ldr	r3, [r7, #0]
 80051be:	2b04      	cmp	r3, #4
 80051c0:	d008      	beq.n	80051d4 <HAL_TIM_Encoder_Start+0xd4>
 80051c2:	e00f      	b.n	80051e4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	681b      	ldr	r3, [r3, #0]
 80051c8:	2201      	movs	r2, #1
 80051ca:	2100      	movs	r1, #0
 80051cc:	4618      	mov	r0, r3
 80051ce:	f000 fdbd 	bl	8005d4c <TIM_CCxChannelCmd>
      break;
 80051d2:	e016      	b.n	8005202 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	2201      	movs	r2, #1
 80051da:	2104      	movs	r1, #4
 80051dc:	4618      	mov	r0, r3
 80051de:	f000 fdb5 	bl	8005d4c <TIM_CCxChannelCmd>
      break;
 80051e2:	e00e      	b.n	8005202 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	681b      	ldr	r3, [r3, #0]
 80051e8:	2201      	movs	r2, #1
 80051ea:	2100      	movs	r1, #0
 80051ec:	4618      	mov	r0, r3
 80051ee:	f000 fdad 	bl	8005d4c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80051f2:	687b      	ldr	r3, [r7, #4]
 80051f4:	681b      	ldr	r3, [r3, #0]
 80051f6:	2201      	movs	r2, #1
 80051f8:	2104      	movs	r1, #4
 80051fa:	4618      	mov	r0, r3
 80051fc:	f000 fda6 	bl	8005d4c <TIM_CCxChannelCmd>
      break;
 8005200:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	681a      	ldr	r2, [r3, #0]
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681b      	ldr	r3, [r3, #0]
 800520c:	f042 0201 	orr.w	r2, r2, #1
 8005210:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005212:	2300      	movs	r3, #0
}
 8005214:	4618      	mov	r0, r3
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	68db      	ldr	r3, [r3, #12]
 800522a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	691b      	ldr	r3, [r3, #16]
 8005232:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8005234:	68bb      	ldr	r3, [r7, #8]
 8005236:	f003 0302 	and.w	r3, r3, #2
 800523a:	2b00      	cmp	r3, #0
 800523c:	d020      	beq.n	8005280 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	f003 0302 	and.w	r3, r3, #2
 8005244:	2b00      	cmp	r3, #0
 8005246:	d01b      	beq.n	8005280 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f06f 0202 	mvn.w	r2, #2
 8005250:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	2201      	movs	r2, #1
 8005256:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	699b      	ldr	r3, [r3, #24]
 800525e:	f003 0303 	and.w	r3, r3, #3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d003      	beq.n	800526e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005266:	6878      	ldr	r0, [r7, #4]
 8005268:	f000 fa5b 	bl	8005722 <HAL_TIM_IC_CaptureCallback>
 800526c:	e005      	b.n	800527a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800526e:	6878      	ldr	r0, [r7, #4]
 8005270:	f000 fa4d 	bl	800570e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005274:	6878      	ldr	r0, [r7, #4]
 8005276:	f000 fa5e 	bl	8005736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2200      	movs	r2, #0
 800527e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f003 0304 	and.w	r3, r3, #4
 8005286:	2b00      	cmp	r3, #0
 8005288:	d020      	beq.n	80052cc <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800528a:	68fb      	ldr	r3, [r7, #12]
 800528c:	f003 0304 	and.w	r3, r3, #4
 8005290:	2b00      	cmp	r3, #0
 8005292:	d01b      	beq.n	80052cc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	681b      	ldr	r3, [r3, #0]
 8005298:	f06f 0204 	mvn.w	r2, #4
 800529c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2202      	movs	r2, #2
 80052a2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	699b      	ldr	r3, [r3, #24]
 80052aa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d003      	beq.n	80052ba <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052b2:	6878      	ldr	r0, [r7, #4]
 80052b4:	f000 fa35 	bl	8005722 <HAL_TIM_IC_CaptureCallback>
 80052b8:	e005      	b.n	80052c6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052ba:	6878      	ldr	r0, [r7, #4]
 80052bc:	f000 fa27 	bl	800570e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052c0:	6878      	ldr	r0, [r7, #4]
 80052c2:	f000 fa38 	bl	8005736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	2200      	movs	r2, #0
 80052ca:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80052cc:	68bb      	ldr	r3, [r7, #8]
 80052ce:	f003 0308 	and.w	r3, r3, #8
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d020      	beq.n	8005318 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80052d6:	68fb      	ldr	r3, [r7, #12]
 80052d8:	f003 0308 	and.w	r3, r3, #8
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d01b      	beq.n	8005318 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f06f 0208 	mvn.w	r2, #8
 80052e8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2204      	movs	r2, #4
 80052ee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	69db      	ldr	r3, [r3, #28]
 80052f6:	f003 0303 	and.w	r3, r3, #3
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d003      	beq.n	8005306 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052fe:	6878      	ldr	r0, [r7, #4]
 8005300:	f000 fa0f 	bl	8005722 <HAL_TIM_IC_CaptureCallback>
 8005304:	e005      	b.n	8005312 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005306:	6878      	ldr	r0, [r7, #4]
 8005308:	f000 fa01 	bl	800570e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800530c:	6878      	ldr	r0, [r7, #4]
 800530e:	f000 fa12 	bl	8005736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	2200      	movs	r2, #0
 8005316:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8005318:	68bb      	ldr	r3, [r7, #8]
 800531a:	f003 0310 	and.w	r3, r3, #16
 800531e:	2b00      	cmp	r3, #0
 8005320:	d020      	beq.n	8005364 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8005322:	68fb      	ldr	r3, [r7, #12]
 8005324:	f003 0310 	and.w	r3, r3, #16
 8005328:	2b00      	cmp	r3, #0
 800532a:	d01b      	beq.n	8005364 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f06f 0210 	mvn.w	r2, #16
 8005334:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	2208      	movs	r2, #8
 800533a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	69db      	ldr	r3, [r3, #28]
 8005342:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8005346:	2b00      	cmp	r3, #0
 8005348:	d003      	beq.n	8005352 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f9e9 	bl	8005722 <HAL_TIM_IC_CaptureCallback>
 8005350:	e005      	b.n	800535e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005352:	6878      	ldr	r0, [r7, #4]
 8005354:	f000 f9db 	bl	800570e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005358:	6878      	ldr	r0, [r7, #4]
 800535a:	f000 f9ec 	bl	8005736 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	2200      	movs	r2, #0
 8005362:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8005364:	68bb      	ldr	r3, [r7, #8]
 8005366:	f003 0301 	and.w	r3, r3, #1
 800536a:	2b00      	cmp	r3, #0
 800536c:	d00c      	beq.n	8005388 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	f003 0301 	and.w	r3, r3, #1
 8005374:	2b00      	cmp	r3, #0
 8005376:	d007      	beq.n	8005388 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	681b      	ldr	r3, [r3, #0]
 800537c:	f06f 0201 	mvn.w	r2, #1
 8005380:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005382:	6878      	ldr	r0, [r7, #4]
 8005384:	f7fc fc34 	bl	8001bf0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8005388:	68bb      	ldr	r3, [r7, #8]
 800538a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800538e:	2b00      	cmp	r3, #0
 8005390:	d00c      	beq.n	80053ac <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8005392:	68fb      	ldr	r3, [r7, #12]
 8005394:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005398:	2b00      	cmp	r3, #0
 800539a:	d007      	beq.n	80053ac <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80053a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80053a6:	6878      	ldr	r0, [r7, #4]
 80053a8:	f000 fdce 	bl	8005f48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80053ac:	68bb      	ldr	r3, [r7, #8]
 80053ae:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d00c      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80053bc:	2b00      	cmp	r3, #0
 80053be:	d007      	beq.n	80053d0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80053c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053ca:	6878      	ldr	r0, [r7, #4]
 80053cc:	f000 f9bd 	bl	800574a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00c      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80053da:	68fb      	ldr	r3, [r7, #12]
 80053dc:	f003 0320 	and.w	r3, r3, #32
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	d007      	beq.n	80053f4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f06f 0220 	mvn.w	r2, #32
 80053ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053ee:	6878      	ldr	r0, [r7, #4]
 80053f0:	f000 fda0 	bl	8005f34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053f4:	bf00      	nop
 80053f6:	3710      	adds	r7, #16
 80053f8:	46bd      	mov	sp, r7
 80053fa:	bd80      	pop	{r7, pc}

080053fc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80053fc:	b580      	push	{r7, lr}
 80053fe:	b086      	sub	sp, #24
 8005400:	af00      	add	r7, sp, #0
 8005402:	60f8      	str	r0, [r7, #12]
 8005404:	60b9      	str	r1, [r7, #8]
 8005406:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005408:	2300      	movs	r3, #0
 800540a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800540c:	68fb      	ldr	r3, [r7, #12]
 800540e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005412:	2b01      	cmp	r3, #1
 8005414:	d101      	bne.n	800541a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005416:	2302      	movs	r3, #2
 8005418:	e0ae      	b.n	8005578 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	2201      	movs	r2, #1
 800541e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	2b0c      	cmp	r3, #12
 8005426:	f200 809f 	bhi.w	8005568 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800542a:	a201      	add	r2, pc, #4	@ (adr r2, 8005430 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800542c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005430:	08005465 	.word	0x08005465
 8005434:	08005569 	.word	0x08005569
 8005438:	08005569 	.word	0x08005569
 800543c:	08005569 	.word	0x08005569
 8005440:	080054a5 	.word	0x080054a5
 8005444:	08005569 	.word	0x08005569
 8005448:	08005569 	.word	0x08005569
 800544c:	08005569 	.word	0x08005569
 8005450:	080054e7 	.word	0x080054e7
 8005454:	08005569 	.word	0x08005569
 8005458:	08005569 	.word	0x08005569
 800545c:	08005569 	.word	0x08005569
 8005460:	08005527 	.word	0x08005527
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005464:	68fb      	ldr	r3, [r7, #12]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	68b9      	ldr	r1, [r7, #8]
 800546a:	4618      	mov	r0, r3
 800546c:	f000 fa24 	bl	80058b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005470:	68fb      	ldr	r3, [r7, #12]
 8005472:	681b      	ldr	r3, [r3, #0]
 8005474:	699a      	ldr	r2, [r3, #24]
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	f042 0208 	orr.w	r2, r2, #8
 800547e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005480:	68fb      	ldr	r3, [r7, #12]
 8005482:	681b      	ldr	r3, [r3, #0]
 8005484:	699a      	ldr	r2, [r3, #24]
 8005486:	68fb      	ldr	r3, [r7, #12]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	f022 0204 	bic.w	r2, r2, #4
 800548e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005490:	68fb      	ldr	r3, [r7, #12]
 8005492:	681b      	ldr	r3, [r3, #0]
 8005494:	6999      	ldr	r1, [r3, #24]
 8005496:	68bb      	ldr	r3, [r7, #8]
 8005498:	691a      	ldr	r2, [r3, #16]
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	430a      	orrs	r2, r1
 80054a0:	619a      	str	r2, [r3, #24]
      break;
 80054a2:	e064      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80054a4:	68fb      	ldr	r3, [r7, #12]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	68b9      	ldr	r1, [r7, #8]
 80054aa:	4618      	mov	r0, r3
 80054ac:	f000 fa74 	bl	8005998 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80054b0:	68fb      	ldr	r3, [r7, #12]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	699a      	ldr	r2, [r3, #24]
 80054b6:	68fb      	ldr	r3, [r7, #12]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80054be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80054c0:	68fb      	ldr	r3, [r7, #12]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	699a      	ldr	r2, [r3, #24]
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80054ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	6999      	ldr	r1, [r3, #24]
 80054d6:	68bb      	ldr	r3, [r7, #8]
 80054d8:	691b      	ldr	r3, [r3, #16]
 80054da:	021a      	lsls	r2, r3, #8
 80054dc:	68fb      	ldr	r3, [r7, #12]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	430a      	orrs	r2, r1
 80054e2:	619a      	str	r2, [r3, #24]
      break;
 80054e4:	e043      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80054e6:	68fb      	ldr	r3, [r7, #12]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	68b9      	ldr	r1, [r7, #8]
 80054ec:	4618      	mov	r0, r3
 80054ee:	f000 fac9 	bl	8005a84 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	69da      	ldr	r2, [r3, #28]
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	f042 0208 	orr.w	r2, r2, #8
 8005500:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	69da      	ldr	r2, [r3, #28]
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	f022 0204 	bic.w	r2, r2, #4
 8005510:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005512:	68fb      	ldr	r3, [r7, #12]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	69d9      	ldr	r1, [r3, #28]
 8005518:	68bb      	ldr	r3, [r7, #8]
 800551a:	691a      	ldr	r2, [r3, #16]
 800551c:	68fb      	ldr	r3, [r7, #12]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	430a      	orrs	r2, r1
 8005522:	61da      	str	r2, [r3, #28]
      break;
 8005524:	e023      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005526:	68fb      	ldr	r3, [r7, #12]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	68b9      	ldr	r1, [r7, #8]
 800552c:	4618      	mov	r0, r3
 800552e:	f000 fb1d 	bl	8005b6c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005532:	68fb      	ldr	r3, [r7, #12]
 8005534:	681b      	ldr	r3, [r3, #0]
 8005536:	69da      	ldr	r2, [r3, #28]
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8005540:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005542:	68fb      	ldr	r3, [r7, #12]
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	69da      	ldr	r2, [r3, #28]
 8005548:	68fb      	ldr	r3, [r7, #12]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8005550:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005552:	68fb      	ldr	r3, [r7, #12]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	69d9      	ldr	r1, [r3, #28]
 8005558:	68bb      	ldr	r3, [r7, #8]
 800555a:	691b      	ldr	r3, [r3, #16]
 800555c:	021a      	lsls	r2, r3, #8
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	430a      	orrs	r2, r1
 8005564:	61da      	str	r2, [r3, #28]
      break;
 8005566:	e002      	b.n	800556e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005568:	2301      	movs	r3, #1
 800556a:	75fb      	strb	r3, [r7, #23]
      break;
 800556c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800556e:	68fb      	ldr	r3, [r7, #12]
 8005570:	2200      	movs	r2, #0
 8005572:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005576:	7dfb      	ldrb	r3, [r7, #23]
}
 8005578:	4618      	mov	r0, r3
 800557a:	3718      	adds	r7, #24
 800557c:	46bd      	mov	sp, r7
 800557e:	bd80      	pop	{r7, pc}

08005580 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005580:	b580      	push	{r7, lr}
 8005582:	b084      	sub	sp, #16
 8005584:	af00      	add	r7, sp, #0
 8005586:	6078      	str	r0, [r7, #4]
 8005588:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800558a:	2300      	movs	r3, #0
 800558c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005594:	2b01      	cmp	r3, #1
 8005596:	d101      	bne.n	800559c <HAL_TIM_ConfigClockSource+0x1c>
 8005598:	2302      	movs	r3, #2
 800559a:	e0b4      	b.n	8005706 <HAL_TIM_ConfigClockSource+0x186>
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2201      	movs	r2, #1
 80055a0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80055a4:	687b      	ldr	r3, [r7, #4]
 80055a6:	2202      	movs	r2, #2
 80055a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80055ac:	687b      	ldr	r3, [r7, #4]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	689b      	ldr	r3, [r3, #8]
 80055b2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80055b4:	68bb      	ldr	r3, [r7, #8]
 80055b6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80055ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80055bc:	68bb      	ldr	r3, [r7, #8]
 80055be:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80055c2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	68ba      	ldr	r2, [r7, #8]
 80055ca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80055cc:	683b      	ldr	r3, [r7, #0]
 80055ce:	681b      	ldr	r3, [r3, #0]
 80055d0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055d4:	d03e      	beq.n	8005654 <HAL_TIM_ConfigClockSource+0xd4>
 80055d6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80055da:	f200 8087 	bhi.w	80056ec <HAL_TIM_ConfigClockSource+0x16c>
 80055de:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055e2:	f000 8086 	beq.w	80056f2 <HAL_TIM_ConfigClockSource+0x172>
 80055e6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80055ea:	d87f      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x16c>
 80055ec:	2b70      	cmp	r3, #112	@ 0x70
 80055ee:	d01a      	beq.n	8005626 <HAL_TIM_ConfigClockSource+0xa6>
 80055f0:	2b70      	cmp	r3, #112	@ 0x70
 80055f2:	d87b      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x16c>
 80055f4:	2b60      	cmp	r3, #96	@ 0x60
 80055f6:	d050      	beq.n	800569a <HAL_TIM_ConfigClockSource+0x11a>
 80055f8:	2b60      	cmp	r3, #96	@ 0x60
 80055fa:	d877      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x16c>
 80055fc:	2b50      	cmp	r3, #80	@ 0x50
 80055fe:	d03c      	beq.n	800567a <HAL_TIM_ConfigClockSource+0xfa>
 8005600:	2b50      	cmp	r3, #80	@ 0x50
 8005602:	d873      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x16c>
 8005604:	2b40      	cmp	r3, #64	@ 0x40
 8005606:	d058      	beq.n	80056ba <HAL_TIM_ConfigClockSource+0x13a>
 8005608:	2b40      	cmp	r3, #64	@ 0x40
 800560a:	d86f      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x16c>
 800560c:	2b30      	cmp	r3, #48	@ 0x30
 800560e:	d064      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x15a>
 8005610:	2b30      	cmp	r3, #48	@ 0x30
 8005612:	d86b      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x16c>
 8005614:	2b20      	cmp	r3, #32
 8005616:	d060      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x15a>
 8005618:	2b20      	cmp	r3, #32
 800561a:	d867      	bhi.n	80056ec <HAL_TIM_ConfigClockSource+0x16c>
 800561c:	2b00      	cmp	r3, #0
 800561e:	d05c      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x15a>
 8005620:	2b10      	cmp	r3, #16
 8005622:	d05a      	beq.n	80056da <HAL_TIM_ConfigClockSource+0x15a>
 8005624:	e062      	b.n	80056ec <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800562a:	683b      	ldr	r3, [r7, #0]
 800562c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800562e:	683b      	ldr	r3, [r7, #0]
 8005630:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005632:	683b      	ldr	r3, [r7, #0]
 8005634:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005636:	f000 fb69 	bl	8005d0c <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	689b      	ldr	r3, [r3, #8]
 8005640:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005642:	68bb      	ldr	r3, [r7, #8]
 8005644:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8005648:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	68ba      	ldr	r2, [r7, #8]
 8005650:	609a      	str	r2, [r3, #8]
      break;
 8005652:	e04f      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8005658:	683b      	ldr	r3, [r7, #0]
 800565a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800565c:	683b      	ldr	r3, [r7, #0]
 800565e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8005660:	683b      	ldr	r3, [r7, #0]
 8005662:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8005664:	f000 fb52 	bl	8005d0c <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	681b      	ldr	r3, [r3, #0]
 800566c:	689a      	ldr	r2, [r3, #8]
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8005676:	609a      	str	r2, [r3, #8]
      break;
 8005678:	e03c      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800567e:	683b      	ldr	r3, [r7, #0]
 8005680:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8005682:	683b      	ldr	r3, [r7, #0]
 8005684:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005686:	461a      	mov	r2, r3
 8005688:	f000 fac6 	bl	8005c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	2150      	movs	r1, #80	@ 0x50
 8005692:	4618      	mov	r0, r3
 8005694:	f000 fb1f 	bl	8005cd6 <TIM_ITRx_SetConfig>
      break;
 8005698:	e02c      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800569e:	683b      	ldr	r3, [r7, #0]
 80056a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80056a6:	461a      	mov	r2, r3
 80056a8:	f000 fae5 	bl	8005c76 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80056ac:	687b      	ldr	r3, [r7, #4]
 80056ae:	681b      	ldr	r3, [r3, #0]
 80056b0:	2160      	movs	r1, #96	@ 0x60
 80056b2:	4618      	mov	r0, r3
 80056b4:	f000 fb0f 	bl	8005cd6 <TIM_ITRx_SetConfig>
      break;
 80056b8:	e01c      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80056be:	683b      	ldr	r3, [r7, #0]
 80056c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80056c2:	683b      	ldr	r3, [r7, #0]
 80056c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80056c6:	461a      	mov	r2, r3
 80056c8:	f000 faa6 	bl	8005c18 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	2140      	movs	r1, #64	@ 0x40
 80056d2:	4618      	mov	r0, r3
 80056d4:	f000 faff 	bl	8005cd6 <TIM_ITRx_SetConfig>
      break;
 80056d8:	e00c      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	681a      	ldr	r2, [r3, #0]
 80056de:	683b      	ldr	r3, [r7, #0]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	4619      	mov	r1, r3
 80056e4:	4610      	mov	r0, r2
 80056e6:	f000 faf6 	bl	8005cd6 <TIM_ITRx_SetConfig>
      break;
 80056ea:	e003      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80056ec:	2301      	movs	r3, #1
 80056ee:	73fb      	strb	r3, [r7, #15]
      break;
 80056f0:	e000      	b.n	80056f4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80056f2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	2201      	movs	r2, #1
 80056f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	2200      	movs	r2, #0
 8005700:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8005704:	7bfb      	ldrb	r3, [r7, #15]
}
 8005706:	4618      	mov	r0, r3
 8005708:	3710      	adds	r7, #16
 800570a:	46bd      	mov	sp, r7
 800570c:	bd80      	pop	{r7, pc}

0800570e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800570e:	b480      	push	{r7}
 8005710:	b083      	sub	sp, #12
 8005712:	af00      	add	r7, sp, #0
 8005714:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005716:	bf00      	nop
 8005718:	370c      	adds	r7, #12
 800571a:	46bd      	mov	sp, r7
 800571c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005720:	4770      	bx	lr

08005722 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005722:	b480      	push	{r7}
 8005724:	b083      	sub	sp, #12
 8005726:	af00      	add	r7, sp, #0
 8005728:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800572a:	bf00      	nop
 800572c:	370c      	adds	r7, #12
 800572e:	46bd      	mov	sp, r7
 8005730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005734:	4770      	bx	lr

08005736 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005736:	b480      	push	{r7}
 8005738:	b083      	sub	sp, #12
 800573a:	af00      	add	r7, sp, #0
 800573c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800573e:	bf00      	nop
 8005740:	370c      	adds	r7, #12
 8005742:	46bd      	mov	sp, r7
 8005744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005748:	4770      	bx	lr

0800574a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800574a:	b480      	push	{r7}
 800574c:	b083      	sub	sp, #12
 800574e:	af00      	add	r7, sp, #0
 8005750:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005752:	bf00      	nop
 8005754:	370c      	adds	r7, #12
 8005756:	46bd      	mov	sp, r7
 8005758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800575c:	4770      	bx	lr
	...

08005760 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8005760:	b480      	push	{r7}
 8005762:	b085      	sub	sp, #20
 8005764:	af00      	add	r7, sp, #0
 8005766:	6078      	str	r0, [r7, #4]
 8005768:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	681b      	ldr	r3, [r3, #0]
 800576e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	4a46      	ldr	r2, [pc, #280]	@ (800588c <TIM_Base_SetConfig+0x12c>)
 8005774:	4293      	cmp	r3, r2
 8005776:	d013      	beq.n	80057a0 <TIM_Base_SetConfig+0x40>
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800577e:	d00f      	beq.n	80057a0 <TIM_Base_SetConfig+0x40>
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	4a43      	ldr	r2, [pc, #268]	@ (8005890 <TIM_Base_SetConfig+0x130>)
 8005784:	4293      	cmp	r3, r2
 8005786:	d00b      	beq.n	80057a0 <TIM_Base_SetConfig+0x40>
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	4a42      	ldr	r2, [pc, #264]	@ (8005894 <TIM_Base_SetConfig+0x134>)
 800578c:	4293      	cmp	r3, r2
 800578e:	d007      	beq.n	80057a0 <TIM_Base_SetConfig+0x40>
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	4a41      	ldr	r2, [pc, #260]	@ (8005898 <TIM_Base_SetConfig+0x138>)
 8005794:	4293      	cmp	r3, r2
 8005796:	d003      	beq.n	80057a0 <TIM_Base_SetConfig+0x40>
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	4a40      	ldr	r2, [pc, #256]	@ (800589c <TIM_Base_SetConfig+0x13c>)
 800579c:	4293      	cmp	r3, r2
 800579e:	d108      	bne.n	80057b2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80057a6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80057a8:	683b      	ldr	r3, [r7, #0]
 80057aa:	685b      	ldr	r3, [r3, #4]
 80057ac:	68fa      	ldr	r2, [r7, #12]
 80057ae:	4313      	orrs	r3, r2
 80057b0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	4a35      	ldr	r2, [pc, #212]	@ (800588c <TIM_Base_SetConfig+0x12c>)
 80057b6:	4293      	cmp	r3, r2
 80057b8:	d02b      	beq.n	8005812 <TIM_Base_SetConfig+0xb2>
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80057c0:	d027      	beq.n	8005812 <TIM_Base_SetConfig+0xb2>
 80057c2:	687b      	ldr	r3, [r7, #4]
 80057c4:	4a32      	ldr	r2, [pc, #200]	@ (8005890 <TIM_Base_SetConfig+0x130>)
 80057c6:	4293      	cmp	r3, r2
 80057c8:	d023      	beq.n	8005812 <TIM_Base_SetConfig+0xb2>
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	4a31      	ldr	r2, [pc, #196]	@ (8005894 <TIM_Base_SetConfig+0x134>)
 80057ce:	4293      	cmp	r3, r2
 80057d0:	d01f      	beq.n	8005812 <TIM_Base_SetConfig+0xb2>
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	4a30      	ldr	r2, [pc, #192]	@ (8005898 <TIM_Base_SetConfig+0x138>)
 80057d6:	4293      	cmp	r3, r2
 80057d8:	d01b      	beq.n	8005812 <TIM_Base_SetConfig+0xb2>
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	4a2f      	ldr	r2, [pc, #188]	@ (800589c <TIM_Base_SetConfig+0x13c>)
 80057de:	4293      	cmp	r3, r2
 80057e0:	d017      	beq.n	8005812 <TIM_Base_SetConfig+0xb2>
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	4a2e      	ldr	r2, [pc, #184]	@ (80058a0 <TIM_Base_SetConfig+0x140>)
 80057e6:	4293      	cmp	r3, r2
 80057e8:	d013      	beq.n	8005812 <TIM_Base_SetConfig+0xb2>
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	4a2d      	ldr	r2, [pc, #180]	@ (80058a4 <TIM_Base_SetConfig+0x144>)
 80057ee:	4293      	cmp	r3, r2
 80057f0:	d00f      	beq.n	8005812 <TIM_Base_SetConfig+0xb2>
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	4a2c      	ldr	r2, [pc, #176]	@ (80058a8 <TIM_Base_SetConfig+0x148>)
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d00b      	beq.n	8005812 <TIM_Base_SetConfig+0xb2>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	4a2b      	ldr	r2, [pc, #172]	@ (80058ac <TIM_Base_SetConfig+0x14c>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d007      	beq.n	8005812 <TIM_Base_SetConfig+0xb2>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	4a2a      	ldr	r2, [pc, #168]	@ (80058b0 <TIM_Base_SetConfig+0x150>)
 8005806:	4293      	cmp	r3, r2
 8005808:	d003      	beq.n	8005812 <TIM_Base_SetConfig+0xb2>
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	4a29      	ldr	r2, [pc, #164]	@ (80058b4 <TIM_Base_SetConfig+0x154>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d108      	bne.n	8005824 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800581a:	683b      	ldr	r3, [r7, #0]
 800581c:	68db      	ldr	r3, [r3, #12]
 800581e:	68fa      	ldr	r2, [r7, #12]
 8005820:	4313      	orrs	r3, r2
 8005822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005824:	68fb      	ldr	r3, [r7, #12]
 8005826:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800582a:	683b      	ldr	r3, [r7, #0]
 800582c:	695b      	ldr	r3, [r3, #20]
 800582e:	4313      	orrs	r3, r2
 8005830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	68fa      	ldr	r2, [r7, #12]
 8005836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	689a      	ldr	r2, [r3, #8]
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005840:	683b      	ldr	r3, [r7, #0]
 8005842:	681a      	ldr	r2, [r3, #0]
 8005844:	687b      	ldr	r3, [r7, #4]
 8005846:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	4a10      	ldr	r2, [pc, #64]	@ (800588c <TIM_Base_SetConfig+0x12c>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d003      	beq.n	8005858 <TIM_Base_SetConfig+0xf8>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	4a12      	ldr	r2, [pc, #72]	@ (800589c <TIM_Base_SetConfig+0x13c>)
 8005854:	4293      	cmp	r3, r2
 8005856:	d103      	bne.n	8005860 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	691a      	ldr	r2, [r3, #16]
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2201      	movs	r2, #1
 8005864:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	691b      	ldr	r3, [r3, #16]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b01      	cmp	r3, #1
 8005870:	d105      	bne.n	800587e <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	691b      	ldr	r3, [r3, #16]
 8005876:	f023 0201 	bic.w	r2, r3, #1
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	611a      	str	r2, [r3, #16]
  }
}
 800587e:	bf00      	nop
 8005880:	3714      	adds	r7, #20
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
 800588a:	bf00      	nop
 800588c:	40010000 	.word	0x40010000
 8005890:	40000400 	.word	0x40000400
 8005894:	40000800 	.word	0x40000800
 8005898:	40000c00 	.word	0x40000c00
 800589c:	40010400 	.word	0x40010400
 80058a0:	40014000 	.word	0x40014000
 80058a4:	40014400 	.word	0x40014400
 80058a8:	40014800 	.word	0x40014800
 80058ac:	40001800 	.word	0x40001800
 80058b0:	40001c00 	.word	0x40001c00
 80058b4:	40002000 	.word	0x40002000

080058b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80058b8:	b480      	push	{r7}
 80058ba:	b087      	sub	sp, #28
 80058bc:	af00      	add	r7, sp, #0
 80058be:	6078      	str	r0, [r7, #4]
 80058c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	6a1b      	ldr	r3, [r3, #32]
 80058c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	6a1b      	ldr	r3, [r3, #32]
 80058cc:	f023 0201 	bic.w	r2, r3, #1
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	685b      	ldr	r3, [r3, #4]
 80058d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	699b      	ldr	r3, [r3, #24]
 80058de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80058e0:	68fb      	ldr	r3, [r7, #12]
 80058e2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80058e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80058e8:	68fb      	ldr	r3, [r7, #12]
 80058ea:	f023 0303 	bic.w	r3, r3, #3
 80058ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80058f0:	683b      	ldr	r3, [r7, #0]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	68fa      	ldr	r2, [r7, #12]
 80058f6:	4313      	orrs	r3, r2
 80058f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80058fa:	697b      	ldr	r3, [r7, #20]
 80058fc:	f023 0302 	bic.w	r3, r3, #2
 8005900:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005902:	683b      	ldr	r3, [r7, #0]
 8005904:	689b      	ldr	r3, [r3, #8]
 8005906:	697a      	ldr	r2, [r7, #20]
 8005908:	4313      	orrs	r3, r2
 800590a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	4a20      	ldr	r2, [pc, #128]	@ (8005990 <TIM_OC1_SetConfig+0xd8>)
 8005910:	4293      	cmp	r3, r2
 8005912:	d003      	beq.n	800591c <TIM_OC1_SetConfig+0x64>
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	4a1f      	ldr	r2, [pc, #124]	@ (8005994 <TIM_OC1_SetConfig+0xdc>)
 8005918:	4293      	cmp	r3, r2
 800591a:	d10c      	bne.n	8005936 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800591c:	697b      	ldr	r3, [r7, #20]
 800591e:	f023 0308 	bic.w	r3, r3, #8
 8005922:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005924:	683b      	ldr	r3, [r7, #0]
 8005926:	68db      	ldr	r3, [r3, #12]
 8005928:	697a      	ldr	r2, [r7, #20]
 800592a:	4313      	orrs	r3, r2
 800592c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800592e:	697b      	ldr	r3, [r7, #20]
 8005930:	f023 0304 	bic.w	r3, r3, #4
 8005934:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	4a15      	ldr	r2, [pc, #84]	@ (8005990 <TIM_OC1_SetConfig+0xd8>)
 800593a:	4293      	cmp	r3, r2
 800593c:	d003      	beq.n	8005946 <TIM_OC1_SetConfig+0x8e>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	4a14      	ldr	r2, [pc, #80]	@ (8005994 <TIM_OC1_SetConfig+0xdc>)
 8005942:	4293      	cmp	r3, r2
 8005944:	d111      	bne.n	800596a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005946:	693b      	ldr	r3, [r7, #16]
 8005948:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800594c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005954:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005956:	683b      	ldr	r3, [r7, #0]
 8005958:	695b      	ldr	r3, [r3, #20]
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	4313      	orrs	r3, r2
 800595e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	699b      	ldr	r3, [r3, #24]
 8005964:	693a      	ldr	r2, [r7, #16]
 8005966:	4313      	orrs	r3, r2
 8005968:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	693a      	ldr	r2, [r7, #16]
 800596e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	68fa      	ldr	r2, [r7, #12]
 8005974:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	685a      	ldr	r2, [r3, #4]
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	697a      	ldr	r2, [r7, #20]
 8005982:	621a      	str	r2, [r3, #32]
}
 8005984:	bf00      	nop
 8005986:	371c      	adds	r7, #28
 8005988:	46bd      	mov	sp, r7
 800598a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800598e:	4770      	bx	lr
 8005990:	40010000 	.word	0x40010000
 8005994:	40010400 	.word	0x40010400

08005998 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005998:	b480      	push	{r7}
 800599a:	b087      	sub	sp, #28
 800599c:	af00      	add	r7, sp, #0
 800599e:	6078      	str	r0, [r7, #4]
 80059a0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	6a1b      	ldr	r3, [r3, #32]
 80059ac:	f023 0210 	bic.w	r2, r3, #16
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	685b      	ldr	r3, [r3, #4]
 80059b8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	699b      	ldr	r3, [r3, #24]
 80059be:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80059c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80059ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	021b      	lsls	r3, r3, #8
 80059d6:	68fa      	ldr	r2, [r7, #12]
 80059d8:	4313      	orrs	r3, r2
 80059da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f023 0320 	bic.w	r3, r3, #32
 80059e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80059e4:	683b      	ldr	r3, [r7, #0]
 80059e6:	689b      	ldr	r3, [r3, #8]
 80059e8:	011b      	lsls	r3, r3, #4
 80059ea:	697a      	ldr	r2, [r7, #20]
 80059ec:	4313      	orrs	r3, r2
 80059ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	4a22      	ldr	r2, [pc, #136]	@ (8005a7c <TIM_OC2_SetConfig+0xe4>)
 80059f4:	4293      	cmp	r3, r2
 80059f6:	d003      	beq.n	8005a00 <TIM_OC2_SetConfig+0x68>
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	4a21      	ldr	r2, [pc, #132]	@ (8005a80 <TIM_OC2_SetConfig+0xe8>)
 80059fc:	4293      	cmp	r3, r2
 80059fe:	d10d      	bne.n	8005a1c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005a06:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005a08:	683b      	ldr	r3, [r7, #0]
 8005a0a:	68db      	ldr	r3, [r3, #12]
 8005a0c:	011b      	lsls	r3, r3, #4
 8005a0e:	697a      	ldr	r2, [r7, #20]
 8005a10:	4313      	orrs	r3, r2
 8005a12:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005a14:	697b      	ldr	r3, [r7, #20]
 8005a16:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005a1a:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	4a17      	ldr	r2, [pc, #92]	@ (8005a7c <TIM_OC2_SetConfig+0xe4>)
 8005a20:	4293      	cmp	r3, r2
 8005a22:	d003      	beq.n	8005a2c <TIM_OC2_SetConfig+0x94>
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	4a16      	ldr	r2, [pc, #88]	@ (8005a80 <TIM_OC2_SetConfig+0xe8>)
 8005a28:	4293      	cmp	r3, r2
 8005a2a:	d113      	bne.n	8005a54 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005a2c:	693b      	ldr	r3, [r7, #16]
 8005a2e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005a32:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005a34:	693b      	ldr	r3, [r7, #16]
 8005a36:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005a3a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	009b      	lsls	r3, r3, #2
 8005a42:	693a      	ldr	r2, [r7, #16]
 8005a44:	4313      	orrs	r3, r2
 8005a46:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005a48:	683b      	ldr	r3, [r7, #0]
 8005a4a:	699b      	ldr	r3, [r3, #24]
 8005a4c:	009b      	lsls	r3, r3, #2
 8005a4e:	693a      	ldr	r2, [r7, #16]
 8005a50:	4313      	orrs	r3, r2
 8005a52:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	693a      	ldr	r2, [r7, #16]
 8005a58:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	68fa      	ldr	r2, [r7, #12]
 8005a5e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005a60:	683b      	ldr	r3, [r7, #0]
 8005a62:	685a      	ldr	r2, [r3, #4]
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	697a      	ldr	r2, [r7, #20]
 8005a6c:	621a      	str	r2, [r3, #32]
}
 8005a6e:	bf00      	nop
 8005a70:	371c      	adds	r7, #28
 8005a72:	46bd      	mov	sp, r7
 8005a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a78:	4770      	bx	lr
 8005a7a:	bf00      	nop
 8005a7c:	40010000 	.word	0x40010000
 8005a80:	40010400 	.word	0x40010400

08005a84 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005a84:	b480      	push	{r7}
 8005a86:	b087      	sub	sp, #28
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
 8005a8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	6a1b      	ldr	r3, [r3, #32]
 8005a92:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6a1b      	ldr	r3, [r3, #32]
 8005a98:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	685b      	ldr	r3, [r3, #4]
 8005aa4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	69db      	ldr	r3, [r3, #28]
 8005aaa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005ab2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005ab4:	68fb      	ldr	r3, [r7, #12]
 8005ab6:	f023 0303 	bic.w	r3, r3, #3
 8005aba:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005abc:	683b      	ldr	r3, [r7, #0]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	68fa      	ldr	r2, [r7, #12]
 8005ac2:	4313      	orrs	r3, r2
 8005ac4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005ac6:	697b      	ldr	r3, [r7, #20]
 8005ac8:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8005acc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005ace:	683b      	ldr	r3, [r7, #0]
 8005ad0:	689b      	ldr	r3, [r3, #8]
 8005ad2:	021b      	lsls	r3, r3, #8
 8005ad4:	697a      	ldr	r2, [r7, #20]
 8005ad6:	4313      	orrs	r3, r2
 8005ad8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	4a21      	ldr	r2, [pc, #132]	@ (8005b64 <TIM_OC3_SetConfig+0xe0>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d003      	beq.n	8005aea <TIM_OC3_SetConfig+0x66>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	4a20      	ldr	r2, [pc, #128]	@ (8005b68 <TIM_OC3_SetConfig+0xe4>)
 8005ae6:	4293      	cmp	r3, r2
 8005ae8:	d10d      	bne.n	8005b06 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005aea:	697b      	ldr	r3, [r7, #20]
 8005aec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8005af0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005af2:	683b      	ldr	r3, [r7, #0]
 8005af4:	68db      	ldr	r3, [r3, #12]
 8005af6:	021b      	lsls	r3, r3, #8
 8005af8:	697a      	ldr	r2, [r7, #20]
 8005afa:	4313      	orrs	r3, r2
 8005afc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8005b04:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	4a16      	ldr	r2, [pc, #88]	@ (8005b64 <TIM_OC3_SetConfig+0xe0>)
 8005b0a:	4293      	cmp	r3, r2
 8005b0c:	d003      	beq.n	8005b16 <TIM_OC3_SetConfig+0x92>
 8005b0e:	687b      	ldr	r3, [r7, #4]
 8005b10:	4a15      	ldr	r2, [pc, #84]	@ (8005b68 <TIM_OC3_SetConfig+0xe4>)
 8005b12:	4293      	cmp	r3, r2
 8005b14:	d113      	bne.n	8005b3e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005b16:	693b      	ldr	r3, [r7, #16]
 8005b18:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8005b1c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005b1e:	693b      	ldr	r3, [r7, #16]
 8005b20:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005b24:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005b26:	683b      	ldr	r3, [r7, #0]
 8005b28:	695b      	ldr	r3, [r3, #20]
 8005b2a:	011b      	lsls	r3, r3, #4
 8005b2c:	693a      	ldr	r2, [r7, #16]
 8005b2e:	4313      	orrs	r3, r2
 8005b30:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005b32:	683b      	ldr	r3, [r7, #0]
 8005b34:	699b      	ldr	r3, [r3, #24]
 8005b36:	011b      	lsls	r3, r3, #4
 8005b38:	693a      	ldr	r2, [r7, #16]
 8005b3a:	4313      	orrs	r3, r2
 8005b3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	693a      	ldr	r2, [r7, #16]
 8005b42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	68fa      	ldr	r2, [r7, #12]
 8005b48:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005b4a:	683b      	ldr	r3, [r7, #0]
 8005b4c:	685a      	ldr	r2, [r3, #4]
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	697a      	ldr	r2, [r7, #20]
 8005b56:	621a      	str	r2, [r3, #32]
}
 8005b58:	bf00      	nop
 8005b5a:	371c      	adds	r7, #28
 8005b5c:	46bd      	mov	sp, r7
 8005b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b62:	4770      	bx	lr
 8005b64:	40010000 	.word	0x40010000
 8005b68:	40010400 	.word	0x40010400

08005b6c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b087      	sub	sp, #28
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
 8005b74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6a1b      	ldr	r3, [r3, #32]
 8005b7a:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	6a1b      	ldr	r3, [r3, #32]
 8005b80:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	685b      	ldr	r3, [r3, #4]
 8005b8c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	69db      	ldr	r3, [r3, #28]
 8005b92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8005b9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005b9c:	68fb      	ldr	r3, [r7, #12]
 8005b9e:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8005ba2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ba4:	683b      	ldr	r3, [r7, #0]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	021b      	lsls	r3, r3, #8
 8005baa:	68fa      	ldr	r2, [r7, #12]
 8005bac:	4313      	orrs	r3, r2
 8005bae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005bb0:	693b      	ldr	r3, [r7, #16]
 8005bb2:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8005bb6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	689b      	ldr	r3, [r3, #8]
 8005bbc:	031b      	lsls	r3, r3, #12
 8005bbe:	693a      	ldr	r2, [r7, #16]
 8005bc0:	4313      	orrs	r3, r2
 8005bc2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	4a12      	ldr	r2, [pc, #72]	@ (8005c10 <TIM_OC4_SetConfig+0xa4>)
 8005bc8:	4293      	cmp	r3, r2
 8005bca:	d003      	beq.n	8005bd4 <TIM_OC4_SetConfig+0x68>
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	4a11      	ldr	r2, [pc, #68]	@ (8005c14 <TIM_OC4_SetConfig+0xa8>)
 8005bd0:	4293      	cmp	r3, r2
 8005bd2:	d109      	bne.n	8005be8 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005bd4:	697b      	ldr	r3, [r7, #20]
 8005bd6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8005bda:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	695b      	ldr	r3, [r3, #20]
 8005be0:	019b      	lsls	r3, r3, #6
 8005be2:	697a      	ldr	r2, [r7, #20]
 8005be4:	4313      	orrs	r3, r2
 8005be6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	697a      	ldr	r2, [r7, #20]
 8005bec:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005bf4:	683b      	ldr	r3, [r7, #0]
 8005bf6:	685a      	ldr	r2, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	693a      	ldr	r2, [r7, #16]
 8005c00:	621a      	str	r2, [r3, #32]
}
 8005c02:	bf00      	nop
 8005c04:	371c      	adds	r7, #28
 8005c06:	46bd      	mov	sp, r7
 8005c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	40010000 	.word	0x40010000
 8005c14:	40010400 	.word	0x40010400

08005c18 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c18:	b480      	push	{r7}
 8005c1a:	b087      	sub	sp, #28
 8005c1c:	af00      	add	r7, sp, #0
 8005c1e:	60f8      	str	r0, [r7, #12]
 8005c20:	60b9      	str	r1, [r7, #8]
 8005c22:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6a1b      	ldr	r3, [r3, #32]
 8005c28:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	6a1b      	ldr	r3, [r3, #32]
 8005c2e:	f023 0201 	bic.w	r2, r3, #1
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	699b      	ldr	r3, [r3, #24]
 8005c3a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005c3c:	693b      	ldr	r3, [r7, #16]
 8005c3e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8005c42:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005c44:	687b      	ldr	r3, [r7, #4]
 8005c46:	011b      	lsls	r3, r3, #4
 8005c48:	693a      	ldr	r2, [r7, #16]
 8005c4a:	4313      	orrs	r3, r2
 8005c4c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005c4e:	697b      	ldr	r3, [r7, #20]
 8005c50:	f023 030a 	bic.w	r3, r3, #10
 8005c54:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005c56:	697a      	ldr	r2, [r7, #20]
 8005c58:	68bb      	ldr	r3, [r7, #8]
 8005c5a:	4313      	orrs	r3, r2
 8005c5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	693a      	ldr	r2, [r7, #16]
 8005c62:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	697a      	ldr	r2, [r7, #20]
 8005c68:	621a      	str	r2, [r3, #32]
}
 8005c6a:	bf00      	nop
 8005c6c:	371c      	adds	r7, #28
 8005c6e:	46bd      	mov	sp, r7
 8005c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c74:	4770      	bx	lr

08005c76 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005c76:	b480      	push	{r7}
 8005c78:	b087      	sub	sp, #28
 8005c7a:	af00      	add	r7, sp, #0
 8005c7c:	60f8      	str	r0, [r7, #12]
 8005c7e:	60b9      	str	r1, [r7, #8]
 8005c80:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8005c82:	68fb      	ldr	r3, [r7, #12]
 8005c84:	6a1b      	ldr	r3, [r3, #32]
 8005c86:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005c88:	68fb      	ldr	r3, [r7, #12]
 8005c8a:	6a1b      	ldr	r3, [r3, #32]
 8005c8c:	f023 0210 	bic.w	r2, r3, #16
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005c94:	68fb      	ldr	r3, [r7, #12]
 8005c96:	699b      	ldr	r3, [r3, #24]
 8005c98:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005c9a:	693b      	ldr	r3, [r7, #16]
 8005c9c:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8005ca0:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	031b      	lsls	r3, r3, #12
 8005ca6:	693a      	ldr	r2, [r7, #16]
 8005ca8:	4313      	orrs	r3, r2
 8005caa:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005cac:	697b      	ldr	r3, [r7, #20]
 8005cae:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8005cb2:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005cb4:	68bb      	ldr	r3, [r7, #8]
 8005cb6:	011b      	lsls	r3, r3, #4
 8005cb8:	697a      	ldr	r2, [r7, #20]
 8005cba:	4313      	orrs	r3, r2
 8005cbc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	693a      	ldr	r2, [r7, #16]
 8005cc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	697a      	ldr	r2, [r7, #20]
 8005cc8:	621a      	str	r2, [r3, #32]
}
 8005cca:	bf00      	nop
 8005ccc:	371c      	adds	r7, #28
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b085      	sub	sp, #20
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
 8005cde:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	689b      	ldr	r3, [r3, #8]
 8005ce4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005cec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005cee:	683a      	ldr	r2, [r7, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	4313      	orrs	r3, r2
 8005cf4:	f043 0307 	orr.w	r3, r3, #7
 8005cf8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	68fa      	ldr	r2, [r7, #12]
 8005cfe:	609a      	str	r2, [r3, #8]
}
 8005d00:	bf00      	nop
 8005d02:	3714      	adds	r7, #20
 8005d04:	46bd      	mov	sp, r7
 8005d06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0a:	4770      	bx	lr

08005d0c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005d0c:	b480      	push	{r7}
 8005d0e:	b087      	sub	sp, #28
 8005d10:	af00      	add	r7, sp, #0
 8005d12:	60f8      	str	r0, [r7, #12]
 8005d14:	60b9      	str	r1, [r7, #8]
 8005d16:	607a      	str	r2, [r7, #4]
 8005d18:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005d1a:	68fb      	ldr	r3, [r7, #12]
 8005d1c:	689b      	ldr	r3, [r3, #8]
 8005d1e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d20:	697b      	ldr	r3, [r7, #20]
 8005d22:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8005d26:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005d28:	683b      	ldr	r3, [r7, #0]
 8005d2a:	021a      	lsls	r2, r3, #8
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	431a      	orrs	r2, r3
 8005d30:	68bb      	ldr	r3, [r7, #8]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	697a      	ldr	r2, [r7, #20]
 8005d36:	4313      	orrs	r3, r2
 8005d38:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005d3a:	68fb      	ldr	r3, [r7, #12]
 8005d3c:	697a      	ldr	r2, [r7, #20]
 8005d3e:	609a      	str	r2, [r3, #8]
}
 8005d40:	bf00      	nop
 8005d42:	371c      	adds	r7, #28
 8005d44:	46bd      	mov	sp, r7
 8005d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d4a:	4770      	bx	lr

08005d4c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005d4c:	b480      	push	{r7}
 8005d4e:	b087      	sub	sp, #28
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	f003 031f 	and.w	r3, r3, #31
 8005d5e:	2201      	movs	r2, #1
 8005d60:	fa02 f303 	lsl.w	r3, r2, r3
 8005d64:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005d66:	68fb      	ldr	r3, [r7, #12]
 8005d68:	6a1a      	ldr	r2, [r3, #32]
 8005d6a:	697b      	ldr	r3, [r7, #20]
 8005d6c:	43db      	mvns	r3, r3
 8005d6e:	401a      	ands	r2, r3
 8005d70:	68fb      	ldr	r3, [r7, #12]
 8005d72:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005d74:	68fb      	ldr	r3, [r7, #12]
 8005d76:	6a1a      	ldr	r2, [r3, #32]
 8005d78:	68bb      	ldr	r3, [r7, #8]
 8005d7a:	f003 031f 	and.w	r3, r3, #31
 8005d7e:	6879      	ldr	r1, [r7, #4]
 8005d80:	fa01 f303 	lsl.w	r3, r1, r3
 8005d84:	431a      	orrs	r2, r3
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	621a      	str	r2, [r3, #32]
}
 8005d8a:	bf00      	nop
 8005d8c:	371c      	adds	r7, #28
 8005d8e:	46bd      	mov	sp, r7
 8005d90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d94:	4770      	bx	lr
	...

08005d98 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005d98:	b480      	push	{r7}
 8005d9a:	b085      	sub	sp, #20
 8005d9c:	af00      	add	r7, sp, #0
 8005d9e:	6078      	str	r0, [r7, #4]
 8005da0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005da8:	2b01      	cmp	r3, #1
 8005daa:	d101      	bne.n	8005db0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8005dac:	2302      	movs	r3, #2
 8005dae:	e05a      	b.n	8005e66 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	2202      	movs	r2, #2
 8005dbc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	689b      	ldr	r3, [r3, #8]
 8005dce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005dd0:	68fb      	ldr	r3, [r7, #12]
 8005dd2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8005dd6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005dd8:	683b      	ldr	r3, [r7, #0]
 8005dda:	681b      	ldr	r3, [r3, #0]
 8005ddc:	68fa      	ldr	r2, [r7, #12]
 8005dde:	4313      	orrs	r3, r2
 8005de0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	681b      	ldr	r3, [r3, #0]
 8005de6:	68fa      	ldr	r2, [r7, #12]
 8005de8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	4a21      	ldr	r2, [pc, #132]	@ (8005e74 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8005df0:	4293      	cmp	r3, r2
 8005df2:	d022      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005df4:	687b      	ldr	r3, [r7, #4]
 8005df6:	681b      	ldr	r3, [r3, #0]
 8005df8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8005dfc:	d01d      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	4a1d      	ldr	r2, [pc, #116]	@ (8005e78 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8005e04:	4293      	cmp	r3, r2
 8005e06:	d018      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	681b      	ldr	r3, [r3, #0]
 8005e0c:	4a1b      	ldr	r2, [pc, #108]	@ (8005e7c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8005e0e:	4293      	cmp	r3, r2
 8005e10:	d013      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e12:	687b      	ldr	r3, [r7, #4]
 8005e14:	681b      	ldr	r3, [r3, #0]
 8005e16:	4a1a      	ldr	r2, [pc, #104]	@ (8005e80 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8005e18:	4293      	cmp	r3, r2
 8005e1a:	d00e      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	4a18      	ldr	r2, [pc, #96]	@ (8005e84 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8005e22:	4293      	cmp	r3, r2
 8005e24:	d009      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	4a17      	ldr	r2, [pc, #92]	@ (8005e88 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8005e2c:	4293      	cmp	r3, r2
 8005e2e:	d004      	beq.n	8005e3a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	4a15      	ldr	r2, [pc, #84]	@ (8005e8c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8005e36:	4293      	cmp	r3, r2
 8005e38:	d10c      	bne.n	8005e54 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005e3a:	68bb      	ldr	r3, [r7, #8]
 8005e3c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8005e40:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8005e42:	683b      	ldr	r3, [r7, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	68ba      	ldr	r2, [r7, #8]
 8005e48:	4313      	orrs	r3, r2
 8005e4a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	68ba      	ldr	r2, [r7, #8]
 8005e52:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2201      	movs	r2, #1
 8005e58:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	2200      	movs	r2, #0
 8005e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005e64:	2300      	movs	r3, #0
}
 8005e66:	4618      	mov	r0, r3
 8005e68:	3714      	adds	r7, #20
 8005e6a:	46bd      	mov	sp, r7
 8005e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e70:	4770      	bx	lr
 8005e72:	bf00      	nop
 8005e74:	40010000 	.word	0x40010000
 8005e78:	40000400 	.word	0x40000400
 8005e7c:	40000800 	.word	0x40000800
 8005e80:	40000c00 	.word	0x40000c00
 8005e84:	40010400 	.word	0x40010400
 8005e88:	40014000 	.word	0x40014000
 8005e8c:	40001800 	.word	0x40001800

08005e90 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8005e90:	b480      	push	{r7}
 8005e92:	b085      	sub	sp, #20
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	6078      	str	r0, [r7, #4]
 8005e98:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8005e9a:	2300      	movs	r3, #0
 8005e9c:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8005ea4:	2b01      	cmp	r3, #1
 8005ea6:	d101      	bne.n	8005eac <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8005ea8:	2302      	movs	r3, #2
 8005eaa:	e03d      	b.n	8005f28 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2201      	movs	r2, #1
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8005eb4:	68fb      	ldr	r3, [r7, #12]
 8005eb6:	f023 02ff 	bic.w	r2, r3, #255	@ 0xff
 8005eba:	683b      	ldr	r3, [r7, #0]
 8005ebc:	68db      	ldr	r3, [r3, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	f423 7240 	bic.w	r2, r3, #768	@ 0x300
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	689b      	ldr	r3, [r3, #8]
 8005ecc:	4313      	orrs	r3, r2
 8005ece:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005ed0:	68fb      	ldr	r3, [r7, #12]
 8005ed2:	f423 6280 	bic.w	r2, r3, #1024	@ 0x400
 8005ed6:	683b      	ldr	r3, [r7, #0]
 8005ed8:	685b      	ldr	r3, [r3, #4]
 8005eda:	4313      	orrs	r3, r2
 8005edc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	f423 6200 	bic.w	r2, r3, #2048	@ 0x800
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	681b      	ldr	r3, [r3, #0]
 8005ee8:	4313      	orrs	r3, r2
 8005eea:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8005ef2:	683b      	ldr	r3, [r7, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	4313      	orrs	r3, r2
 8005ef8:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	f423 5200 	bic.w	r2, r3, #8192	@ 0x2000
 8005f00:	683b      	ldr	r3, [r7, #0]
 8005f02:	695b      	ldr	r3, [r3, #20]
 8005f04:	4313      	orrs	r3, r2
 8005f06:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	f423 4280 	bic.w	r2, r3, #16384	@ 0x4000
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	69db      	ldr	r3, [r3, #28]
 8005f12:	4313      	orrs	r3, r2
 8005f14:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005f16:	687b      	ldr	r3, [r7, #4]
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68fa      	ldr	r2, [r7, #12]
 8005f1c:	645a      	str	r2, [r3, #68]	@ 0x44

  __HAL_UNLOCK(htim);
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2200      	movs	r2, #0
 8005f22:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8005f26:	2300      	movs	r3, #0
}
 8005f28:	4618      	mov	r0, r3
 8005f2a:	3714      	adds	r7, #20
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005f5c:	b580      	push	{r7, lr}
 8005f5e:	b082      	sub	sp, #8
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d101      	bne.n	8005f6e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005f6a:	2301      	movs	r3, #1
 8005f6c:	e042      	b.n	8005ff4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005f74:	b2db      	uxtb	r3, r3
 8005f76:	2b00      	cmp	r3, #0
 8005f78:	d106      	bne.n	8005f88 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005f82:	6878      	ldr	r0, [r7, #4]
 8005f84:	f7fc fb52 	bl	800262c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2224      	movs	r2, #36	@ 0x24
 8005f8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	68da      	ldr	r2, [r3, #12]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005f9e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005fa0:	6878      	ldr	r0, [r7, #4]
 8005fa2:	f000 f82b 	bl	8005ffc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	691a      	ldr	r2, [r3, #16]
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005fb4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	681b      	ldr	r3, [r3, #0]
 8005fba:	695a      	ldr	r2, [r3, #20]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005fc4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	681b      	ldr	r3, [r3, #0]
 8005fca:	68da      	ldr	r2, [r3, #12]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005fd4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	2200      	movs	r2, #0
 8005fda:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	2220      	movs	r2, #32
 8005fe0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	2220      	movs	r2, #32
 8005fe8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005ff2:	2300      	movs	r3, #0
}
 8005ff4:	4618      	mov	r0, r3
 8005ff6:	3708      	adds	r7, #8
 8005ff8:	46bd      	mov	sp, r7
 8005ffa:	bd80      	pop	{r7, pc}

08005ffc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ffc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006000:	b0c0      	sub	sp, #256	@ 0x100
 8006002:	af00      	add	r7, sp, #0
 8006004:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006008:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	691b      	ldr	r3, [r3, #16]
 8006010:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8006014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006018:	68d9      	ldr	r1, [r3, #12]
 800601a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800601e:	681a      	ldr	r2, [r3, #0]
 8006020:	ea40 0301 	orr.w	r3, r0, r1
 8006024:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006026:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800602a:	689a      	ldr	r2, [r3, #8]
 800602c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006030:	691b      	ldr	r3, [r3, #16]
 8006032:	431a      	orrs	r2, r3
 8006034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006038:	695b      	ldr	r3, [r3, #20]
 800603a:	431a      	orrs	r2, r3
 800603c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006040:	69db      	ldr	r3, [r3, #28]
 8006042:	4313      	orrs	r3, r2
 8006044:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006048:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	68db      	ldr	r3, [r3, #12]
 8006050:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8006054:	f021 010c 	bic.w	r1, r1, #12
 8006058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800605c:	681a      	ldr	r2, [r3, #0]
 800605e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8006062:	430b      	orrs	r3, r1
 8006064:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006066:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	695b      	ldr	r3, [r3, #20]
 800606e:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8006072:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006076:	6999      	ldr	r1, [r3, #24]
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607c:	681a      	ldr	r2, [r3, #0]
 800607e:	ea40 0301 	orr.w	r3, r0, r1
 8006082:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006088:	681a      	ldr	r2, [r3, #0]
 800608a:	4b8f      	ldr	r3, [pc, #572]	@ (80062c8 <UART_SetConfig+0x2cc>)
 800608c:	429a      	cmp	r2, r3
 800608e:	d005      	beq.n	800609c <UART_SetConfig+0xa0>
 8006090:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006094:	681a      	ldr	r2, [r3, #0]
 8006096:	4b8d      	ldr	r3, [pc, #564]	@ (80062cc <UART_SetConfig+0x2d0>)
 8006098:	429a      	cmp	r2, r3
 800609a:	d104      	bne.n	80060a6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800609c:	f7fe fd7c 	bl	8004b98 <HAL_RCC_GetPCLK2Freq>
 80060a0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80060a4:	e003      	b.n	80060ae <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80060a6:	f7fe fd63 	bl	8004b70 <HAL_RCC_GetPCLK1Freq>
 80060aa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80060ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060b2:	69db      	ldr	r3, [r3, #28]
 80060b4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80060b8:	f040 810c 	bne.w	80062d4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80060bc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060c0:	2200      	movs	r2, #0
 80060c2:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80060c6:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80060ca:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80060ce:	4622      	mov	r2, r4
 80060d0:	462b      	mov	r3, r5
 80060d2:	1891      	adds	r1, r2, r2
 80060d4:	65b9      	str	r1, [r7, #88]	@ 0x58
 80060d6:	415b      	adcs	r3, r3
 80060d8:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80060da:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80060de:	4621      	mov	r1, r4
 80060e0:	eb12 0801 	adds.w	r8, r2, r1
 80060e4:	4629      	mov	r1, r5
 80060e6:	eb43 0901 	adc.w	r9, r3, r1
 80060ea:	f04f 0200 	mov.w	r2, #0
 80060ee:	f04f 0300 	mov.w	r3, #0
 80060f2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80060f6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80060fa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80060fe:	4690      	mov	r8, r2
 8006100:	4699      	mov	r9, r3
 8006102:	4623      	mov	r3, r4
 8006104:	eb18 0303 	adds.w	r3, r8, r3
 8006108:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800610c:	462b      	mov	r3, r5
 800610e:	eb49 0303 	adc.w	r3, r9, r3
 8006112:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8006116:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800611a:	685b      	ldr	r3, [r3, #4]
 800611c:	2200      	movs	r2, #0
 800611e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8006122:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8006126:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800612a:	460b      	mov	r3, r1
 800612c:	18db      	adds	r3, r3, r3
 800612e:	653b      	str	r3, [r7, #80]	@ 0x50
 8006130:	4613      	mov	r3, r2
 8006132:	eb42 0303 	adc.w	r3, r2, r3
 8006136:	657b      	str	r3, [r7, #84]	@ 0x54
 8006138:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800613c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8006140:	f7fa fba4 	bl	800088c <__aeabi_uldivmod>
 8006144:	4602      	mov	r2, r0
 8006146:	460b      	mov	r3, r1
 8006148:	4b61      	ldr	r3, [pc, #388]	@ (80062d0 <UART_SetConfig+0x2d4>)
 800614a:	fba3 2302 	umull	r2, r3, r3, r2
 800614e:	095b      	lsrs	r3, r3, #5
 8006150:	011c      	lsls	r4, r3, #4
 8006152:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006156:	2200      	movs	r2, #0
 8006158:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800615c:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006160:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006164:	4642      	mov	r2, r8
 8006166:	464b      	mov	r3, r9
 8006168:	1891      	adds	r1, r2, r2
 800616a:	64b9      	str	r1, [r7, #72]	@ 0x48
 800616c:	415b      	adcs	r3, r3
 800616e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006170:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006174:	4641      	mov	r1, r8
 8006176:	eb12 0a01 	adds.w	sl, r2, r1
 800617a:	4649      	mov	r1, r9
 800617c:	eb43 0b01 	adc.w	fp, r3, r1
 8006180:	f04f 0200 	mov.w	r2, #0
 8006184:	f04f 0300 	mov.w	r3, #0
 8006188:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800618c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006190:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006194:	4692      	mov	sl, r2
 8006196:	469b      	mov	fp, r3
 8006198:	4643      	mov	r3, r8
 800619a:	eb1a 0303 	adds.w	r3, sl, r3
 800619e:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80061a2:	464b      	mov	r3, r9
 80061a4:	eb4b 0303 	adc.w	r3, fp, r3
 80061a8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80061ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061b0:	685b      	ldr	r3, [r3, #4]
 80061b2:	2200      	movs	r2, #0
 80061b4:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80061b8:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80061bc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80061c0:	460b      	mov	r3, r1
 80061c2:	18db      	adds	r3, r3, r3
 80061c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80061c6:	4613      	mov	r3, r2
 80061c8:	eb42 0303 	adc.w	r3, r2, r3
 80061cc:	647b      	str	r3, [r7, #68]	@ 0x44
 80061ce:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80061d2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80061d6:	f7fa fb59 	bl	800088c <__aeabi_uldivmod>
 80061da:	4602      	mov	r2, r0
 80061dc:	460b      	mov	r3, r1
 80061de:	4611      	mov	r1, r2
 80061e0:	4b3b      	ldr	r3, [pc, #236]	@ (80062d0 <UART_SetConfig+0x2d4>)
 80061e2:	fba3 2301 	umull	r2, r3, r3, r1
 80061e6:	095b      	lsrs	r3, r3, #5
 80061e8:	2264      	movs	r2, #100	@ 0x64
 80061ea:	fb02 f303 	mul.w	r3, r2, r3
 80061ee:	1acb      	subs	r3, r1, r3
 80061f0:	00db      	lsls	r3, r3, #3
 80061f2:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80061f6:	4b36      	ldr	r3, [pc, #216]	@ (80062d0 <UART_SetConfig+0x2d4>)
 80061f8:	fba3 2302 	umull	r2, r3, r3, r2
 80061fc:	095b      	lsrs	r3, r3, #5
 80061fe:	005b      	lsls	r3, r3, #1
 8006200:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006204:	441c      	add	r4, r3
 8006206:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800620a:	2200      	movs	r2, #0
 800620c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006210:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006214:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006218:	4642      	mov	r2, r8
 800621a:	464b      	mov	r3, r9
 800621c:	1891      	adds	r1, r2, r2
 800621e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006220:	415b      	adcs	r3, r3
 8006222:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006224:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006228:	4641      	mov	r1, r8
 800622a:	1851      	adds	r1, r2, r1
 800622c:	6339      	str	r1, [r7, #48]	@ 0x30
 800622e:	4649      	mov	r1, r9
 8006230:	414b      	adcs	r3, r1
 8006232:	637b      	str	r3, [r7, #52]	@ 0x34
 8006234:	f04f 0200 	mov.w	r2, #0
 8006238:	f04f 0300 	mov.w	r3, #0
 800623c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006240:	4659      	mov	r1, fp
 8006242:	00cb      	lsls	r3, r1, #3
 8006244:	4651      	mov	r1, sl
 8006246:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800624a:	4651      	mov	r1, sl
 800624c:	00ca      	lsls	r2, r1, #3
 800624e:	4610      	mov	r0, r2
 8006250:	4619      	mov	r1, r3
 8006252:	4603      	mov	r3, r0
 8006254:	4642      	mov	r2, r8
 8006256:	189b      	adds	r3, r3, r2
 8006258:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 800625c:	464b      	mov	r3, r9
 800625e:	460a      	mov	r2, r1
 8006260:	eb42 0303 	adc.w	r3, r2, r3
 8006264:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800626c:	685b      	ldr	r3, [r3, #4]
 800626e:	2200      	movs	r2, #0
 8006270:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006274:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006278:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 800627c:	460b      	mov	r3, r1
 800627e:	18db      	adds	r3, r3, r3
 8006280:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006282:	4613      	mov	r3, r2
 8006284:	eb42 0303 	adc.w	r3, r2, r3
 8006288:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800628a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800628e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006292:	f7fa fafb 	bl	800088c <__aeabi_uldivmod>
 8006296:	4602      	mov	r2, r0
 8006298:	460b      	mov	r3, r1
 800629a:	4b0d      	ldr	r3, [pc, #52]	@ (80062d0 <UART_SetConfig+0x2d4>)
 800629c:	fba3 1302 	umull	r1, r3, r3, r2
 80062a0:	095b      	lsrs	r3, r3, #5
 80062a2:	2164      	movs	r1, #100	@ 0x64
 80062a4:	fb01 f303 	mul.w	r3, r1, r3
 80062a8:	1ad3      	subs	r3, r2, r3
 80062aa:	00db      	lsls	r3, r3, #3
 80062ac:	3332      	adds	r3, #50	@ 0x32
 80062ae:	4a08      	ldr	r2, [pc, #32]	@ (80062d0 <UART_SetConfig+0x2d4>)
 80062b0:	fba2 2303 	umull	r2, r3, r2, r3
 80062b4:	095b      	lsrs	r3, r3, #5
 80062b6:	f003 0207 	and.w	r2, r3, #7
 80062ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	4422      	add	r2, r4
 80062c2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80062c4:	e106      	b.n	80064d4 <UART_SetConfig+0x4d8>
 80062c6:	bf00      	nop
 80062c8:	40011000 	.word	0x40011000
 80062cc:	40011400 	.word	0x40011400
 80062d0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80062d4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062d8:	2200      	movs	r2, #0
 80062da:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80062de:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80062e2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80062e6:	4642      	mov	r2, r8
 80062e8:	464b      	mov	r3, r9
 80062ea:	1891      	adds	r1, r2, r2
 80062ec:	6239      	str	r1, [r7, #32]
 80062ee:	415b      	adcs	r3, r3
 80062f0:	627b      	str	r3, [r7, #36]	@ 0x24
 80062f2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80062f6:	4641      	mov	r1, r8
 80062f8:	1854      	adds	r4, r2, r1
 80062fa:	4649      	mov	r1, r9
 80062fc:	eb43 0501 	adc.w	r5, r3, r1
 8006300:	f04f 0200 	mov.w	r2, #0
 8006304:	f04f 0300 	mov.w	r3, #0
 8006308:	00eb      	lsls	r3, r5, #3
 800630a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800630e:	00e2      	lsls	r2, r4, #3
 8006310:	4614      	mov	r4, r2
 8006312:	461d      	mov	r5, r3
 8006314:	4643      	mov	r3, r8
 8006316:	18e3      	adds	r3, r4, r3
 8006318:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 800631c:	464b      	mov	r3, r9
 800631e:	eb45 0303 	adc.w	r3, r5, r3
 8006322:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006326:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800632a:	685b      	ldr	r3, [r3, #4]
 800632c:	2200      	movs	r2, #0
 800632e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006332:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006336:	f04f 0200 	mov.w	r2, #0
 800633a:	f04f 0300 	mov.w	r3, #0
 800633e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006342:	4629      	mov	r1, r5
 8006344:	008b      	lsls	r3, r1, #2
 8006346:	4621      	mov	r1, r4
 8006348:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800634c:	4621      	mov	r1, r4
 800634e:	008a      	lsls	r2, r1, #2
 8006350:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006354:	f7fa fa9a 	bl	800088c <__aeabi_uldivmod>
 8006358:	4602      	mov	r2, r0
 800635a:	460b      	mov	r3, r1
 800635c:	4b60      	ldr	r3, [pc, #384]	@ (80064e0 <UART_SetConfig+0x4e4>)
 800635e:	fba3 2302 	umull	r2, r3, r3, r2
 8006362:	095b      	lsrs	r3, r3, #5
 8006364:	011c      	lsls	r4, r3, #4
 8006366:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800636a:	2200      	movs	r2, #0
 800636c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006370:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006374:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006378:	4642      	mov	r2, r8
 800637a:	464b      	mov	r3, r9
 800637c:	1891      	adds	r1, r2, r2
 800637e:	61b9      	str	r1, [r7, #24]
 8006380:	415b      	adcs	r3, r3
 8006382:	61fb      	str	r3, [r7, #28]
 8006384:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006388:	4641      	mov	r1, r8
 800638a:	1851      	adds	r1, r2, r1
 800638c:	6139      	str	r1, [r7, #16]
 800638e:	4649      	mov	r1, r9
 8006390:	414b      	adcs	r3, r1
 8006392:	617b      	str	r3, [r7, #20]
 8006394:	f04f 0200 	mov.w	r2, #0
 8006398:	f04f 0300 	mov.w	r3, #0
 800639c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80063a0:	4659      	mov	r1, fp
 80063a2:	00cb      	lsls	r3, r1, #3
 80063a4:	4651      	mov	r1, sl
 80063a6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80063aa:	4651      	mov	r1, sl
 80063ac:	00ca      	lsls	r2, r1, #3
 80063ae:	4610      	mov	r0, r2
 80063b0:	4619      	mov	r1, r3
 80063b2:	4603      	mov	r3, r0
 80063b4:	4642      	mov	r2, r8
 80063b6:	189b      	adds	r3, r3, r2
 80063b8:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80063bc:	464b      	mov	r3, r9
 80063be:	460a      	mov	r2, r1
 80063c0:	eb42 0303 	adc.w	r3, r2, r3
 80063c4:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80063c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80063cc:	685b      	ldr	r3, [r3, #4]
 80063ce:	2200      	movs	r2, #0
 80063d0:	67bb      	str	r3, [r7, #120]	@ 0x78
 80063d2:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80063d4:	f04f 0200 	mov.w	r2, #0
 80063d8:	f04f 0300 	mov.w	r3, #0
 80063dc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80063e0:	4649      	mov	r1, r9
 80063e2:	008b      	lsls	r3, r1, #2
 80063e4:	4641      	mov	r1, r8
 80063e6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80063ea:	4641      	mov	r1, r8
 80063ec:	008a      	lsls	r2, r1, #2
 80063ee:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80063f2:	f7fa fa4b 	bl	800088c <__aeabi_uldivmod>
 80063f6:	4602      	mov	r2, r0
 80063f8:	460b      	mov	r3, r1
 80063fa:	4611      	mov	r1, r2
 80063fc:	4b38      	ldr	r3, [pc, #224]	@ (80064e0 <UART_SetConfig+0x4e4>)
 80063fe:	fba3 2301 	umull	r2, r3, r3, r1
 8006402:	095b      	lsrs	r3, r3, #5
 8006404:	2264      	movs	r2, #100	@ 0x64
 8006406:	fb02 f303 	mul.w	r3, r2, r3
 800640a:	1acb      	subs	r3, r1, r3
 800640c:	011b      	lsls	r3, r3, #4
 800640e:	3332      	adds	r3, #50	@ 0x32
 8006410:	4a33      	ldr	r2, [pc, #204]	@ (80064e0 <UART_SetConfig+0x4e4>)
 8006412:	fba2 2303 	umull	r2, r3, r2, r3
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 800641c:	441c      	add	r4, r3
 800641e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006422:	2200      	movs	r2, #0
 8006424:	673b      	str	r3, [r7, #112]	@ 0x70
 8006426:	677a      	str	r2, [r7, #116]	@ 0x74
 8006428:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 800642c:	4642      	mov	r2, r8
 800642e:	464b      	mov	r3, r9
 8006430:	1891      	adds	r1, r2, r2
 8006432:	60b9      	str	r1, [r7, #8]
 8006434:	415b      	adcs	r3, r3
 8006436:	60fb      	str	r3, [r7, #12]
 8006438:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800643c:	4641      	mov	r1, r8
 800643e:	1851      	adds	r1, r2, r1
 8006440:	6039      	str	r1, [r7, #0]
 8006442:	4649      	mov	r1, r9
 8006444:	414b      	adcs	r3, r1
 8006446:	607b      	str	r3, [r7, #4]
 8006448:	f04f 0200 	mov.w	r2, #0
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006454:	4659      	mov	r1, fp
 8006456:	00cb      	lsls	r3, r1, #3
 8006458:	4651      	mov	r1, sl
 800645a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800645e:	4651      	mov	r1, sl
 8006460:	00ca      	lsls	r2, r1, #3
 8006462:	4610      	mov	r0, r2
 8006464:	4619      	mov	r1, r3
 8006466:	4603      	mov	r3, r0
 8006468:	4642      	mov	r2, r8
 800646a:	189b      	adds	r3, r3, r2
 800646c:	66bb      	str	r3, [r7, #104]	@ 0x68
 800646e:	464b      	mov	r3, r9
 8006470:	460a      	mov	r2, r1
 8006472:	eb42 0303 	adc.w	r3, r2, r3
 8006476:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006478:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800647c:	685b      	ldr	r3, [r3, #4]
 800647e:	2200      	movs	r2, #0
 8006480:	663b      	str	r3, [r7, #96]	@ 0x60
 8006482:	667a      	str	r2, [r7, #100]	@ 0x64
 8006484:	f04f 0200 	mov.w	r2, #0
 8006488:	f04f 0300 	mov.w	r3, #0
 800648c:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006490:	4649      	mov	r1, r9
 8006492:	008b      	lsls	r3, r1, #2
 8006494:	4641      	mov	r1, r8
 8006496:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800649a:	4641      	mov	r1, r8
 800649c:	008a      	lsls	r2, r1, #2
 800649e:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80064a2:	f7fa f9f3 	bl	800088c <__aeabi_uldivmod>
 80064a6:	4602      	mov	r2, r0
 80064a8:	460b      	mov	r3, r1
 80064aa:	4b0d      	ldr	r3, [pc, #52]	@ (80064e0 <UART_SetConfig+0x4e4>)
 80064ac:	fba3 1302 	umull	r1, r3, r3, r2
 80064b0:	095b      	lsrs	r3, r3, #5
 80064b2:	2164      	movs	r1, #100	@ 0x64
 80064b4:	fb01 f303 	mul.w	r3, r1, r3
 80064b8:	1ad3      	subs	r3, r2, r3
 80064ba:	011b      	lsls	r3, r3, #4
 80064bc:	3332      	adds	r3, #50	@ 0x32
 80064be:	4a08      	ldr	r2, [pc, #32]	@ (80064e0 <UART_SetConfig+0x4e4>)
 80064c0:	fba2 2303 	umull	r2, r3, r2, r3
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	f003 020f 	and.w	r2, r3, #15
 80064ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80064ce:	681b      	ldr	r3, [r3, #0]
 80064d0:	4422      	add	r2, r4
 80064d2:	609a      	str	r2, [r3, #8]
}
 80064d4:	bf00      	nop
 80064d6:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80064da:	46bd      	mov	sp, r7
 80064dc:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80064e0:	51eb851f 	.word	0x51eb851f

080064e4 <std>:
 80064e4:	2300      	movs	r3, #0
 80064e6:	b510      	push	{r4, lr}
 80064e8:	4604      	mov	r4, r0
 80064ea:	e9c0 3300 	strd	r3, r3, [r0]
 80064ee:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80064f2:	6083      	str	r3, [r0, #8]
 80064f4:	8181      	strh	r1, [r0, #12]
 80064f6:	6643      	str	r3, [r0, #100]	@ 0x64
 80064f8:	81c2      	strh	r2, [r0, #14]
 80064fa:	6183      	str	r3, [r0, #24]
 80064fc:	4619      	mov	r1, r3
 80064fe:	2208      	movs	r2, #8
 8006500:	305c      	adds	r0, #92	@ 0x5c
 8006502:	f000 f9f9 	bl	80068f8 <memset>
 8006506:	4b0d      	ldr	r3, [pc, #52]	@ (800653c <std+0x58>)
 8006508:	6263      	str	r3, [r4, #36]	@ 0x24
 800650a:	4b0d      	ldr	r3, [pc, #52]	@ (8006540 <std+0x5c>)
 800650c:	62a3      	str	r3, [r4, #40]	@ 0x28
 800650e:	4b0d      	ldr	r3, [pc, #52]	@ (8006544 <std+0x60>)
 8006510:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006512:	4b0d      	ldr	r3, [pc, #52]	@ (8006548 <std+0x64>)
 8006514:	6323      	str	r3, [r4, #48]	@ 0x30
 8006516:	4b0d      	ldr	r3, [pc, #52]	@ (800654c <std+0x68>)
 8006518:	6224      	str	r4, [r4, #32]
 800651a:	429c      	cmp	r4, r3
 800651c:	d006      	beq.n	800652c <std+0x48>
 800651e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006522:	4294      	cmp	r4, r2
 8006524:	d002      	beq.n	800652c <std+0x48>
 8006526:	33d0      	adds	r3, #208	@ 0xd0
 8006528:	429c      	cmp	r4, r3
 800652a:	d105      	bne.n	8006538 <std+0x54>
 800652c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006534:	f000 ba58 	b.w	80069e8 <__retarget_lock_init_recursive>
 8006538:	bd10      	pop	{r4, pc}
 800653a:	bf00      	nop
 800653c:	08006749 	.word	0x08006749
 8006540:	0800676b 	.word	0x0800676b
 8006544:	080067a3 	.word	0x080067a3
 8006548:	080067c7 	.word	0x080067c7
 800654c:	20000670 	.word	0x20000670

08006550 <stdio_exit_handler>:
 8006550:	4a02      	ldr	r2, [pc, #8]	@ (800655c <stdio_exit_handler+0xc>)
 8006552:	4903      	ldr	r1, [pc, #12]	@ (8006560 <stdio_exit_handler+0x10>)
 8006554:	4803      	ldr	r0, [pc, #12]	@ (8006564 <stdio_exit_handler+0x14>)
 8006556:	f000 b869 	b.w	800662c <_fwalk_sglue>
 800655a:	bf00      	nop
 800655c:	20000174 	.word	0x20000174
 8006560:	08007289 	.word	0x08007289
 8006564:	20000184 	.word	0x20000184

08006568 <cleanup_stdio>:
 8006568:	6841      	ldr	r1, [r0, #4]
 800656a:	4b0c      	ldr	r3, [pc, #48]	@ (800659c <cleanup_stdio+0x34>)
 800656c:	4299      	cmp	r1, r3
 800656e:	b510      	push	{r4, lr}
 8006570:	4604      	mov	r4, r0
 8006572:	d001      	beq.n	8006578 <cleanup_stdio+0x10>
 8006574:	f000 fe88 	bl	8007288 <_fflush_r>
 8006578:	68a1      	ldr	r1, [r4, #8]
 800657a:	4b09      	ldr	r3, [pc, #36]	@ (80065a0 <cleanup_stdio+0x38>)
 800657c:	4299      	cmp	r1, r3
 800657e:	d002      	beq.n	8006586 <cleanup_stdio+0x1e>
 8006580:	4620      	mov	r0, r4
 8006582:	f000 fe81 	bl	8007288 <_fflush_r>
 8006586:	68e1      	ldr	r1, [r4, #12]
 8006588:	4b06      	ldr	r3, [pc, #24]	@ (80065a4 <cleanup_stdio+0x3c>)
 800658a:	4299      	cmp	r1, r3
 800658c:	d004      	beq.n	8006598 <cleanup_stdio+0x30>
 800658e:	4620      	mov	r0, r4
 8006590:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006594:	f000 be78 	b.w	8007288 <_fflush_r>
 8006598:	bd10      	pop	{r4, pc}
 800659a:	bf00      	nop
 800659c:	20000670 	.word	0x20000670
 80065a0:	200006d8 	.word	0x200006d8
 80065a4:	20000740 	.word	0x20000740

080065a8 <global_stdio_init.part.0>:
 80065a8:	b510      	push	{r4, lr}
 80065aa:	4b0b      	ldr	r3, [pc, #44]	@ (80065d8 <global_stdio_init.part.0+0x30>)
 80065ac:	4c0b      	ldr	r4, [pc, #44]	@ (80065dc <global_stdio_init.part.0+0x34>)
 80065ae:	4a0c      	ldr	r2, [pc, #48]	@ (80065e0 <global_stdio_init.part.0+0x38>)
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	4620      	mov	r0, r4
 80065b4:	2200      	movs	r2, #0
 80065b6:	2104      	movs	r1, #4
 80065b8:	f7ff ff94 	bl	80064e4 <std>
 80065bc:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80065c0:	2201      	movs	r2, #1
 80065c2:	2109      	movs	r1, #9
 80065c4:	f7ff ff8e 	bl	80064e4 <std>
 80065c8:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80065cc:	2202      	movs	r2, #2
 80065ce:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80065d2:	2112      	movs	r1, #18
 80065d4:	f7ff bf86 	b.w	80064e4 <std>
 80065d8:	200007a8 	.word	0x200007a8
 80065dc:	20000670 	.word	0x20000670
 80065e0:	08006551 	.word	0x08006551

080065e4 <__sfp_lock_acquire>:
 80065e4:	4801      	ldr	r0, [pc, #4]	@ (80065ec <__sfp_lock_acquire+0x8>)
 80065e6:	f000 ba00 	b.w	80069ea <__retarget_lock_acquire_recursive>
 80065ea:	bf00      	nop
 80065ec:	200007b1 	.word	0x200007b1

080065f0 <__sfp_lock_release>:
 80065f0:	4801      	ldr	r0, [pc, #4]	@ (80065f8 <__sfp_lock_release+0x8>)
 80065f2:	f000 b9fb 	b.w	80069ec <__retarget_lock_release_recursive>
 80065f6:	bf00      	nop
 80065f8:	200007b1 	.word	0x200007b1

080065fc <__sinit>:
 80065fc:	b510      	push	{r4, lr}
 80065fe:	4604      	mov	r4, r0
 8006600:	f7ff fff0 	bl	80065e4 <__sfp_lock_acquire>
 8006604:	6a23      	ldr	r3, [r4, #32]
 8006606:	b11b      	cbz	r3, 8006610 <__sinit+0x14>
 8006608:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800660c:	f7ff bff0 	b.w	80065f0 <__sfp_lock_release>
 8006610:	4b04      	ldr	r3, [pc, #16]	@ (8006624 <__sinit+0x28>)
 8006612:	6223      	str	r3, [r4, #32]
 8006614:	4b04      	ldr	r3, [pc, #16]	@ (8006628 <__sinit+0x2c>)
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	2b00      	cmp	r3, #0
 800661a:	d1f5      	bne.n	8006608 <__sinit+0xc>
 800661c:	f7ff ffc4 	bl	80065a8 <global_stdio_init.part.0>
 8006620:	e7f2      	b.n	8006608 <__sinit+0xc>
 8006622:	bf00      	nop
 8006624:	08006569 	.word	0x08006569
 8006628:	200007a8 	.word	0x200007a8

0800662c <_fwalk_sglue>:
 800662c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006630:	4607      	mov	r7, r0
 8006632:	4688      	mov	r8, r1
 8006634:	4614      	mov	r4, r2
 8006636:	2600      	movs	r6, #0
 8006638:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800663c:	f1b9 0901 	subs.w	r9, r9, #1
 8006640:	d505      	bpl.n	800664e <_fwalk_sglue+0x22>
 8006642:	6824      	ldr	r4, [r4, #0]
 8006644:	2c00      	cmp	r4, #0
 8006646:	d1f7      	bne.n	8006638 <_fwalk_sglue+0xc>
 8006648:	4630      	mov	r0, r6
 800664a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800664e:	89ab      	ldrh	r3, [r5, #12]
 8006650:	2b01      	cmp	r3, #1
 8006652:	d907      	bls.n	8006664 <_fwalk_sglue+0x38>
 8006654:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006658:	3301      	adds	r3, #1
 800665a:	d003      	beq.n	8006664 <_fwalk_sglue+0x38>
 800665c:	4629      	mov	r1, r5
 800665e:	4638      	mov	r0, r7
 8006660:	47c0      	blx	r8
 8006662:	4306      	orrs	r6, r0
 8006664:	3568      	adds	r5, #104	@ 0x68
 8006666:	e7e9      	b.n	800663c <_fwalk_sglue+0x10>

08006668 <iprintf>:
 8006668:	b40f      	push	{r0, r1, r2, r3}
 800666a:	b507      	push	{r0, r1, r2, lr}
 800666c:	4906      	ldr	r1, [pc, #24]	@ (8006688 <iprintf+0x20>)
 800666e:	ab04      	add	r3, sp, #16
 8006670:	6808      	ldr	r0, [r1, #0]
 8006672:	f853 2b04 	ldr.w	r2, [r3], #4
 8006676:	6881      	ldr	r1, [r0, #8]
 8006678:	9301      	str	r3, [sp, #4]
 800667a:	f000 fadb 	bl	8006c34 <_vfiprintf_r>
 800667e:	b003      	add	sp, #12
 8006680:	f85d eb04 	ldr.w	lr, [sp], #4
 8006684:	b004      	add	sp, #16
 8006686:	4770      	bx	lr
 8006688:	20000180 	.word	0x20000180

0800668c <_puts_r>:
 800668c:	6a03      	ldr	r3, [r0, #32]
 800668e:	b570      	push	{r4, r5, r6, lr}
 8006690:	6884      	ldr	r4, [r0, #8]
 8006692:	4605      	mov	r5, r0
 8006694:	460e      	mov	r6, r1
 8006696:	b90b      	cbnz	r3, 800669c <_puts_r+0x10>
 8006698:	f7ff ffb0 	bl	80065fc <__sinit>
 800669c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800669e:	07db      	lsls	r3, r3, #31
 80066a0:	d405      	bmi.n	80066ae <_puts_r+0x22>
 80066a2:	89a3      	ldrh	r3, [r4, #12]
 80066a4:	0598      	lsls	r0, r3, #22
 80066a6:	d402      	bmi.n	80066ae <_puts_r+0x22>
 80066a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066aa:	f000 f99e 	bl	80069ea <__retarget_lock_acquire_recursive>
 80066ae:	89a3      	ldrh	r3, [r4, #12]
 80066b0:	0719      	lsls	r1, r3, #28
 80066b2:	d502      	bpl.n	80066ba <_puts_r+0x2e>
 80066b4:	6923      	ldr	r3, [r4, #16]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d135      	bne.n	8006726 <_puts_r+0x9a>
 80066ba:	4621      	mov	r1, r4
 80066bc:	4628      	mov	r0, r5
 80066be:	f000 f8c5 	bl	800684c <__swsetup_r>
 80066c2:	b380      	cbz	r0, 8006726 <_puts_r+0x9a>
 80066c4:	f04f 35ff 	mov.w	r5, #4294967295
 80066c8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80066ca:	07da      	lsls	r2, r3, #31
 80066cc:	d405      	bmi.n	80066da <_puts_r+0x4e>
 80066ce:	89a3      	ldrh	r3, [r4, #12]
 80066d0:	059b      	lsls	r3, r3, #22
 80066d2:	d402      	bmi.n	80066da <_puts_r+0x4e>
 80066d4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80066d6:	f000 f989 	bl	80069ec <__retarget_lock_release_recursive>
 80066da:	4628      	mov	r0, r5
 80066dc:	bd70      	pop	{r4, r5, r6, pc}
 80066de:	2b00      	cmp	r3, #0
 80066e0:	da04      	bge.n	80066ec <_puts_r+0x60>
 80066e2:	69a2      	ldr	r2, [r4, #24]
 80066e4:	429a      	cmp	r2, r3
 80066e6:	dc17      	bgt.n	8006718 <_puts_r+0x8c>
 80066e8:	290a      	cmp	r1, #10
 80066ea:	d015      	beq.n	8006718 <_puts_r+0x8c>
 80066ec:	6823      	ldr	r3, [r4, #0]
 80066ee:	1c5a      	adds	r2, r3, #1
 80066f0:	6022      	str	r2, [r4, #0]
 80066f2:	7019      	strb	r1, [r3, #0]
 80066f4:	68a3      	ldr	r3, [r4, #8]
 80066f6:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80066fa:	3b01      	subs	r3, #1
 80066fc:	60a3      	str	r3, [r4, #8]
 80066fe:	2900      	cmp	r1, #0
 8006700:	d1ed      	bne.n	80066de <_puts_r+0x52>
 8006702:	2b00      	cmp	r3, #0
 8006704:	da11      	bge.n	800672a <_puts_r+0x9e>
 8006706:	4622      	mov	r2, r4
 8006708:	210a      	movs	r1, #10
 800670a:	4628      	mov	r0, r5
 800670c:	f000 f85f 	bl	80067ce <__swbuf_r>
 8006710:	3001      	adds	r0, #1
 8006712:	d0d7      	beq.n	80066c4 <_puts_r+0x38>
 8006714:	250a      	movs	r5, #10
 8006716:	e7d7      	b.n	80066c8 <_puts_r+0x3c>
 8006718:	4622      	mov	r2, r4
 800671a:	4628      	mov	r0, r5
 800671c:	f000 f857 	bl	80067ce <__swbuf_r>
 8006720:	3001      	adds	r0, #1
 8006722:	d1e7      	bne.n	80066f4 <_puts_r+0x68>
 8006724:	e7ce      	b.n	80066c4 <_puts_r+0x38>
 8006726:	3e01      	subs	r6, #1
 8006728:	e7e4      	b.n	80066f4 <_puts_r+0x68>
 800672a:	6823      	ldr	r3, [r4, #0]
 800672c:	1c5a      	adds	r2, r3, #1
 800672e:	6022      	str	r2, [r4, #0]
 8006730:	220a      	movs	r2, #10
 8006732:	701a      	strb	r2, [r3, #0]
 8006734:	e7ee      	b.n	8006714 <_puts_r+0x88>
	...

08006738 <puts>:
 8006738:	4b02      	ldr	r3, [pc, #8]	@ (8006744 <puts+0xc>)
 800673a:	4601      	mov	r1, r0
 800673c:	6818      	ldr	r0, [r3, #0]
 800673e:	f7ff bfa5 	b.w	800668c <_puts_r>
 8006742:	bf00      	nop
 8006744:	20000180 	.word	0x20000180

08006748 <__sread>:
 8006748:	b510      	push	{r4, lr}
 800674a:	460c      	mov	r4, r1
 800674c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006750:	f000 f8fc 	bl	800694c <_read_r>
 8006754:	2800      	cmp	r0, #0
 8006756:	bfab      	itete	ge
 8006758:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800675a:	89a3      	ldrhlt	r3, [r4, #12]
 800675c:	181b      	addge	r3, r3, r0
 800675e:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006762:	bfac      	ite	ge
 8006764:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006766:	81a3      	strhlt	r3, [r4, #12]
 8006768:	bd10      	pop	{r4, pc}

0800676a <__swrite>:
 800676a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800676e:	461f      	mov	r7, r3
 8006770:	898b      	ldrh	r3, [r1, #12]
 8006772:	05db      	lsls	r3, r3, #23
 8006774:	4605      	mov	r5, r0
 8006776:	460c      	mov	r4, r1
 8006778:	4616      	mov	r6, r2
 800677a:	d505      	bpl.n	8006788 <__swrite+0x1e>
 800677c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006780:	2302      	movs	r3, #2
 8006782:	2200      	movs	r2, #0
 8006784:	f000 f8d0 	bl	8006928 <_lseek_r>
 8006788:	89a3      	ldrh	r3, [r4, #12]
 800678a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800678e:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006792:	81a3      	strh	r3, [r4, #12]
 8006794:	4632      	mov	r2, r6
 8006796:	463b      	mov	r3, r7
 8006798:	4628      	mov	r0, r5
 800679a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800679e:	f000 b8e7 	b.w	8006970 <_write_r>

080067a2 <__sseek>:
 80067a2:	b510      	push	{r4, lr}
 80067a4:	460c      	mov	r4, r1
 80067a6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067aa:	f000 f8bd 	bl	8006928 <_lseek_r>
 80067ae:	1c43      	adds	r3, r0, #1
 80067b0:	89a3      	ldrh	r3, [r4, #12]
 80067b2:	bf15      	itete	ne
 80067b4:	6560      	strne	r0, [r4, #84]	@ 0x54
 80067b6:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80067ba:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80067be:	81a3      	strheq	r3, [r4, #12]
 80067c0:	bf18      	it	ne
 80067c2:	81a3      	strhne	r3, [r4, #12]
 80067c4:	bd10      	pop	{r4, pc}

080067c6 <__sclose>:
 80067c6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80067ca:	f000 b89d 	b.w	8006908 <_close_r>

080067ce <__swbuf_r>:
 80067ce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067d0:	460e      	mov	r6, r1
 80067d2:	4614      	mov	r4, r2
 80067d4:	4605      	mov	r5, r0
 80067d6:	b118      	cbz	r0, 80067e0 <__swbuf_r+0x12>
 80067d8:	6a03      	ldr	r3, [r0, #32]
 80067da:	b90b      	cbnz	r3, 80067e0 <__swbuf_r+0x12>
 80067dc:	f7ff ff0e 	bl	80065fc <__sinit>
 80067e0:	69a3      	ldr	r3, [r4, #24]
 80067e2:	60a3      	str	r3, [r4, #8]
 80067e4:	89a3      	ldrh	r3, [r4, #12]
 80067e6:	071a      	lsls	r2, r3, #28
 80067e8:	d501      	bpl.n	80067ee <__swbuf_r+0x20>
 80067ea:	6923      	ldr	r3, [r4, #16]
 80067ec:	b943      	cbnz	r3, 8006800 <__swbuf_r+0x32>
 80067ee:	4621      	mov	r1, r4
 80067f0:	4628      	mov	r0, r5
 80067f2:	f000 f82b 	bl	800684c <__swsetup_r>
 80067f6:	b118      	cbz	r0, 8006800 <__swbuf_r+0x32>
 80067f8:	f04f 37ff 	mov.w	r7, #4294967295
 80067fc:	4638      	mov	r0, r7
 80067fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006800:	6823      	ldr	r3, [r4, #0]
 8006802:	6922      	ldr	r2, [r4, #16]
 8006804:	1a98      	subs	r0, r3, r2
 8006806:	6963      	ldr	r3, [r4, #20]
 8006808:	b2f6      	uxtb	r6, r6
 800680a:	4283      	cmp	r3, r0
 800680c:	4637      	mov	r7, r6
 800680e:	dc05      	bgt.n	800681c <__swbuf_r+0x4e>
 8006810:	4621      	mov	r1, r4
 8006812:	4628      	mov	r0, r5
 8006814:	f000 fd38 	bl	8007288 <_fflush_r>
 8006818:	2800      	cmp	r0, #0
 800681a:	d1ed      	bne.n	80067f8 <__swbuf_r+0x2a>
 800681c:	68a3      	ldr	r3, [r4, #8]
 800681e:	3b01      	subs	r3, #1
 8006820:	60a3      	str	r3, [r4, #8]
 8006822:	6823      	ldr	r3, [r4, #0]
 8006824:	1c5a      	adds	r2, r3, #1
 8006826:	6022      	str	r2, [r4, #0]
 8006828:	701e      	strb	r6, [r3, #0]
 800682a:	6962      	ldr	r2, [r4, #20]
 800682c:	1c43      	adds	r3, r0, #1
 800682e:	429a      	cmp	r2, r3
 8006830:	d004      	beq.n	800683c <__swbuf_r+0x6e>
 8006832:	89a3      	ldrh	r3, [r4, #12]
 8006834:	07db      	lsls	r3, r3, #31
 8006836:	d5e1      	bpl.n	80067fc <__swbuf_r+0x2e>
 8006838:	2e0a      	cmp	r6, #10
 800683a:	d1df      	bne.n	80067fc <__swbuf_r+0x2e>
 800683c:	4621      	mov	r1, r4
 800683e:	4628      	mov	r0, r5
 8006840:	f000 fd22 	bl	8007288 <_fflush_r>
 8006844:	2800      	cmp	r0, #0
 8006846:	d0d9      	beq.n	80067fc <__swbuf_r+0x2e>
 8006848:	e7d6      	b.n	80067f8 <__swbuf_r+0x2a>
	...

0800684c <__swsetup_r>:
 800684c:	b538      	push	{r3, r4, r5, lr}
 800684e:	4b29      	ldr	r3, [pc, #164]	@ (80068f4 <__swsetup_r+0xa8>)
 8006850:	4605      	mov	r5, r0
 8006852:	6818      	ldr	r0, [r3, #0]
 8006854:	460c      	mov	r4, r1
 8006856:	b118      	cbz	r0, 8006860 <__swsetup_r+0x14>
 8006858:	6a03      	ldr	r3, [r0, #32]
 800685a:	b90b      	cbnz	r3, 8006860 <__swsetup_r+0x14>
 800685c:	f7ff fece 	bl	80065fc <__sinit>
 8006860:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006864:	0719      	lsls	r1, r3, #28
 8006866:	d422      	bmi.n	80068ae <__swsetup_r+0x62>
 8006868:	06da      	lsls	r2, r3, #27
 800686a:	d407      	bmi.n	800687c <__swsetup_r+0x30>
 800686c:	2209      	movs	r2, #9
 800686e:	602a      	str	r2, [r5, #0]
 8006870:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006874:	81a3      	strh	r3, [r4, #12]
 8006876:	f04f 30ff 	mov.w	r0, #4294967295
 800687a:	e033      	b.n	80068e4 <__swsetup_r+0x98>
 800687c:	0758      	lsls	r0, r3, #29
 800687e:	d512      	bpl.n	80068a6 <__swsetup_r+0x5a>
 8006880:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006882:	b141      	cbz	r1, 8006896 <__swsetup_r+0x4a>
 8006884:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006888:	4299      	cmp	r1, r3
 800688a:	d002      	beq.n	8006892 <__swsetup_r+0x46>
 800688c:	4628      	mov	r0, r5
 800688e:	f000 f8af 	bl	80069f0 <_free_r>
 8006892:	2300      	movs	r3, #0
 8006894:	6363      	str	r3, [r4, #52]	@ 0x34
 8006896:	89a3      	ldrh	r3, [r4, #12]
 8006898:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800689c:	81a3      	strh	r3, [r4, #12]
 800689e:	2300      	movs	r3, #0
 80068a0:	6063      	str	r3, [r4, #4]
 80068a2:	6923      	ldr	r3, [r4, #16]
 80068a4:	6023      	str	r3, [r4, #0]
 80068a6:	89a3      	ldrh	r3, [r4, #12]
 80068a8:	f043 0308 	orr.w	r3, r3, #8
 80068ac:	81a3      	strh	r3, [r4, #12]
 80068ae:	6923      	ldr	r3, [r4, #16]
 80068b0:	b94b      	cbnz	r3, 80068c6 <__swsetup_r+0x7a>
 80068b2:	89a3      	ldrh	r3, [r4, #12]
 80068b4:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80068b8:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80068bc:	d003      	beq.n	80068c6 <__swsetup_r+0x7a>
 80068be:	4621      	mov	r1, r4
 80068c0:	4628      	mov	r0, r5
 80068c2:	f000 fd2f 	bl	8007324 <__smakebuf_r>
 80068c6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80068ca:	f013 0201 	ands.w	r2, r3, #1
 80068ce:	d00a      	beq.n	80068e6 <__swsetup_r+0x9a>
 80068d0:	2200      	movs	r2, #0
 80068d2:	60a2      	str	r2, [r4, #8]
 80068d4:	6962      	ldr	r2, [r4, #20]
 80068d6:	4252      	negs	r2, r2
 80068d8:	61a2      	str	r2, [r4, #24]
 80068da:	6922      	ldr	r2, [r4, #16]
 80068dc:	b942      	cbnz	r2, 80068f0 <__swsetup_r+0xa4>
 80068de:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80068e2:	d1c5      	bne.n	8006870 <__swsetup_r+0x24>
 80068e4:	bd38      	pop	{r3, r4, r5, pc}
 80068e6:	0799      	lsls	r1, r3, #30
 80068e8:	bf58      	it	pl
 80068ea:	6962      	ldrpl	r2, [r4, #20]
 80068ec:	60a2      	str	r2, [r4, #8]
 80068ee:	e7f4      	b.n	80068da <__swsetup_r+0x8e>
 80068f0:	2000      	movs	r0, #0
 80068f2:	e7f7      	b.n	80068e4 <__swsetup_r+0x98>
 80068f4:	20000180 	.word	0x20000180

080068f8 <memset>:
 80068f8:	4402      	add	r2, r0
 80068fa:	4603      	mov	r3, r0
 80068fc:	4293      	cmp	r3, r2
 80068fe:	d100      	bne.n	8006902 <memset+0xa>
 8006900:	4770      	bx	lr
 8006902:	f803 1b01 	strb.w	r1, [r3], #1
 8006906:	e7f9      	b.n	80068fc <memset+0x4>

08006908 <_close_r>:
 8006908:	b538      	push	{r3, r4, r5, lr}
 800690a:	4d06      	ldr	r5, [pc, #24]	@ (8006924 <_close_r+0x1c>)
 800690c:	2300      	movs	r3, #0
 800690e:	4604      	mov	r4, r0
 8006910:	4608      	mov	r0, r1
 8006912:	602b      	str	r3, [r5, #0]
 8006914:	f7fb ff4f 	bl	80027b6 <_close>
 8006918:	1c43      	adds	r3, r0, #1
 800691a:	d102      	bne.n	8006922 <_close_r+0x1a>
 800691c:	682b      	ldr	r3, [r5, #0]
 800691e:	b103      	cbz	r3, 8006922 <_close_r+0x1a>
 8006920:	6023      	str	r3, [r4, #0]
 8006922:	bd38      	pop	{r3, r4, r5, pc}
 8006924:	200007ac 	.word	0x200007ac

08006928 <_lseek_r>:
 8006928:	b538      	push	{r3, r4, r5, lr}
 800692a:	4d07      	ldr	r5, [pc, #28]	@ (8006948 <_lseek_r+0x20>)
 800692c:	4604      	mov	r4, r0
 800692e:	4608      	mov	r0, r1
 8006930:	4611      	mov	r1, r2
 8006932:	2200      	movs	r2, #0
 8006934:	602a      	str	r2, [r5, #0]
 8006936:	461a      	mov	r2, r3
 8006938:	f7fb ff64 	bl	8002804 <_lseek>
 800693c:	1c43      	adds	r3, r0, #1
 800693e:	d102      	bne.n	8006946 <_lseek_r+0x1e>
 8006940:	682b      	ldr	r3, [r5, #0]
 8006942:	b103      	cbz	r3, 8006946 <_lseek_r+0x1e>
 8006944:	6023      	str	r3, [r4, #0]
 8006946:	bd38      	pop	{r3, r4, r5, pc}
 8006948:	200007ac 	.word	0x200007ac

0800694c <_read_r>:
 800694c:	b538      	push	{r3, r4, r5, lr}
 800694e:	4d07      	ldr	r5, [pc, #28]	@ (800696c <_read_r+0x20>)
 8006950:	4604      	mov	r4, r0
 8006952:	4608      	mov	r0, r1
 8006954:	4611      	mov	r1, r2
 8006956:	2200      	movs	r2, #0
 8006958:	602a      	str	r2, [r5, #0]
 800695a:	461a      	mov	r2, r3
 800695c:	f7fb fef2 	bl	8002744 <_read>
 8006960:	1c43      	adds	r3, r0, #1
 8006962:	d102      	bne.n	800696a <_read_r+0x1e>
 8006964:	682b      	ldr	r3, [r5, #0]
 8006966:	b103      	cbz	r3, 800696a <_read_r+0x1e>
 8006968:	6023      	str	r3, [r4, #0]
 800696a:	bd38      	pop	{r3, r4, r5, pc}
 800696c:	200007ac 	.word	0x200007ac

08006970 <_write_r>:
 8006970:	b538      	push	{r3, r4, r5, lr}
 8006972:	4d07      	ldr	r5, [pc, #28]	@ (8006990 <_write_r+0x20>)
 8006974:	4604      	mov	r4, r0
 8006976:	4608      	mov	r0, r1
 8006978:	4611      	mov	r1, r2
 800697a:	2200      	movs	r2, #0
 800697c:	602a      	str	r2, [r5, #0]
 800697e:	461a      	mov	r2, r3
 8006980:	f7fb fefd 	bl	800277e <_write>
 8006984:	1c43      	adds	r3, r0, #1
 8006986:	d102      	bne.n	800698e <_write_r+0x1e>
 8006988:	682b      	ldr	r3, [r5, #0]
 800698a:	b103      	cbz	r3, 800698e <_write_r+0x1e>
 800698c:	6023      	str	r3, [r4, #0]
 800698e:	bd38      	pop	{r3, r4, r5, pc}
 8006990:	200007ac 	.word	0x200007ac

08006994 <__errno>:
 8006994:	4b01      	ldr	r3, [pc, #4]	@ (800699c <__errno+0x8>)
 8006996:	6818      	ldr	r0, [r3, #0]
 8006998:	4770      	bx	lr
 800699a:	bf00      	nop
 800699c:	20000180 	.word	0x20000180

080069a0 <__libc_init_array>:
 80069a0:	b570      	push	{r4, r5, r6, lr}
 80069a2:	4d0d      	ldr	r5, [pc, #52]	@ (80069d8 <__libc_init_array+0x38>)
 80069a4:	4c0d      	ldr	r4, [pc, #52]	@ (80069dc <__libc_init_array+0x3c>)
 80069a6:	1b64      	subs	r4, r4, r5
 80069a8:	10a4      	asrs	r4, r4, #2
 80069aa:	2600      	movs	r6, #0
 80069ac:	42a6      	cmp	r6, r4
 80069ae:	d109      	bne.n	80069c4 <__libc_init_array+0x24>
 80069b0:	4d0b      	ldr	r5, [pc, #44]	@ (80069e0 <__libc_init_array+0x40>)
 80069b2:	4c0c      	ldr	r4, [pc, #48]	@ (80069e4 <__libc_init_array+0x44>)
 80069b4:	f000 fd24 	bl	8007400 <_init>
 80069b8:	1b64      	subs	r4, r4, r5
 80069ba:	10a4      	asrs	r4, r4, #2
 80069bc:	2600      	movs	r6, #0
 80069be:	42a6      	cmp	r6, r4
 80069c0:	d105      	bne.n	80069ce <__libc_init_array+0x2e>
 80069c2:	bd70      	pop	{r4, r5, r6, pc}
 80069c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80069c8:	4798      	blx	r3
 80069ca:	3601      	adds	r6, #1
 80069cc:	e7ee      	b.n	80069ac <__libc_init_array+0xc>
 80069ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80069d2:	4798      	blx	r3
 80069d4:	3601      	adds	r6, #1
 80069d6:	e7f2      	b.n	80069be <__libc_init_array+0x1e>
 80069d8:	08007570 	.word	0x08007570
 80069dc:	08007570 	.word	0x08007570
 80069e0:	08007570 	.word	0x08007570
 80069e4:	08007574 	.word	0x08007574

080069e8 <__retarget_lock_init_recursive>:
 80069e8:	4770      	bx	lr

080069ea <__retarget_lock_acquire_recursive>:
 80069ea:	4770      	bx	lr

080069ec <__retarget_lock_release_recursive>:
 80069ec:	4770      	bx	lr
	...

080069f0 <_free_r>:
 80069f0:	b538      	push	{r3, r4, r5, lr}
 80069f2:	4605      	mov	r5, r0
 80069f4:	2900      	cmp	r1, #0
 80069f6:	d041      	beq.n	8006a7c <_free_r+0x8c>
 80069f8:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80069fc:	1f0c      	subs	r4, r1, #4
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	bfb8      	it	lt
 8006a02:	18e4      	addlt	r4, r4, r3
 8006a04:	f000 f8e0 	bl	8006bc8 <__malloc_lock>
 8006a08:	4a1d      	ldr	r2, [pc, #116]	@ (8006a80 <_free_r+0x90>)
 8006a0a:	6813      	ldr	r3, [r2, #0]
 8006a0c:	b933      	cbnz	r3, 8006a1c <_free_r+0x2c>
 8006a0e:	6063      	str	r3, [r4, #4]
 8006a10:	6014      	str	r4, [r2, #0]
 8006a12:	4628      	mov	r0, r5
 8006a14:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006a18:	f000 b8dc 	b.w	8006bd4 <__malloc_unlock>
 8006a1c:	42a3      	cmp	r3, r4
 8006a1e:	d908      	bls.n	8006a32 <_free_r+0x42>
 8006a20:	6820      	ldr	r0, [r4, #0]
 8006a22:	1821      	adds	r1, r4, r0
 8006a24:	428b      	cmp	r3, r1
 8006a26:	bf01      	itttt	eq
 8006a28:	6819      	ldreq	r1, [r3, #0]
 8006a2a:	685b      	ldreq	r3, [r3, #4]
 8006a2c:	1809      	addeq	r1, r1, r0
 8006a2e:	6021      	streq	r1, [r4, #0]
 8006a30:	e7ed      	b.n	8006a0e <_free_r+0x1e>
 8006a32:	461a      	mov	r2, r3
 8006a34:	685b      	ldr	r3, [r3, #4]
 8006a36:	b10b      	cbz	r3, 8006a3c <_free_r+0x4c>
 8006a38:	42a3      	cmp	r3, r4
 8006a3a:	d9fa      	bls.n	8006a32 <_free_r+0x42>
 8006a3c:	6811      	ldr	r1, [r2, #0]
 8006a3e:	1850      	adds	r0, r2, r1
 8006a40:	42a0      	cmp	r0, r4
 8006a42:	d10b      	bne.n	8006a5c <_free_r+0x6c>
 8006a44:	6820      	ldr	r0, [r4, #0]
 8006a46:	4401      	add	r1, r0
 8006a48:	1850      	adds	r0, r2, r1
 8006a4a:	4283      	cmp	r3, r0
 8006a4c:	6011      	str	r1, [r2, #0]
 8006a4e:	d1e0      	bne.n	8006a12 <_free_r+0x22>
 8006a50:	6818      	ldr	r0, [r3, #0]
 8006a52:	685b      	ldr	r3, [r3, #4]
 8006a54:	6053      	str	r3, [r2, #4]
 8006a56:	4408      	add	r0, r1
 8006a58:	6010      	str	r0, [r2, #0]
 8006a5a:	e7da      	b.n	8006a12 <_free_r+0x22>
 8006a5c:	d902      	bls.n	8006a64 <_free_r+0x74>
 8006a5e:	230c      	movs	r3, #12
 8006a60:	602b      	str	r3, [r5, #0]
 8006a62:	e7d6      	b.n	8006a12 <_free_r+0x22>
 8006a64:	6820      	ldr	r0, [r4, #0]
 8006a66:	1821      	adds	r1, r4, r0
 8006a68:	428b      	cmp	r3, r1
 8006a6a:	bf04      	itt	eq
 8006a6c:	6819      	ldreq	r1, [r3, #0]
 8006a6e:	685b      	ldreq	r3, [r3, #4]
 8006a70:	6063      	str	r3, [r4, #4]
 8006a72:	bf04      	itt	eq
 8006a74:	1809      	addeq	r1, r1, r0
 8006a76:	6021      	streq	r1, [r4, #0]
 8006a78:	6054      	str	r4, [r2, #4]
 8006a7a:	e7ca      	b.n	8006a12 <_free_r+0x22>
 8006a7c:	bd38      	pop	{r3, r4, r5, pc}
 8006a7e:	bf00      	nop
 8006a80:	200007b8 	.word	0x200007b8

08006a84 <sbrk_aligned>:
 8006a84:	b570      	push	{r4, r5, r6, lr}
 8006a86:	4e0f      	ldr	r6, [pc, #60]	@ (8006ac4 <sbrk_aligned+0x40>)
 8006a88:	460c      	mov	r4, r1
 8006a8a:	6831      	ldr	r1, [r6, #0]
 8006a8c:	4605      	mov	r5, r0
 8006a8e:	b911      	cbnz	r1, 8006a96 <sbrk_aligned+0x12>
 8006a90:	f000 fca6 	bl	80073e0 <_sbrk_r>
 8006a94:	6030      	str	r0, [r6, #0]
 8006a96:	4621      	mov	r1, r4
 8006a98:	4628      	mov	r0, r5
 8006a9a:	f000 fca1 	bl	80073e0 <_sbrk_r>
 8006a9e:	1c43      	adds	r3, r0, #1
 8006aa0:	d103      	bne.n	8006aaa <sbrk_aligned+0x26>
 8006aa2:	f04f 34ff 	mov.w	r4, #4294967295
 8006aa6:	4620      	mov	r0, r4
 8006aa8:	bd70      	pop	{r4, r5, r6, pc}
 8006aaa:	1cc4      	adds	r4, r0, #3
 8006aac:	f024 0403 	bic.w	r4, r4, #3
 8006ab0:	42a0      	cmp	r0, r4
 8006ab2:	d0f8      	beq.n	8006aa6 <sbrk_aligned+0x22>
 8006ab4:	1a21      	subs	r1, r4, r0
 8006ab6:	4628      	mov	r0, r5
 8006ab8:	f000 fc92 	bl	80073e0 <_sbrk_r>
 8006abc:	3001      	adds	r0, #1
 8006abe:	d1f2      	bne.n	8006aa6 <sbrk_aligned+0x22>
 8006ac0:	e7ef      	b.n	8006aa2 <sbrk_aligned+0x1e>
 8006ac2:	bf00      	nop
 8006ac4:	200007b4 	.word	0x200007b4

08006ac8 <_malloc_r>:
 8006ac8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006acc:	1ccd      	adds	r5, r1, #3
 8006ace:	f025 0503 	bic.w	r5, r5, #3
 8006ad2:	3508      	adds	r5, #8
 8006ad4:	2d0c      	cmp	r5, #12
 8006ad6:	bf38      	it	cc
 8006ad8:	250c      	movcc	r5, #12
 8006ada:	2d00      	cmp	r5, #0
 8006adc:	4606      	mov	r6, r0
 8006ade:	db01      	blt.n	8006ae4 <_malloc_r+0x1c>
 8006ae0:	42a9      	cmp	r1, r5
 8006ae2:	d904      	bls.n	8006aee <_malloc_r+0x26>
 8006ae4:	230c      	movs	r3, #12
 8006ae6:	6033      	str	r3, [r6, #0]
 8006ae8:	2000      	movs	r0, #0
 8006aea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006aee:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8006bc4 <_malloc_r+0xfc>
 8006af2:	f000 f869 	bl	8006bc8 <__malloc_lock>
 8006af6:	f8d8 3000 	ldr.w	r3, [r8]
 8006afa:	461c      	mov	r4, r3
 8006afc:	bb44      	cbnz	r4, 8006b50 <_malloc_r+0x88>
 8006afe:	4629      	mov	r1, r5
 8006b00:	4630      	mov	r0, r6
 8006b02:	f7ff ffbf 	bl	8006a84 <sbrk_aligned>
 8006b06:	1c43      	adds	r3, r0, #1
 8006b08:	4604      	mov	r4, r0
 8006b0a:	d158      	bne.n	8006bbe <_malloc_r+0xf6>
 8006b0c:	f8d8 4000 	ldr.w	r4, [r8]
 8006b10:	4627      	mov	r7, r4
 8006b12:	2f00      	cmp	r7, #0
 8006b14:	d143      	bne.n	8006b9e <_malloc_r+0xd6>
 8006b16:	2c00      	cmp	r4, #0
 8006b18:	d04b      	beq.n	8006bb2 <_malloc_r+0xea>
 8006b1a:	6823      	ldr	r3, [r4, #0]
 8006b1c:	4639      	mov	r1, r7
 8006b1e:	4630      	mov	r0, r6
 8006b20:	eb04 0903 	add.w	r9, r4, r3
 8006b24:	f000 fc5c 	bl	80073e0 <_sbrk_r>
 8006b28:	4581      	cmp	r9, r0
 8006b2a:	d142      	bne.n	8006bb2 <_malloc_r+0xea>
 8006b2c:	6821      	ldr	r1, [r4, #0]
 8006b2e:	1a6d      	subs	r5, r5, r1
 8006b30:	4629      	mov	r1, r5
 8006b32:	4630      	mov	r0, r6
 8006b34:	f7ff ffa6 	bl	8006a84 <sbrk_aligned>
 8006b38:	3001      	adds	r0, #1
 8006b3a:	d03a      	beq.n	8006bb2 <_malloc_r+0xea>
 8006b3c:	6823      	ldr	r3, [r4, #0]
 8006b3e:	442b      	add	r3, r5
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	f8d8 3000 	ldr.w	r3, [r8]
 8006b46:	685a      	ldr	r2, [r3, #4]
 8006b48:	bb62      	cbnz	r2, 8006ba4 <_malloc_r+0xdc>
 8006b4a:	f8c8 7000 	str.w	r7, [r8]
 8006b4e:	e00f      	b.n	8006b70 <_malloc_r+0xa8>
 8006b50:	6822      	ldr	r2, [r4, #0]
 8006b52:	1b52      	subs	r2, r2, r5
 8006b54:	d420      	bmi.n	8006b98 <_malloc_r+0xd0>
 8006b56:	2a0b      	cmp	r2, #11
 8006b58:	d917      	bls.n	8006b8a <_malloc_r+0xc2>
 8006b5a:	1961      	adds	r1, r4, r5
 8006b5c:	42a3      	cmp	r3, r4
 8006b5e:	6025      	str	r5, [r4, #0]
 8006b60:	bf18      	it	ne
 8006b62:	6059      	strne	r1, [r3, #4]
 8006b64:	6863      	ldr	r3, [r4, #4]
 8006b66:	bf08      	it	eq
 8006b68:	f8c8 1000 	streq.w	r1, [r8]
 8006b6c:	5162      	str	r2, [r4, r5]
 8006b6e:	604b      	str	r3, [r1, #4]
 8006b70:	4630      	mov	r0, r6
 8006b72:	f000 f82f 	bl	8006bd4 <__malloc_unlock>
 8006b76:	f104 000b 	add.w	r0, r4, #11
 8006b7a:	1d23      	adds	r3, r4, #4
 8006b7c:	f020 0007 	bic.w	r0, r0, #7
 8006b80:	1ac2      	subs	r2, r0, r3
 8006b82:	bf1c      	itt	ne
 8006b84:	1a1b      	subne	r3, r3, r0
 8006b86:	50a3      	strne	r3, [r4, r2]
 8006b88:	e7af      	b.n	8006aea <_malloc_r+0x22>
 8006b8a:	6862      	ldr	r2, [r4, #4]
 8006b8c:	42a3      	cmp	r3, r4
 8006b8e:	bf0c      	ite	eq
 8006b90:	f8c8 2000 	streq.w	r2, [r8]
 8006b94:	605a      	strne	r2, [r3, #4]
 8006b96:	e7eb      	b.n	8006b70 <_malloc_r+0xa8>
 8006b98:	4623      	mov	r3, r4
 8006b9a:	6864      	ldr	r4, [r4, #4]
 8006b9c:	e7ae      	b.n	8006afc <_malloc_r+0x34>
 8006b9e:	463c      	mov	r4, r7
 8006ba0:	687f      	ldr	r7, [r7, #4]
 8006ba2:	e7b6      	b.n	8006b12 <_malloc_r+0x4a>
 8006ba4:	461a      	mov	r2, r3
 8006ba6:	685b      	ldr	r3, [r3, #4]
 8006ba8:	42a3      	cmp	r3, r4
 8006baa:	d1fb      	bne.n	8006ba4 <_malloc_r+0xdc>
 8006bac:	2300      	movs	r3, #0
 8006bae:	6053      	str	r3, [r2, #4]
 8006bb0:	e7de      	b.n	8006b70 <_malloc_r+0xa8>
 8006bb2:	230c      	movs	r3, #12
 8006bb4:	6033      	str	r3, [r6, #0]
 8006bb6:	4630      	mov	r0, r6
 8006bb8:	f000 f80c 	bl	8006bd4 <__malloc_unlock>
 8006bbc:	e794      	b.n	8006ae8 <_malloc_r+0x20>
 8006bbe:	6005      	str	r5, [r0, #0]
 8006bc0:	e7d6      	b.n	8006b70 <_malloc_r+0xa8>
 8006bc2:	bf00      	nop
 8006bc4:	200007b8 	.word	0x200007b8

08006bc8 <__malloc_lock>:
 8006bc8:	4801      	ldr	r0, [pc, #4]	@ (8006bd0 <__malloc_lock+0x8>)
 8006bca:	f7ff bf0e 	b.w	80069ea <__retarget_lock_acquire_recursive>
 8006bce:	bf00      	nop
 8006bd0:	200007b0 	.word	0x200007b0

08006bd4 <__malloc_unlock>:
 8006bd4:	4801      	ldr	r0, [pc, #4]	@ (8006bdc <__malloc_unlock+0x8>)
 8006bd6:	f7ff bf09 	b.w	80069ec <__retarget_lock_release_recursive>
 8006bda:	bf00      	nop
 8006bdc:	200007b0 	.word	0x200007b0

08006be0 <__sfputc_r>:
 8006be0:	6893      	ldr	r3, [r2, #8]
 8006be2:	3b01      	subs	r3, #1
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	b410      	push	{r4}
 8006be8:	6093      	str	r3, [r2, #8]
 8006bea:	da08      	bge.n	8006bfe <__sfputc_r+0x1e>
 8006bec:	6994      	ldr	r4, [r2, #24]
 8006bee:	42a3      	cmp	r3, r4
 8006bf0:	db01      	blt.n	8006bf6 <__sfputc_r+0x16>
 8006bf2:	290a      	cmp	r1, #10
 8006bf4:	d103      	bne.n	8006bfe <__sfputc_r+0x1e>
 8006bf6:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006bfa:	f7ff bde8 	b.w	80067ce <__swbuf_r>
 8006bfe:	6813      	ldr	r3, [r2, #0]
 8006c00:	1c58      	adds	r0, r3, #1
 8006c02:	6010      	str	r0, [r2, #0]
 8006c04:	7019      	strb	r1, [r3, #0]
 8006c06:	4608      	mov	r0, r1
 8006c08:	f85d 4b04 	ldr.w	r4, [sp], #4
 8006c0c:	4770      	bx	lr

08006c0e <__sfputs_r>:
 8006c0e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006c10:	4606      	mov	r6, r0
 8006c12:	460f      	mov	r7, r1
 8006c14:	4614      	mov	r4, r2
 8006c16:	18d5      	adds	r5, r2, r3
 8006c18:	42ac      	cmp	r4, r5
 8006c1a:	d101      	bne.n	8006c20 <__sfputs_r+0x12>
 8006c1c:	2000      	movs	r0, #0
 8006c1e:	e007      	b.n	8006c30 <__sfputs_r+0x22>
 8006c20:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006c24:	463a      	mov	r2, r7
 8006c26:	4630      	mov	r0, r6
 8006c28:	f7ff ffda 	bl	8006be0 <__sfputc_r>
 8006c2c:	1c43      	adds	r3, r0, #1
 8006c2e:	d1f3      	bne.n	8006c18 <__sfputs_r+0xa>
 8006c30:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006c34 <_vfiprintf_r>:
 8006c34:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c38:	460d      	mov	r5, r1
 8006c3a:	b09d      	sub	sp, #116	@ 0x74
 8006c3c:	4614      	mov	r4, r2
 8006c3e:	4698      	mov	r8, r3
 8006c40:	4606      	mov	r6, r0
 8006c42:	b118      	cbz	r0, 8006c4c <_vfiprintf_r+0x18>
 8006c44:	6a03      	ldr	r3, [r0, #32]
 8006c46:	b90b      	cbnz	r3, 8006c4c <_vfiprintf_r+0x18>
 8006c48:	f7ff fcd8 	bl	80065fc <__sinit>
 8006c4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c4e:	07d9      	lsls	r1, r3, #31
 8006c50:	d405      	bmi.n	8006c5e <_vfiprintf_r+0x2a>
 8006c52:	89ab      	ldrh	r3, [r5, #12]
 8006c54:	059a      	lsls	r2, r3, #22
 8006c56:	d402      	bmi.n	8006c5e <_vfiprintf_r+0x2a>
 8006c58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c5a:	f7ff fec6 	bl	80069ea <__retarget_lock_acquire_recursive>
 8006c5e:	89ab      	ldrh	r3, [r5, #12]
 8006c60:	071b      	lsls	r3, r3, #28
 8006c62:	d501      	bpl.n	8006c68 <_vfiprintf_r+0x34>
 8006c64:	692b      	ldr	r3, [r5, #16]
 8006c66:	b99b      	cbnz	r3, 8006c90 <_vfiprintf_r+0x5c>
 8006c68:	4629      	mov	r1, r5
 8006c6a:	4630      	mov	r0, r6
 8006c6c:	f7ff fdee 	bl	800684c <__swsetup_r>
 8006c70:	b170      	cbz	r0, 8006c90 <_vfiprintf_r+0x5c>
 8006c72:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006c74:	07dc      	lsls	r4, r3, #31
 8006c76:	d504      	bpl.n	8006c82 <_vfiprintf_r+0x4e>
 8006c78:	f04f 30ff 	mov.w	r0, #4294967295
 8006c7c:	b01d      	add	sp, #116	@ 0x74
 8006c7e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006c82:	89ab      	ldrh	r3, [r5, #12]
 8006c84:	0598      	lsls	r0, r3, #22
 8006c86:	d4f7      	bmi.n	8006c78 <_vfiprintf_r+0x44>
 8006c88:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006c8a:	f7ff feaf 	bl	80069ec <__retarget_lock_release_recursive>
 8006c8e:	e7f3      	b.n	8006c78 <_vfiprintf_r+0x44>
 8006c90:	2300      	movs	r3, #0
 8006c92:	9309      	str	r3, [sp, #36]	@ 0x24
 8006c94:	2320      	movs	r3, #32
 8006c96:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8006c9a:	f8cd 800c 	str.w	r8, [sp, #12]
 8006c9e:	2330      	movs	r3, #48	@ 0x30
 8006ca0:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8006e50 <_vfiprintf_r+0x21c>
 8006ca4:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8006ca8:	f04f 0901 	mov.w	r9, #1
 8006cac:	4623      	mov	r3, r4
 8006cae:	469a      	mov	sl, r3
 8006cb0:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006cb4:	b10a      	cbz	r2, 8006cba <_vfiprintf_r+0x86>
 8006cb6:	2a25      	cmp	r2, #37	@ 0x25
 8006cb8:	d1f9      	bne.n	8006cae <_vfiprintf_r+0x7a>
 8006cba:	ebba 0b04 	subs.w	fp, sl, r4
 8006cbe:	d00b      	beq.n	8006cd8 <_vfiprintf_r+0xa4>
 8006cc0:	465b      	mov	r3, fp
 8006cc2:	4622      	mov	r2, r4
 8006cc4:	4629      	mov	r1, r5
 8006cc6:	4630      	mov	r0, r6
 8006cc8:	f7ff ffa1 	bl	8006c0e <__sfputs_r>
 8006ccc:	3001      	adds	r0, #1
 8006cce:	f000 80a7 	beq.w	8006e20 <_vfiprintf_r+0x1ec>
 8006cd2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006cd4:	445a      	add	r2, fp
 8006cd6:	9209      	str	r2, [sp, #36]	@ 0x24
 8006cd8:	f89a 3000 	ldrb.w	r3, [sl]
 8006cdc:	2b00      	cmp	r3, #0
 8006cde:	f000 809f 	beq.w	8006e20 <_vfiprintf_r+0x1ec>
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	f04f 32ff 	mov.w	r2, #4294967295
 8006ce8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006cec:	f10a 0a01 	add.w	sl, sl, #1
 8006cf0:	9304      	str	r3, [sp, #16]
 8006cf2:	9307      	str	r3, [sp, #28]
 8006cf4:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8006cf8:	931a      	str	r3, [sp, #104]	@ 0x68
 8006cfa:	4654      	mov	r4, sl
 8006cfc:	2205      	movs	r2, #5
 8006cfe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006d02:	4853      	ldr	r0, [pc, #332]	@ (8006e50 <_vfiprintf_r+0x21c>)
 8006d04:	f7f9 fa64 	bl	80001d0 <memchr>
 8006d08:	9a04      	ldr	r2, [sp, #16]
 8006d0a:	b9d8      	cbnz	r0, 8006d44 <_vfiprintf_r+0x110>
 8006d0c:	06d1      	lsls	r1, r2, #27
 8006d0e:	bf44      	itt	mi
 8006d10:	2320      	movmi	r3, #32
 8006d12:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d16:	0713      	lsls	r3, r2, #28
 8006d18:	bf44      	itt	mi
 8006d1a:	232b      	movmi	r3, #43	@ 0x2b
 8006d1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8006d20:	f89a 3000 	ldrb.w	r3, [sl]
 8006d24:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d26:	d015      	beq.n	8006d54 <_vfiprintf_r+0x120>
 8006d28:	9a07      	ldr	r2, [sp, #28]
 8006d2a:	4654      	mov	r4, sl
 8006d2c:	2000      	movs	r0, #0
 8006d2e:	f04f 0c0a 	mov.w	ip, #10
 8006d32:	4621      	mov	r1, r4
 8006d34:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006d38:	3b30      	subs	r3, #48	@ 0x30
 8006d3a:	2b09      	cmp	r3, #9
 8006d3c:	d94b      	bls.n	8006dd6 <_vfiprintf_r+0x1a2>
 8006d3e:	b1b0      	cbz	r0, 8006d6e <_vfiprintf_r+0x13a>
 8006d40:	9207      	str	r2, [sp, #28]
 8006d42:	e014      	b.n	8006d6e <_vfiprintf_r+0x13a>
 8006d44:	eba0 0308 	sub.w	r3, r0, r8
 8006d48:	fa09 f303 	lsl.w	r3, r9, r3
 8006d4c:	4313      	orrs	r3, r2
 8006d4e:	9304      	str	r3, [sp, #16]
 8006d50:	46a2      	mov	sl, r4
 8006d52:	e7d2      	b.n	8006cfa <_vfiprintf_r+0xc6>
 8006d54:	9b03      	ldr	r3, [sp, #12]
 8006d56:	1d19      	adds	r1, r3, #4
 8006d58:	681b      	ldr	r3, [r3, #0]
 8006d5a:	9103      	str	r1, [sp, #12]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	bfbb      	ittet	lt
 8006d60:	425b      	neglt	r3, r3
 8006d62:	f042 0202 	orrlt.w	r2, r2, #2
 8006d66:	9307      	strge	r3, [sp, #28]
 8006d68:	9307      	strlt	r3, [sp, #28]
 8006d6a:	bfb8      	it	lt
 8006d6c:	9204      	strlt	r2, [sp, #16]
 8006d6e:	7823      	ldrb	r3, [r4, #0]
 8006d70:	2b2e      	cmp	r3, #46	@ 0x2e
 8006d72:	d10a      	bne.n	8006d8a <_vfiprintf_r+0x156>
 8006d74:	7863      	ldrb	r3, [r4, #1]
 8006d76:	2b2a      	cmp	r3, #42	@ 0x2a
 8006d78:	d132      	bne.n	8006de0 <_vfiprintf_r+0x1ac>
 8006d7a:	9b03      	ldr	r3, [sp, #12]
 8006d7c:	1d1a      	adds	r2, r3, #4
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	9203      	str	r2, [sp, #12]
 8006d82:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8006d86:	3402      	adds	r4, #2
 8006d88:	9305      	str	r3, [sp, #20]
 8006d8a:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8006e60 <_vfiprintf_r+0x22c>
 8006d8e:	7821      	ldrb	r1, [r4, #0]
 8006d90:	2203      	movs	r2, #3
 8006d92:	4650      	mov	r0, sl
 8006d94:	f7f9 fa1c 	bl	80001d0 <memchr>
 8006d98:	b138      	cbz	r0, 8006daa <_vfiprintf_r+0x176>
 8006d9a:	9b04      	ldr	r3, [sp, #16]
 8006d9c:	eba0 000a 	sub.w	r0, r0, sl
 8006da0:	2240      	movs	r2, #64	@ 0x40
 8006da2:	4082      	lsls	r2, r0
 8006da4:	4313      	orrs	r3, r2
 8006da6:	3401      	adds	r4, #1
 8006da8:	9304      	str	r3, [sp, #16]
 8006daa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dae:	4829      	ldr	r0, [pc, #164]	@ (8006e54 <_vfiprintf_r+0x220>)
 8006db0:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8006db4:	2206      	movs	r2, #6
 8006db6:	f7f9 fa0b 	bl	80001d0 <memchr>
 8006dba:	2800      	cmp	r0, #0
 8006dbc:	d03f      	beq.n	8006e3e <_vfiprintf_r+0x20a>
 8006dbe:	4b26      	ldr	r3, [pc, #152]	@ (8006e58 <_vfiprintf_r+0x224>)
 8006dc0:	bb1b      	cbnz	r3, 8006e0a <_vfiprintf_r+0x1d6>
 8006dc2:	9b03      	ldr	r3, [sp, #12]
 8006dc4:	3307      	adds	r3, #7
 8006dc6:	f023 0307 	bic.w	r3, r3, #7
 8006dca:	3308      	adds	r3, #8
 8006dcc:	9303      	str	r3, [sp, #12]
 8006dce:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dd0:	443b      	add	r3, r7
 8006dd2:	9309      	str	r3, [sp, #36]	@ 0x24
 8006dd4:	e76a      	b.n	8006cac <_vfiprintf_r+0x78>
 8006dd6:	fb0c 3202 	mla	r2, ip, r2, r3
 8006dda:	460c      	mov	r4, r1
 8006ddc:	2001      	movs	r0, #1
 8006dde:	e7a8      	b.n	8006d32 <_vfiprintf_r+0xfe>
 8006de0:	2300      	movs	r3, #0
 8006de2:	3401      	adds	r4, #1
 8006de4:	9305      	str	r3, [sp, #20]
 8006de6:	4619      	mov	r1, r3
 8006de8:	f04f 0c0a 	mov.w	ip, #10
 8006dec:	4620      	mov	r0, r4
 8006dee:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006df2:	3a30      	subs	r2, #48	@ 0x30
 8006df4:	2a09      	cmp	r2, #9
 8006df6:	d903      	bls.n	8006e00 <_vfiprintf_r+0x1cc>
 8006df8:	2b00      	cmp	r3, #0
 8006dfa:	d0c6      	beq.n	8006d8a <_vfiprintf_r+0x156>
 8006dfc:	9105      	str	r1, [sp, #20]
 8006dfe:	e7c4      	b.n	8006d8a <_vfiprintf_r+0x156>
 8006e00:	fb0c 2101 	mla	r1, ip, r1, r2
 8006e04:	4604      	mov	r4, r0
 8006e06:	2301      	movs	r3, #1
 8006e08:	e7f0      	b.n	8006dec <_vfiprintf_r+0x1b8>
 8006e0a:	ab03      	add	r3, sp, #12
 8006e0c:	9300      	str	r3, [sp, #0]
 8006e0e:	462a      	mov	r2, r5
 8006e10:	4b12      	ldr	r3, [pc, #72]	@ (8006e5c <_vfiprintf_r+0x228>)
 8006e12:	a904      	add	r1, sp, #16
 8006e14:	4630      	mov	r0, r6
 8006e16:	f3af 8000 	nop.w
 8006e1a:	4607      	mov	r7, r0
 8006e1c:	1c78      	adds	r0, r7, #1
 8006e1e:	d1d6      	bne.n	8006dce <_vfiprintf_r+0x19a>
 8006e20:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8006e22:	07d9      	lsls	r1, r3, #31
 8006e24:	d405      	bmi.n	8006e32 <_vfiprintf_r+0x1fe>
 8006e26:	89ab      	ldrh	r3, [r5, #12]
 8006e28:	059a      	lsls	r2, r3, #22
 8006e2a:	d402      	bmi.n	8006e32 <_vfiprintf_r+0x1fe>
 8006e2c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8006e2e:	f7ff fddd 	bl	80069ec <__retarget_lock_release_recursive>
 8006e32:	89ab      	ldrh	r3, [r5, #12]
 8006e34:	065b      	lsls	r3, r3, #25
 8006e36:	f53f af1f 	bmi.w	8006c78 <_vfiprintf_r+0x44>
 8006e3a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8006e3c:	e71e      	b.n	8006c7c <_vfiprintf_r+0x48>
 8006e3e:	ab03      	add	r3, sp, #12
 8006e40:	9300      	str	r3, [sp, #0]
 8006e42:	462a      	mov	r2, r5
 8006e44:	4b05      	ldr	r3, [pc, #20]	@ (8006e5c <_vfiprintf_r+0x228>)
 8006e46:	a904      	add	r1, sp, #16
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f000 f879 	bl	8006f40 <_printf_i>
 8006e4e:	e7e4      	b.n	8006e1a <_vfiprintf_r+0x1e6>
 8006e50:	08007534 	.word	0x08007534
 8006e54:	0800753e 	.word	0x0800753e
 8006e58:	00000000 	.word	0x00000000
 8006e5c:	08006c0f 	.word	0x08006c0f
 8006e60:	0800753a 	.word	0x0800753a

08006e64 <_printf_common>:
 8006e64:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006e68:	4616      	mov	r6, r2
 8006e6a:	4698      	mov	r8, r3
 8006e6c:	688a      	ldr	r2, [r1, #8]
 8006e6e:	690b      	ldr	r3, [r1, #16]
 8006e70:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006e74:	4293      	cmp	r3, r2
 8006e76:	bfb8      	it	lt
 8006e78:	4613      	movlt	r3, r2
 8006e7a:	6033      	str	r3, [r6, #0]
 8006e7c:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006e80:	4607      	mov	r7, r0
 8006e82:	460c      	mov	r4, r1
 8006e84:	b10a      	cbz	r2, 8006e8a <_printf_common+0x26>
 8006e86:	3301      	adds	r3, #1
 8006e88:	6033      	str	r3, [r6, #0]
 8006e8a:	6823      	ldr	r3, [r4, #0]
 8006e8c:	0699      	lsls	r1, r3, #26
 8006e8e:	bf42      	ittt	mi
 8006e90:	6833      	ldrmi	r3, [r6, #0]
 8006e92:	3302      	addmi	r3, #2
 8006e94:	6033      	strmi	r3, [r6, #0]
 8006e96:	6825      	ldr	r5, [r4, #0]
 8006e98:	f015 0506 	ands.w	r5, r5, #6
 8006e9c:	d106      	bne.n	8006eac <_printf_common+0x48>
 8006e9e:	f104 0a19 	add.w	sl, r4, #25
 8006ea2:	68e3      	ldr	r3, [r4, #12]
 8006ea4:	6832      	ldr	r2, [r6, #0]
 8006ea6:	1a9b      	subs	r3, r3, r2
 8006ea8:	42ab      	cmp	r3, r5
 8006eaa:	dc26      	bgt.n	8006efa <_printf_common+0x96>
 8006eac:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006eb0:	6822      	ldr	r2, [r4, #0]
 8006eb2:	3b00      	subs	r3, #0
 8006eb4:	bf18      	it	ne
 8006eb6:	2301      	movne	r3, #1
 8006eb8:	0692      	lsls	r2, r2, #26
 8006eba:	d42b      	bmi.n	8006f14 <_printf_common+0xb0>
 8006ebc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006ec0:	4641      	mov	r1, r8
 8006ec2:	4638      	mov	r0, r7
 8006ec4:	47c8      	blx	r9
 8006ec6:	3001      	adds	r0, #1
 8006ec8:	d01e      	beq.n	8006f08 <_printf_common+0xa4>
 8006eca:	6823      	ldr	r3, [r4, #0]
 8006ecc:	6922      	ldr	r2, [r4, #16]
 8006ece:	f003 0306 	and.w	r3, r3, #6
 8006ed2:	2b04      	cmp	r3, #4
 8006ed4:	bf02      	ittt	eq
 8006ed6:	68e5      	ldreq	r5, [r4, #12]
 8006ed8:	6833      	ldreq	r3, [r6, #0]
 8006eda:	1aed      	subeq	r5, r5, r3
 8006edc:	68a3      	ldr	r3, [r4, #8]
 8006ede:	bf0c      	ite	eq
 8006ee0:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006ee4:	2500      	movne	r5, #0
 8006ee6:	4293      	cmp	r3, r2
 8006ee8:	bfc4      	itt	gt
 8006eea:	1a9b      	subgt	r3, r3, r2
 8006eec:	18ed      	addgt	r5, r5, r3
 8006eee:	2600      	movs	r6, #0
 8006ef0:	341a      	adds	r4, #26
 8006ef2:	42b5      	cmp	r5, r6
 8006ef4:	d11a      	bne.n	8006f2c <_printf_common+0xc8>
 8006ef6:	2000      	movs	r0, #0
 8006ef8:	e008      	b.n	8006f0c <_printf_common+0xa8>
 8006efa:	2301      	movs	r3, #1
 8006efc:	4652      	mov	r2, sl
 8006efe:	4641      	mov	r1, r8
 8006f00:	4638      	mov	r0, r7
 8006f02:	47c8      	blx	r9
 8006f04:	3001      	adds	r0, #1
 8006f06:	d103      	bne.n	8006f10 <_printf_common+0xac>
 8006f08:	f04f 30ff 	mov.w	r0, #4294967295
 8006f0c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006f10:	3501      	adds	r5, #1
 8006f12:	e7c6      	b.n	8006ea2 <_printf_common+0x3e>
 8006f14:	18e1      	adds	r1, r4, r3
 8006f16:	1c5a      	adds	r2, r3, #1
 8006f18:	2030      	movs	r0, #48	@ 0x30
 8006f1a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006f1e:	4422      	add	r2, r4
 8006f20:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006f24:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006f28:	3302      	adds	r3, #2
 8006f2a:	e7c7      	b.n	8006ebc <_printf_common+0x58>
 8006f2c:	2301      	movs	r3, #1
 8006f2e:	4622      	mov	r2, r4
 8006f30:	4641      	mov	r1, r8
 8006f32:	4638      	mov	r0, r7
 8006f34:	47c8      	blx	r9
 8006f36:	3001      	adds	r0, #1
 8006f38:	d0e6      	beq.n	8006f08 <_printf_common+0xa4>
 8006f3a:	3601      	adds	r6, #1
 8006f3c:	e7d9      	b.n	8006ef2 <_printf_common+0x8e>
	...

08006f40 <_printf_i>:
 8006f40:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f44:	7e0f      	ldrb	r7, [r1, #24]
 8006f46:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006f48:	2f78      	cmp	r7, #120	@ 0x78
 8006f4a:	4691      	mov	r9, r2
 8006f4c:	4680      	mov	r8, r0
 8006f4e:	460c      	mov	r4, r1
 8006f50:	469a      	mov	sl, r3
 8006f52:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006f56:	d807      	bhi.n	8006f68 <_printf_i+0x28>
 8006f58:	2f62      	cmp	r7, #98	@ 0x62
 8006f5a:	d80a      	bhi.n	8006f72 <_printf_i+0x32>
 8006f5c:	2f00      	cmp	r7, #0
 8006f5e:	f000 80d2 	beq.w	8007106 <_printf_i+0x1c6>
 8006f62:	2f58      	cmp	r7, #88	@ 0x58
 8006f64:	f000 80b9 	beq.w	80070da <_printf_i+0x19a>
 8006f68:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006f6c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006f70:	e03a      	b.n	8006fe8 <_printf_i+0xa8>
 8006f72:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006f76:	2b15      	cmp	r3, #21
 8006f78:	d8f6      	bhi.n	8006f68 <_printf_i+0x28>
 8006f7a:	a101      	add	r1, pc, #4	@ (adr r1, 8006f80 <_printf_i+0x40>)
 8006f7c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006f80:	08006fd9 	.word	0x08006fd9
 8006f84:	08006fed 	.word	0x08006fed
 8006f88:	08006f69 	.word	0x08006f69
 8006f8c:	08006f69 	.word	0x08006f69
 8006f90:	08006f69 	.word	0x08006f69
 8006f94:	08006f69 	.word	0x08006f69
 8006f98:	08006fed 	.word	0x08006fed
 8006f9c:	08006f69 	.word	0x08006f69
 8006fa0:	08006f69 	.word	0x08006f69
 8006fa4:	08006f69 	.word	0x08006f69
 8006fa8:	08006f69 	.word	0x08006f69
 8006fac:	080070ed 	.word	0x080070ed
 8006fb0:	08007017 	.word	0x08007017
 8006fb4:	080070a7 	.word	0x080070a7
 8006fb8:	08006f69 	.word	0x08006f69
 8006fbc:	08006f69 	.word	0x08006f69
 8006fc0:	0800710f 	.word	0x0800710f
 8006fc4:	08006f69 	.word	0x08006f69
 8006fc8:	08007017 	.word	0x08007017
 8006fcc:	08006f69 	.word	0x08006f69
 8006fd0:	08006f69 	.word	0x08006f69
 8006fd4:	080070af 	.word	0x080070af
 8006fd8:	6833      	ldr	r3, [r6, #0]
 8006fda:	1d1a      	adds	r2, r3, #4
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	6032      	str	r2, [r6, #0]
 8006fe0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006fe4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006fe8:	2301      	movs	r3, #1
 8006fea:	e09d      	b.n	8007128 <_printf_i+0x1e8>
 8006fec:	6833      	ldr	r3, [r6, #0]
 8006fee:	6820      	ldr	r0, [r4, #0]
 8006ff0:	1d19      	adds	r1, r3, #4
 8006ff2:	6031      	str	r1, [r6, #0]
 8006ff4:	0606      	lsls	r6, r0, #24
 8006ff6:	d501      	bpl.n	8006ffc <_printf_i+0xbc>
 8006ff8:	681d      	ldr	r5, [r3, #0]
 8006ffa:	e003      	b.n	8007004 <_printf_i+0xc4>
 8006ffc:	0645      	lsls	r5, r0, #25
 8006ffe:	d5fb      	bpl.n	8006ff8 <_printf_i+0xb8>
 8007000:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007004:	2d00      	cmp	r5, #0
 8007006:	da03      	bge.n	8007010 <_printf_i+0xd0>
 8007008:	232d      	movs	r3, #45	@ 0x2d
 800700a:	426d      	negs	r5, r5
 800700c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007010:	4859      	ldr	r0, [pc, #356]	@ (8007178 <_printf_i+0x238>)
 8007012:	230a      	movs	r3, #10
 8007014:	e011      	b.n	800703a <_printf_i+0xfa>
 8007016:	6821      	ldr	r1, [r4, #0]
 8007018:	6833      	ldr	r3, [r6, #0]
 800701a:	0608      	lsls	r0, r1, #24
 800701c:	f853 5b04 	ldr.w	r5, [r3], #4
 8007020:	d402      	bmi.n	8007028 <_printf_i+0xe8>
 8007022:	0649      	lsls	r1, r1, #25
 8007024:	bf48      	it	mi
 8007026:	b2ad      	uxthmi	r5, r5
 8007028:	2f6f      	cmp	r7, #111	@ 0x6f
 800702a:	4853      	ldr	r0, [pc, #332]	@ (8007178 <_printf_i+0x238>)
 800702c:	6033      	str	r3, [r6, #0]
 800702e:	bf14      	ite	ne
 8007030:	230a      	movne	r3, #10
 8007032:	2308      	moveq	r3, #8
 8007034:	2100      	movs	r1, #0
 8007036:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800703a:	6866      	ldr	r6, [r4, #4]
 800703c:	60a6      	str	r6, [r4, #8]
 800703e:	2e00      	cmp	r6, #0
 8007040:	bfa2      	ittt	ge
 8007042:	6821      	ldrge	r1, [r4, #0]
 8007044:	f021 0104 	bicge.w	r1, r1, #4
 8007048:	6021      	strge	r1, [r4, #0]
 800704a:	b90d      	cbnz	r5, 8007050 <_printf_i+0x110>
 800704c:	2e00      	cmp	r6, #0
 800704e:	d04b      	beq.n	80070e8 <_printf_i+0x1a8>
 8007050:	4616      	mov	r6, r2
 8007052:	fbb5 f1f3 	udiv	r1, r5, r3
 8007056:	fb03 5711 	mls	r7, r3, r1, r5
 800705a:	5dc7      	ldrb	r7, [r0, r7]
 800705c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8007060:	462f      	mov	r7, r5
 8007062:	42bb      	cmp	r3, r7
 8007064:	460d      	mov	r5, r1
 8007066:	d9f4      	bls.n	8007052 <_printf_i+0x112>
 8007068:	2b08      	cmp	r3, #8
 800706a:	d10b      	bne.n	8007084 <_printf_i+0x144>
 800706c:	6823      	ldr	r3, [r4, #0]
 800706e:	07df      	lsls	r7, r3, #31
 8007070:	d508      	bpl.n	8007084 <_printf_i+0x144>
 8007072:	6923      	ldr	r3, [r4, #16]
 8007074:	6861      	ldr	r1, [r4, #4]
 8007076:	4299      	cmp	r1, r3
 8007078:	bfde      	ittt	le
 800707a:	2330      	movle	r3, #48	@ 0x30
 800707c:	f806 3c01 	strble.w	r3, [r6, #-1]
 8007080:	f106 36ff 	addle.w	r6, r6, #4294967295
 8007084:	1b92      	subs	r2, r2, r6
 8007086:	6122      	str	r2, [r4, #16]
 8007088:	f8cd a000 	str.w	sl, [sp]
 800708c:	464b      	mov	r3, r9
 800708e:	aa03      	add	r2, sp, #12
 8007090:	4621      	mov	r1, r4
 8007092:	4640      	mov	r0, r8
 8007094:	f7ff fee6 	bl	8006e64 <_printf_common>
 8007098:	3001      	adds	r0, #1
 800709a:	d14a      	bne.n	8007132 <_printf_i+0x1f2>
 800709c:	f04f 30ff 	mov.w	r0, #4294967295
 80070a0:	b004      	add	sp, #16
 80070a2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80070a6:	6823      	ldr	r3, [r4, #0]
 80070a8:	f043 0320 	orr.w	r3, r3, #32
 80070ac:	6023      	str	r3, [r4, #0]
 80070ae:	4833      	ldr	r0, [pc, #204]	@ (800717c <_printf_i+0x23c>)
 80070b0:	2778      	movs	r7, #120	@ 0x78
 80070b2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80070b6:	6823      	ldr	r3, [r4, #0]
 80070b8:	6831      	ldr	r1, [r6, #0]
 80070ba:	061f      	lsls	r7, r3, #24
 80070bc:	f851 5b04 	ldr.w	r5, [r1], #4
 80070c0:	d402      	bmi.n	80070c8 <_printf_i+0x188>
 80070c2:	065f      	lsls	r7, r3, #25
 80070c4:	bf48      	it	mi
 80070c6:	b2ad      	uxthmi	r5, r5
 80070c8:	6031      	str	r1, [r6, #0]
 80070ca:	07d9      	lsls	r1, r3, #31
 80070cc:	bf44      	itt	mi
 80070ce:	f043 0320 	orrmi.w	r3, r3, #32
 80070d2:	6023      	strmi	r3, [r4, #0]
 80070d4:	b11d      	cbz	r5, 80070de <_printf_i+0x19e>
 80070d6:	2310      	movs	r3, #16
 80070d8:	e7ac      	b.n	8007034 <_printf_i+0xf4>
 80070da:	4827      	ldr	r0, [pc, #156]	@ (8007178 <_printf_i+0x238>)
 80070dc:	e7e9      	b.n	80070b2 <_printf_i+0x172>
 80070de:	6823      	ldr	r3, [r4, #0]
 80070e0:	f023 0320 	bic.w	r3, r3, #32
 80070e4:	6023      	str	r3, [r4, #0]
 80070e6:	e7f6      	b.n	80070d6 <_printf_i+0x196>
 80070e8:	4616      	mov	r6, r2
 80070ea:	e7bd      	b.n	8007068 <_printf_i+0x128>
 80070ec:	6833      	ldr	r3, [r6, #0]
 80070ee:	6825      	ldr	r5, [r4, #0]
 80070f0:	6961      	ldr	r1, [r4, #20]
 80070f2:	1d18      	adds	r0, r3, #4
 80070f4:	6030      	str	r0, [r6, #0]
 80070f6:	062e      	lsls	r6, r5, #24
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	d501      	bpl.n	8007100 <_printf_i+0x1c0>
 80070fc:	6019      	str	r1, [r3, #0]
 80070fe:	e002      	b.n	8007106 <_printf_i+0x1c6>
 8007100:	0668      	lsls	r0, r5, #25
 8007102:	d5fb      	bpl.n	80070fc <_printf_i+0x1bc>
 8007104:	8019      	strh	r1, [r3, #0]
 8007106:	2300      	movs	r3, #0
 8007108:	6123      	str	r3, [r4, #16]
 800710a:	4616      	mov	r6, r2
 800710c:	e7bc      	b.n	8007088 <_printf_i+0x148>
 800710e:	6833      	ldr	r3, [r6, #0]
 8007110:	1d1a      	adds	r2, r3, #4
 8007112:	6032      	str	r2, [r6, #0]
 8007114:	681e      	ldr	r6, [r3, #0]
 8007116:	6862      	ldr	r2, [r4, #4]
 8007118:	2100      	movs	r1, #0
 800711a:	4630      	mov	r0, r6
 800711c:	f7f9 f858 	bl	80001d0 <memchr>
 8007120:	b108      	cbz	r0, 8007126 <_printf_i+0x1e6>
 8007122:	1b80      	subs	r0, r0, r6
 8007124:	6060      	str	r0, [r4, #4]
 8007126:	6863      	ldr	r3, [r4, #4]
 8007128:	6123      	str	r3, [r4, #16]
 800712a:	2300      	movs	r3, #0
 800712c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007130:	e7aa      	b.n	8007088 <_printf_i+0x148>
 8007132:	6923      	ldr	r3, [r4, #16]
 8007134:	4632      	mov	r2, r6
 8007136:	4649      	mov	r1, r9
 8007138:	4640      	mov	r0, r8
 800713a:	47d0      	blx	sl
 800713c:	3001      	adds	r0, #1
 800713e:	d0ad      	beq.n	800709c <_printf_i+0x15c>
 8007140:	6823      	ldr	r3, [r4, #0]
 8007142:	079b      	lsls	r3, r3, #30
 8007144:	d413      	bmi.n	800716e <_printf_i+0x22e>
 8007146:	68e0      	ldr	r0, [r4, #12]
 8007148:	9b03      	ldr	r3, [sp, #12]
 800714a:	4298      	cmp	r0, r3
 800714c:	bfb8      	it	lt
 800714e:	4618      	movlt	r0, r3
 8007150:	e7a6      	b.n	80070a0 <_printf_i+0x160>
 8007152:	2301      	movs	r3, #1
 8007154:	4632      	mov	r2, r6
 8007156:	4649      	mov	r1, r9
 8007158:	4640      	mov	r0, r8
 800715a:	47d0      	blx	sl
 800715c:	3001      	adds	r0, #1
 800715e:	d09d      	beq.n	800709c <_printf_i+0x15c>
 8007160:	3501      	adds	r5, #1
 8007162:	68e3      	ldr	r3, [r4, #12]
 8007164:	9903      	ldr	r1, [sp, #12]
 8007166:	1a5b      	subs	r3, r3, r1
 8007168:	42ab      	cmp	r3, r5
 800716a:	dcf2      	bgt.n	8007152 <_printf_i+0x212>
 800716c:	e7eb      	b.n	8007146 <_printf_i+0x206>
 800716e:	2500      	movs	r5, #0
 8007170:	f104 0619 	add.w	r6, r4, #25
 8007174:	e7f5      	b.n	8007162 <_printf_i+0x222>
 8007176:	bf00      	nop
 8007178:	08007545 	.word	0x08007545
 800717c:	08007556 	.word	0x08007556

08007180 <__sflush_r>:
 8007180:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007184:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007188:	0716      	lsls	r6, r2, #28
 800718a:	4605      	mov	r5, r0
 800718c:	460c      	mov	r4, r1
 800718e:	d454      	bmi.n	800723a <__sflush_r+0xba>
 8007190:	684b      	ldr	r3, [r1, #4]
 8007192:	2b00      	cmp	r3, #0
 8007194:	dc02      	bgt.n	800719c <__sflush_r+0x1c>
 8007196:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8007198:	2b00      	cmp	r3, #0
 800719a:	dd48      	ble.n	800722e <__sflush_r+0xae>
 800719c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800719e:	2e00      	cmp	r6, #0
 80071a0:	d045      	beq.n	800722e <__sflush_r+0xae>
 80071a2:	2300      	movs	r3, #0
 80071a4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80071a8:	682f      	ldr	r7, [r5, #0]
 80071aa:	6a21      	ldr	r1, [r4, #32]
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	d030      	beq.n	8007212 <__sflush_r+0x92>
 80071b0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80071b2:	89a3      	ldrh	r3, [r4, #12]
 80071b4:	0759      	lsls	r1, r3, #29
 80071b6:	d505      	bpl.n	80071c4 <__sflush_r+0x44>
 80071b8:	6863      	ldr	r3, [r4, #4]
 80071ba:	1ad2      	subs	r2, r2, r3
 80071bc:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80071be:	b10b      	cbz	r3, 80071c4 <__sflush_r+0x44>
 80071c0:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80071c2:	1ad2      	subs	r2, r2, r3
 80071c4:	2300      	movs	r3, #0
 80071c6:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80071c8:	6a21      	ldr	r1, [r4, #32]
 80071ca:	4628      	mov	r0, r5
 80071cc:	47b0      	blx	r6
 80071ce:	1c43      	adds	r3, r0, #1
 80071d0:	89a3      	ldrh	r3, [r4, #12]
 80071d2:	d106      	bne.n	80071e2 <__sflush_r+0x62>
 80071d4:	6829      	ldr	r1, [r5, #0]
 80071d6:	291d      	cmp	r1, #29
 80071d8:	d82b      	bhi.n	8007232 <__sflush_r+0xb2>
 80071da:	4a2a      	ldr	r2, [pc, #168]	@ (8007284 <__sflush_r+0x104>)
 80071dc:	410a      	asrs	r2, r1
 80071de:	07d6      	lsls	r6, r2, #31
 80071e0:	d427      	bmi.n	8007232 <__sflush_r+0xb2>
 80071e2:	2200      	movs	r2, #0
 80071e4:	6062      	str	r2, [r4, #4]
 80071e6:	04d9      	lsls	r1, r3, #19
 80071e8:	6922      	ldr	r2, [r4, #16]
 80071ea:	6022      	str	r2, [r4, #0]
 80071ec:	d504      	bpl.n	80071f8 <__sflush_r+0x78>
 80071ee:	1c42      	adds	r2, r0, #1
 80071f0:	d101      	bne.n	80071f6 <__sflush_r+0x76>
 80071f2:	682b      	ldr	r3, [r5, #0]
 80071f4:	b903      	cbnz	r3, 80071f8 <__sflush_r+0x78>
 80071f6:	6560      	str	r0, [r4, #84]	@ 0x54
 80071f8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80071fa:	602f      	str	r7, [r5, #0]
 80071fc:	b1b9      	cbz	r1, 800722e <__sflush_r+0xae>
 80071fe:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007202:	4299      	cmp	r1, r3
 8007204:	d002      	beq.n	800720c <__sflush_r+0x8c>
 8007206:	4628      	mov	r0, r5
 8007208:	f7ff fbf2 	bl	80069f0 <_free_r>
 800720c:	2300      	movs	r3, #0
 800720e:	6363      	str	r3, [r4, #52]	@ 0x34
 8007210:	e00d      	b.n	800722e <__sflush_r+0xae>
 8007212:	2301      	movs	r3, #1
 8007214:	4628      	mov	r0, r5
 8007216:	47b0      	blx	r6
 8007218:	4602      	mov	r2, r0
 800721a:	1c50      	adds	r0, r2, #1
 800721c:	d1c9      	bne.n	80071b2 <__sflush_r+0x32>
 800721e:	682b      	ldr	r3, [r5, #0]
 8007220:	2b00      	cmp	r3, #0
 8007222:	d0c6      	beq.n	80071b2 <__sflush_r+0x32>
 8007224:	2b1d      	cmp	r3, #29
 8007226:	d001      	beq.n	800722c <__sflush_r+0xac>
 8007228:	2b16      	cmp	r3, #22
 800722a:	d11e      	bne.n	800726a <__sflush_r+0xea>
 800722c:	602f      	str	r7, [r5, #0]
 800722e:	2000      	movs	r0, #0
 8007230:	e022      	b.n	8007278 <__sflush_r+0xf8>
 8007232:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007236:	b21b      	sxth	r3, r3
 8007238:	e01b      	b.n	8007272 <__sflush_r+0xf2>
 800723a:	690f      	ldr	r7, [r1, #16]
 800723c:	2f00      	cmp	r7, #0
 800723e:	d0f6      	beq.n	800722e <__sflush_r+0xae>
 8007240:	0793      	lsls	r3, r2, #30
 8007242:	680e      	ldr	r6, [r1, #0]
 8007244:	bf08      	it	eq
 8007246:	694b      	ldreq	r3, [r1, #20]
 8007248:	600f      	str	r7, [r1, #0]
 800724a:	bf18      	it	ne
 800724c:	2300      	movne	r3, #0
 800724e:	eba6 0807 	sub.w	r8, r6, r7
 8007252:	608b      	str	r3, [r1, #8]
 8007254:	f1b8 0f00 	cmp.w	r8, #0
 8007258:	dde9      	ble.n	800722e <__sflush_r+0xae>
 800725a:	6a21      	ldr	r1, [r4, #32]
 800725c:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800725e:	4643      	mov	r3, r8
 8007260:	463a      	mov	r2, r7
 8007262:	4628      	mov	r0, r5
 8007264:	47b0      	blx	r6
 8007266:	2800      	cmp	r0, #0
 8007268:	dc08      	bgt.n	800727c <__sflush_r+0xfc>
 800726a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800726e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007272:	81a3      	strh	r3, [r4, #12]
 8007274:	f04f 30ff 	mov.w	r0, #4294967295
 8007278:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800727c:	4407      	add	r7, r0
 800727e:	eba8 0800 	sub.w	r8, r8, r0
 8007282:	e7e7      	b.n	8007254 <__sflush_r+0xd4>
 8007284:	dfbffffe 	.word	0xdfbffffe

08007288 <_fflush_r>:
 8007288:	b538      	push	{r3, r4, r5, lr}
 800728a:	690b      	ldr	r3, [r1, #16]
 800728c:	4605      	mov	r5, r0
 800728e:	460c      	mov	r4, r1
 8007290:	b913      	cbnz	r3, 8007298 <_fflush_r+0x10>
 8007292:	2500      	movs	r5, #0
 8007294:	4628      	mov	r0, r5
 8007296:	bd38      	pop	{r3, r4, r5, pc}
 8007298:	b118      	cbz	r0, 80072a2 <_fflush_r+0x1a>
 800729a:	6a03      	ldr	r3, [r0, #32]
 800729c:	b90b      	cbnz	r3, 80072a2 <_fflush_r+0x1a>
 800729e:	f7ff f9ad 	bl	80065fc <__sinit>
 80072a2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d0f3      	beq.n	8007292 <_fflush_r+0xa>
 80072aa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80072ac:	07d0      	lsls	r0, r2, #31
 80072ae:	d404      	bmi.n	80072ba <_fflush_r+0x32>
 80072b0:	0599      	lsls	r1, r3, #22
 80072b2:	d402      	bmi.n	80072ba <_fflush_r+0x32>
 80072b4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072b6:	f7ff fb98 	bl	80069ea <__retarget_lock_acquire_recursive>
 80072ba:	4628      	mov	r0, r5
 80072bc:	4621      	mov	r1, r4
 80072be:	f7ff ff5f 	bl	8007180 <__sflush_r>
 80072c2:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80072c4:	07da      	lsls	r2, r3, #31
 80072c6:	4605      	mov	r5, r0
 80072c8:	d4e4      	bmi.n	8007294 <_fflush_r+0xc>
 80072ca:	89a3      	ldrh	r3, [r4, #12]
 80072cc:	059b      	lsls	r3, r3, #22
 80072ce:	d4e1      	bmi.n	8007294 <_fflush_r+0xc>
 80072d0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80072d2:	f7ff fb8b 	bl	80069ec <__retarget_lock_release_recursive>
 80072d6:	e7dd      	b.n	8007294 <_fflush_r+0xc>

080072d8 <__swhatbuf_r>:
 80072d8:	b570      	push	{r4, r5, r6, lr}
 80072da:	460c      	mov	r4, r1
 80072dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80072e0:	2900      	cmp	r1, #0
 80072e2:	b096      	sub	sp, #88	@ 0x58
 80072e4:	4615      	mov	r5, r2
 80072e6:	461e      	mov	r6, r3
 80072e8:	da0d      	bge.n	8007306 <__swhatbuf_r+0x2e>
 80072ea:	89a3      	ldrh	r3, [r4, #12]
 80072ec:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80072f0:	f04f 0100 	mov.w	r1, #0
 80072f4:	bf14      	ite	ne
 80072f6:	2340      	movne	r3, #64	@ 0x40
 80072f8:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80072fc:	2000      	movs	r0, #0
 80072fe:	6031      	str	r1, [r6, #0]
 8007300:	602b      	str	r3, [r5, #0]
 8007302:	b016      	add	sp, #88	@ 0x58
 8007304:	bd70      	pop	{r4, r5, r6, pc}
 8007306:	466a      	mov	r2, sp
 8007308:	f000 f848 	bl	800739c <_fstat_r>
 800730c:	2800      	cmp	r0, #0
 800730e:	dbec      	blt.n	80072ea <__swhatbuf_r+0x12>
 8007310:	9901      	ldr	r1, [sp, #4]
 8007312:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8007316:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800731a:	4259      	negs	r1, r3
 800731c:	4159      	adcs	r1, r3
 800731e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8007322:	e7eb      	b.n	80072fc <__swhatbuf_r+0x24>

08007324 <__smakebuf_r>:
 8007324:	898b      	ldrh	r3, [r1, #12]
 8007326:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007328:	079d      	lsls	r5, r3, #30
 800732a:	4606      	mov	r6, r0
 800732c:	460c      	mov	r4, r1
 800732e:	d507      	bpl.n	8007340 <__smakebuf_r+0x1c>
 8007330:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8007334:	6023      	str	r3, [r4, #0]
 8007336:	6123      	str	r3, [r4, #16]
 8007338:	2301      	movs	r3, #1
 800733a:	6163      	str	r3, [r4, #20]
 800733c:	b003      	add	sp, #12
 800733e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007340:	ab01      	add	r3, sp, #4
 8007342:	466a      	mov	r2, sp
 8007344:	f7ff ffc8 	bl	80072d8 <__swhatbuf_r>
 8007348:	9f00      	ldr	r7, [sp, #0]
 800734a:	4605      	mov	r5, r0
 800734c:	4639      	mov	r1, r7
 800734e:	4630      	mov	r0, r6
 8007350:	f7ff fbba 	bl	8006ac8 <_malloc_r>
 8007354:	b948      	cbnz	r0, 800736a <__smakebuf_r+0x46>
 8007356:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800735a:	059a      	lsls	r2, r3, #22
 800735c:	d4ee      	bmi.n	800733c <__smakebuf_r+0x18>
 800735e:	f023 0303 	bic.w	r3, r3, #3
 8007362:	f043 0302 	orr.w	r3, r3, #2
 8007366:	81a3      	strh	r3, [r4, #12]
 8007368:	e7e2      	b.n	8007330 <__smakebuf_r+0xc>
 800736a:	89a3      	ldrh	r3, [r4, #12]
 800736c:	6020      	str	r0, [r4, #0]
 800736e:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007372:	81a3      	strh	r3, [r4, #12]
 8007374:	9b01      	ldr	r3, [sp, #4]
 8007376:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800737a:	b15b      	cbz	r3, 8007394 <__smakebuf_r+0x70>
 800737c:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007380:	4630      	mov	r0, r6
 8007382:	f000 f81d 	bl	80073c0 <_isatty_r>
 8007386:	b128      	cbz	r0, 8007394 <__smakebuf_r+0x70>
 8007388:	89a3      	ldrh	r3, [r4, #12]
 800738a:	f023 0303 	bic.w	r3, r3, #3
 800738e:	f043 0301 	orr.w	r3, r3, #1
 8007392:	81a3      	strh	r3, [r4, #12]
 8007394:	89a3      	ldrh	r3, [r4, #12]
 8007396:	431d      	orrs	r5, r3
 8007398:	81a5      	strh	r5, [r4, #12]
 800739a:	e7cf      	b.n	800733c <__smakebuf_r+0x18>

0800739c <_fstat_r>:
 800739c:	b538      	push	{r3, r4, r5, lr}
 800739e:	4d07      	ldr	r5, [pc, #28]	@ (80073bc <_fstat_r+0x20>)
 80073a0:	2300      	movs	r3, #0
 80073a2:	4604      	mov	r4, r0
 80073a4:	4608      	mov	r0, r1
 80073a6:	4611      	mov	r1, r2
 80073a8:	602b      	str	r3, [r5, #0]
 80073aa:	f7fb fa10 	bl	80027ce <_fstat>
 80073ae:	1c43      	adds	r3, r0, #1
 80073b0:	d102      	bne.n	80073b8 <_fstat_r+0x1c>
 80073b2:	682b      	ldr	r3, [r5, #0]
 80073b4:	b103      	cbz	r3, 80073b8 <_fstat_r+0x1c>
 80073b6:	6023      	str	r3, [r4, #0]
 80073b8:	bd38      	pop	{r3, r4, r5, pc}
 80073ba:	bf00      	nop
 80073bc:	200007ac 	.word	0x200007ac

080073c0 <_isatty_r>:
 80073c0:	b538      	push	{r3, r4, r5, lr}
 80073c2:	4d06      	ldr	r5, [pc, #24]	@ (80073dc <_isatty_r+0x1c>)
 80073c4:	2300      	movs	r3, #0
 80073c6:	4604      	mov	r4, r0
 80073c8:	4608      	mov	r0, r1
 80073ca:	602b      	str	r3, [r5, #0]
 80073cc:	f7fb fa0f 	bl	80027ee <_isatty>
 80073d0:	1c43      	adds	r3, r0, #1
 80073d2:	d102      	bne.n	80073da <_isatty_r+0x1a>
 80073d4:	682b      	ldr	r3, [r5, #0]
 80073d6:	b103      	cbz	r3, 80073da <_isatty_r+0x1a>
 80073d8:	6023      	str	r3, [r4, #0]
 80073da:	bd38      	pop	{r3, r4, r5, pc}
 80073dc:	200007ac 	.word	0x200007ac

080073e0 <_sbrk_r>:
 80073e0:	b538      	push	{r3, r4, r5, lr}
 80073e2:	4d06      	ldr	r5, [pc, #24]	@ (80073fc <_sbrk_r+0x1c>)
 80073e4:	2300      	movs	r3, #0
 80073e6:	4604      	mov	r4, r0
 80073e8:	4608      	mov	r0, r1
 80073ea:	602b      	str	r3, [r5, #0]
 80073ec:	f7fb fa18 	bl	8002820 <_sbrk>
 80073f0:	1c43      	adds	r3, r0, #1
 80073f2:	d102      	bne.n	80073fa <_sbrk_r+0x1a>
 80073f4:	682b      	ldr	r3, [r5, #0]
 80073f6:	b103      	cbz	r3, 80073fa <_sbrk_r+0x1a>
 80073f8:	6023      	str	r3, [r4, #0]
 80073fa:	bd38      	pop	{r3, r4, r5, pc}
 80073fc:	200007ac 	.word	0x200007ac

08007400 <_init>:
 8007400:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007402:	bf00      	nop
 8007404:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007406:	bc08      	pop	{r3}
 8007408:	469e      	mov	lr, r3
 800740a:	4770      	bx	lr

0800740c <_fini>:
 800740c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800740e:	bf00      	nop
 8007410:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007412:	bc08      	pop	{r3}
 8007414:	469e      	mov	lr, r3
 8007416:	4770      	bx	lr
