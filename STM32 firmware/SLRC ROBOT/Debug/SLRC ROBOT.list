
SLRC ROBOT.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000053f8  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08005580  08005580  00015580  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005598  08005598  00020108  2**0
                  CONTENTS
  4 .ARM          00000008  08005598  08005598  00015598  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080055a0  080055a0  00020108  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080055a0  080055a0  000155a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080055a4  080055a4  000155a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000108  20000000  080055a8  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020108  2**0
                  CONTENTS
 10 .bss          0000049c  20000108  20000108  00020108  2**3
                  ALLOC
 11 ._user_heap_stack 00000604  200005a4  200005a4  00020108  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020108  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  00020138  2**0
                  CONTENTS, READONLY
 14 .debug_info   00011b5b  00000000  00000000  0002017b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00001fdd  00000000  00000000  00031cd6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000011a0  00000000  00000000  00033cb8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00000e0f  00000000  00000000  00034e58  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0000223a  00000000  00000000  00035c67  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00014a60  00000000  00000000  00037ea1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ce1ef  00000000  00000000  0004c901  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00004df4  00000000  00000000  0011aaf0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  0011f8e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000108 	.word	0x20000108
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08005568 	.word	0x08005568

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	2000010c 	.word	0x2000010c
 80001c4:	08005568 	.word	0x08005568

080001c8 <__aeabi_dmul>:
 80001c8:	b570      	push	{r4, r5, r6, lr}
 80001ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80001ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80001d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80001d6:	bf1d      	ittte	ne
 80001d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80001dc:	ea94 0f0c 	teqne	r4, ip
 80001e0:	ea95 0f0c 	teqne	r5, ip
 80001e4:	f000 f8de 	bleq	80003a4 <__aeabi_dmul+0x1dc>
 80001e8:	442c      	add	r4, r5
 80001ea:	ea81 0603 	eor.w	r6, r1, r3
 80001ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80001f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80001f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80001fa:	bf18      	it	ne
 80001fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000200:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000204:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000208:	d038      	beq.n	800027c <__aeabi_dmul+0xb4>
 800020a:	fba0 ce02 	umull	ip, lr, r0, r2
 800020e:	f04f 0500 	mov.w	r5, #0
 8000212:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000216:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800021a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800021e:	f04f 0600 	mov.w	r6, #0
 8000222:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000226:	f09c 0f00 	teq	ip, #0
 800022a:	bf18      	it	ne
 800022c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000230:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000234:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000238:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800023c:	d204      	bcs.n	8000248 <__aeabi_dmul+0x80>
 800023e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000242:	416d      	adcs	r5, r5
 8000244:	eb46 0606 	adc.w	r6, r6, r6
 8000248:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800024c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000250:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000254:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000258:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800025c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000260:	bf88      	it	hi
 8000262:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000266:	d81e      	bhi.n	80002a6 <__aeabi_dmul+0xde>
 8000268:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	bd70      	pop	{r4, r5, r6, pc}
 800027c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000280:	ea46 0101 	orr.w	r1, r6, r1
 8000284:	ea40 0002 	orr.w	r0, r0, r2
 8000288:	ea81 0103 	eor.w	r1, r1, r3
 800028c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000290:	bfc2      	ittt	gt
 8000292:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000296:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800029a:	bd70      	popgt	{r4, r5, r6, pc}
 800029c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80002a0:	f04f 0e00 	mov.w	lr, #0
 80002a4:	3c01      	subs	r4, #1
 80002a6:	f300 80ab 	bgt.w	8000400 <__aeabi_dmul+0x238>
 80002aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80002ae:	bfde      	ittt	le
 80002b0:	2000      	movle	r0, #0
 80002b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80002b6:	bd70      	pople	{r4, r5, r6, pc}
 80002b8:	f1c4 0400 	rsb	r4, r4, #0
 80002bc:	3c20      	subs	r4, #32
 80002be:	da35      	bge.n	800032c <__aeabi_dmul+0x164>
 80002c0:	340c      	adds	r4, #12
 80002c2:	dc1b      	bgt.n	80002fc <__aeabi_dmul+0x134>
 80002c4:	f104 0414 	add.w	r4, r4, #20
 80002c8:	f1c4 0520 	rsb	r5, r4, #32
 80002cc:	fa00 f305 	lsl.w	r3, r0, r5
 80002d0:	fa20 f004 	lsr.w	r0, r0, r4
 80002d4:	fa01 f205 	lsl.w	r2, r1, r5
 80002d8:	ea40 0002 	orr.w	r0, r0, r2
 80002dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80002e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80002e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80002e8:	fa21 f604 	lsr.w	r6, r1, r4
 80002ec:	eb42 0106 	adc.w	r1, r2, r6
 80002f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80002f4:	bf08      	it	eq
 80002f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80002fa:	bd70      	pop	{r4, r5, r6, pc}
 80002fc:	f1c4 040c 	rsb	r4, r4, #12
 8000300:	f1c4 0520 	rsb	r5, r4, #32
 8000304:	fa00 f304 	lsl.w	r3, r0, r4
 8000308:	fa20 f005 	lsr.w	r0, r0, r5
 800030c:	fa01 f204 	lsl.w	r2, r1, r4
 8000310:	ea40 0002 	orr.w	r0, r0, r2
 8000314:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000318:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800031c:	f141 0100 	adc.w	r1, r1, #0
 8000320:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000324:	bf08      	it	eq
 8000326:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800032a:	bd70      	pop	{r4, r5, r6, pc}
 800032c:	f1c4 0520 	rsb	r5, r4, #32
 8000330:	fa00 f205 	lsl.w	r2, r0, r5
 8000334:	ea4e 0e02 	orr.w	lr, lr, r2
 8000338:	fa20 f304 	lsr.w	r3, r0, r4
 800033c:	fa01 f205 	lsl.w	r2, r1, r5
 8000340:	ea43 0302 	orr.w	r3, r3, r2
 8000344:	fa21 f004 	lsr.w	r0, r1, r4
 8000348:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800034c:	fa21 f204 	lsr.w	r2, r1, r4
 8000350:	ea20 0002 	bic.w	r0, r0, r2
 8000354:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000358:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800035c:	bf08      	it	eq
 800035e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000362:	bd70      	pop	{r4, r5, r6, pc}
 8000364:	f094 0f00 	teq	r4, #0
 8000368:	d10f      	bne.n	800038a <__aeabi_dmul+0x1c2>
 800036a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800036e:	0040      	lsls	r0, r0, #1
 8000370:	eb41 0101 	adc.w	r1, r1, r1
 8000374:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000378:	bf08      	it	eq
 800037a:	3c01      	subeq	r4, #1
 800037c:	d0f7      	beq.n	800036e <__aeabi_dmul+0x1a6>
 800037e:	ea41 0106 	orr.w	r1, r1, r6
 8000382:	f095 0f00 	teq	r5, #0
 8000386:	bf18      	it	ne
 8000388:	4770      	bxne	lr
 800038a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800038e:	0052      	lsls	r2, r2, #1
 8000390:	eb43 0303 	adc.w	r3, r3, r3
 8000394:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000398:	bf08      	it	eq
 800039a:	3d01      	subeq	r5, #1
 800039c:	d0f7      	beq.n	800038e <__aeabi_dmul+0x1c6>
 800039e:	ea43 0306 	orr.w	r3, r3, r6
 80003a2:	4770      	bx	lr
 80003a4:	ea94 0f0c 	teq	r4, ip
 80003a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80003ac:	bf18      	it	ne
 80003ae:	ea95 0f0c 	teqne	r5, ip
 80003b2:	d00c      	beq.n	80003ce <__aeabi_dmul+0x206>
 80003b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003b8:	bf18      	it	ne
 80003ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003be:	d1d1      	bne.n	8000364 <__aeabi_dmul+0x19c>
 80003c0:	ea81 0103 	eor.w	r1, r1, r3
 80003c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80003c8:	f04f 0000 	mov.w	r0, #0
 80003cc:	bd70      	pop	{r4, r5, r6, pc}
 80003ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80003d2:	bf06      	itte	eq
 80003d4:	4610      	moveq	r0, r2
 80003d6:	4619      	moveq	r1, r3
 80003d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80003dc:	d019      	beq.n	8000412 <__aeabi_dmul+0x24a>
 80003de:	ea94 0f0c 	teq	r4, ip
 80003e2:	d102      	bne.n	80003ea <__aeabi_dmul+0x222>
 80003e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80003e8:	d113      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003ea:	ea95 0f0c 	teq	r5, ip
 80003ee:	d105      	bne.n	80003fc <__aeabi_dmul+0x234>
 80003f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80003f4:	bf1c      	itt	ne
 80003f6:	4610      	movne	r0, r2
 80003f8:	4619      	movne	r1, r3
 80003fa:	d10a      	bne.n	8000412 <__aeabi_dmul+0x24a>
 80003fc:	ea81 0103 	eor.w	r1, r1, r3
 8000400:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000404:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000408:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800040c:	f04f 0000 	mov.w	r0, #0
 8000410:	bd70      	pop	{r4, r5, r6, pc}
 8000412:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000416:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800041a:	bd70      	pop	{r4, r5, r6, pc}

0800041c <__aeabi_drsub>:
 800041c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000420:	e002      	b.n	8000428 <__adddf3>
 8000422:	bf00      	nop

08000424 <__aeabi_dsub>:
 8000424:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000428 <__adddf3>:
 8000428:	b530      	push	{r4, r5, lr}
 800042a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800042e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000432:	ea94 0f05 	teq	r4, r5
 8000436:	bf08      	it	eq
 8000438:	ea90 0f02 	teqeq	r0, r2
 800043c:	bf1f      	itttt	ne
 800043e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000442:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000446:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800044a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800044e:	f000 80e2 	beq.w	8000616 <__adddf3+0x1ee>
 8000452:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000456:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800045a:	bfb8      	it	lt
 800045c:	426d      	neglt	r5, r5
 800045e:	dd0c      	ble.n	800047a <__adddf3+0x52>
 8000460:	442c      	add	r4, r5
 8000462:	ea80 0202 	eor.w	r2, r0, r2
 8000466:	ea81 0303 	eor.w	r3, r1, r3
 800046a:	ea82 0000 	eor.w	r0, r2, r0
 800046e:	ea83 0101 	eor.w	r1, r3, r1
 8000472:	ea80 0202 	eor.w	r2, r0, r2
 8000476:	ea81 0303 	eor.w	r3, r1, r3
 800047a:	2d36      	cmp	r5, #54	; 0x36
 800047c:	bf88      	it	hi
 800047e:	bd30      	pophi	{r4, r5, pc}
 8000480:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000484:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000488:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 800048c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000490:	d002      	beq.n	8000498 <__adddf3+0x70>
 8000492:	4240      	negs	r0, r0
 8000494:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000498:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 800049c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80004a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80004a4:	d002      	beq.n	80004ac <__adddf3+0x84>
 80004a6:	4252      	negs	r2, r2
 80004a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80004ac:	ea94 0f05 	teq	r4, r5
 80004b0:	f000 80a7 	beq.w	8000602 <__adddf3+0x1da>
 80004b4:	f1a4 0401 	sub.w	r4, r4, #1
 80004b8:	f1d5 0e20 	rsbs	lr, r5, #32
 80004bc:	db0d      	blt.n	80004da <__adddf3+0xb2>
 80004be:	fa02 fc0e 	lsl.w	ip, r2, lr
 80004c2:	fa22 f205 	lsr.w	r2, r2, r5
 80004c6:	1880      	adds	r0, r0, r2
 80004c8:	f141 0100 	adc.w	r1, r1, #0
 80004cc:	fa03 f20e 	lsl.w	r2, r3, lr
 80004d0:	1880      	adds	r0, r0, r2
 80004d2:	fa43 f305 	asr.w	r3, r3, r5
 80004d6:	4159      	adcs	r1, r3
 80004d8:	e00e      	b.n	80004f8 <__adddf3+0xd0>
 80004da:	f1a5 0520 	sub.w	r5, r5, #32
 80004de:	f10e 0e20 	add.w	lr, lr, #32
 80004e2:	2a01      	cmp	r2, #1
 80004e4:	fa03 fc0e 	lsl.w	ip, r3, lr
 80004e8:	bf28      	it	cs
 80004ea:	f04c 0c02 	orrcs.w	ip, ip, #2
 80004ee:	fa43 f305 	asr.w	r3, r3, r5
 80004f2:	18c0      	adds	r0, r0, r3
 80004f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80004f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004fc:	d507      	bpl.n	800050e <__adddf3+0xe6>
 80004fe:	f04f 0e00 	mov.w	lr, #0
 8000502:	f1dc 0c00 	rsbs	ip, ip, #0
 8000506:	eb7e 0000 	sbcs.w	r0, lr, r0
 800050a:	eb6e 0101 	sbc.w	r1, lr, r1
 800050e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000512:	d31b      	bcc.n	800054c <__adddf3+0x124>
 8000514:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000518:	d30c      	bcc.n	8000534 <__adddf3+0x10c>
 800051a:	0849      	lsrs	r1, r1, #1
 800051c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000520:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000524:	f104 0401 	add.w	r4, r4, #1
 8000528:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800052c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000530:	f080 809a 	bcs.w	8000668 <__adddf3+0x240>
 8000534:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000538:	bf08      	it	eq
 800053a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800053e:	f150 0000 	adcs.w	r0, r0, #0
 8000542:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000546:	ea41 0105 	orr.w	r1, r1, r5
 800054a:	bd30      	pop	{r4, r5, pc}
 800054c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000550:	4140      	adcs	r0, r0
 8000552:	eb41 0101 	adc.w	r1, r1, r1
 8000556:	3c01      	subs	r4, #1
 8000558:	bf28      	it	cs
 800055a:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800055e:	d2e9      	bcs.n	8000534 <__adddf3+0x10c>
 8000560:	f091 0f00 	teq	r1, #0
 8000564:	bf04      	itt	eq
 8000566:	4601      	moveq	r1, r0
 8000568:	2000      	moveq	r0, #0
 800056a:	fab1 f381 	clz	r3, r1
 800056e:	bf08      	it	eq
 8000570:	3320      	addeq	r3, #32
 8000572:	f1a3 030b 	sub.w	r3, r3, #11
 8000576:	f1b3 0220 	subs.w	r2, r3, #32
 800057a:	da0c      	bge.n	8000596 <__adddf3+0x16e>
 800057c:	320c      	adds	r2, #12
 800057e:	dd08      	ble.n	8000592 <__adddf3+0x16a>
 8000580:	f102 0c14 	add.w	ip, r2, #20
 8000584:	f1c2 020c 	rsb	r2, r2, #12
 8000588:	fa01 f00c 	lsl.w	r0, r1, ip
 800058c:	fa21 f102 	lsr.w	r1, r1, r2
 8000590:	e00c      	b.n	80005ac <__adddf3+0x184>
 8000592:	f102 0214 	add.w	r2, r2, #20
 8000596:	bfd8      	it	le
 8000598:	f1c2 0c20 	rsble	ip, r2, #32
 800059c:	fa01 f102 	lsl.w	r1, r1, r2
 80005a0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80005a4:	bfdc      	itt	le
 80005a6:	ea41 010c 	orrle.w	r1, r1, ip
 80005aa:	4090      	lslle	r0, r2
 80005ac:	1ae4      	subs	r4, r4, r3
 80005ae:	bfa2      	ittt	ge
 80005b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80005b4:	4329      	orrge	r1, r5
 80005b6:	bd30      	popge	{r4, r5, pc}
 80005b8:	ea6f 0404 	mvn.w	r4, r4
 80005bc:	3c1f      	subs	r4, #31
 80005be:	da1c      	bge.n	80005fa <__adddf3+0x1d2>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc0e      	bgt.n	80005e2 <__adddf3+0x1ba>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0220 	rsb	r2, r4, #32
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f302 	lsl.w	r3, r1, r2
 80005d4:	ea40 0003 	orr.w	r0, r0, r3
 80005d8:	fa21 f304 	lsr.w	r3, r1, r4
 80005dc:	ea45 0103 	orr.w	r1, r5, r3
 80005e0:	bd30      	pop	{r4, r5, pc}
 80005e2:	f1c4 040c 	rsb	r4, r4, #12
 80005e6:	f1c4 0220 	rsb	r2, r4, #32
 80005ea:	fa20 f002 	lsr.w	r0, r0, r2
 80005ee:	fa01 f304 	lsl.w	r3, r1, r4
 80005f2:	ea40 0003 	orr.w	r0, r0, r3
 80005f6:	4629      	mov	r1, r5
 80005f8:	bd30      	pop	{r4, r5, pc}
 80005fa:	fa21 f004 	lsr.w	r0, r1, r4
 80005fe:	4629      	mov	r1, r5
 8000600:	bd30      	pop	{r4, r5, pc}
 8000602:	f094 0f00 	teq	r4, #0
 8000606:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800060a:	bf06      	itte	eq
 800060c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000610:	3401      	addeq	r4, #1
 8000612:	3d01      	subne	r5, #1
 8000614:	e74e      	b.n	80004b4 <__adddf3+0x8c>
 8000616:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800061a:	bf18      	it	ne
 800061c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000620:	d029      	beq.n	8000676 <__adddf3+0x24e>
 8000622:	ea94 0f05 	teq	r4, r5
 8000626:	bf08      	it	eq
 8000628:	ea90 0f02 	teqeq	r0, r2
 800062c:	d005      	beq.n	800063a <__adddf3+0x212>
 800062e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000632:	bf04      	itt	eq
 8000634:	4619      	moveq	r1, r3
 8000636:	4610      	moveq	r0, r2
 8000638:	bd30      	pop	{r4, r5, pc}
 800063a:	ea91 0f03 	teq	r1, r3
 800063e:	bf1e      	ittt	ne
 8000640:	2100      	movne	r1, #0
 8000642:	2000      	movne	r0, #0
 8000644:	bd30      	popne	{r4, r5, pc}
 8000646:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800064a:	d105      	bne.n	8000658 <__adddf3+0x230>
 800064c:	0040      	lsls	r0, r0, #1
 800064e:	4149      	adcs	r1, r1
 8000650:	bf28      	it	cs
 8000652:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd30      	pop	{r4, r5, pc}
 8000658:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 800065c:	bf3c      	itt	cc
 800065e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000662:	bd30      	popcc	{r4, r5, pc}
 8000664:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000668:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 800066c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000670:	f04f 0000 	mov.w	r0, #0
 8000674:	bd30      	pop	{r4, r5, pc}
 8000676:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800067a:	bf1a      	itte	ne
 800067c:	4619      	movne	r1, r3
 800067e:	4610      	movne	r0, r2
 8000680:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000684:	bf1c      	itt	ne
 8000686:	460b      	movne	r3, r1
 8000688:	4602      	movne	r2, r0
 800068a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800068e:	bf06      	itte	eq
 8000690:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000694:	ea91 0f03 	teqeq	r1, r3
 8000698:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 800069c:	bd30      	pop	{r4, r5, pc}
 800069e:	bf00      	nop

080006a0 <__aeabi_ui2d>:
 80006a0:	f090 0f00 	teq	r0, #0
 80006a4:	bf04      	itt	eq
 80006a6:	2100      	moveq	r1, #0
 80006a8:	4770      	bxeq	lr
 80006aa:	b530      	push	{r4, r5, lr}
 80006ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006b4:	f04f 0500 	mov.w	r5, #0
 80006b8:	f04f 0100 	mov.w	r1, #0
 80006bc:	e750      	b.n	8000560 <__adddf3+0x138>
 80006be:	bf00      	nop

080006c0 <__aeabi_i2d>:
 80006c0:	f090 0f00 	teq	r0, #0
 80006c4:	bf04      	itt	eq
 80006c6:	2100      	moveq	r1, #0
 80006c8:	4770      	bxeq	lr
 80006ca:	b530      	push	{r4, r5, lr}
 80006cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80006d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80006d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80006d8:	bf48      	it	mi
 80006da:	4240      	negmi	r0, r0
 80006dc:	f04f 0100 	mov.w	r1, #0
 80006e0:	e73e      	b.n	8000560 <__adddf3+0x138>
 80006e2:	bf00      	nop

080006e4 <__aeabi_f2d>:
 80006e4:	0042      	lsls	r2, r0, #1
 80006e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80006ea:	ea4f 0131 	mov.w	r1, r1, rrx
 80006ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80006f2:	bf1f      	itttt	ne
 80006f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80006f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80006fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000700:	4770      	bxne	lr
 8000702:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 8000706:	bf08      	it	eq
 8000708:	4770      	bxeq	lr
 800070a:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 800070e:	bf04      	itt	eq
 8000710:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000714:	4770      	bxeq	lr
 8000716:	b530      	push	{r4, r5, lr}
 8000718:	f44f 7460 	mov.w	r4, #896	; 0x380
 800071c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000724:	e71c      	b.n	8000560 <__adddf3+0x138>
 8000726:	bf00      	nop

08000728 <__aeabi_ul2d>:
 8000728:	ea50 0201 	orrs.w	r2, r0, r1
 800072c:	bf08      	it	eq
 800072e:	4770      	bxeq	lr
 8000730:	b530      	push	{r4, r5, lr}
 8000732:	f04f 0500 	mov.w	r5, #0
 8000736:	e00a      	b.n	800074e <__aeabi_l2d+0x16>

08000738 <__aeabi_l2d>:
 8000738:	ea50 0201 	orrs.w	r2, r0, r1
 800073c:	bf08      	it	eq
 800073e:	4770      	bxeq	lr
 8000740:	b530      	push	{r4, r5, lr}
 8000742:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000746:	d502      	bpl.n	800074e <__aeabi_l2d+0x16>
 8000748:	4240      	negs	r0, r0
 800074a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800074e:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000752:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000756:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800075a:	f43f aed8 	beq.w	800050e <__adddf3+0xe6>
 800075e:	f04f 0203 	mov.w	r2, #3
 8000762:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000766:	bf18      	it	ne
 8000768:	3203      	addne	r2, #3
 800076a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800076e:	bf18      	it	ne
 8000770:	3203      	addne	r2, #3
 8000772:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000776:	f1c2 0320 	rsb	r3, r2, #32
 800077a:	fa00 fc03 	lsl.w	ip, r0, r3
 800077e:	fa20 f002 	lsr.w	r0, r0, r2
 8000782:	fa01 fe03 	lsl.w	lr, r1, r3
 8000786:	ea40 000e 	orr.w	r0, r0, lr
 800078a:	fa21 f102 	lsr.w	r1, r1, r2
 800078e:	4414      	add	r4, r2
 8000790:	e6bd      	b.n	800050e <__adddf3+0xe6>
 8000792:	bf00      	nop

08000794 <__aeabi_d2iz>:
 8000794:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000798:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 800079c:	d215      	bcs.n	80007ca <__aeabi_d2iz+0x36>
 800079e:	d511      	bpl.n	80007c4 <__aeabi_d2iz+0x30>
 80007a0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80007a4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 80007a8:	d912      	bls.n	80007d0 <__aeabi_d2iz+0x3c>
 80007aa:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 80007ae:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80007b2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 80007b6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80007ba:	fa23 f002 	lsr.w	r0, r3, r2
 80007be:	bf18      	it	ne
 80007c0:	4240      	negne	r0, r0
 80007c2:	4770      	bx	lr
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	4770      	bx	lr
 80007ca:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 80007ce:	d105      	bne.n	80007dc <__aeabi_d2iz+0x48>
 80007d0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 80007d4:	bf08      	it	eq
 80007d6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 80007da:	4770      	bx	lr
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	4770      	bx	lr
 80007e2:	bf00      	nop

080007e4 <__aeabi_d2f>:
 80007e4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80007e8:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 80007ec:	bf24      	itt	cs
 80007ee:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 80007f2:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 80007f6:	d90d      	bls.n	8000814 <__aeabi_d2f+0x30>
 80007f8:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 80007fc:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000800:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000804:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000808:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 800080c:	bf08      	it	eq
 800080e:	f020 0001 	biceq.w	r0, r0, #1
 8000812:	4770      	bx	lr
 8000814:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000818:	d121      	bne.n	800085e <__aeabi_d2f+0x7a>
 800081a:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 800081e:	bfbc      	itt	lt
 8000820:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000824:	4770      	bxlt	lr
 8000826:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800082a:	ea4f 5252 	mov.w	r2, r2, lsr #21
 800082e:	f1c2 0218 	rsb	r2, r2, #24
 8000832:	f1c2 0c20 	rsb	ip, r2, #32
 8000836:	fa10 f30c 	lsls.w	r3, r0, ip
 800083a:	fa20 f002 	lsr.w	r0, r0, r2
 800083e:	bf18      	it	ne
 8000840:	f040 0001 	orrne.w	r0, r0, #1
 8000844:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000848:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 800084c:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000850:	ea40 000c 	orr.w	r0, r0, ip
 8000854:	fa23 f302 	lsr.w	r3, r3, r2
 8000858:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800085c:	e7cc      	b.n	80007f8 <__aeabi_d2f+0x14>
 800085e:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000862:	d107      	bne.n	8000874 <__aeabi_d2f+0x90>
 8000864:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000868:	bf1e      	ittt	ne
 800086a:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 800086e:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000872:	4770      	bxne	lr
 8000874:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000878:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 800087c:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000880:	4770      	bx	lr
 8000882:	bf00      	nop

08000884 <__aeabi_uldivmod>:
 8000884:	b953      	cbnz	r3, 800089c <__aeabi_uldivmod+0x18>
 8000886:	b94a      	cbnz	r2, 800089c <__aeabi_uldivmod+0x18>
 8000888:	2900      	cmp	r1, #0
 800088a:	bf08      	it	eq
 800088c:	2800      	cmpeq	r0, #0
 800088e:	bf1c      	itt	ne
 8000890:	f04f 31ff 	movne.w	r1, #4294967295
 8000894:	f04f 30ff 	movne.w	r0, #4294967295
 8000898:	f000 b970 	b.w	8000b7c <__aeabi_idiv0>
 800089c:	f1ad 0c08 	sub.w	ip, sp, #8
 80008a0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80008a4:	f000 f806 	bl	80008b4 <__udivmoddi4>
 80008a8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80008ac:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80008b0:	b004      	add	sp, #16
 80008b2:	4770      	bx	lr

080008b4 <__udivmoddi4>:
 80008b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80008b8:	9e08      	ldr	r6, [sp, #32]
 80008ba:	460d      	mov	r5, r1
 80008bc:	4604      	mov	r4, r0
 80008be:	460f      	mov	r7, r1
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d14a      	bne.n	800095a <__udivmoddi4+0xa6>
 80008c4:	428a      	cmp	r2, r1
 80008c6:	4694      	mov	ip, r2
 80008c8:	d965      	bls.n	8000996 <__udivmoddi4+0xe2>
 80008ca:	fab2 f382 	clz	r3, r2
 80008ce:	b143      	cbz	r3, 80008e2 <__udivmoddi4+0x2e>
 80008d0:	fa02 fc03 	lsl.w	ip, r2, r3
 80008d4:	f1c3 0220 	rsb	r2, r3, #32
 80008d8:	409f      	lsls	r7, r3
 80008da:	fa20 f202 	lsr.w	r2, r0, r2
 80008de:	4317      	orrs	r7, r2
 80008e0:	409c      	lsls	r4, r3
 80008e2:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80008e6:	fa1f f58c 	uxth.w	r5, ip
 80008ea:	fbb7 f1fe 	udiv	r1, r7, lr
 80008ee:	0c22      	lsrs	r2, r4, #16
 80008f0:	fb0e 7711 	mls	r7, lr, r1, r7
 80008f4:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80008f8:	fb01 f005 	mul.w	r0, r1, r5
 80008fc:	4290      	cmp	r0, r2
 80008fe:	d90a      	bls.n	8000916 <__udivmoddi4+0x62>
 8000900:	eb1c 0202 	adds.w	r2, ip, r2
 8000904:	f101 37ff 	add.w	r7, r1, #4294967295
 8000908:	f080 811c 	bcs.w	8000b44 <__udivmoddi4+0x290>
 800090c:	4290      	cmp	r0, r2
 800090e:	f240 8119 	bls.w	8000b44 <__udivmoddi4+0x290>
 8000912:	3902      	subs	r1, #2
 8000914:	4462      	add	r2, ip
 8000916:	1a12      	subs	r2, r2, r0
 8000918:	b2a4      	uxth	r4, r4
 800091a:	fbb2 f0fe 	udiv	r0, r2, lr
 800091e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000922:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000926:	fb00 f505 	mul.w	r5, r0, r5
 800092a:	42a5      	cmp	r5, r4
 800092c:	d90a      	bls.n	8000944 <__udivmoddi4+0x90>
 800092e:	eb1c 0404 	adds.w	r4, ip, r4
 8000932:	f100 32ff 	add.w	r2, r0, #4294967295
 8000936:	f080 8107 	bcs.w	8000b48 <__udivmoddi4+0x294>
 800093a:	42a5      	cmp	r5, r4
 800093c:	f240 8104 	bls.w	8000b48 <__udivmoddi4+0x294>
 8000940:	4464      	add	r4, ip
 8000942:	3802      	subs	r0, #2
 8000944:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000948:	1b64      	subs	r4, r4, r5
 800094a:	2100      	movs	r1, #0
 800094c:	b11e      	cbz	r6, 8000956 <__udivmoddi4+0xa2>
 800094e:	40dc      	lsrs	r4, r3
 8000950:	2300      	movs	r3, #0
 8000952:	e9c6 4300 	strd	r4, r3, [r6]
 8000956:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800095a:	428b      	cmp	r3, r1
 800095c:	d908      	bls.n	8000970 <__udivmoddi4+0xbc>
 800095e:	2e00      	cmp	r6, #0
 8000960:	f000 80ed 	beq.w	8000b3e <__udivmoddi4+0x28a>
 8000964:	2100      	movs	r1, #0
 8000966:	e9c6 0500 	strd	r0, r5, [r6]
 800096a:	4608      	mov	r0, r1
 800096c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000970:	fab3 f183 	clz	r1, r3
 8000974:	2900      	cmp	r1, #0
 8000976:	d149      	bne.n	8000a0c <__udivmoddi4+0x158>
 8000978:	42ab      	cmp	r3, r5
 800097a:	d302      	bcc.n	8000982 <__udivmoddi4+0xce>
 800097c:	4282      	cmp	r2, r0
 800097e:	f200 80f8 	bhi.w	8000b72 <__udivmoddi4+0x2be>
 8000982:	1a84      	subs	r4, r0, r2
 8000984:	eb65 0203 	sbc.w	r2, r5, r3
 8000988:	2001      	movs	r0, #1
 800098a:	4617      	mov	r7, r2
 800098c:	2e00      	cmp	r6, #0
 800098e:	d0e2      	beq.n	8000956 <__udivmoddi4+0xa2>
 8000990:	e9c6 4700 	strd	r4, r7, [r6]
 8000994:	e7df      	b.n	8000956 <__udivmoddi4+0xa2>
 8000996:	b902      	cbnz	r2, 800099a <__udivmoddi4+0xe6>
 8000998:	deff      	udf	#255	; 0xff
 800099a:	fab2 f382 	clz	r3, r2
 800099e:	2b00      	cmp	r3, #0
 80009a0:	f040 8090 	bne.w	8000ac4 <__udivmoddi4+0x210>
 80009a4:	1a8a      	subs	r2, r1, r2
 80009a6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80009aa:	fa1f fe8c 	uxth.w	lr, ip
 80009ae:	2101      	movs	r1, #1
 80009b0:	fbb2 f5f7 	udiv	r5, r2, r7
 80009b4:	fb07 2015 	mls	r0, r7, r5, r2
 80009b8:	0c22      	lsrs	r2, r4, #16
 80009ba:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80009be:	fb0e f005 	mul.w	r0, lr, r5
 80009c2:	4290      	cmp	r0, r2
 80009c4:	d908      	bls.n	80009d8 <__udivmoddi4+0x124>
 80009c6:	eb1c 0202 	adds.w	r2, ip, r2
 80009ca:	f105 38ff 	add.w	r8, r5, #4294967295
 80009ce:	d202      	bcs.n	80009d6 <__udivmoddi4+0x122>
 80009d0:	4290      	cmp	r0, r2
 80009d2:	f200 80cb 	bhi.w	8000b6c <__udivmoddi4+0x2b8>
 80009d6:	4645      	mov	r5, r8
 80009d8:	1a12      	subs	r2, r2, r0
 80009da:	b2a4      	uxth	r4, r4
 80009dc:	fbb2 f0f7 	udiv	r0, r2, r7
 80009e0:	fb07 2210 	mls	r2, r7, r0, r2
 80009e4:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80009e8:	fb0e fe00 	mul.w	lr, lr, r0
 80009ec:	45a6      	cmp	lr, r4
 80009ee:	d908      	bls.n	8000a02 <__udivmoddi4+0x14e>
 80009f0:	eb1c 0404 	adds.w	r4, ip, r4
 80009f4:	f100 32ff 	add.w	r2, r0, #4294967295
 80009f8:	d202      	bcs.n	8000a00 <__udivmoddi4+0x14c>
 80009fa:	45a6      	cmp	lr, r4
 80009fc:	f200 80bb 	bhi.w	8000b76 <__udivmoddi4+0x2c2>
 8000a00:	4610      	mov	r0, r2
 8000a02:	eba4 040e 	sub.w	r4, r4, lr
 8000a06:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000a0a:	e79f      	b.n	800094c <__udivmoddi4+0x98>
 8000a0c:	f1c1 0720 	rsb	r7, r1, #32
 8000a10:	408b      	lsls	r3, r1
 8000a12:	fa22 fc07 	lsr.w	ip, r2, r7
 8000a16:	ea4c 0c03 	orr.w	ip, ip, r3
 8000a1a:	fa05 f401 	lsl.w	r4, r5, r1
 8000a1e:	fa20 f307 	lsr.w	r3, r0, r7
 8000a22:	40fd      	lsrs	r5, r7
 8000a24:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000a28:	4323      	orrs	r3, r4
 8000a2a:	fbb5 f8f9 	udiv	r8, r5, r9
 8000a2e:	fa1f fe8c 	uxth.w	lr, ip
 8000a32:	fb09 5518 	mls	r5, r9, r8, r5
 8000a36:	0c1c      	lsrs	r4, r3, #16
 8000a38:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000a3c:	fb08 f50e 	mul.w	r5, r8, lr
 8000a40:	42a5      	cmp	r5, r4
 8000a42:	fa02 f201 	lsl.w	r2, r2, r1
 8000a46:	fa00 f001 	lsl.w	r0, r0, r1
 8000a4a:	d90b      	bls.n	8000a64 <__udivmoddi4+0x1b0>
 8000a4c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a50:	f108 3aff 	add.w	sl, r8, #4294967295
 8000a54:	f080 8088 	bcs.w	8000b68 <__udivmoddi4+0x2b4>
 8000a58:	42a5      	cmp	r5, r4
 8000a5a:	f240 8085 	bls.w	8000b68 <__udivmoddi4+0x2b4>
 8000a5e:	f1a8 0802 	sub.w	r8, r8, #2
 8000a62:	4464      	add	r4, ip
 8000a64:	1b64      	subs	r4, r4, r5
 8000a66:	b29d      	uxth	r5, r3
 8000a68:	fbb4 f3f9 	udiv	r3, r4, r9
 8000a6c:	fb09 4413 	mls	r4, r9, r3, r4
 8000a70:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000a74:	fb03 fe0e 	mul.w	lr, r3, lr
 8000a78:	45a6      	cmp	lr, r4
 8000a7a:	d908      	bls.n	8000a8e <__udivmoddi4+0x1da>
 8000a7c:	eb1c 0404 	adds.w	r4, ip, r4
 8000a80:	f103 35ff 	add.w	r5, r3, #4294967295
 8000a84:	d26c      	bcs.n	8000b60 <__udivmoddi4+0x2ac>
 8000a86:	45a6      	cmp	lr, r4
 8000a88:	d96a      	bls.n	8000b60 <__udivmoddi4+0x2ac>
 8000a8a:	3b02      	subs	r3, #2
 8000a8c:	4464      	add	r4, ip
 8000a8e:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000a92:	fba3 9502 	umull	r9, r5, r3, r2
 8000a96:	eba4 040e 	sub.w	r4, r4, lr
 8000a9a:	42ac      	cmp	r4, r5
 8000a9c:	46c8      	mov	r8, r9
 8000a9e:	46ae      	mov	lr, r5
 8000aa0:	d356      	bcc.n	8000b50 <__udivmoddi4+0x29c>
 8000aa2:	d053      	beq.n	8000b4c <__udivmoddi4+0x298>
 8000aa4:	b156      	cbz	r6, 8000abc <__udivmoddi4+0x208>
 8000aa6:	ebb0 0208 	subs.w	r2, r0, r8
 8000aaa:	eb64 040e 	sbc.w	r4, r4, lr
 8000aae:	fa04 f707 	lsl.w	r7, r4, r7
 8000ab2:	40ca      	lsrs	r2, r1
 8000ab4:	40cc      	lsrs	r4, r1
 8000ab6:	4317      	orrs	r7, r2
 8000ab8:	e9c6 7400 	strd	r7, r4, [r6]
 8000abc:	4618      	mov	r0, r3
 8000abe:	2100      	movs	r1, #0
 8000ac0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ac4:	f1c3 0120 	rsb	r1, r3, #32
 8000ac8:	fa02 fc03 	lsl.w	ip, r2, r3
 8000acc:	fa20 f201 	lsr.w	r2, r0, r1
 8000ad0:	fa25 f101 	lsr.w	r1, r5, r1
 8000ad4:	409d      	lsls	r5, r3
 8000ad6:	432a      	orrs	r2, r5
 8000ad8:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000adc:	fa1f fe8c 	uxth.w	lr, ip
 8000ae0:	fbb1 f0f7 	udiv	r0, r1, r7
 8000ae4:	fb07 1510 	mls	r5, r7, r0, r1
 8000ae8:	0c11      	lsrs	r1, r2, #16
 8000aea:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000aee:	fb00 f50e 	mul.w	r5, r0, lr
 8000af2:	428d      	cmp	r5, r1
 8000af4:	fa04 f403 	lsl.w	r4, r4, r3
 8000af8:	d908      	bls.n	8000b0c <__udivmoddi4+0x258>
 8000afa:	eb1c 0101 	adds.w	r1, ip, r1
 8000afe:	f100 38ff 	add.w	r8, r0, #4294967295
 8000b02:	d22f      	bcs.n	8000b64 <__udivmoddi4+0x2b0>
 8000b04:	428d      	cmp	r5, r1
 8000b06:	d92d      	bls.n	8000b64 <__udivmoddi4+0x2b0>
 8000b08:	3802      	subs	r0, #2
 8000b0a:	4461      	add	r1, ip
 8000b0c:	1b49      	subs	r1, r1, r5
 8000b0e:	b292      	uxth	r2, r2
 8000b10:	fbb1 f5f7 	udiv	r5, r1, r7
 8000b14:	fb07 1115 	mls	r1, r7, r5, r1
 8000b18:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000b1c:	fb05 f10e 	mul.w	r1, r5, lr
 8000b20:	4291      	cmp	r1, r2
 8000b22:	d908      	bls.n	8000b36 <__udivmoddi4+0x282>
 8000b24:	eb1c 0202 	adds.w	r2, ip, r2
 8000b28:	f105 38ff 	add.w	r8, r5, #4294967295
 8000b2c:	d216      	bcs.n	8000b5c <__udivmoddi4+0x2a8>
 8000b2e:	4291      	cmp	r1, r2
 8000b30:	d914      	bls.n	8000b5c <__udivmoddi4+0x2a8>
 8000b32:	3d02      	subs	r5, #2
 8000b34:	4462      	add	r2, ip
 8000b36:	1a52      	subs	r2, r2, r1
 8000b38:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000b3c:	e738      	b.n	80009b0 <__udivmoddi4+0xfc>
 8000b3e:	4631      	mov	r1, r6
 8000b40:	4630      	mov	r0, r6
 8000b42:	e708      	b.n	8000956 <__udivmoddi4+0xa2>
 8000b44:	4639      	mov	r1, r7
 8000b46:	e6e6      	b.n	8000916 <__udivmoddi4+0x62>
 8000b48:	4610      	mov	r0, r2
 8000b4a:	e6fb      	b.n	8000944 <__udivmoddi4+0x90>
 8000b4c:	4548      	cmp	r0, r9
 8000b4e:	d2a9      	bcs.n	8000aa4 <__udivmoddi4+0x1f0>
 8000b50:	ebb9 0802 	subs.w	r8, r9, r2
 8000b54:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000b58:	3b01      	subs	r3, #1
 8000b5a:	e7a3      	b.n	8000aa4 <__udivmoddi4+0x1f0>
 8000b5c:	4645      	mov	r5, r8
 8000b5e:	e7ea      	b.n	8000b36 <__udivmoddi4+0x282>
 8000b60:	462b      	mov	r3, r5
 8000b62:	e794      	b.n	8000a8e <__udivmoddi4+0x1da>
 8000b64:	4640      	mov	r0, r8
 8000b66:	e7d1      	b.n	8000b0c <__udivmoddi4+0x258>
 8000b68:	46d0      	mov	r8, sl
 8000b6a:	e77b      	b.n	8000a64 <__udivmoddi4+0x1b0>
 8000b6c:	3d02      	subs	r5, #2
 8000b6e:	4462      	add	r2, ip
 8000b70:	e732      	b.n	80009d8 <__udivmoddi4+0x124>
 8000b72:	4608      	mov	r0, r1
 8000b74:	e70a      	b.n	800098c <__udivmoddi4+0xd8>
 8000b76:	4464      	add	r4, ip
 8000b78:	3802      	subs	r0, #2
 8000b7a:	e742      	b.n	8000a02 <__udivmoddi4+0x14e>

08000b7c <__aeabi_idiv0>:
 8000b7c:	4770      	bx	lr
 8000b7e:	bf00      	nop

08000b80 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b80:	b5b0      	push	{r4, r5, r7, lr}
 8000b82:	b08c      	sub	sp, #48	; 0x30
 8000b84:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b86:	f001 fce1 	bl	800254c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b8a:	f000 f999 	bl	8000ec0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b8e:	f000 fe59 	bl	8001844 <MX_GPIO_Init>
  MX_ADC1_Init();
 8000b92:	f000 f9ff 	bl	8000f94 <MX_ADC1_Init>
  MX_I2C2_Init();
 8000b96:	f000 faa1 	bl	80010dc <MX_I2C2_Init>
  MX_TIM1_Init();
 8000b9a:	f000 fb03 	bl	80011a4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000b9e:	f000 fc01 	bl	80013a4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000ba2:	f000 fc53 	bl	800144c <MX_TIM4_Init>
  MX_TIM8_Init();
 8000ba6:	f000 fcfd 	bl	80015a4 <MX_TIM8_Init>
  MX_TIM9_Init();
 8000baa:	f000 fdbf 	bl	800172c <MX_TIM9_Init>
  MX_UART4_Init();
 8000bae:	f000 fe1f 	bl	80017f0 <MX_UART4_Init>
  MX_SPI1_Init();
 8000bb2:	f000 fac1 	bl	8001138 <MX_SPI1_Init>
  MX_ADC2_Init();
 8000bb6:	f000 fa3f 	bl	8001038 <MX_ADC2_Init>
  MX_TIM2_Init();
 8000bba:	f000 fb9f 	bl	80012fc <MX_TIM2_Init>
  MX_TIM6_Init();
 8000bbe:	f000 fcbb 	bl	8001538 <MX_TIM6_Init>
  /* USER CODE BEGIN 2 */

  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1);
 8000bc2:	2100      	movs	r1, #0
 8000bc4:	48b4      	ldr	r0, [pc, #720]	; (8000e98 <main+0x318>)
 8000bc6:	f003 fafd 	bl	80041c4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2);
 8000bca:	2104      	movs	r1, #4
 8000bcc:	48b2      	ldr	r0, [pc, #712]	; (8000e98 <main+0x318>)
 8000bce:	f003 faf9 	bl	80041c4 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start_IT(&htim3);
 8000bd2:	48b2      	ldr	r0, [pc, #712]	; (8000e9c <main+0x31c>)
 8000bd4:	f003 fa2c 	bl	8004030 <HAL_TIM_Base_Start_IT>
//	  HAL_Delay(1500);

//	 	  motor(left, Backward);
//	 	  motor(right, Backward);

	 	  updateIR();
 8000bd8:	f000 ff94 	bl	8001b04 <updateIR>

	 	  int array_lit_amount = 0;
 8000bdc:	2300      	movs	r3, #0
 8000bde:	62fb      	str	r3, [r7, #44]	; 0x2c
	 	  for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8000be0:	2300      	movs	r3, #0
 8000be2:	62bb      	str	r3, [r7, #40]	; 0x28
 8000be4:	e009      	b.n	8000bfa <main+0x7a>
	 	  {
	 		  array_lit_amount += digital_IR[i];
 8000be6:	4aae      	ldr	r2, [pc, #696]	; (8000ea0 <main+0x320>)
 8000be8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000bee:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8000bf0:	4413      	add	r3, r2
 8000bf2:	62fb      	str	r3, [r7, #44]	; 0x2c
	 	  for (int i = 0; i < IR_ARRAY_LENGTH; i++)
 8000bf4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bf6:	3301      	adds	r3, #1
 8000bf8:	62bb      	str	r3, [r7, #40]	; 0x28
 8000bfa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000bfc:	2b18      	cmp	r3, #24
 8000bfe:	ddf2      	ble.n	8000be6 <main+0x66>
	 	  }

	 	  int left_sum =  4400  * digital_IR[0] + 4000 * digital_IR[1] + 3600 * digital_IR[2] + 3200 * digital_IR[3] + 2980  * digital_IR[4] + 1096 * digital_IR[5] + 403 * digital_IR[6] + 148 * digital_IR[7] + 54 * digital_IR[8] + 20 * digital_IR[9] + 8  * digital_IR[10] + 3 * digital_IR[11];
 8000c00:	4ba7      	ldr	r3, [pc, #668]	; (8000ea0 <main+0x320>)
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	f241 1230 	movw	r2, #4400	; 0x1130
 8000c08:	fb03 f202 	mul.w	r2, r3, r2
 8000c0c:	4ba4      	ldr	r3, [pc, #656]	; (8000ea0 <main+0x320>)
 8000c0e:	685b      	ldr	r3, [r3, #4]
 8000c10:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000c14:	fb01 f303 	mul.w	r3, r1, r3
 8000c18:	441a      	add	r2, r3
 8000c1a:	4ba1      	ldr	r3, [pc, #644]	; (8000ea0 <main+0x320>)
 8000c1c:	689b      	ldr	r3, [r3, #8]
 8000c1e:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000c22:	fb01 f303 	mul.w	r3, r1, r3
 8000c26:	441a      	add	r2, r3
 8000c28:	4b9d      	ldr	r3, [pc, #628]	; (8000ea0 <main+0x320>)
 8000c2a:	68db      	ldr	r3, [r3, #12]
 8000c2c:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000c30:	fb01 f303 	mul.w	r3, r1, r3
 8000c34:	441a      	add	r2, r3
 8000c36:	4b9a      	ldr	r3, [pc, #616]	; (8000ea0 <main+0x320>)
 8000c38:	691b      	ldr	r3, [r3, #16]
 8000c3a:	f640 31a4 	movw	r1, #2980	; 0xba4
 8000c3e:	fb01 f303 	mul.w	r3, r1, r3
 8000c42:	441a      	add	r2, r3
 8000c44:	4b96      	ldr	r3, [pc, #600]	; (8000ea0 <main+0x320>)
 8000c46:	695b      	ldr	r3, [r3, #20]
 8000c48:	f44f 6189 	mov.w	r1, #1096	; 0x448
 8000c4c:	fb01 f303 	mul.w	r3, r1, r3
 8000c50:	441a      	add	r2, r3
 8000c52:	4b93      	ldr	r3, [pc, #588]	; (8000ea0 <main+0x320>)
 8000c54:	699b      	ldr	r3, [r3, #24]
 8000c56:	f240 1193 	movw	r1, #403	; 0x193
 8000c5a:	fb01 f303 	mul.w	r3, r1, r3
 8000c5e:	441a      	add	r2, r3
 8000c60:	4b8f      	ldr	r3, [pc, #572]	; (8000ea0 <main+0x320>)
 8000c62:	69db      	ldr	r3, [r3, #28]
 8000c64:	2194      	movs	r1, #148	; 0x94
 8000c66:	fb01 f303 	mul.w	r3, r1, r3
 8000c6a:	441a      	add	r2, r3
 8000c6c:	4b8c      	ldr	r3, [pc, #560]	; (8000ea0 <main+0x320>)
 8000c6e:	6a1b      	ldr	r3, [r3, #32]
 8000c70:	2136      	movs	r1, #54	; 0x36
 8000c72:	fb01 f303 	mul.w	r3, r1, r3
 8000c76:	18d1      	adds	r1, r2, r3
 8000c78:	4b89      	ldr	r3, [pc, #548]	; (8000ea0 <main+0x320>)
 8000c7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8000c7c:	4613      	mov	r3, r2
 8000c7e:	009b      	lsls	r3, r3, #2
 8000c80:	4413      	add	r3, r2
 8000c82:	009b      	lsls	r3, r3, #2
 8000c84:	18ca      	adds	r2, r1, r3
 8000c86:	4b86      	ldr	r3, [pc, #536]	; (8000ea0 <main+0x320>)
 8000c88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8000c8a:	00db      	lsls	r3, r3, #3
 8000c8c:	18d1      	adds	r1, r2, r3
 8000c8e:	4b84      	ldr	r3, [pc, #528]	; (8000ea0 <main+0x320>)
 8000c90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8000c92:	4613      	mov	r3, r2
 8000c94:	005b      	lsls	r3, r3, #1
 8000c96:	4413      	add	r3, r2
 8000c98:	440b      	add	r3, r1
 8000c9a:	61fb      	str	r3, [r7, #28]
	 	  int right_sum = 3  * digital_IR[13] + 8 * digital_IR[14] + 20 * digital_IR[15] + 54 * digital_IR[16] + 148  * digital_IR[17] + 403 * digital_IR[18] + 1096 * digital_IR[19] + 2980 * digital_IR[20] + 3200 * digital_IR[21] + 3600 * digital_IR[22] + 4000 * digital_IR[23] + 4400 * digital_IR[24];
 8000c9c:	4b80      	ldr	r3, [pc, #512]	; (8000ea0 <main+0x320>)
 8000c9e:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8000ca0:	4613      	mov	r3, r2
 8000ca2:	005b      	lsls	r3, r3, #1
 8000ca4:	441a      	add	r2, r3
 8000ca6:	4b7e      	ldr	r3, [pc, #504]	; (8000ea0 <main+0x320>)
 8000ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8000caa:	00db      	lsls	r3, r3, #3
 8000cac:	18d1      	adds	r1, r2, r3
 8000cae:	4b7c      	ldr	r3, [pc, #496]	; (8000ea0 <main+0x320>)
 8000cb0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8000cb2:	4613      	mov	r3, r2
 8000cb4:	009b      	lsls	r3, r3, #2
 8000cb6:	4413      	add	r3, r2
 8000cb8:	009b      	lsls	r3, r3, #2
 8000cba:	18ca      	adds	r2, r1, r3
 8000cbc:	4b78      	ldr	r3, [pc, #480]	; (8000ea0 <main+0x320>)
 8000cbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cc0:	2136      	movs	r1, #54	; 0x36
 8000cc2:	fb01 f303 	mul.w	r3, r1, r3
 8000cc6:	441a      	add	r2, r3
 8000cc8:	4b75      	ldr	r3, [pc, #468]	; (8000ea0 <main+0x320>)
 8000cca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ccc:	2194      	movs	r1, #148	; 0x94
 8000cce:	fb01 f303 	mul.w	r3, r1, r3
 8000cd2:	441a      	add	r2, r3
 8000cd4:	4b72      	ldr	r3, [pc, #456]	; (8000ea0 <main+0x320>)
 8000cd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000cd8:	f240 1193 	movw	r1, #403	; 0x193
 8000cdc:	fb01 f303 	mul.w	r3, r1, r3
 8000ce0:	441a      	add	r2, r3
 8000ce2:	4b6f      	ldr	r3, [pc, #444]	; (8000ea0 <main+0x320>)
 8000ce4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ce6:	f44f 6189 	mov.w	r1, #1096	; 0x448
 8000cea:	fb01 f303 	mul.w	r3, r1, r3
 8000cee:	441a      	add	r2, r3
 8000cf0:	4b6b      	ldr	r3, [pc, #428]	; (8000ea0 <main+0x320>)
 8000cf2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8000cf4:	f640 31a4 	movw	r1, #2980	; 0xba4
 8000cf8:	fb01 f303 	mul.w	r3, r1, r3
 8000cfc:	441a      	add	r2, r3
 8000cfe:	4b68      	ldr	r3, [pc, #416]	; (8000ea0 <main+0x320>)
 8000d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8000d02:	f44f 6148 	mov.w	r1, #3200	; 0xc80
 8000d06:	fb01 f303 	mul.w	r3, r1, r3
 8000d0a:	441a      	add	r2, r3
 8000d0c:	4b64      	ldr	r3, [pc, #400]	; (8000ea0 <main+0x320>)
 8000d0e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000d10:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 8000d14:	fb01 f303 	mul.w	r3, r1, r3
 8000d18:	441a      	add	r2, r3
 8000d1a:	4b61      	ldr	r3, [pc, #388]	; (8000ea0 <main+0x320>)
 8000d1c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000d1e:	f44f 617a 	mov.w	r1, #4000	; 0xfa0
 8000d22:	fb01 f303 	mul.w	r3, r1, r3
 8000d26:	441a      	add	r2, r3
 8000d28:	4b5d      	ldr	r3, [pc, #372]	; (8000ea0 <main+0x320>)
 8000d2a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000d2c:	f241 1130 	movw	r1, #4400	; 0x1130
 8000d30:	fb01 f303 	mul.w	r3, r1, r3
 8000d34:	4413      	add	r3, r2
 8000d36:	61bb      	str	r3, [r7, #24]


	 	  int position =  right_sum  - left_sum ;
 8000d38:	69ba      	ldr	r2, [r7, #24]
 8000d3a:	69fb      	ldr	r3, [r7, #28]
 8000d3c:	1ad3      	subs	r3, r2, r3
 8000d3e:	617b      	str	r3, [r7, #20]


	 	  int derivative = position - prevError;
 8000d40:	6978      	ldr	r0, [r7, #20]
 8000d42:	f7ff fcbd 	bl	80006c0 <__aeabi_i2d>
 8000d46:	4b57      	ldr	r3, [pc, #348]	; (8000ea4 <main+0x324>)
 8000d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d4c:	f7ff fb6a 	bl	8000424 <__aeabi_dsub>
 8000d50:	4602      	mov	r2, r0
 8000d52:	460b      	mov	r3, r1
 8000d54:	4610      	mov	r0, r2
 8000d56:	4619      	mov	r1, r3
 8000d58:	f7ff fd1c 	bl	8000794 <__aeabi_d2iz>
 8000d5c:	4603      	mov	r3, r0
 8000d5e:	613b      	str	r3, [r7, #16]

	 	  float PID_constant = Kp * position + Kd * derivative;
 8000d60:	6978      	ldr	r0, [r7, #20]
 8000d62:	f7ff fcad 	bl	80006c0 <__aeabi_i2d>
 8000d66:	4b50      	ldr	r3, [pc, #320]	; (8000ea8 <main+0x328>)
 8000d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d6c:	f7ff fa2c 	bl	80001c8 <__aeabi_dmul>
 8000d70:	4602      	mov	r2, r0
 8000d72:	460b      	mov	r3, r1
 8000d74:	4614      	mov	r4, r2
 8000d76:	461d      	mov	r5, r3
 8000d78:	6938      	ldr	r0, [r7, #16]
 8000d7a:	f7ff fca1 	bl	80006c0 <__aeabi_i2d>
 8000d7e:	4b4b      	ldr	r3, [pc, #300]	; (8000eac <main+0x32c>)
 8000d80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000d84:	f7ff fa20 	bl	80001c8 <__aeabi_dmul>
 8000d88:	4602      	mov	r2, r0
 8000d8a:	460b      	mov	r3, r1
 8000d8c:	4620      	mov	r0, r4
 8000d8e:	4629      	mov	r1, r5
 8000d90:	f7ff fb4a 	bl	8000428 <__adddf3>
 8000d94:	4602      	mov	r2, r0
 8000d96:	460b      	mov	r3, r1
 8000d98:	4610      	mov	r0, r2
 8000d9a:	4619      	mov	r1, r3
 8000d9c:	f7ff fd22 	bl	80007e4 <__aeabi_d2f>
 8000da0:	4603      	mov	r3, r0
 8000da2:	60fb      	str	r3, [r7, #12]

	 	  prevError = position;
 8000da4:	6978      	ldr	r0, [r7, #20]
 8000da6:	f7ff fc8b 	bl	80006c0 <__aeabi_i2d>
 8000daa:	4602      	mov	r2, r0
 8000dac:	460b      	mov	r3, r1
 8000dae:	493d      	ldr	r1, [pc, #244]	; (8000ea4 <main+0x324>)
 8000db0:	e9c1 2300 	strd	r2, r3, [r1]

	 	  Drive_constant = 400;
 8000db4:	4b3e      	ldr	r3, [pc, #248]	; (8000eb0 <main+0x330>)
 8000db6:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000dba:	601a      	str	r2, [r3, #0]

	 	  float offset = 0; // For correcting motor speeds
 8000dbc:	f04f 0300 	mov.w	r3, #0
 8000dc0:	60bb      	str	r3, [r7, #8]
	 	  int Left_drive = Drive_constant + offset  - PID_constant;
 8000dc2:	4b3b      	ldr	r3, [pc, #236]	; (8000eb0 <main+0x330>)
 8000dc4:	681b      	ldr	r3, [r3, #0]
 8000dc6:	ee07 3a90 	vmov	s15, r3
 8000dca:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000dce:	edd7 7a02 	vldr	s15, [r7, #8]
 8000dd2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000dd6:	edd7 7a03 	vldr	s15, [r7, #12]
 8000dda:	ee77 7a67 	vsub.f32	s15, s14, s15
 8000dde:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000de2:	ee17 3a90 	vmov	r3, s15
 8000de6:	627b      	str	r3, [r7, #36]	; 0x24
	 	  int Right_drive = Drive_constant - offset + PID_constant;
 8000de8:	4b31      	ldr	r3, [pc, #196]	; (8000eb0 <main+0x330>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	ee07 3a90 	vmov	s15, r3
 8000df0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8000df4:	edd7 7a02 	vldr	s15, [r7, #8]
 8000df8:	ee37 7a67 	vsub.f32	s14, s14, s15
 8000dfc:	edd7 7a03 	vldr	s15, [r7, #12]
 8000e00:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000e04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000e08:	ee17 3a90 	vmov	r3, s15
 8000e0c:	623b      	str	r3, [r7, #32]
	 	  pid_sum = Left_drive;
 8000e0e:	4a29      	ldr	r2, [pc, #164]	; (8000eb4 <main+0x334>)
 8000e10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e12:	6013      	str	r3, [r2, #0]
	 	 pid_sum1 = PID_constant;
 8000e14:	4a28      	ldr	r2, [pc, #160]	; (8000eb8 <main+0x338>)
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	6013      	str	r3, [r2, #0]
	 	  const int MIN_VALUE = -1024;
 8000e1a:	4b28      	ldr	r3, [pc, #160]	; (8000ebc <main+0x33c>)
 8000e1c:	607b      	str	r3, [r7, #4]
	 	  const int MAX_VALUE = 1024;
 8000e1e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000e22:	603b      	str	r3, [r7, #0]

	 	  if (Left_drive < MIN_VALUE) {
 8000e24:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e26:	687b      	ldr	r3, [r7, #4]
 8000e28:	429a      	cmp	r2, r3
 8000e2a:	da02      	bge.n	8000e32 <main+0x2b2>
	 		  Left_drive = MIN_VALUE;
 8000e2c:	687b      	ldr	r3, [r7, #4]
 8000e2e:	627b      	str	r3, [r7, #36]	; 0x24
 8000e30:	e005      	b.n	8000e3e <main+0x2be>
	 	  } else if (Left_drive > MAX_VALUE) {
 8000e32:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8000e34:	683b      	ldr	r3, [r7, #0]
 8000e36:	429a      	cmp	r2, r3
 8000e38:	dd01      	ble.n	8000e3e <main+0x2be>
	 		  Left_drive = MAX_VALUE;
 8000e3a:	683b      	ldr	r3, [r7, #0]
 8000e3c:	627b      	str	r3, [r7, #36]	; 0x24
	 	  }

	 	  if (Right_drive < MIN_VALUE) {
 8000e3e:	6a3a      	ldr	r2, [r7, #32]
 8000e40:	687b      	ldr	r3, [r7, #4]
 8000e42:	429a      	cmp	r2, r3
 8000e44:	da02      	bge.n	8000e4c <main+0x2cc>
	 		  Right_drive = MIN_VALUE;
 8000e46:	687b      	ldr	r3, [r7, #4]
 8000e48:	623b      	str	r3, [r7, #32]
 8000e4a:	e005      	b.n	8000e58 <main+0x2d8>
	 	  } else if (Right_drive > MAX_VALUE) {
 8000e4c:	6a3a      	ldr	r2, [r7, #32]
 8000e4e:	683b      	ldr	r3, [r7, #0]
 8000e50:	429a      	cmp	r2, r3
 8000e52:	dd01      	ble.n	8000e58 <main+0x2d8>
	 		  Right_drive = MAX_VALUE;
 8000e54:	683b      	ldr	r3, [r7, #0]
 8000e56:	623b      	str	r3, [r7, #32]
	 	  }

	 	  if(Right_drive < 0){
 8000e58:	6a3b      	ldr	r3, [r7, #32]
 8000e5a:	2b00      	cmp	r3, #0
 8000e5c:	da05      	bge.n	8000e6a <main+0x2ea>
	 		  motor(right, Backward);
 8000e5e:	f04f 31ff 	mov.w	r1, #4294967295
 8000e62:	2001      	movs	r0, #1
 8000e64:	f000 fe06 	bl	8001a74 <motor>
 8000e68:	e003      	b.n	8000e72 <main+0x2f2>
	 	  } else {
	 		  motor(right, Forward);
 8000e6a:	2101      	movs	r1, #1
 8000e6c:	2001      	movs	r0, #1
 8000e6e:	f000 fe01 	bl	8001a74 <motor>
	 	  }


	 	  if(Left_drive < 0){
 8000e72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000e74:	2b00      	cmp	r3, #0
 8000e76:	da05      	bge.n	8000e84 <main+0x304>
	 		  motor(left, Backward);
 8000e78:	f04f 31ff 	mov.w	r1, #4294967295
 8000e7c:	2000      	movs	r0, #0
 8000e7e:	f000 fdf9 	bl	8001a74 <motor>
 8000e82:	e003      	b.n	8000e8c <main+0x30c>
	 	  } else {
	 		  motor(left, Forward);
 8000e84:	2101      	movs	r1, #1
 8000e86:	2000      	movs	r0, #0
 8000e88:	f000 fdf4 	bl	8001a74 <motor>
	 	  }


	 	  speed(Left_drive, Right_drive);
 8000e8c:	6a39      	ldr	r1, [r7, #32]
 8000e8e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8000e90:	f000 fdda 	bl	8001a48 <speed>
  {
 8000e94:	e6a0      	b.n	8000bd8 <main+0x58>
 8000e96:	bf00      	nop
 8000e98:	20000260 	.word	0x20000260
 8000e9c:	200002f0 	.word	0x200002f0
 8000ea0:	20000530 	.word	0x20000530
 8000ea4:	20000598 	.word	0x20000598
 8000ea8:	200000e8 	.word	0x200000e8
 8000eac:	200000f0 	.word	0x200000f0
 8000eb0:	200000f8 	.word	0x200000f8
 8000eb4:	200004a4 	.word	0x200004a4
 8000eb8:	200004a8 	.word	0x200004a8
 8000ebc:	fffffc00 	.word	0xfffffc00

08000ec0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b094      	sub	sp, #80	; 0x50
 8000ec4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ec6:	f107 0320 	add.w	r3, r7, #32
 8000eca:	2230      	movs	r2, #48	; 0x30
 8000ecc:	2100      	movs	r1, #0
 8000ece:	4618      	mov	r0, r3
 8000ed0:	f004 fb1e 	bl	8005510 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ed4:	f107 030c 	add.w	r3, r7, #12
 8000ed8:	2200      	movs	r2, #0
 8000eda:	601a      	str	r2, [r3, #0]
 8000edc:	605a      	str	r2, [r3, #4]
 8000ede:	609a      	str	r2, [r3, #8]
 8000ee0:	60da      	str	r2, [r3, #12]
 8000ee2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ee4:	2300      	movs	r3, #0
 8000ee6:	60bb      	str	r3, [r7, #8]
 8000ee8:	4b28      	ldr	r3, [pc, #160]	; (8000f8c <SystemClock_Config+0xcc>)
 8000eea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eec:	4a27      	ldr	r2, [pc, #156]	; (8000f8c <SystemClock_Config+0xcc>)
 8000eee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ef2:	6413      	str	r3, [r2, #64]	; 0x40
 8000ef4:	4b25      	ldr	r3, [pc, #148]	; (8000f8c <SystemClock_Config+0xcc>)
 8000ef6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ef8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000efc:	60bb      	str	r3, [r7, #8]
 8000efe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000f00:	2300      	movs	r3, #0
 8000f02:	607b      	str	r3, [r7, #4]
 8000f04:	4b22      	ldr	r3, [pc, #136]	; (8000f90 <SystemClock_Config+0xd0>)
 8000f06:	681b      	ldr	r3, [r3, #0]
 8000f08:	4a21      	ldr	r2, [pc, #132]	; (8000f90 <SystemClock_Config+0xd0>)
 8000f0a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f0e:	6013      	str	r3, [r2, #0]
 8000f10:	4b1f      	ldr	r3, [pc, #124]	; (8000f90 <SystemClock_Config+0xd0>)
 8000f12:	681b      	ldr	r3, [r3, #0]
 8000f14:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f18:	607b      	str	r3, [r7, #4]
 8000f1a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000f1c:	2301      	movs	r3, #1
 8000f1e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000f20:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000f24:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000f26:	2302      	movs	r3, #2
 8000f28:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000f2a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8000f30:	230c      	movs	r3, #12
 8000f32:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 8000f34:	23a8      	movs	r3, #168	; 0xa8
 8000f36:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000f38:	2302      	movs	r3, #2
 8000f3a:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000f3c:	2304      	movs	r3, #4
 8000f3e:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000f40:	f107 0320 	add.w	r3, r7, #32
 8000f44:	4618      	mov	r0, r3
 8000f46:	f002 fb43 	bl	80035d0 <HAL_RCC_OscConfig>
 8000f4a:	4603      	mov	r3, r0
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d001      	beq.n	8000f54 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000f50:	f000 ff38 	bl	8001dc4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000f54:	230f      	movs	r3, #15
 8000f56:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000f58:	2302      	movs	r3, #2
 8000f5a:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000f60:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000f64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000f66:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f6a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000f6c:	f107 030c 	add.w	r3, r7, #12
 8000f70:	2105      	movs	r1, #5
 8000f72:	4618      	mov	r0, r3
 8000f74:	f002 fda4 	bl	8003ac0 <HAL_RCC_ClockConfig>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	2b00      	cmp	r3, #0
 8000f7c:	d001      	beq.n	8000f82 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000f7e:	f000 ff21 	bl	8001dc4 <Error_Handler>
  }
}
 8000f82:	bf00      	nop
 8000f84:	3750      	adds	r7, #80	; 0x50
 8000f86:	46bd      	mov	sp, r7
 8000f88:	bd80      	pop	{r7, pc}
 8000f8a:	bf00      	nop
 8000f8c:	40023800 	.word	0x40023800
 8000f90:	40007000 	.word	0x40007000

08000f94 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000f94:	b580      	push	{r7, lr}
 8000f96:	b084      	sub	sp, #16
 8000f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000f9a:	463b      	mov	r3, r7
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	601a      	str	r2, [r3, #0]
 8000fa0:	605a      	str	r2, [r3, #4]
 8000fa2:	609a      	str	r2, [r3, #8]
 8000fa4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000fa6:	4b21      	ldr	r3, [pc, #132]	; (800102c <MX_ADC1_Init+0x98>)
 8000fa8:	4a21      	ldr	r2, [pc, #132]	; (8001030 <MX_ADC1_Init+0x9c>)
 8000faa:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fac:	4b1f      	ldr	r3, [pc, #124]	; (800102c <MX_ADC1_Init+0x98>)
 8000fae:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000fb2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fb4:	4b1d      	ldr	r3, [pc, #116]	; (800102c <MX_ADC1_Init+0x98>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000fba:	4b1c      	ldr	r3, [pc, #112]	; (800102c <MX_ADC1_Init+0x98>)
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000fc0:	4b1a      	ldr	r3, [pc, #104]	; (800102c <MX_ADC1_Init+0x98>)
 8000fc2:	2200      	movs	r2, #0
 8000fc4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000fc6:	4b19      	ldr	r3, [pc, #100]	; (800102c <MX_ADC1_Init+0x98>)
 8000fc8:	2200      	movs	r2, #0
 8000fca:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000fce:	4b17      	ldr	r3, [pc, #92]	; (800102c <MX_ADC1_Init+0x98>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000fd4:	4b15      	ldr	r3, [pc, #84]	; (800102c <MX_ADC1_Init+0x98>)
 8000fd6:	4a17      	ldr	r2, [pc, #92]	; (8001034 <MX_ADC1_Init+0xa0>)
 8000fd8:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fda:	4b14      	ldr	r3, [pc, #80]	; (800102c <MX_ADC1_Init+0x98>)
 8000fdc:	2200      	movs	r2, #0
 8000fde:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000fe0:	4b12      	ldr	r3, [pc, #72]	; (800102c <MX_ADC1_Init+0x98>)
 8000fe2:	2201      	movs	r2, #1
 8000fe4:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000fe6:	4b11      	ldr	r3, [pc, #68]	; (800102c <MX_ADC1_Init+0x98>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000fee:	4b0f      	ldr	r3, [pc, #60]	; (800102c <MX_ADC1_Init+0x98>)
 8000ff0:	2201      	movs	r2, #1
 8000ff2:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000ff4:	480d      	ldr	r0, [pc, #52]	; (800102c <MX_ADC1_Init+0x98>)
 8000ff6:	f001 fb3f 	bl	8002678 <HAL_ADC_Init>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	2b00      	cmp	r3, #0
 8000ffe:	d001      	beq.n	8001004 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8001000:	f000 fee0 	bl	8001dc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001004:	230a      	movs	r3, #10
 8001006:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001008:	2301      	movs	r3, #1
 800100a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 800100c:	2305      	movs	r3, #5
 800100e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001010:	463b      	mov	r3, r7
 8001012:	4619      	mov	r1, r3
 8001014:	4805      	ldr	r0, [pc, #20]	; (800102c <MX_ADC1_Init+0x98>)
 8001016:	f001 fcdd 	bl	80029d4 <HAL_ADC_ConfigChannel>
 800101a:	4603      	mov	r3, r0
 800101c:	2b00      	cmp	r3, #0
 800101e:	d001      	beq.n	8001024 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001020:	f000 fed0 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001024:	bf00      	nop
 8001026:	3710      	adds	r7, #16
 8001028:	46bd      	mov	sp, r7
 800102a:	bd80      	pop	{r7, pc}
 800102c:	20000124 	.word	0x20000124
 8001030:	40012000 	.word	0x40012000
 8001034:	0f000001 	.word	0x0f000001

08001038 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b084      	sub	sp, #16
 800103c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800103e:	463b      	mov	r3, r7
 8001040:	2200      	movs	r2, #0
 8001042:	601a      	str	r2, [r3, #0]
 8001044:	605a      	str	r2, [r3, #4]
 8001046:	609a      	str	r2, [r3, #8]
 8001048:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800104a:	4b21      	ldr	r3, [pc, #132]	; (80010d0 <MX_ADC2_Init+0x98>)
 800104c:	4a21      	ldr	r2, [pc, #132]	; (80010d4 <MX_ADC2_Init+0x9c>)
 800104e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001050:	4b1f      	ldr	r3, [pc, #124]	; (80010d0 <MX_ADC2_Init+0x98>)
 8001052:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8001056:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001058:	4b1d      	ldr	r3, [pc, #116]	; (80010d0 <MX_ADC2_Init+0x98>)
 800105a:	2200      	movs	r2, #0
 800105c:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800105e:	4b1c      	ldr	r3, [pc, #112]	; (80010d0 <MX_ADC2_Init+0x98>)
 8001060:	2200      	movs	r2, #0
 8001062:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001064:	4b1a      	ldr	r3, [pc, #104]	; (80010d0 <MX_ADC2_Init+0x98>)
 8001066:	2200      	movs	r2, #0
 8001068:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800106a:	4b19      	ldr	r3, [pc, #100]	; (80010d0 <MX_ADC2_Init+0x98>)
 800106c:	2200      	movs	r2, #0
 800106e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001072:	4b17      	ldr	r3, [pc, #92]	; (80010d0 <MX_ADC2_Init+0x98>)
 8001074:	2200      	movs	r2, #0
 8001076:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001078:	4b15      	ldr	r3, [pc, #84]	; (80010d0 <MX_ADC2_Init+0x98>)
 800107a:	4a17      	ldr	r2, [pc, #92]	; (80010d8 <MX_ADC2_Init+0xa0>)
 800107c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800107e:	4b14      	ldr	r3, [pc, #80]	; (80010d0 <MX_ADC2_Init+0x98>)
 8001080:	2200      	movs	r2, #0
 8001082:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001084:	4b12      	ldr	r3, [pc, #72]	; (80010d0 <MX_ADC2_Init+0x98>)
 8001086:	2201      	movs	r2, #1
 8001088:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 800108a:	4b11      	ldr	r3, [pc, #68]	; (80010d0 <MX_ADC2_Init+0x98>)
 800108c:	2200      	movs	r2, #0
 800108e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001092:	4b0f      	ldr	r3, [pc, #60]	; (80010d0 <MX_ADC2_Init+0x98>)
 8001094:	2201      	movs	r2, #1
 8001096:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001098:	480d      	ldr	r0, [pc, #52]	; (80010d0 <MX_ADC2_Init+0x98>)
 800109a:	f001 faed 	bl	8002678 <HAL_ADC_Init>
 800109e:	4603      	mov	r3, r0
 80010a0:	2b00      	cmp	r3, #0
 80010a2:	d001      	beq.n	80010a8 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80010a4:	f000 fe8e 	bl	8001dc4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_11;
 80010a8:	230b      	movs	r3, #11
 80010aa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80010ac:	2301      	movs	r3, #1
 80010ae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_112CYCLES;
 80010b0:	2305      	movs	r3, #5
 80010b2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010b4:	463b      	mov	r3, r7
 80010b6:	4619      	mov	r1, r3
 80010b8:	4805      	ldr	r0, [pc, #20]	; (80010d0 <MX_ADC2_Init+0x98>)
 80010ba:	f001 fc8b 	bl	80029d4 <HAL_ADC_ConfigChannel>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80010c4:	f000 fe7e 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010c8:	bf00      	nop
 80010ca:	3710      	adds	r7, #16
 80010cc:	46bd      	mov	sp, r7
 80010ce:	bd80      	pop	{r7, pc}
 80010d0:	2000016c 	.word	0x2000016c
 80010d4:	40012100 	.word	0x40012100
 80010d8:	0f000001 	.word	0x0f000001

080010dc <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80010dc:	b580      	push	{r7, lr}
 80010de:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80010e0:	4b12      	ldr	r3, [pc, #72]	; (800112c <MX_I2C2_Init+0x50>)
 80010e2:	4a13      	ldr	r2, [pc, #76]	; (8001130 <MX_I2C2_Init+0x54>)
 80010e4:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80010e6:	4b11      	ldr	r3, [pc, #68]	; (800112c <MX_I2C2_Init+0x50>)
 80010e8:	4a12      	ldr	r2, [pc, #72]	; (8001134 <MX_I2C2_Init+0x58>)
 80010ea:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80010ec:	4b0f      	ldr	r3, [pc, #60]	; (800112c <MX_I2C2_Init+0x50>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80010f2:	4b0e      	ldr	r3, [pc, #56]	; (800112c <MX_I2C2_Init+0x50>)
 80010f4:	2200      	movs	r2, #0
 80010f6:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80010f8:	4b0c      	ldr	r3, [pc, #48]	; (800112c <MX_I2C2_Init+0x50>)
 80010fa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80010fe:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001100:	4b0a      	ldr	r3, [pc, #40]	; (800112c <MX_I2C2_Init+0x50>)
 8001102:	2200      	movs	r2, #0
 8001104:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001106:	4b09      	ldr	r3, [pc, #36]	; (800112c <MX_I2C2_Init+0x50>)
 8001108:	2200      	movs	r2, #0
 800110a:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800110c:	4b07      	ldr	r3, [pc, #28]	; (800112c <MX_I2C2_Init+0x50>)
 800110e:	2200      	movs	r2, #0
 8001110:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001112:	4b06      	ldr	r3, [pc, #24]	; (800112c <MX_I2C2_Init+0x50>)
 8001114:	2200      	movs	r2, #0
 8001116:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001118:	4804      	ldr	r0, [pc, #16]	; (800112c <MX_I2C2_Init+0x50>)
 800111a:	f002 f915 	bl	8003348 <HAL_I2C_Init>
 800111e:	4603      	mov	r3, r0
 8001120:	2b00      	cmp	r3, #0
 8001122:	d001      	beq.n	8001128 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001124:	f000 fe4e 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001128:	bf00      	nop
 800112a:	bd80      	pop	{r7, pc}
 800112c:	200001b4 	.word	0x200001b4
 8001130:	40005800 	.word	0x40005800
 8001134:	000186a0 	.word	0x000186a0

08001138 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001138:	b580      	push	{r7, lr}
 800113a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800113c:	4b17      	ldr	r3, [pc, #92]	; (800119c <MX_SPI1_Init+0x64>)
 800113e:	4a18      	ldr	r2, [pc, #96]	; (80011a0 <MX_SPI1_Init+0x68>)
 8001140:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001142:	4b16      	ldr	r3, [pc, #88]	; (800119c <MX_SPI1_Init+0x64>)
 8001144:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001148:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800114a:	4b14      	ldr	r3, [pc, #80]	; (800119c <MX_SPI1_Init+0x64>)
 800114c:	2200      	movs	r2, #0
 800114e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001150:	4b12      	ldr	r3, [pc, #72]	; (800119c <MX_SPI1_Init+0x64>)
 8001152:	2200      	movs	r2, #0
 8001154:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001156:	4b11      	ldr	r3, [pc, #68]	; (800119c <MX_SPI1_Init+0x64>)
 8001158:	2200      	movs	r2, #0
 800115a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800115c:	4b0f      	ldr	r3, [pc, #60]	; (800119c <MX_SPI1_Init+0x64>)
 800115e:	2200      	movs	r2, #0
 8001160:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001162:	4b0e      	ldr	r3, [pc, #56]	; (800119c <MX_SPI1_Init+0x64>)
 8001164:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001168:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800116a:	4b0c      	ldr	r3, [pc, #48]	; (800119c <MX_SPI1_Init+0x64>)
 800116c:	2200      	movs	r2, #0
 800116e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001170:	4b0a      	ldr	r3, [pc, #40]	; (800119c <MX_SPI1_Init+0x64>)
 8001172:	2200      	movs	r2, #0
 8001174:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001176:	4b09      	ldr	r3, [pc, #36]	; (800119c <MX_SPI1_Init+0x64>)
 8001178:	2200      	movs	r2, #0
 800117a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800117c:	4b07      	ldr	r3, [pc, #28]	; (800119c <MX_SPI1_Init+0x64>)
 800117e:	2200      	movs	r2, #0
 8001180:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001182:	4b06      	ldr	r3, [pc, #24]	; (800119c <MX_SPI1_Init+0x64>)
 8001184:	220a      	movs	r2, #10
 8001186:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001188:	4804      	ldr	r0, [pc, #16]	; (800119c <MX_SPI1_Init+0x64>)
 800118a:	f002 fe79 	bl	8003e80 <HAL_SPI_Init>
 800118e:	4603      	mov	r3, r0
 8001190:	2b00      	cmp	r3, #0
 8001192:	d001      	beq.n	8001198 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001194:	f000 fe16 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001198:	bf00      	nop
 800119a:	bd80      	pop	{r7, pc}
 800119c:	20000208 	.word	0x20000208
 80011a0:	40013000 	.word	0x40013000

080011a4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b096      	sub	sp, #88	; 0x58
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80011aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80011ae:	2200      	movs	r2, #0
 80011b0:	601a      	str	r2, [r3, #0]
 80011b2:	605a      	str	r2, [r3, #4]
 80011b4:	609a      	str	r2, [r3, #8]
 80011b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80011bc:	2200      	movs	r2, #0
 80011be:	601a      	str	r2, [r3, #0]
 80011c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80011c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80011c6:	2200      	movs	r2, #0
 80011c8:	601a      	str	r2, [r3, #0]
 80011ca:	605a      	str	r2, [r3, #4]
 80011cc:	609a      	str	r2, [r3, #8]
 80011ce:	60da      	str	r2, [r3, #12]
 80011d0:	611a      	str	r2, [r3, #16]
 80011d2:	615a      	str	r2, [r3, #20]
 80011d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80011d6:	1d3b      	adds	r3, r7, #4
 80011d8:	2220      	movs	r2, #32
 80011da:	2100      	movs	r1, #0
 80011dc:	4618      	mov	r0, r3
 80011de:	f004 f997 	bl	8005510 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80011e2:	4b44      	ldr	r3, [pc, #272]	; (80012f4 <MX_TIM1_Init+0x150>)
 80011e4:	4a44      	ldr	r2, [pc, #272]	; (80012f8 <MX_TIM1_Init+0x154>)
 80011e6:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 15;
 80011e8:	4b42      	ldr	r3, [pc, #264]	; (80012f4 <MX_TIM1_Init+0x150>)
 80011ea:	220f      	movs	r2, #15
 80011ec:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011ee:	4b41      	ldr	r3, [pc, #260]	; (80012f4 <MX_TIM1_Init+0x150>)
 80011f0:	2200      	movs	r2, #0
 80011f2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1023;
 80011f4:	4b3f      	ldr	r3, [pc, #252]	; (80012f4 <MX_TIM1_Init+0x150>)
 80011f6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 80011fa:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011fc:	4b3d      	ldr	r3, [pc, #244]	; (80012f4 <MX_TIM1_Init+0x150>)
 80011fe:	2200      	movs	r2, #0
 8001200:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001202:	4b3c      	ldr	r3, [pc, #240]	; (80012f4 <MX_TIM1_Init+0x150>)
 8001204:	2200      	movs	r2, #0
 8001206:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001208:	4b3a      	ldr	r3, [pc, #232]	; (80012f4 <MX_TIM1_Init+0x150>)
 800120a:	2200      	movs	r2, #0
 800120c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800120e:	4839      	ldr	r0, [pc, #228]	; (80012f4 <MX_TIM1_Init+0x150>)
 8001210:	f002 febf 	bl	8003f92 <HAL_TIM_Base_Init>
 8001214:	4603      	mov	r3, r0
 8001216:	2b00      	cmp	r3, #0
 8001218:	d001      	beq.n	800121e <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 800121a:	f000 fdd3 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800121e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001222:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001224:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001228:	4619      	mov	r1, r3
 800122a:	4832      	ldr	r0, [pc, #200]	; (80012f4 <MX_TIM1_Init+0x150>)
 800122c:	f003 f9fa 	bl	8004624 <HAL_TIM_ConfigClockSource>
 8001230:	4603      	mov	r3, r0
 8001232:	2b00      	cmp	r3, #0
 8001234:	d001      	beq.n	800123a <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 8001236:	f000 fdc5 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 800123a:	482e      	ldr	r0, [pc, #184]	; (80012f4 <MX_TIM1_Init+0x150>)
 800123c:	f002 ff68 	bl	8004110 <HAL_TIM_PWM_Init>
 8001240:	4603      	mov	r3, r0
 8001242:	2b00      	cmp	r3, #0
 8001244:	d001      	beq.n	800124a <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 8001246:	f000 fdbd 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800124a:	2300      	movs	r3, #0
 800124c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800124e:	2300      	movs	r3, #0
 8001250:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001252:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001256:	4619      	mov	r1, r3
 8001258:	4826      	ldr	r0, [pc, #152]	; (80012f4 <MX_TIM1_Init+0x150>)
 800125a:	f003 fdc7 	bl	8004dec <HAL_TIMEx_MasterConfigSynchronization>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001264:	f000 fdae 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001268:	2360      	movs	r3, #96	; 0x60
 800126a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800126c:	2300      	movs	r3, #0
 800126e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001270:	2300      	movs	r3, #0
 8001272:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001274:	2300      	movs	r3, #0
 8001276:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001278:	2300      	movs	r3, #0
 800127a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800127c:	2300      	movs	r3, #0
 800127e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001280:	2300      	movs	r3, #0
 8001282:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001284:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001288:	2200      	movs	r2, #0
 800128a:	4619      	mov	r1, r3
 800128c:	4819      	ldr	r0, [pc, #100]	; (80012f4 <MX_TIM1_Init+0x150>)
 800128e:	f003 f907 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 8001292:	4603      	mov	r3, r0
 8001294:	2b00      	cmp	r3, #0
 8001296:	d001      	beq.n	800129c <MX_TIM1_Init+0xf8>
  {
    Error_Handler();
 8001298:	f000 fd94 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800129c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80012a0:	2204      	movs	r2, #4
 80012a2:	4619      	mov	r1, r3
 80012a4:	4813      	ldr	r0, [pc, #76]	; (80012f4 <MX_TIM1_Init+0x150>)
 80012a6:	f003 f8fb 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 80012aa:	4603      	mov	r3, r0
 80012ac:	2b00      	cmp	r3, #0
 80012ae:	d001      	beq.n	80012b4 <MX_TIM1_Init+0x110>
  {
    Error_Handler();
 80012b0:	f000 fd88 	bl	8001dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80012b4:	2300      	movs	r3, #0
 80012b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80012b8:	2300      	movs	r3, #0
 80012ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80012bc:	2300      	movs	r3, #0
 80012be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80012c0:	2300      	movs	r3, #0
 80012c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80012c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80012cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80012ce:	2300      	movs	r3, #0
 80012d0:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80012d2:	1d3b      	adds	r3, r7, #4
 80012d4:	4619      	mov	r1, r3
 80012d6:	4807      	ldr	r0, [pc, #28]	; (80012f4 <MX_TIM1_Init+0x150>)
 80012d8:	f003 fe04 	bl	8004ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 80012dc:	4603      	mov	r3, r0
 80012de:	2b00      	cmp	r3, #0
 80012e0:	d001      	beq.n	80012e6 <MX_TIM1_Init+0x142>
  {
    Error_Handler();
 80012e2:	f000 fd6f 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 80012e6:	4803      	ldr	r0, [pc, #12]	; (80012f4 <MX_TIM1_Init+0x150>)
 80012e8:	f000 ffce 	bl	8002288 <HAL_TIM_MspPostInit>

}
 80012ec:	bf00      	nop
 80012ee:	3758      	adds	r7, #88	; 0x58
 80012f0:	46bd      	mov	sp, r7
 80012f2:	bd80      	pop	{r7, pc}
 80012f4:	20000260 	.word	0x20000260
 80012f8:	40010000 	.word	0x40010000

080012fc <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b08c      	sub	sp, #48	; 0x30
 8001300:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001302:	f107 030c 	add.w	r3, r7, #12
 8001306:	2224      	movs	r2, #36	; 0x24
 8001308:	2100      	movs	r1, #0
 800130a:	4618      	mov	r0, r3
 800130c:	f004 f900 	bl	8005510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001310:	1d3b      	adds	r3, r7, #4
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001318:	4b21      	ldr	r3, [pc, #132]	; (80013a0 <MX_TIM2_Init+0xa4>)
 800131a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800131e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 8001320:	4b1f      	ldr	r3, [pc, #124]	; (80013a0 <MX_TIM2_Init+0xa4>)
 8001322:	2200      	movs	r2, #0
 8001324:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b1e      	ldr	r3, [pc, #120]	; (80013a0 <MX_TIM2_Init+0xa4>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 800132c:	4b1c      	ldr	r3, [pc, #112]	; (80013a0 <MX_TIM2_Init+0xa4>)
 800132e:	f04f 32ff 	mov.w	r2, #4294967295
 8001332:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b1a      	ldr	r3, [pc, #104]	; (80013a0 <MX_TIM2_Init+0xa4>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800133a:	4b19      	ldr	r3, [pc, #100]	; (80013a0 <MX_TIM2_Init+0xa4>)
 800133c:	2200      	movs	r2, #0
 800133e:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001340:	2301      	movs	r3, #1
 8001342:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001344:	2300      	movs	r3, #0
 8001346:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001348:	2301      	movs	r3, #1
 800134a:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800134c:	2300      	movs	r3, #0
 800134e:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001354:	2300      	movs	r3, #0
 8001356:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001358:	2301      	movs	r3, #1
 800135a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800135c:	2300      	movs	r3, #0
 800135e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001360:	2300      	movs	r3, #0
 8001362:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 8001364:	f107 030c 	add.w	r3, r7, #12
 8001368:	4619      	mov	r1, r3
 800136a:	480d      	ldr	r0, [pc, #52]	; (80013a0 <MX_TIM2_Init+0xa4>)
 800136c:	f002 fff2 	bl	8004354 <HAL_TIM_Encoder_Init>
 8001370:	4603      	mov	r3, r0
 8001372:	2b00      	cmp	r3, #0
 8001374:	d001      	beq.n	800137a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8001376:	f000 fd25 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800137a:	2300      	movs	r3, #0
 800137c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137e:	2300      	movs	r3, #0
 8001380:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001382:	1d3b      	adds	r3, r7, #4
 8001384:	4619      	mov	r1, r3
 8001386:	4806      	ldr	r0, [pc, #24]	; (80013a0 <MX_TIM2_Init+0xa4>)
 8001388:	f003 fd30 	bl	8004dec <HAL_TIMEx_MasterConfigSynchronization>
 800138c:	4603      	mov	r3, r0
 800138e:	2b00      	cmp	r3, #0
 8001390:	d001      	beq.n	8001396 <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 8001392:	f000 fd17 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001396:	bf00      	nop
 8001398:	3730      	adds	r7, #48	; 0x30
 800139a:	46bd      	mov	sp, r7
 800139c:	bd80      	pop	{r7, pc}
 800139e:	bf00      	nop
 80013a0:	200002a8 	.word	0x200002a8

080013a4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013a4:	b580      	push	{r7, lr}
 80013a6:	b08c      	sub	sp, #48	; 0x30
 80013a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80013aa:	f107 030c 	add.w	r3, r7, #12
 80013ae:	2224      	movs	r2, #36	; 0x24
 80013b0:	2100      	movs	r1, #0
 80013b2:	4618      	mov	r0, r3
 80013b4:	f004 f8ac 	bl	8005510 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b8:	1d3b      	adds	r3, r7, #4
 80013ba:	2200      	movs	r2, #0
 80013bc:	601a      	str	r2, [r3, #0]
 80013be:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013c0:	4b20      	ldr	r3, [pc, #128]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013c2:	4a21      	ldr	r2, [pc, #132]	; (8001448 <MX_TIM3_Init+0xa4>)
 80013c4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 80013c6:	4b1f      	ldr	r3, [pc, #124]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013cc:	4b1d      	ldr	r3, [pc, #116]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 80013d2:	4b1c      	ldr	r3, [pc, #112]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013d4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80013d8:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013da:	4b1a      	ldr	r3, [pc, #104]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013dc:	2200      	movs	r2, #0
 80013de:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013e0:	4b18      	ldr	r3, [pc, #96]	; (8001444 <MX_TIM3_Init+0xa0>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80013e6:	2303      	movs	r3, #3
 80013e8:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80013ea:	2300      	movs	r3, #0
 80013ec:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80013ee:	2301      	movs	r3, #1
 80013f0:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80013f2:	2300      	movs	r3, #0
 80013f4:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80013f6:	2300      	movs	r3, #0
 80013f8:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80013fa:	2300      	movs	r3, #0
 80013fc:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80013fe:	2301      	movs	r3, #1
 8001400:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001402:	2300      	movs	r3, #0
 8001404:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001406:	2300      	movs	r3, #0
 8001408:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 800140a:	f107 030c 	add.w	r3, r7, #12
 800140e:	4619      	mov	r1, r3
 8001410:	480c      	ldr	r0, [pc, #48]	; (8001444 <MX_TIM3_Init+0xa0>)
 8001412:	f002 ff9f 	bl	8004354 <HAL_TIM_Encoder_Init>
 8001416:	4603      	mov	r3, r0
 8001418:	2b00      	cmp	r3, #0
 800141a:	d001      	beq.n	8001420 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 800141c:	f000 fcd2 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001424:	2300      	movs	r3, #0
 8001426:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001428:	1d3b      	adds	r3, r7, #4
 800142a:	4619      	mov	r1, r3
 800142c:	4805      	ldr	r0, [pc, #20]	; (8001444 <MX_TIM3_Init+0xa0>)
 800142e:	f003 fcdd 	bl	8004dec <HAL_TIMEx_MasterConfigSynchronization>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 8001438:	f000 fcc4 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800143c:	bf00      	nop
 800143e:	3730      	adds	r7, #48	; 0x30
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}
 8001444:	200002f0 	.word	0x200002f0
 8001448:	40000400 	.word	0x40000400

0800144c <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 800144c:	b580      	push	{r7, lr}
 800144e:	b08e      	sub	sp, #56	; 0x38
 8001450:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001452:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001456:	2200      	movs	r2, #0
 8001458:	601a      	str	r2, [r3, #0]
 800145a:	605a      	str	r2, [r3, #4]
 800145c:	609a      	str	r2, [r3, #8]
 800145e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001460:	f107 0320 	add.w	r3, r7, #32
 8001464:	2200      	movs	r2, #0
 8001466:	601a      	str	r2, [r3, #0]
 8001468:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800146a:	1d3b      	adds	r3, r7, #4
 800146c:	2200      	movs	r2, #0
 800146e:	601a      	str	r2, [r3, #0]
 8001470:	605a      	str	r2, [r3, #4]
 8001472:	609a      	str	r2, [r3, #8]
 8001474:	60da      	str	r2, [r3, #12]
 8001476:	611a      	str	r2, [r3, #16]
 8001478:	615a      	str	r2, [r3, #20]
 800147a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800147c:	4b2c      	ldr	r3, [pc, #176]	; (8001530 <MX_TIM4_Init+0xe4>)
 800147e:	4a2d      	ldr	r2, [pc, #180]	; (8001534 <MX_TIM4_Init+0xe8>)
 8001480:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8001482:	4b2b      	ldr	r3, [pc, #172]	; (8001530 <MX_TIM4_Init+0xe4>)
 8001484:	2200      	movs	r2, #0
 8001486:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001488:	4b29      	ldr	r3, [pc, #164]	; (8001530 <MX_TIM4_Init+0xe4>)
 800148a:	2200      	movs	r2, #0
 800148c:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 65535;
 800148e:	4b28      	ldr	r3, [pc, #160]	; (8001530 <MX_TIM4_Init+0xe4>)
 8001490:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001494:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001496:	4b26      	ldr	r3, [pc, #152]	; (8001530 <MX_TIM4_Init+0xe4>)
 8001498:	2200      	movs	r2, #0
 800149a:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800149c:	4b24      	ldr	r3, [pc, #144]	; (8001530 <MX_TIM4_Init+0xe4>)
 800149e:	2200      	movs	r2, #0
 80014a0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80014a2:	4823      	ldr	r0, [pc, #140]	; (8001530 <MX_TIM4_Init+0xe4>)
 80014a4:	f002 fd75 	bl	8003f92 <HAL_TIM_Base_Init>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MX_TIM4_Init+0x66>
  {
    Error_Handler();
 80014ae:	f000 fc89 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80014b2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80014b6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80014b8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014bc:	4619      	mov	r1, r3
 80014be:	481c      	ldr	r0, [pc, #112]	; (8001530 <MX_TIM4_Init+0xe4>)
 80014c0:	f003 f8b0 	bl	8004624 <HAL_TIM_ConfigClockSource>
 80014c4:	4603      	mov	r3, r0
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d001      	beq.n	80014ce <MX_TIM4_Init+0x82>
  {
    Error_Handler();
 80014ca:	f000 fc7b 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014ce:	4818      	ldr	r0, [pc, #96]	; (8001530 <MX_TIM4_Init+0xe4>)
 80014d0:	f002 fe1e 	bl	8004110 <HAL_TIM_PWM_Init>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80014da:	f000 fc73 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014de:	2300      	movs	r3, #0
 80014e0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014e2:	2300      	movs	r3, #0
 80014e4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014e6:	f107 0320 	add.w	r3, r7, #32
 80014ea:	4619      	mov	r1, r3
 80014ec:	4810      	ldr	r0, [pc, #64]	; (8001530 <MX_TIM4_Init+0xe4>)
 80014ee:	f003 fc7d 	bl	8004dec <HAL_TIMEx_MasterConfigSynchronization>
 80014f2:	4603      	mov	r3, r0
 80014f4:	2b00      	cmp	r3, #0
 80014f6:	d001      	beq.n	80014fc <MX_TIM4_Init+0xb0>
  {
    Error_Handler();
 80014f8:	f000 fc64 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014fc:	2360      	movs	r3, #96	; 0x60
 80014fe:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001500:	2300      	movs	r3, #0
 8001502:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001504:	2300      	movs	r3, #0
 8001506:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001508:	2300      	movs	r3, #0
 800150a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800150c:	1d3b      	adds	r3, r7, #4
 800150e:	2204      	movs	r2, #4
 8001510:	4619      	mov	r1, r3
 8001512:	4807      	ldr	r0, [pc, #28]	; (8001530 <MX_TIM4_Init+0xe4>)
 8001514:	f002 ffc4 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_TIM4_Init+0xd6>
  {
    Error_Handler();
 800151e:	f000 fc51 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001522:	4803      	ldr	r0, [pc, #12]	; (8001530 <MX_TIM4_Init+0xe4>)
 8001524:	f000 feb0 	bl	8002288 <HAL_TIM_MspPostInit>

}
 8001528:	bf00      	nop
 800152a:	3738      	adds	r7, #56	; 0x38
 800152c:	46bd      	mov	sp, r7
 800152e:	bd80      	pop	{r7, pc}
 8001530:	20000338 	.word	0x20000338
 8001534:	40000800 	.word	0x40000800

08001538 <MX_TIM6_Init>:
  * @brief TIM6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM6_Init(void)
{
 8001538:	b580      	push	{r7, lr}
 800153a:	b082      	sub	sp, #8
 800153c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800153e:	463b      	mov	r3, r7
 8001540:	2200      	movs	r2, #0
 8001542:	601a      	str	r2, [r3, #0]
 8001544:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 8001546:	4b15      	ldr	r3, [pc, #84]	; (800159c <MX_TIM6_Init+0x64>)
 8001548:	4a15      	ldr	r2, [pc, #84]	; (80015a0 <MX_TIM6_Init+0x68>)
 800154a:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 168;
 800154c:	4b13      	ldr	r3, [pc, #76]	; (800159c <MX_TIM6_Init+0x64>)
 800154e:	22a8      	movs	r2, #168	; 0xa8
 8001550:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001552:	4b12      	ldr	r3, [pc, #72]	; (800159c <MX_TIM6_Init+0x64>)
 8001554:	2200      	movs	r2, #0
 8001556:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 8001558:	4b10      	ldr	r3, [pc, #64]	; (800159c <MX_TIM6_Init+0x64>)
 800155a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800155e:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <MX_TIM6_Init+0x64>)
 8001562:	2200      	movs	r2, #0
 8001564:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 8001566:	480d      	ldr	r0, [pc, #52]	; (800159c <MX_TIM6_Init+0x64>)
 8001568:	f002 fd13 	bl	8003f92 <HAL_TIM_Base_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_TIM6_Init+0x3e>
  {
    Error_Handler();
 8001572:	f000 fc27 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001576:	2300      	movs	r3, #0
 8001578:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800157a:	2300      	movs	r3, #0
 800157c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800157e:	463b      	mov	r3, r7
 8001580:	4619      	mov	r1, r3
 8001582:	4806      	ldr	r0, [pc, #24]	; (800159c <MX_TIM6_Init+0x64>)
 8001584:	f003 fc32 	bl	8004dec <HAL_TIMEx_MasterConfigSynchronization>
 8001588:	4603      	mov	r3, r0
 800158a:	2b00      	cmp	r3, #0
 800158c:	d001      	beq.n	8001592 <MX_TIM6_Init+0x5a>
  {
    Error_Handler();
 800158e:	f000 fc19 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 8001592:	bf00      	nop
 8001594:	3708      	adds	r7, #8
 8001596:	46bd      	mov	sp, r7
 8001598:	bd80      	pop	{r7, pc}
 800159a:	bf00      	nop
 800159c:	20000380 	.word	0x20000380
 80015a0:	40001000 	.word	0x40001000

080015a4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015a4:	b580      	push	{r7, lr}
 80015a6:	b096      	sub	sp, #88	; 0x58
 80015a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015aa:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015ae:	2200      	movs	r2, #0
 80015b0:	601a      	str	r2, [r3, #0]
 80015b2:	605a      	str	r2, [r3, #4]
 80015b4:	609a      	str	r2, [r3, #8]
 80015b6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015bc:	2200      	movs	r2, #0
 80015be:	601a      	str	r2, [r3, #0]
 80015c0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015c6:	2200      	movs	r2, #0
 80015c8:	601a      	str	r2, [r3, #0]
 80015ca:	605a      	str	r2, [r3, #4]
 80015cc:	609a      	str	r2, [r3, #8]
 80015ce:	60da      	str	r2, [r3, #12]
 80015d0:	611a      	str	r2, [r3, #16]
 80015d2:	615a      	str	r2, [r3, #20]
 80015d4:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 80015d6:	1d3b      	adds	r3, r7, #4
 80015d8:	2220      	movs	r2, #32
 80015da:	2100      	movs	r1, #0
 80015dc:	4618      	mov	r0, r3
 80015de:	f003 ff97 	bl	8005510 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 80015e2:	4b50      	ldr	r3, [pc, #320]	; (8001724 <MX_TIM8_Init+0x180>)
 80015e4:	4a50      	ldr	r2, [pc, #320]	; (8001728 <MX_TIM8_Init+0x184>)
 80015e6:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 80015e8:	4b4e      	ldr	r3, [pc, #312]	; (8001724 <MX_TIM8_Init+0x180>)
 80015ea:	2200      	movs	r2, #0
 80015ec:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015ee:	4b4d      	ldr	r3, [pc, #308]	; (8001724 <MX_TIM8_Init+0x180>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 65535;
 80015f4:	4b4b      	ldr	r3, [pc, #300]	; (8001724 <MX_TIM8_Init+0x180>)
 80015f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015fa:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015fc:	4b49      	ldr	r3, [pc, #292]	; (8001724 <MX_TIM8_Init+0x180>)
 80015fe:	2200      	movs	r2, #0
 8001600:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001602:	4b48      	ldr	r3, [pc, #288]	; (8001724 <MX_TIM8_Init+0x180>)
 8001604:	2200      	movs	r2, #0
 8001606:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001608:	4b46      	ldr	r3, [pc, #280]	; (8001724 <MX_TIM8_Init+0x180>)
 800160a:	2200      	movs	r2, #0
 800160c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800160e:	4845      	ldr	r0, [pc, #276]	; (8001724 <MX_TIM8_Init+0x180>)
 8001610:	f002 fcbf 	bl	8003f92 <HAL_TIM_Base_Init>
 8001614:	4603      	mov	r3, r0
 8001616:	2b00      	cmp	r3, #0
 8001618:	d001      	beq.n	800161e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800161a:	f000 fbd3 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800161e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001622:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001624:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001628:	4619      	mov	r1, r3
 800162a:	483e      	ldr	r0, [pc, #248]	; (8001724 <MX_TIM8_Init+0x180>)
 800162c:	f002 fffa 	bl	8004624 <HAL_TIM_ConfigClockSource>
 8001630:	4603      	mov	r3, r0
 8001632:	2b00      	cmp	r3, #0
 8001634:	d001      	beq.n	800163a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001636:	f000 fbc5 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800163a:	483a      	ldr	r0, [pc, #232]	; (8001724 <MX_TIM8_Init+0x180>)
 800163c:	f002 fd68 	bl	8004110 <HAL_TIM_PWM_Init>
 8001640:	4603      	mov	r3, r0
 8001642:	2b00      	cmp	r3, #0
 8001644:	d001      	beq.n	800164a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001646:	f000 fbbd 	bl	8001dc4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800164a:	2300      	movs	r3, #0
 800164c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800164e:	2300      	movs	r3, #0
 8001650:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001652:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001656:	4619      	mov	r1, r3
 8001658:	4832      	ldr	r0, [pc, #200]	; (8001724 <MX_TIM8_Init+0x180>)
 800165a:	f003 fbc7 	bl	8004dec <HAL_TIMEx_MasterConfigSynchronization>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001664:	f000 fbae 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001668:	2360      	movs	r3, #96	; 0x60
 800166a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800166c:	2300      	movs	r3, #0
 800166e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001670:	2300      	movs	r3, #0
 8001672:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001674:	2300      	movs	r3, #0
 8001676:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001678:	2300      	movs	r3, #0
 800167a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800167c:	2300      	movs	r3, #0
 800167e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001680:	2300      	movs	r3, #0
 8001682:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001684:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001688:	2200      	movs	r2, #0
 800168a:	4619      	mov	r1, r3
 800168c:	4825      	ldr	r0, [pc, #148]	; (8001724 <MX_TIM8_Init+0x180>)
 800168e:	f002 ff07 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 8001692:	4603      	mov	r3, r0
 8001694:	2b00      	cmp	r3, #0
 8001696:	d001      	beq.n	800169c <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 8001698:	f000 fb94 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800169c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016a0:	2204      	movs	r2, #4
 80016a2:	4619      	mov	r1, r3
 80016a4:	481f      	ldr	r0, [pc, #124]	; (8001724 <MX_TIM8_Init+0x180>)
 80016a6:	f002 fefb 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 80016aa:	4603      	mov	r3, r0
 80016ac:	2b00      	cmp	r3, #0
 80016ae:	d001      	beq.n	80016b4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80016b0:	f000 fb88 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	2208      	movs	r2, #8
 80016ba:	4619      	mov	r1, r3
 80016bc:	4819      	ldr	r0, [pc, #100]	; (8001724 <MX_TIM8_Init+0x180>)
 80016be:	f002 feef 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM8_Init+0x128>
  {
    Error_Handler();
 80016c8:	f000 fb7c 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 80016cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d0:	220c      	movs	r2, #12
 80016d2:	4619      	mov	r1, r3
 80016d4:	4813      	ldr	r0, [pc, #76]	; (8001724 <MX_TIM8_Init+0x180>)
 80016d6:	f002 fee3 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM8_Init+0x140>
  {
    Error_Handler();
 80016e0:	f000 fb70 	bl	8001dc4 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	4619      	mov	r1, r3
 8001706:	4807      	ldr	r0, [pc, #28]	; (8001724 <MX_TIM8_Init+0x180>)
 8001708:	f003 fbec 	bl	8004ee4 <HAL_TIMEx_ConfigBreakDeadTime>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM8_Init+0x172>
  {
    Error_Handler();
 8001712:	f000 fb57 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */
  HAL_TIM_MspPostInit(&htim8);
 8001716:	4803      	ldr	r0, [pc, #12]	; (8001724 <MX_TIM8_Init+0x180>)
 8001718:	f000 fdb6 	bl	8002288 <HAL_TIM_MspPostInit>

}
 800171c:	bf00      	nop
 800171e:	3758      	adds	r7, #88	; 0x58
 8001720:	46bd      	mov	sp, r7
 8001722:	bd80      	pop	{r7, pc}
 8001724:	200003c8 	.word	0x200003c8
 8001728:	40010400 	.word	0x40010400

0800172c <MX_TIM9_Init>:
  * @brief TIM9 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM9_Init(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b08c      	sub	sp, #48	; 0x30
 8001730:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM9_Init 0 */

  /* USER CODE END TIM9_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001732:	f107 0320 	add.w	r3, r7, #32
 8001736:	2200      	movs	r2, #0
 8001738:	601a      	str	r2, [r3, #0]
 800173a:	605a      	str	r2, [r3, #4]
 800173c:	609a      	str	r2, [r3, #8]
 800173e:	60da      	str	r2, [r3, #12]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001740:	1d3b      	adds	r3, r7, #4
 8001742:	2200      	movs	r2, #0
 8001744:	601a      	str	r2, [r3, #0]
 8001746:	605a      	str	r2, [r3, #4]
 8001748:	609a      	str	r2, [r3, #8]
 800174a:	60da      	str	r2, [r3, #12]
 800174c:	611a      	str	r2, [r3, #16]
 800174e:	615a      	str	r2, [r3, #20]
 8001750:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM9_Init 1 */

  /* USER CODE END TIM9_Init 1 */
  htim9.Instance = TIM9;
 8001752:	4b25      	ldr	r3, [pc, #148]	; (80017e8 <MX_TIM9_Init+0xbc>)
 8001754:	4a25      	ldr	r2, [pc, #148]	; (80017ec <MX_TIM9_Init+0xc0>)
 8001756:	601a      	str	r2, [r3, #0]
  htim9.Init.Prescaler = 0;
 8001758:	4b23      	ldr	r3, [pc, #140]	; (80017e8 <MX_TIM9_Init+0xbc>)
 800175a:	2200      	movs	r2, #0
 800175c:	605a      	str	r2, [r3, #4]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 800175e:	4b22      	ldr	r3, [pc, #136]	; (80017e8 <MX_TIM9_Init+0xbc>)
 8001760:	2200      	movs	r2, #0
 8001762:	609a      	str	r2, [r3, #8]
  htim9.Init.Period = 65535;
 8001764:	4b20      	ldr	r3, [pc, #128]	; (80017e8 <MX_TIM9_Init+0xbc>)
 8001766:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800176a:	60da      	str	r2, [r3, #12]
  htim9.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800176c:	4b1e      	ldr	r3, [pc, #120]	; (80017e8 <MX_TIM9_Init+0xbc>)
 800176e:	2200      	movs	r2, #0
 8001770:	611a      	str	r2, [r3, #16]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001772:	4b1d      	ldr	r3, [pc, #116]	; (80017e8 <MX_TIM9_Init+0xbc>)
 8001774:	2200      	movs	r2, #0
 8001776:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim9) != HAL_OK)
 8001778:	481b      	ldr	r0, [pc, #108]	; (80017e8 <MX_TIM9_Init+0xbc>)
 800177a:	f002 fc0a 	bl	8003f92 <HAL_TIM_Base_Init>
 800177e:	4603      	mov	r3, r0
 8001780:	2b00      	cmp	r3, #0
 8001782:	d001      	beq.n	8001788 <MX_TIM9_Init+0x5c>
  {
    Error_Handler();
 8001784:	f000 fb1e 	bl	8001dc4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001788:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800178c:	623b      	str	r3, [r7, #32]
  if (HAL_TIM_ConfigClockSource(&htim9, &sClockSourceConfig) != HAL_OK)
 800178e:	f107 0320 	add.w	r3, r7, #32
 8001792:	4619      	mov	r1, r3
 8001794:	4814      	ldr	r0, [pc, #80]	; (80017e8 <MX_TIM9_Init+0xbc>)
 8001796:	f002 ff45 	bl	8004624 <HAL_TIM_ConfigClockSource>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_TIM9_Init+0x78>
  {
    Error_Handler();
 80017a0:	f000 fb10 	bl	8001dc4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim9) != HAL_OK)
 80017a4:	4810      	ldr	r0, [pc, #64]	; (80017e8 <MX_TIM9_Init+0xbc>)
 80017a6:	f002 fcb3 	bl	8004110 <HAL_TIM_PWM_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_TIM9_Init+0x88>
  {
    Error_Handler();
 80017b0:	f000 fb08 	bl	8001dc4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017b4:	2360      	movs	r3, #96	; 0x60
 80017b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017bc:	2300      	movs	r3, #0
 80017be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c0:	2300      	movs	r3, #0
 80017c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim9, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017c4:	1d3b      	adds	r3, r7, #4
 80017c6:	2200      	movs	r2, #0
 80017c8:	4619      	mov	r1, r3
 80017ca:	4807      	ldr	r0, [pc, #28]	; (80017e8 <MX_TIM9_Init+0xbc>)
 80017cc:	f002 fe68 	bl	80044a0 <HAL_TIM_PWM_ConfigChannel>
 80017d0:	4603      	mov	r3, r0
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d001      	beq.n	80017da <MX_TIM9_Init+0xae>
  {
    Error_Handler();
 80017d6:	f000 faf5 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM9_Init 2 */

  /* USER CODE END TIM9_Init 2 */
  HAL_TIM_MspPostInit(&htim9);
 80017da:	4803      	ldr	r0, [pc, #12]	; (80017e8 <MX_TIM9_Init+0xbc>)
 80017dc:	f000 fd54 	bl	8002288 <HAL_TIM_MspPostInit>

}
 80017e0:	bf00      	nop
 80017e2:	3730      	adds	r7, #48	; 0x30
 80017e4:	46bd      	mov	sp, r7
 80017e6:	bd80      	pop	{r7, pc}
 80017e8:	20000410 	.word	0x20000410
 80017ec:	40014000 	.word	0x40014000

080017f0 <MX_UART4_Init>:
  * @brief UART4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART4_Init(void)
{
 80017f0:	b580      	push	{r7, lr}
 80017f2:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80017f4:	4b11      	ldr	r3, [pc, #68]	; (800183c <MX_UART4_Init+0x4c>)
 80017f6:	4a12      	ldr	r2, [pc, #72]	; (8001840 <MX_UART4_Init+0x50>)
 80017f8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80017fa:	4b10      	ldr	r3, [pc, #64]	; (800183c <MX_UART4_Init+0x4c>)
 80017fc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001800:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8001802:	4b0e      	ldr	r3, [pc, #56]	; (800183c <MX_UART4_Init+0x4c>)
 8001804:	2200      	movs	r2, #0
 8001806:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 8001808:	4b0c      	ldr	r3, [pc, #48]	; (800183c <MX_UART4_Init+0x4c>)
 800180a:	2200      	movs	r2, #0
 800180c:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800180e:	4b0b      	ldr	r3, [pc, #44]	; (800183c <MX_UART4_Init+0x4c>)
 8001810:	2200      	movs	r2, #0
 8001812:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8001814:	4b09      	ldr	r3, [pc, #36]	; (800183c <MX_UART4_Init+0x4c>)
 8001816:	220c      	movs	r2, #12
 8001818:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800181a:	4b08      	ldr	r3, [pc, #32]	; (800183c <MX_UART4_Init+0x4c>)
 800181c:	2200      	movs	r2, #0
 800181e:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8001820:	4b06      	ldr	r3, [pc, #24]	; (800183c <MX_UART4_Init+0x4c>)
 8001822:	2200      	movs	r2, #0
 8001824:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8001826:	4805      	ldr	r0, [pc, #20]	; (800183c <MX_UART4_Init+0x4c>)
 8001828:	f003 fbae 	bl	8004f88 <HAL_UART_Init>
 800182c:	4603      	mov	r3, r0
 800182e:	2b00      	cmp	r3, #0
 8001830:	d001      	beq.n	8001836 <MX_UART4_Init+0x46>
  {
    Error_Handler();
 8001832:	f000 fac7 	bl	8001dc4 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8001836:	bf00      	nop
 8001838:	bd80      	pop	{r7, pc}
 800183a:	bf00      	nop
 800183c:	20000458 	.word	0x20000458
 8001840:	40004c00 	.word	0x40004c00

08001844 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b08c      	sub	sp, #48	; 0x30
 8001848:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800184a:	f107 031c 	add.w	r3, r7, #28
 800184e:	2200      	movs	r2, #0
 8001850:	601a      	str	r2, [r3, #0]
 8001852:	605a      	str	r2, [r3, #4]
 8001854:	609a      	str	r2, [r3, #8]
 8001856:	60da      	str	r2, [r3, #12]
 8001858:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800185a:	2300      	movs	r3, #0
 800185c:	61bb      	str	r3, [r7, #24]
 800185e:	4b74      	ldr	r3, [pc, #464]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 8001860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001862:	4a73      	ldr	r2, [pc, #460]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 8001864:	f043 0310 	orr.w	r3, r3, #16
 8001868:	6313      	str	r3, [r2, #48]	; 0x30
 800186a:	4b71      	ldr	r3, [pc, #452]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 800186c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800186e:	f003 0310 	and.w	r3, r3, #16
 8001872:	61bb      	str	r3, [r7, #24]
 8001874:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001876:	2300      	movs	r3, #0
 8001878:	617b      	str	r3, [r7, #20]
 800187a:	4b6d      	ldr	r3, [pc, #436]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 800187c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187e:	4a6c      	ldr	r2, [pc, #432]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 8001880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001884:	6313      	str	r3, [r2, #48]	; 0x30
 8001886:	4b6a      	ldr	r3, [pc, #424]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 8001888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800188a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800188e:	617b      	str	r3, [r7, #20]
 8001890:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001892:	2300      	movs	r3, #0
 8001894:	613b      	str	r3, [r7, #16]
 8001896:	4b66      	ldr	r3, [pc, #408]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 8001898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800189a:	4a65      	ldr	r2, [pc, #404]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 800189c:	f043 0304 	orr.w	r3, r3, #4
 80018a0:	6313      	str	r3, [r2, #48]	; 0x30
 80018a2:	4b63      	ldr	r3, [pc, #396]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a6:	f003 0304 	and.w	r3, r3, #4
 80018aa:	613b      	str	r3, [r7, #16]
 80018ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80018ae:	2300      	movs	r3, #0
 80018b0:	60fb      	str	r3, [r7, #12]
 80018b2:	4b5f      	ldr	r3, [pc, #380]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018b6:	4a5e      	ldr	r2, [pc, #376]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018b8:	f043 0301 	orr.w	r3, r3, #1
 80018bc:	6313      	str	r3, [r2, #48]	; 0x30
 80018be:	4b5c      	ldr	r3, [pc, #368]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018c2:	f003 0301 	and.w	r3, r3, #1
 80018c6:	60fb      	str	r3, [r7, #12]
 80018c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80018ca:	2300      	movs	r3, #0
 80018cc:	60bb      	str	r3, [r7, #8]
 80018ce:	4b58      	ldr	r3, [pc, #352]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018d2:	4a57      	ldr	r2, [pc, #348]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018d4:	f043 0302 	orr.w	r3, r3, #2
 80018d8:	6313      	str	r3, [r2, #48]	; 0x30
 80018da:	4b55      	ldr	r3, [pc, #340]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018de:	f003 0302 	and.w	r3, r3, #2
 80018e2:	60bb      	str	r3, [r7, #8]
 80018e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80018e6:	2300      	movs	r3, #0
 80018e8:	607b      	str	r3, [r7, #4]
 80018ea:	4b51      	ldr	r3, [pc, #324]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018ee:	4a50      	ldr	r2, [pc, #320]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018f0:	f043 0308 	orr.w	r3, r3, #8
 80018f4:	6313      	str	r3, [r2, #48]	; 0x30
 80018f6:	4b4e      	ldr	r3, [pc, #312]	; (8001a30 <MX_GPIO_Init+0x1ec>)
 80018f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018fa:	f003 0308 	and.w	r3, r3, #8
 80018fe:	607b      	str	r3, [r7, #4]
 8001900:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, CLR_LED_4_Pin|CLR_INT_3_Pin|CLR_LED_3_Pin|RR_ARRAY_MUX_3_Pin
 8001902:	2200      	movs	r2, #0
 8001904:	f249 11ba 	movw	r1, #37306	; 0x91ba
 8001908:	484a      	ldr	r0, [pc, #296]	; (8001a34 <MX_GPIO_Init+0x1f0>)
 800190a:	f001 fd03 	bl	8003314 <HAL_GPIO_WritePin>
                          |RR_ARRAY_MUX_4_Pin|TOF_LPIN_1_Pin|TOF_INT_6_Pin|CLR_LED_2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, RR_ARRAY_ODD_Pin|RR_ARRAY_EVEN_Pin|FR_ARRAY_EVEN_Pin, GPIO_PIN_RESET);
 800190e:	2200      	movs	r2, #0
 8001910:	f241 0130 	movw	r1, #4144	; 0x1030
 8001914:	4848      	ldr	r0, [pc, #288]	; (8001a38 <MX_GPIO_Init+0x1f4>)
 8001916:	f001 fcfd 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, RR_ARRAY_MUX_1_Pin|RR_ARRAY_MUX_2_Pin|FR_INA_Pin|FR_INB_Pin
 800191a:	2200      	movs	r2, #0
 800191c:	f24f 11c6 	movw	r1, #61894	; 0xf1c6
 8001920:	4846      	ldr	r0, [pc, #280]	; (8001a3c <MX_GPIO_Init+0x1f8>)
 8001922:	f001 fcf7 	bl	8003314 <HAL_GPIO_WritePin>
                          |RR_INA_Pin|RR_INB_Pin|LCD_DS_Pin|LCD_RESET_Pin
                          |LCD_CS_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, TOF_LPIN_5_Pin|TOF_LPIN_4_Pin|TOF_LPIN_3_Pin|FR_ARRAY_SB2_Pin
 8001926:	2200      	movs	r2, #0
 8001928:	f644 21ff 	movw	r1, #19199	; 0x4aff
 800192c:	4844      	ldr	r0, [pc, #272]	; (8001a40 <MX_GPIO_Init+0x1fc>)
 800192e:	f001 fcf1 	bl	8003314 <HAL_GPIO_WritePin>
                          |FR_ARRAY_SB3_Pin|FR_ARRAY_SB0_Pin|FR_ARRAY_SB1_Pin|FR_ARRAY_SA0_Pin
                          |FR_ARRAY_SA1_Pin|FR_ARRAY_SA2_Pin|FR_ARRAY_SA3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TOF_LPIN_2_Pin|CLR_LED_1_Pin|FR_ARRAY_ODD_Pin, GPIO_PIN_RESET);
 8001932:	2200      	movs	r2, #0
 8001934:	f44f 4111 	mov.w	r1, #37120	; 0x9100
 8001938:	4842      	ldr	r0, [pc, #264]	; (8001a44 <MX_GPIO_Init+0x200>)
 800193a:	f001 fceb 	bl	8003314 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CLR_INT_4_Pin IMU_INT_Pin TOF_INT_1_Pin TOF_LPIN_6_Pin
                           CLR_INT_2_Pin */
  GPIO_InitStruct.Pin = CLR_INT_4_Pin|IMU_INT_Pin|TOF_INT_1_Pin|TOF_LPIN_6_Pin
 800193e:	f246 0345 	movw	r3, #24645	; 0x6045
 8001942:	61fb      	str	r3, [r7, #28]
                          |CLR_INT_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001944:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001948:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800194a:	2300      	movs	r3, #0
 800194c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800194e:	f107 031c 	add.w	r3, r7, #28
 8001952:	4619      	mov	r1, r3
 8001954:	4837      	ldr	r0, [pc, #220]	; (8001a34 <MX_GPIO_Init+0x1f0>)
 8001956:	f001 fb41 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : CLR_LED_4_Pin CLR_INT_3_Pin CLR_LED_3_Pin RR_ARRAY_MUX_3_Pin
                           RR_ARRAY_MUX_4_Pin TOF_LPIN_1_Pin TOF_INT_6_Pin CLR_LED_2_Pin */
  GPIO_InitStruct.Pin = CLR_LED_4_Pin|CLR_INT_3_Pin|CLR_LED_3_Pin|RR_ARRAY_MUX_3_Pin
 800195a:	f249 13ba 	movw	r3, #37306	; 0x91ba
 800195e:	61fb      	str	r3, [r7, #28]
                          |RR_ARRAY_MUX_4_Pin|TOF_LPIN_1_Pin|TOF_INT_6_Pin|CLR_LED_2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001960:	2301      	movs	r3, #1
 8001962:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001964:	2300      	movs	r3, #0
 8001966:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001968:	2300      	movs	r3, #0
 800196a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800196c:	f107 031c 	add.w	r3, r7, #28
 8001970:	4619      	mov	r1, r3
 8001972:	4830      	ldr	r0, [pc, #192]	; (8001a34 <MX_GPIO_Init+0x1f0>)
 8001974:	f001 fb32 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PROX_IN_Pin TOF_INT_2_Pin CLR_INT_1_Pin */
  GPIO_InitStruct.Pin = PROX_IN_Pin|TOF_INT_2_Pin|CLR_INT_1_Pin;
 8001978:	f640 2308 	movw	r3, #2568	; 0xa08
 800197c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800197e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001982:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001984:	2300      	movs	r3, #0
 8001986:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001988:	f107 031c 	add.w	r3, r7, #28
 800198c:	4619      	mov	r1, r3
 800198e:	482d      	ldr	r0, [pc, #180]	; (8001a44 <MX_GPIO_Init+0x200>)
 8001990:	f001 fb24 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_ARRAY_ODD_Pin RR_ARRAY_EVEN_Pin FR_ARRAY_EVEN_Pin */
  GPIO_InitStruct.Pin = RR_ARRAY_ODD_Pin|RR_ARRAY_EVEN_Pin|FR_ARRAY_EVEN_Pin;
 8001994:	f241 0330 	movw	r3, #4144	; 0x1030
 8001998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800199a:	2301      	movs	r3, #1
 800199c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800199e:	2300      	movs	r3, #0
 80019a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019a2:	2300      	movs	r3, #0
 80019a4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019a6:	f107 031c 	add.w	r3, r7, #28
 80019aa:	4619      	mov	r1, r3
 80019ac:	4822      	ldr	r0, [pc, #136]	; (8001a38 <MX_GPIO_Init+0x1f4>)
 80019ae:	f001 fb15 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : RR_ARRAY_MUX_1_Pin RR_ARRAY_MUX_2_Pin FR_INA_Pin FR_INB_Pin
                           RR_INA_Pin RR_INB_Pin LCD_DS_Pin LCD_RESET_Pin
                           LCD_CS_Pin */
  GPIO_InitStruct.Pin = RR_ARRAY_MUX_1_Pin|RR_ARRAY_MUX_2_Pin|FR_INA_Pin|FR_INB_Pin
 80019b2:	f24f 13c6 	movw	r3, #61894	; 0xf1c6
 80019b6:	61fb      	str	r3, [r7, #28]
                          |RR_INA_Pin|RR_INB_Pin|LCD_DS_Pin|LCD_RESET_Pin
                          |LCD_CS_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019b8:	2301      	movs	r3, #1
 80019ba:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019bc:	2300      	movs	r3, #0
 80019be:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c0:	2300      	movs	r3, #0
 80019c2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c4:	f107 031c 	add.w	r3, r7, #28
 80019c8:	4619      	mov	r1, r3
 80019ca:	481c      	ldr	r0, [pc, #112]	; (8001a3c <MX_GPIO_Init+0x1f8>)
 80019cc:	f001 fb06 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_LPIN_5_Pin TOF_LPIN_4_Pin TOF_LPIN_3_Pin FR_ARRAY_SB2_Pin
                           FR_ARRAY_SB3_Pin FR_ARRAY_SB0_Pin FR_ARRAY_SB1_Pin FR_ARRAY_SA0_Pin
                           FR_ARRAY_SA1_Pin FR_ARRAY_SA2_Pin FR_ARRAY_SA3_Pin */
  GPIO_InitStruct.Pin = TOF_LPIN_5_Pin|TOF_LPIN_4_Pin|TOF_LPIN_3_Pin|FR_ARRAY_SB2_Pin
 80019d0:	f644 23ff 	movw	r3, #19199	; 0x4aff
 80019d4:	61fb      	str	r3, [r7, #28]
                          |FR_ARRAY_SB3_Pin|FR_ARRAY_SB0_Pin|FR_ARRAY_SB1_Pin|FR_ARRAY_SA0_Pin
                          |FR_ARRAY_SA1_Pin|FR_ARRAY_SA2_Pin|FR_ARRAY_SA3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019d6:	2301      	movs	r3, #1
 80019d8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019da:	2300      	movs	r3, #0
 80019dc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019de:	2300      	movs	r3, #0
 80019e0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019e2:	f107 031c 	add.w	r3, r7, #28
 80019e6:	4619      	mov	r1, r3
 80019e8:	4815      	ldr	r0, [pc, #84]	; (8001a40 <MX_GPIO_Init+0x1fc>)
 80019ea:	f001 faf7 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_INT_5_Pin TOF_INT_4_Pin TOF_INT_3_Pin */
  GPIO_InitStruct.Pin = TOF_INT_5_Pin|TOF_INT_4_Pin|TOF_INT_3_Pin;
 80019ee:	f44f 4314 	mov.w	r3, #37888	; 0x9400
 80019f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80019f4:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80019f8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019fa:	2300      	movs	r3, #0
 80019fc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80019fe:	f107 031c 	add.w	r3, r7, #28
 8001a02:	4619      	mov	r1, r3
 8001a04:	480e      	ldr	r0, [pc, #56]	; (8001a40 <MX_GPIO_Init+0x1fc>)
 8001a06:	f001 fae9 	bl	8002fdc <HAL_GPIO_Init>

  /*Configure GPIO pins : TOF_LPIN_2_Pin CLR_LED_1_Pin FR_ARRAY_ODD_Pin */
  GPIO_InitStruct.Pin = TOF_LPIN_2_Pin|CLR_LED_1_Pin|FR_ARRAY_ODD_Pin;
 8001a0a:	f44f 4311 	mov.w	r3, #37120	; 0x9100
 8001a0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a10:	2301      	movs	r3, #1
 8001a12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a14:	2300      	movs	r3, #0
 8001a16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a1c:	f107 031c 	add.w	r3, r7, #28
 8001a20:	4619      	mov	r1, r3
 8001a22:	4808      	ldr	r0, [pc, #32]	; (8001a44 <MX_GPIO_Init+0x200>)
 8001a24:	f001 fada 	bl	8002fdc <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8001a28:	bf00      	nop
 8001a2a:	3730      	adds	r7, #48	; 0x30
 8001a2c:	46bd      	mov	sp, r7
 8001a2e:	bd80      	pop	{r7, pc}
 8001a30:	40023800 	.word	0x40023800
 8001a34:	40021000 	.word	0x40021000
 8001a38:	40020800 	.word	0x40020800
 8001a3c:	40020400 	.word	0x40020400
 8001a40:	40020c00 	.word	0x40020c00
 8001a44:	40020000 	.word	0x40020000

08001a48 <speed>:

uint32_t millis() {
  return millis_counter;
}

void speed(int Left, int Right){
 8001a48:	b480      	push	{r7}
 8001a4a:	b083      	sub	sp, #12
 8001a4c:	af00      	add	r7, sp, #0
 8001a4e:	6078      	str	r0, [r7, #4]
 8001a50:	6039      	str	r1, [r7, #0]
	  __HAL_TIM_SET_COMPARE(&htim1,FR_MOTOR_PWM,Right);
 8001a52:	4b07      	ldr	r3, [pc, #28]	; (8001a70 <speed+0x28>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	683a      	ldr	r2, [r7, #0]
 8001a58:	639a      	str	r2, [r3, #56]	; 0x38
	  __HAL_TIM_SET_COMPARE(&htim1,RR_MOTOR_PWM,Left);
 8001a5a:	4b05      	ldr	r3, [pc, #20]	; (8001a70 <speed+0x28>)
 8001a5c:	681b      	ldr	r3, [r3, #0]
 8001a5e:	687a      	ldr	r2, [r7, #4]
 8001a60:	635a      	str	r2, [r3, #52]	; 0x34
}
 8001a62:	bf00      	nop
 8001a64:	370c      	adds	r7, #12
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr
 8001a6e:	bf00      	nop
 8001a70:	20000260 	.word	0x20000260

08001a74 <motor>:

void motor(int motor,int direction){
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
	if (motor == 0){
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	2b00      	cmp	r3, #0
 8001a82:	d11c      	bne.n	8001abe <motor+0x4a>
		if (direction == 1){
 8001a84:	683b      	ldr	r3, [r7, #0]
 8001a86:	2b01      	cmp	r3, #1
 8001a88:	d10c      	bne.n	8001aa4 <motor+0x30>
			HAL_GPIO_WritePin(RR_INB_GPIO_Port, RR_INB_Pin, 1);
 8001a8a:	2201      	movs	r2, #1
 8001a8c:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001a90:	481b      	ldr	r0, [pc, #108]	; (8001b00 <motor+0x8c>)
 8001a92:	f001 fc3f 	bl	8003314 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RR_INA_GPIO_Port, RR_INA_Pin, 0);
 8001a96:	2200      	movs	r2, #0
 8001a98:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001a9c:	4818      	ldr	r0, [pc, #96]	; (8001b00 <motor+0x8c>)
 8001a9e:	f001 fc39 	bl	8003314 <HAL_GPIO_WritePin>
		}else{
			HAL_GPIO_WritePin(FR_INB_GPIO_Port, FR_INB_Pin, 1);
			HAL_GPIO_WritePin(FR_INA_GPIO_Port, FR_INA_Pin, 0);
		}
	}
}
 8001aa2:	e028      	b.n	8001af6 <motor+0x82>
			HAL_GPIO_WritePin(RR_INB_GPIO_Port, RR_INB_Pin, 0);
 8001aa4:	2200      	movs	r2, #0
 8001aa6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001aaa:	4815      	ldr	r0, [pc, #84]	; (8001b00 <motor+0x8c>)
 8001aac:	f001 fc32 	bl	8003314 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(RR_INA_GPIO_Port, RR_INA_Pin, 1);
 8001ab0:	2201      	movs	r2, #1
 8001ab2:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001ab6:	4812      	ldr	r0, [pc, #72]	; (8001b00 <motor+0x8c>)
 8001ab8:	f001 fc2c 	bl	8003314 <HAL_GPIO_WritePin>
}
 8001abc:	e01b      	b.n	8001af6 <motor+0x82>
		if (direction == 1){
 8001abe:	683b      	ldr	r3, [r7, #0]
 8001ac0:	2b01      	cmp	r3, #1
 8001ac2:	d10c      	bne.n	8001ade <motor+0x6a>
			HAL_GPIO_WritePin(FR_INB_GPIO_Port, FR_INB_Pin, 0);
 8001ac4:	2200      	movs	r2, #0
 8001ac6:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001aca:	480d      	ldr	r0, [pc, #52]	; (8001b00 <motor+0x8c>)
 8001acc:	f001 fc22 	bl	8003314 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FR_INA_GPIO_Port, FR_INA_Pin, 1);
 8001ad0:	2201      	movs	r2, #1
 8001ad2:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001ad6:	480a      	ldr	r0, [pc, #40]	; (8001b00 <motor+0x8c>)
 8001ad8:	f001 fc1c 	bl	8003314 <HAL_GPIO_WritePin>
}
 8001adc:	e00b      	b.n	8001af6 <motor+0x82>
			HAL_GPIO_WritePin(FR_INB_GPIO_Port, FR_INB_Pin, 1);
 8001ade:	2201      	movs	r2, #1
 8001ae0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001ae4:	4806      	ldr	r0, [pc, #24]	; (8001b00 <motor+0x8c>)
 8001ae6:	f001 fc15 	bl	8003314 <HAL_GPIO_WritePin>
			HAL_GPIO_WritePin(FR_INA_GPIO_Port, FR_INA_Pin, 0);
 8001aea:	2200      	movs	r2, #0
 8001aec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001af0:	4803      	ldr	r0, [pc, #12]	; (8001b00 <motor+0x8c>)
 8001af2:	f001 fc0f 	bl	8003314 <HAL_GPIO_WritePin>
}
 8001af6:	bf00      	nop
 8001af8:	3708      	adds	r7, #8
 8001afa:	46bd      	mov	sp, r7
 8001afc:	bd80      	pop	{r7, pc}
 8001afe:	bf00      	nop
 8001b00:	40020400 	.word	0x40020400

08001b04 <updateIR>:

void updateIR(){
 8001b04:	b580      	push	{r7, lr}
 8001b06:	b082      	sub	sp, #8
 8001b08:	af00      	add	r7, sp, #0
	  // loop through amount of leds. ARRAY STARTS FROM 1
	   HAL_GPIO_WritePin(FR_ARRAY_EVEN_GPIO_Port, FR_ARRAY_EVEN_Pin, GPIO_PIN_SET);
 8001b0a:	2201      	movs	r2, #1
 8001b0c:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001b10:	4861      	ldr	r0, [pc, #388]	; (8001c98 <updateIR+0x194>)
 8001b12:	f001 fbff 	bl	8003314 <HAL_GPIO_WritePin>
	 	HAL_GPIO_WritePin(FR_ARRAY_ODD_GPIO_Port, FR_ARRAY_ODD_Pin, GPIO_PIN_SET);
 8001b16:	2201      	movs	r2, #1
 8001b18:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8001b1c:	485f      	ldr	r0, [pc, #380]	; (8001c9c <updateIR+0x198>)
 8001b1e:	f001 fbf9 	bl	8003314 <HAL_GPIO_WritePin>
	  for (int i = 0; i < 25; i=i+2) {
 8001b22:	2300      	movs	r3, #0
 8001b24:	607b      	str	r3, [r7, #4]
 8001b26:	e054      	b.n	8001bd2 <updateIR+0xce>
		  array_no = i;
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	b2da      	uxtb	r2, r3
 8001b2c:	4b5c      	ldr	r3, [pc, #368]	; (8001ca0 <updateIR+0x19c>)
 8001b2e:	701a      	strb	r2, [r3, #0]
			FR_Array_Mux_In_Select(i+1);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	3301      	adds	r3, #1
 8001b34:	4618      	mov	r0, r3
 8001b36:	f000 f8c3 	bl	8001cc0 <FR_Array_Mux_In_Select>
		  if(i <= 15){
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2b0f      	cmp	r3, #15
 8001b3e:	dc18      	bgt.n	8001b72 <updateIR+0x6e>
	  		  	adc1ConfigPrivate.Channel = ADC_CHANNEL_10;
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <updateIR+0x1a0>)
 8001b42:	220a      	movs	r2, #10
 8001b44:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc1, &adc1ConfigPrivate);
 8001b46:	4957      	ldr	r1, [pc, #348]	; (8001ca4 <updateIR+0x1a0>)
 8001b48:	4857      	ldr	r0, [pc, #348]	; (8001ca8 <updateIR+0x1a4>)
 8001b4a:	f000 ff43 	bl	80029d4 <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc1);
 8001b4e:	4856      	ldr	r0, [pc, #344]	; (8001ca8 <updateIR+0x1a4>)
 8001b50:	f000 fdd6 	bl	8002700 <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001b54:	f04f 31ff 	mov.w	r1, #4294967295
 8001b58:	4853      	ldr	r0, [pc, #332]	; (8001ca8 <updateIR+0x1a4>)
 8001b5a:	f000 fea3 	bl	80028a4 <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc1);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc1);
 8001b5e:	4852      	ldr	r0, [pc, #328]	; (8001ca8 <updateIR+0x1a4>)
 8001b60:	f000 ff2b 	bl	80029ba <HAL_ADC_GetValue>
 8001b64:	4603      	mov	r3, r0
 8001b66:	4619      	mov	r1, r3
 8001b68:	4a50      	ldr	r2, [pc, #320]	; (8001cac <updateIR+0x1a8>)
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001b70:	e017      	b.n	8001ba2 <updateIR+0x9e>
//		  			delay_us(2);

		  }else{
			adc2ConfigPrivate.Channel = ADC_CHANNEL_11;
 8001b72:	4b4f      	ldr	r3, [pc, #316]	; (8001cb0 <updateIR+0x1ac>)
 8001b74:	220b      	movs	r2, #11
 8001b76:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc2, &adc2ConfigPrivate);
 8001b78:	494d      	ldr	r1, [pc, #308]	; (8001cb0 <updateIR+0x1ac>)
 8001b7a:	484e      	ldr	r0, [pc, #312]	; (8001cb4 <updateIR+0x1b0>)
 8001b7c:	f000 ff2a 	bl	80029d4 <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc2);
 8001b80:	484c      	ldr	r0, [pc, #304]	; (8001cb4 <updateIR+0x1b0>)
 8001b82:	f000 fdbd 	bl	8002700 <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001b86:	f04f 31ff 	mov.w	r1, #4294967295
 8001b8a:	484a      	ldr	r0, [pc, #296]	; (8001cb4 <updateIR+0x1b0>)
 8001b8c:	f000 fe8a 	bl	80028a4 <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc2);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc2);
 8001b90:	4848      	ldr	r0, [pc, #288]	; (8001cb4 <updateIR+0x1b0>)
 8001b92:	f000 ff12 	bl	80029ba <HAL_ADC_GetValue>
 8001b96:	4603      	mov	r3, r0
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4a44      	ldr	r2, [pc, #272]	; (8001cac <updateIR+0x1a8>)
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//		  			delay_us(2);
		  }
		  digital_IR[i] = IR_array[i] < Ir_thresholds[i];
 8001ba2:	4a42      	ldr	r2, [pc, #264]	; (8001cac <updateIR+0x1a8>)
 8001ba4:	687b      	ldr	r3, [r7, #4]
 8001ba6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001baa:	4943      	ldr	r1, [pc, #268]	; (8001cb8 <updateIR+0x1b4>)
 8001bac:	687b      	ldr	r3, [r7, #4]
 8001bae:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001bb2:	429a      	cmp	r2, r3
 8001bb4:	bfb4      	ite	lt
 8001bb6:	2301      	movlt	r3, #1
 8001bb8:	2300      	movge	r3, #0
 8001bba:	b2db      	uxtb	r3, r3
 8001bbc:	4619      	mov	r1, r3
 8001bbe:	4a3f      	ldr	r2, [pc, #252]	; (8001cbc <updateIR+0x1b8>)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  HAL_Delay(1);
 8001bc6:	2001      	movs	r0, #1
 8001bc8:	f000 fd32 	bl	8002630 <HAL_Delay>
	  for (int i = 0; i < 25; i=i+2) {
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	3302      	adds	r3, #2
 8001bd0:	607b      	str	r3, [r7, #4]
 8001bd2:	687b      	ldr	r3, [r7, #4]
 8001bd4:	2b18      	cmp	r3, #24
 8001bd6:	dda7      	ble.n	8001b28 <updateIR+0x24>
	  }
	  for (int i = 1; i < 25; i=i+2) {
 8001bd8:	2301      	movs	r3, #1
 8001bda:	603b      	str	r3, [r7, #0]
 8001bdc:	e054      	b.n	8001c88 <updateIR+0x184>
		  array_no = i;
 8001bde:	683b      	ldr	r3, [r7, #0]
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b2f      	ldr	r3, [pc, #188]	; (8001ca0 <updateIR+0x19c>)
 8001be4:	701a      	strb	r2, [r3, #0]
			FR_Array_Mux_In_Select(i+1);
 8001be6:	683b      	ldr	r3, [r7, #0]
 8001be8:	3301      	adds	r3, #1
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 f868 	bl	8001cc0 <FR_Array_Mux_In_Select>
		  if(i <= 15){
 8001bf0:	683b      	ldr	r3, [r7, #0]
 8001bf2:	2b0f      	cmp	r3, #15
 8001bf4:	dc18      	bgt.n	8001c28 <updateIR+0x124>
	  		  	adc1ConfigPrivate.Channel = ADC_CHANNEL_10;
 8001bf6:	4b2b      	ldr	r3, [pc, #172]	; (8001ca4 <updateIR+0x1a0>)
 8001bf8:	220a      	movs	r2, #10
 8001bfa:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc1, &adc1ConfigPrivate);
 8001bfc:	4929      	ldr	r1, [pc, #164]	; (8001ca4 <updateIR+0x1a0>)
 8001bfe:	482a      	ldr	r0, [pc, #168]	; (8001ca8 <updateIR+0x1a4>)
 8001c00:	f000 fee8 	bl	80029d4 <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc1);
 8001c04:	4828      	ldr	r0, [pc, #160]	; (8001ca8 <updateIR+0x1a4>)
 8001c06:	f000 fd7b 	bl	8002700 <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc1, HAL_MAX_DELAY);
 8001c0a:	f04f 31ff 	mov.w	r1, #4294967295
 8001c0e:	4826      	ldr	r0, [pc, #152]	; (8001ca8 <updateIR+0x1a4>)
 8001c10:	f000 fe48 	bl	80028a4 <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc1);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc1);
 8001c14:	4824      	ldr	r0, [pc, #144]	; (8001ca8 <updateIR+0x1a4>)
 8001c16:	f000 fed0 	bl	80029ba <HAL_ADC_GetValue>
 8001c1a:	4603      	mov	r3, r0
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4a23      	ldr	r2, [pc, #140]	; (8001cac <updateIR+0x1a8>)
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
 8001c26:	e017      	b.n	8001c58 <updateIR+0x154>
//		  			delay_us(2);
		  }else{
			adc2ConfigPrivate.Channel = ADC_CHANNEL_11;
 8001c28:	4b21      	ldr	r3, [pc, #132]	; (8001cb0 <updateIR+0x1ac>)
 8001c2a:	220b      	movs	r2, #11
 8001c2c:	601a      	str	r2, [r3, #0]
	  		  	HAL_ADC_ConfigChannel(&hadc2, &adc2ConfigPrivate);
 8001c2e:	4920      	ldr	r1, [pc, #128]	; (8001cb0 <updateIR+0x1ac>)
 8001c30:	4820      	ldr	r0, [pc, #128]	; (8001cb4 <updateIR+0x1b0>)
 8001c32:	f000 fecf 	bl	80029d4 <HAL_ADC_ConfigChannel>
	  		    HAL_ADC_Start(&hadc2);
 8001c36:	481f      	ldr	r0, [pc, #124]	; (8001cb4 <updateIR+0x1b0>)
 8001c38:	f000 fd62 	bl	8002700 <HAL_ADC_Start>
	  		    HAL_ADC_PollForConversion(&hadc2, HAL_MAX_DELAY);
 8001c3c:	f04f 31ff 	mov.w	r1, #4294967295
 8001c40:	481c      	ldr	r0, [pc, #112]	; (8001cb4 <updateIR+0x1b0>)
 8001c42:	f000 fe2f 	bl	80028a4 <HAL_ADC_PollForConversion>
//	  		    raw = HAL_ADC_GetValue(&hadc2);
	  		    IR_array[i] = HAL_ADC_GetValue(&hadc2);
 8001c46:	481b      	ldr	r0, [pc, #108]	; (8001cb4 <updateIR+0x1b0>)
 8001c48:	f000 feb7 	bl	80029ba <HAL_ADC_GetValue>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	4619      	mov	r1, r3
 8001c50:	4a16      	ldr	r2, [pc, #88]	; (8001cac <updateIR+0x1a8>)
 8001c52:	683b      	ldr	r3, [r7, #0]
 8001c54:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
//		  			delay_us(2);

		  }
		  digital_IR[i] = IR_array[i] < Ir_thresholds[i];
 8001c58:	4a14      	ldr	r2, [pc, #80]	; (8001cac <updateIR+0x1a8>)
 8001c5a:	683b      	ldr	r3, [r7, #0]
 8001c5c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8001c60:	4915      	ldr	r1, [pc, #84]	; (8001cb8 <updateIR+0x1b4>)
 8001c62:	683b      	ldr	r3, [r7, #0]
 8001c64:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8001c68:	429a      	cmp	r2, r3
 8001c6a:	bfb4      	ite	lt
 8001c6c:	2301      	movlt	r3, #1
 8001c6e:	2300      	movge	r3, #0
 8001c70:	b2db      	uxtb	r3, r3
 8001c72:	4619      	mov	r1, r3
 8001c74:	4a11      	ldr	r2, [pc, #68]	; (8001cbc <updateIR+0x1b8>)
 8001c76:	683b      	ldr	r3, [r7, #0]
 8001c78:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
		  HAL_Delay(1);
 8001c7c:	2001      	movs	r0, #1
 8001c7e:	f000 fcd7 	bl	8002630 <HAL_Delay>
	  for (int i = 1; i < 25; i=i+2) {
 8001c82:	683b      	ldr	r3, [r7, #0]
 8001c84:	3302      	adds	r3, #2
 8001c86:	603b      	str	r3, [r7, #0]
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b18      	cmp	r3, #24
 8001c8c:	dda7      	ble.n	8001bde <updateIR+0xda>
	  }
}
 8001c8e:	bf00      	nop
 8001c90:	bf00      	nop
 8001c92:	3708      	adds	r7, #8
 8001c94:	46bd      	mov	sp, r7
 8001c96:	bd80      	pop	{r7, pc}
 8001c98:	40020800 	.word	0x40020800
 8001c9c:	40020000 	.word	0x40020000
 8001ca0:	200004a0 	.word	0x200004a0
 8001ca4:	200004ac 	.word	0x200004ac
 8001ca8:	20000124 	.word	0x20000124
 8001cac:	200004cc 	.word	0x200004cc
 8001cb0:	200004bc 	.word	0x200004bc
 8001cb4:	2000016c 	.word	0x2000016c
 8001cb8:	20000000 	.word	0x20000000
 8001cbc:	20000530 	.word	0x20000530

08001cc0 <FR_Array_Mux_In_Select>:


void FR_Array_Mux_In_Select(int IR_LED_Num){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b082      	sub	sp, #8
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	6078      	str	r0, [r7, #4]
	if(IR_LED_Num <= 16){
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	2b10      	cmp	r3, #16
 8001ccc:	dc37      	bgt.n	8001d3e <FR_Array_Mux_In_Select+0x7e>
	    HAL_GPIO_WritePin(FR_ARRAY_SA0_GPIO_Port, FR_ARRAY_SA0_Pin, FR_IR_LED_ARR[IR_LED_Num-1][4]);
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	1e5a      	subs	r2, r3, #1
 8001cd2:	493a      	ldr	r1, [pc, #232]	; (8001dbc <FR_Array_Mux_In_Select+0xfc>)
 8001cd4:	4613      	mov	r3, r2
 8001cd6:	009b      	lsls	r3, r3, #2
 8001cd8:	4413      	add	r3, r2
 8001cda:	440b      	add	r3, r1
 8001cdc:	3304      	adds	r3, #4
 8001cde:	781b      	ldrb	r3, [r3, #0]
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	2110      	movs	r1, #16
 8001ce4:	4836      	ldr	r0, [pc, #216]	; (8001dc0 <FR_Array_Mux_In_Select+0x100>)
 8001ce6:	f001 fb15 	bl	8003314 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SA1_GPIO_Port, FR_ARRAY_SA1_Pin, FR_IR_LED_ARR[IR_LED_Num-1][3]);
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	1e5a      	subs	r2, r3, #1
 8001cee:	4933      	ldr	r1, [pc, #204]	; (8001dbc <FR_Array_Mux_In_Select+0xfc>)
 8001cf0:	4613      	mov	r3, r2
 8001cf2:	009b      	lsls	r3, r3, #2
 8001cf4:	4413      	add	r3, r2
 8001cf6:	440b      	add	r3, r1
 8001cf8:	3303      	adds	r3, #3
 8001cfa:	781b      	ldrb	r3, [r3, #0]
 8001cfc:	461a      	mov	r2, r3
 8001cfe:	2120      	movs	r1, #32
 8001d00:	482f      	ldr	r0, [pc, #188]	; (8001dc0 <FR_Array_Mux_In_Select+0x100>)
 8001d02:	f001 fb07 	bl	8003314 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SA2_GPIO_Port, FR_ARRAY_SA2_Pin, FR_IR_LED_ARR[IR_LED_Num-1][2]);
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	1e5a      	subs	r2, r3, #1
 8001d0a:	492c      	ldr	r1, [pc, #176]	; (8001dbc <FR_Array_Mux_In_Select+0xfc>)
 8001d0c:	4613      	mov	r3, r2
 8001d0e:	009b      	lsls	r3, r3, #2
 8001d10:	4413      	add	r3, r2
 8001d12:	440b      	add	r3, r1
 8001d14:	3302      	adds	r3, #2
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	461a      	mov	r2, r3
 8001d1a:	2140      	movs	r1, #64	; 0x40
 8001d1c:	4828      	ldr	r0, [pc, #160]	; (8001dc0 <FR_Array_Mux_In_Select+0x100>)
 8001d1e:	f001 faf9 	bl	8003314 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SA3_GPIO_Port, FR_ARRAY_SA3_Pin, FR_IR_LED_ARR[IR_LED_Num-1][1]);
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	1e5a      	subs	r2, r3, #1
 8001d26:	4925      	ldr	r1, [pc, #148]	; (8001dbc <FR_Array_Mux_In_Select+0xfc>)
 8001d28:	4613      	mov	r3, r2
 8001d2a:	009b      	lsls	r3, r3, #2
 8001d2c:	4413      	add	r3, r2
 8001d2e:	440b      	add	r3, r1
 8001d30:	3301      	adds	r3, #1
 8001d32:	781b      	ldrb	r3, [r3, #0]
 8001d34:	461a      	mov	r2, r3
 8001d36:	2180      	movs	r1, #128	; 0x80
 8001d38:	4821      	ldr	r0, [pc, #132]	; (8001dc0 <FR_Array_Mux_In_Select+0x100>)
 8001d3a:	f001 faeb 	bl	8003314 <HAL_GPIO_WritePin>
	}	if(IR_LED_Num > 16){
 8001d3e:	687b      	ldr	r3, [r7, #4]
 8001d40:	2b10      	cmp	r3, #16
 8001d42:	dd37      	ble.n	8001db4 <FR_Array_Mux_In_Select+0xf4>
	    HAL_GPIO_WritePin(FR_ARRAY_SB0_GPIO_Port, FR_ARRAY_SB0_Pin, FR_IR_LED_ARR[IR_LED_Num-1][4]);
 8001d44:	687b      	ldr	r3, [r7, #4]
 8001d46:	1e5a      	subs	r2, r3, #1
 8001d48:	491c      	ldr	r1, [pc, #112]	; (8001dbc <FR_Array_Mux_In_Select+0xfc>)
 8001d4a:	4613      	mov	r3, r2
 8001d4c:	009b      	lsls	r3, r3, #2
 8001d4e:	4413      	add	r3, r2
 8001d50:	440b      	add	r3, r1
 8001d52:	3304      	adds	r3, #4
 8001d54:	781b      	ldrb	r3, [r3, #0]
 8001d56:	461a      	mov	r2, r3
 8001d58:	2104      	movs	r1, #4
 8001d5a:	4819      	ldr	r0, [pc, #100]	; (8001dc0 <FR_Array_Mux_In_Select+0x100>)
 8001d5c:	f001 fada 	bl	8003314 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SB1_GPIO_Port, FR_ARRAY_SB1_Pin, FR_IR_LED_ARR[IR_LED_Num-1][3]);
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	1e5a      	subs	r2, r3, #1
 8001d64:	4915      	ldr	r1, [pc, #84]	; (8001dbc <FR_Array_Mux_In_Select+0xfc>)
 8001d66:	4613      	mov	r3, r2
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	440b      	add	r3, r1
 8001d6e:	3303      	adds	r3, #3
 8001d70:	781b      	ldrb	r3, [r3, #0]
 8001d72:	461a      	mov	r2, r3
 8001d74:	2108      	movs	r1, #8
 8001d76:	4812      	ldr	r0, [pc, #72]	; (8001dc0 <FR_Array_Mux_In_Select+0x100>)
 8001d78:	f001 facc 	bl	8003314 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SB2_GPIO_Port, FR_ARRAY_SB2_Pin, FR_IR_LED_ARR[IR_LED_Num-1][2]);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	1e5a      	subs	r2, r3, #1
 8001d80:	490e      	ldr	r1, [pc, #56]	; (8001dbc <FR_Array_Mux_In_Select+0xfc>)
 8001d82:	4613      	mov	r3, r2
 8001d84:	009b      	lsls	r3, r3, #2
 8001d86:	4413      	add	r3, r2
 8001d88:	440b      	add	r3, r1
 8001d8a:	3302      	adds	r3, #2
 8001d8c:	781b      	ldrb	r3, [r3, #0]
 8001d8e:	461a      	mov	r2, r3
 8001d90:	2101      	movs	r1, #1
 8001d92:	480b      	ldr	r0, [pc, #44]	; (8001dc0 <FR_Array_Mux_In_Select+0x100>)
 8001d94:	f001 fabe 	bl	8003314 <HAL_GPIO_WritePin>
	    HAL_GPIO_WritePin(FR_ARRAY_SB3_GPIO_Port, FR_ARRAY_SB3_Pin, FR_IR_LED_ARR[IR_LED_Num-1][1]);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	1e5a      	subs	r2, r3, #1
 8001d9c:	4907      	ldr	r1, [pc, #28]	; (8001dbc <FR_Array_Mux_In_Select+0xfc>)
 8001d9e:	4613      	mov	r3, r2
 8001da0:	009b      	lsls	r3, r3, #2
 8001da2:	4413      	add	r3, r2
 8001da4:	440b      	add	r3, r1
 8001da6:	3301      	adds	r3, #1
 8001da8:	781b      	ldrb	r3, [r3, #0]
 8001daa:	461a      	mov	r2, r3
 8001dac:	2102      	movs	r1, #2
 8001dae:	4804      	ldr	r0, [pc, #16]	; (8001dc0 <FR_Array_Mux_In_Select+0x100>)
 8001db0:	f001 fab0 	bl	8003314 <HAL_GPIO_WritePin>
	}

}
 8001db4:	bf00      	nop
 8001db6:	3708      	adds	r7, #8
 8001db8:	46bd      	mov	sp, r7
 8001dba:	bd80      	pop	{r7, pc}
 8001dbc:	20000064 	.word	0x20000064
 8001dc0:	40020c00 	.word	0x40020c00

08001dc4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001dc4:	b480      	push	{r7}
 8001dc6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001dc8:	b672      	cpsid	i
}
 8001dca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001dcc:	e7fe      	b.n	8001dcc <Error_Handler+0x8>
	...

08001dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                                                                /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001dd0:	b480      	push	{r7}
 8001dd2:	b083      	sub	sp, #12
 8001dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	607b      	str	r3, [r7, #4]
 8001dda:	4b10      	ldr	r3, [pc, #64]	; (8001e1c <HAL_MspInit+0x4c>)
 8001ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dde:	4a0f      	ldr	r2, [pc, #60]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001de4:	6453      	str	r3, [r2, #68]	; 0x44
 8001de6:	4b0d      	ldr	r3, [pc, #52]	; (8001e1c <HAL_MspInit+0x4c>)
 8001de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001dee:	607b      	str	r3, [r7, #4]
 8001df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001df2:	2300      	movs	r3, #0
 8001df4:	603b      	str	r3, [r7, #0]
 8001df6:	4b09      	ldr	r3, [pc, #36]	; (8001e1c <HAL_MspInit+0x4c>)
 8001df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dfa:	4a08      	ldr	r2, [pc, #32]	; (8001e1c <HAL_MspInit+0x4c>)
 8001dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e00:	6413      	str	r3, [r2, #64]	; 0x40
 8001e02:	4b06      	ldr	r3, [pc, #24]	; (8001e1c <HAL_MspInit+0x4c>)
 8001e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	370c      	adds	r7, #12
 8001e12:	46bd      	mov	sp, r7
 8001e14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e18:	4770      	bx	lr
 8001e1a:	bf00      	nop
 8001e1c:	40023800 	.word	0x40023800

08001e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e20:	b580      	push	{r7, lr}
 8001e22:	b08c      	sub	sp, #48	; 0x30
 8001e24:	af00      	add	r7, sp, #0
 8001e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e28:	f107 031c 	add.w	r3, r7, #28
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	601a      	str	r2, [r3, #0]
 8001e30:	605a      	str	r2, [r3, #4]
 8001e32:	609a      	str	r2, [r3, #8]
 8001e34:	60da      	str	r2, [r3, #12]
 8001e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e38:	687b      	ldr	r3, [r7, #4]
 8001e3a:	681b      	ldr	r3, [r3, #0]
 8001e3c:	4a3b      	ldr	r2, [pc, #236]	; (8001f2c <HAL_ADC_MspInit+0x10c>)
 8001e3e:	4293      	cmp	r3, r2
 8001e40:	d142      	bne.n	8001ec8 <HAL_ADC_MspInit+0xa8>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e42:	2300      	movs	r3, #0
 8001e44:	61bb      	str	r3, [r7, #24]
 8001e46:	4b3a      	ldr	r3, [pc, #232]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e4a:	4a39      	ldr	r2, [pc, #228]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e50:	6453      	str	r3, [r2, #68]	; 0x44
 8001e52:	4b37      	ldr	r3, [pc, #220]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e5a:	61bb      	str	r3, [r7, #24]
 8001e5c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e5e:	2300      	movs	r3, #0
 8001e60:	617b      	str	r3, [r7, #20]
 8001e62:	4b33      	ldr	r3, [pc, #204]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e66:	4a32      	ldr	r2, [pc, #200]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001e68:	f043 0304 	orr.w	r3, r3, #4
 8001e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8001e6e:	4b30      	ldr	r3, [pc, #192]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e72:	f003 0304 	and.w	r3, r3, #4
 8001e76:	617b      	str	r3, [r7, #20]
 8001e78:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e7a:	2300      	movs	r3, #0
 8001e7c:	613b      	str	r3, [r7, #16]
 8001e7e:	4b2c      	ldr	r3, [pc, #176]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001e80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e82:	4a2b      	ldr	r2, [pc, #172]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001e84:	f043 0302 	orr.w	r3, r3, #2
 8001e88:	6313      	str	r3, [r2, #48]	; 0x30
 8001e8a:	4b29      	ldr	r3, [pc, #164]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001e8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e8e:	f003 0302 	and.w	r3, r3, #2
 8001e92:	613b      	str	r3, [r7, #16]
 8001e94:	693b      	ldr	r3, [r7, #16]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    PC2     ------> ADC1_IN12
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = FR_ARRAY_OUTA_Pin|BAT_MEASURE_Pin;
 8001e96:	2305      	movs	r3, #5
 8001e98:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001e9a:	2303      	movs	r3, #3
 8001e9c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e9e:	2300      	movs	r3, #0
 8001ea0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ea2:	f107 031c 	add.w	r3, r7, #28
 8001ea6:	4619      	mov	r1, r3
 8001ea8:	4822      	ldr	r0, [pc, #136]	; (8001f34 <HAL_ADC_MspInit+0x114>)
 8001eaa:	f001 f897 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = RR_ARR_OUT_Pin;
 8001eae:	2301      	movs	r3, #1
 8001eb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eb2:	2303      	movs	r3, #3
 8001eb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001eb6:	2300      	movs	r3, #0
 8001eb8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(RR_ARR_OUT_GPIO_Port, &GPIO_InitStruct);
 8001eba:	f107 031c 	add.w	r3, r7, #28
 8001ebe:	4619      	mov	r1, r3
 8001ec0:	481d      	ldr	r0, [pc, #116]	; (8001f38 <HAL_ADC_MspInit+0x118>)
 8001ec2:	f001 f88b 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8001ec6:	e02c      	b.n	8001f22 <HAL_ADC_MspInit+0x102>
  else if(hadc->Instance==ADC2)
 8001ec8:	687b      	ldr	r3, [r7, #4]
 8001eca:	681b      	ldr	r3, [r3, #0]
 8001ecc:	4a1b      	ldr	r2, [pc, #108]	; (8001f3c <HAL_ADC_MspInit+0x11c>)
 8001ece:	4293      	cmp	r3, r2
 8001ed0:	d127      	bne.n	8001f22 <HAL_ADC_MspInit+0x102>
    __HAL_RCC_ADC2_CLK_ENABLE();
 8001ed2:	2300      	movs	r3, #0
 8001ed4:	60fb      	str	r3, [r7, #12]
 8001ed6:	4b16      	ldr	r3, [pc, #88]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001ed8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eda:	4a15      	ldr	r2, [pc, #84]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001edc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001ee0:	6453      	str	r3, [r2, #68]	; 0x44
 8001ee2:	4b13      	ldr	r3, [pc, #76]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001ee4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ee6:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001eea:	60fb      	str	r3, [r7, #12]
 8001eec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001eee:	2300      	movs	r3, #0
 8001ef0:	60bb      	str	r3, [r7, #8]
 8001ef2:	4b0f      	ldr	r3, [pc, #60]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001ef4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ef6:	4a0e      	ldr	r2, [pc, #56]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001ef8:	f043 0304 	orr.w	r3, r3, #4
 8001efc:	6313      	str	r3, [r2, #48]	; 0x30
 8001efe:	4b0c      	ldr	r3, [pc, #48]	; (8001f30 <HAL_ADC_MspInit+0x110>)
 8001f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f02:	f003 0304 	and.w	r3, r3, #4
 8001f06:	60bb      	str	r3, [r7, #8]
 8001f08:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = FR_ARRAY_OUTB_Pin;
 8001f0a:	2302      	movs	r3, #2
 8001f0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001f0e:	2303      	movs	r3, #3
 8001f10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f12:	2300      	movs	r3, #0
 8001f14:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(FR_ARRAY_OUTB_GPIO_Port, &GPIO_InitStruct);
 8001f16:	f107 031c 	add.w	r3, r7, #28
 8001f1a:	4619      	mov	r1, r3
 8001f1c:	4805      	ldr	r0, [pc, #20]	; (8001f34 <HAL_ADC_MspInit+0x114>)
 8001f1e:	f001 f85d 	bl	8002fdc <HAL_GPIO_Init>
}
 8001f22:	bf00      	nop
 8001f24:	3730      	adds	r7, #48	; 0x30
 8001f26:	46bd      	mov	sp, r7
 8001f28:	bd80      	pop	{r7, pc}
 8001f2a:	bf00      	nop
 8001f2c:	40012000 	.word	0x40012000
 8001f30:	40023800 	.word	0x40023800
 8001f34:	40020800 	.word	0x40020800
 8001f38:	40020400 	.word	0x40020400
 8001f3c:	40012100 	.word	0x40012100

08001f40 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b08a      	sub	sp, #40	; 0x28
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f48:	f107 0314 	add.w	r3, r7, #20
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	601a      	str	r2, [r3, #0]
 8001f50:	605a      	str	r2, [r3, #4]
 8001f52:	609a      	str	r2, [r3, #8]
 8001f54:	60da      	str	r2, [r3, #12]
 8001f56:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C2)
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	4a19      	ldr	r2, [pc, #100]	; (8001fc4 <HAL_I2C_MspInit+0x84>)
 8001f5e:	4293      	cmp	r3, r2
 8001f60:	d12c      	bne.n	8001fbc <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C2_MspInit 0 */

  /* USER CODE END I2C2_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f62:	2300      	movs	r3, #0
 8001f64:	613b      	str	r3, [r7, #16]
 8001f66:	4b18      	ldr	r3, [pc, #96]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f6a:	4a17      	ldr	r2, [pc, #92]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001f6c:	f043 0302 	orr.w	r3, r3, #2
 8001f70:	6313      	str	r3, [r2, #48]	; 0x30
 8001f72:	4b15      	ldr	r3, [pc, #84]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f76:	f003 0302 	and.w	r3, r3, #2
 8001f7a:	613b      	str	r3, [r7, #16]
 8001f7c:	693b      	ldr	r3, [r7, #16]
    /**I2C2 GPIO Configuration
    PB10     ------> I2C2_SCL
    PB11     ------> I2C2_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8001f7e:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8001f82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f84:	2312      	movs	r3, #18
 8001f86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001f88:	2301      	movs	r3, #1
 8001f8a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f8c:	2303      	movs	r3, #3
 8001f8e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001f90:	2304      	movs	r3, #4
 8001f92:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f94:	f107 0314 	add.w	r3, r7, #20
 8001f98:	4619      	mov	r1, r3
 8001f9a:	480c      	ldr	r0, [pc, #48]	; (8001fcc <HAL_I2C_MspInit+0x8c>)
 8001f9c:	f001 f81e 	bl	8002fdc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fa0:	2300      	movs	r3, #0
 8001fa2:	60fb      	str	r3, [r7, #12]
 8001fa4:	4b08      	ldr	r3, [pc, #32]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa8:	4a07      	ldr	r2, [pc, #28]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001faa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001fae:	6413      	str	r3, [r2, #64]	; 0x40
 8001fb0:	4b05      	ldr	r3, [pc, #20]	; (8001fc8 <HAL_I2C_MspInit+0x88>)
 8001fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fb4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001fb8:	60fb      	str	r3, [r7, #12]
 8001fba:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001fbc:	bf00      	nop
 8001fbe:	3728      	adds	r7, #40	; 0x28
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	bd80      	pop	{r7, pc}
 8001fc4:	40005800 	.word	0x40005800
 8001fc8:	40023800 	.word	0x40023800
 8001fcc:	40020400 	.word	0x40020400

08001fd0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b08a      	sub	sp, #40	; 0x28
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001fd8:	f107 0314 	add.w	r3, r7, #20
 8001fdc:	2200      	movs	r2, #0
 8001fde:	601a      	str	r2, [r3, #0]
 8001fe0:	605a      	str	r2, [r3, #4]
 8001fe2:	609a      	str	r2, [r3, #8]
 8001fe4:	60da      	str	r2, [r3, #12]
 8001fe6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	681b      	ldr	r3, [r3, #0]
 8001fec:	4a28      	ldr	r2, [pc, #160]	; (8002090 <HAL_SPI_MspInit+0xc0>)
 8001fee:	4293      	cmp	r3, r2
 8001ff0:	d149      	bne.n	8002086 <HAL_SPI_MspInit+0xb6>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	613b      	str	r3, [r7, #16]
 8001ff6:	4b27      	ldr	r3, [pc, #156]	; (8002094 <HAL_SPI_MspInit+0xc4>)
 8001ff8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ffa:	4a26      	ldr	r2, [pc, #152]	; (8002094 <HAL_SPI_MspInit+0xc4>)
 8001ffc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8002000:	6453      	str	r3, [r2, #68]	; 0x44
 8002002:	4b24      	ldr	r3, [pc, #144]	; (8002094 <HAL_SPI_MspInit+0xc4>)
 8002004:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002006:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800200e:	2300      	movs	r3, #0
 8002010:	60fb      	str	r3, [r7, #12]
 8002012:	4b20      	ldr	r3, [pc, #128]	; (8002094 <HAL_SPI_MspInit+0xc4>)
 8002014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002016:	4a1f      	ldr	r2, [pc, #124]	; (8002094 <HAL_SPI_MspInit+0xc4>)
 8002018:	f043 0301 	orr.w	r3, r3, #1
 800201c:	6313      	str	r3, [r2, #48]	; 0x30
 800201e:	4b1d      	ldr	r3, [pc, #116]	; (8002094 <HAL_SPI_MspInit+0xc4>)
 8002020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002022:	f003 0301 	and.w	r3, r3, #1
 8002026:	60fb      	str	r3, [r7, #12]
 8002028:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800202a:	2300      	movs	r3, #0
 800202c:	60bb      	str	r3, [r7, #8]
 800202e:	4b19      	ldr	r3, [pc, #100]	; (8002094 <HAL_SPI_MspInit+0xc4>)
 8002030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002032:	4a18      	ldr	r2, [pc, #96]	; (8002094 <HAL_SPI_MspInit+0xc4>)
 8002034:	f043 0302 	orr.w	r3, r3, #2
 8002038:	6313      	str	r3, [r2, #48]	; 0x30
 800203a:	4b16      	ldr	r3, [pc, #88]	; (8002094 <HAL_SPI_MspInit+0xc4>)
 800203c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800203e:	f003 0302 	and.w	r3, r3, #2
 8002042:	60bb      	str	r3, [r7, #8]
 8002044:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002046:	2320      	movs	r3, #32
 8002048:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800204a:	2302      	movs	r3, #2
 800204c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800204e:	2300      	movs	r3, #0
 8002050:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002052:	2303      	movs	r3, #3
 8002054:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002056:	2305      	movs	r3, #5
 8002058:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800205a:	f107 0314 	add.w	r3, r7, #20
 800205e:	4619      	mov	r1, r3
 8002060:	480d      	ldr	r0, [pc, #52]	; (8002098 <HAL_SPI_MspInit+0xc8>)
 8002062:	f000 ffbb 	bl	8002fdc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8002066:	2330      	movs	r3, #48	; 0x30
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002076:	2305      	movs	r3, #5
 8002078:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4806      	ldr	r0, [pc, #24]	; (800209c <HAL_SPI_MspInit+0xcc>)
 8002082:	f000 ffab 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	; 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40013000 	.word	0x40013000
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000
 800209c:	40020400 	.word	0x40020400

080020a0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	; 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM1)
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4a33      	ldr	r2, [pc, #204]	; (800217c <HAL_TIM_Base_MspInit+0xdc>)
 80020ae:	4293      	cmp	r3, r2
 80020b0:	d10e      	bne.n	80020d0 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80020b2:	2300      	movs	r3, #0
 80020b4:	61fb      	str	r3, [r7, #28]
 80020b6:	4b32      	ldr	r3, [pc, #200]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 80020b8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020ba:	4a31      	ldr	r2, [pc, #196]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 80020bc:	f043 0301 	orr.w	r3, r3, #1
 80020c0:	6453      	str	r3, [r2, #68]	; 0x44
 80020c2:	4b2f      	ldr	r3, [pc, #188]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 80020c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80020c6:	f003 0301 	and.w	r3, r3, #1
 80020ca:	61fb      	str	r3, [r7, #28]
 80020cc:	69fb      	ldr	r3, [r7, #28]
  /* USER CODE BEGIN TIM9_MspInit 1 */

  /* USER CODE END TIM9_MspInit 1 */
  }

}
 80020ce:	e04e      	b.n	800216e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM4)
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4a2b      	ldr	r2, [pc, #172]	; (8002184 <HAL_TIM_Base_MspInit+0xe4>)
 80020d6:	4293      	cmp	r3, r2
 80020d8:	d10e      	bne.n	80020f8 <HAL_TIM_Base_MspInit+0x58>
    __HAL_RCC_TIM4_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	61bb      	str	r3, [r7, #24]
 80020de:	4b28      	ldr	r3, [pc, #160]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 80020e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020e2:	4a27      	ldr	r2, [pc, #156]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 80020e4:	f043 0304 	orr.w	r3, r3, #4
 80020e8:	6413      	str	r3, [r2, #64]	; 0x40
 80020ea:	4b25      	ldr	r3, [pc, #148]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 80020ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ee:	f003 0304 	and.w	r3, r3, #4
 80020f2:	61bb      	str	r3, [r7, #24]
 80020f4:	69bb      	ldr	r3, [r7, #24]
}
 80020f6:	e03a      	b.n	800216e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM6)
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	4a22      	ldr	r2, [pc, #136]	; (8002188 <HAL_TIM_Base_MspInit+0xe8>)
 80020fe:	4293      	cmp	r3, r2
 8002100:	d10e      	bne.n	8002120 <HAL_TIM_Base_MspInit+0x80>
    __HAL_RCC_TIM6_CLK_ENABLE();
 8002102:	2300      	movs	r3, #0
 8002104:	617b      	str	r3, [r7, #20]
 8002106:	4b1e      	ldr	r3, [pc, #120]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 8002108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210a:	4a1d      	ldr	r2, [pc, #116]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 800210c:	f043 0310 	orr.w	r3, r3, #16
 8002110:	6413      	str	r3, [r2, #64]	; 0x40
 8002112:	4b1b      	ldr	r3, [pc, #108]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	617b      	str	r3, [r7, #20]
 800211c:	697b      	ldr	r3, [r7, #20]
}
 800211e:	e026      	b.n	800216e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM8)
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	681b      	ldr	r3, [r3, #0]
 8002124:	4a19      	ldr	r2, [pc, #100]	; (800218c <HAL_TIM_Base_MspInit+0xec>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d10e      	bne.n	8002148 <HAL_TIM_Base_MspInit+0xa8>
    __HAL_RCC_TIM8_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	613b      	str	r3, [r7, #16]
 800212e:	4b14      	ldr	r3, [pc, #80]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a13      	ldr	r2, [pc, #76]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 8002134:	f043 0302 	orr.w	r3, r3, #2
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f003 0302 	and.w	r3, r3, #2
 8002142:	613b      	str	r3, [r7, #16]
 8002144:	693b      	ldr	r3, [r7, #16]
}
 8002146:	e012      	b.n	800216e <HAL_TIM_Base_MspInit+0xce>
  else if(htim_base->Instance==TIM9)
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	4a10      	ldr	r2, [pc, #64]	; (8002190 <HAL_TIM_Base_MspInit+0xf0>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d10d      	bne.n	800216e <HAL_TIM_Base_MspInit+0xce>
    __HAL_RCC_TIM9_CLK_ENABLE();
 8002152:	2300      	movs	r3, #0
 8002154:	60fb      	str	r3, [r7, #12]
 8002156:	4b0a      	ldr	r3, [pc, #40]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 8002158:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800215a:	4a09      	ldr	r2, [pc, #36]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 800215c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002160:	6453      	str	r3, [r2, #68]	; 0x44
 8002162:	4b07      	ldr	r3, [pc, #28]	; (8002180 <HAL_TIM_Base_MspInit+0xe0>)
 8002164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002166:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800216a:	60fb      	str	r3, [r7, #12]
 800216c:	68fb      	ldr	r3, [r7, #12]
}
 800216e:	bf00      	nop
 8002170:	3724      	adds	r7, #36	; 0x24
 8002172:	46bd      	mov	sp, r7
 8002174:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002178:	4770      	bx	lr
 800217a:	bf00      	nop
 800217c:	40010000 	.word	0x40010000
 8002180:	40023800 	.word	0x40023800
 8002184:	40000800 	.word	0x40000800
 8002188:	40001000 	.word	0x40001000
 800218c:	40010400 	.word	0x40010400
 8002190:	40014000 	.word	0x40014000

08002194 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002194:	b580      	push	{r7, lr}
 8002196:	b08c      	sub	sp, #48	; 0x30
 8002198:	af00      	add	r7, sp, #0
 800219a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800219c:	f107 031c 	add.w	r3, r7, #28
 80021a0:	2200      	movs	r2, #0
 80021a2:	601a      	str	r2, [r3, #0]
 80021a4:	605a      	str	r2, [r3, #4]
 80021a6:	609a      	str	r2, [r3, #8]
 80021a8:	60da      	str	r2, [r3, #12]
 80021aa:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80021b4:	d12c      	bne.n	8002210 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80021b6:	2300      	movs	r3, #0
 80021b8:	61bb      	str	r3, [r7, #24]
 80021ba:	4b30      	ldr	r3, [pc, #192]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 80021bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021be:	4a2f      	ldr	r2, [pc, #188]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 80021c0:	f043 0301 	orr.w	r3, r3, #1
 80021c4:	6413      	str	r3, [r2, #64]	; 0x40
 80021c6:	4b2d      	ldr	r3, [pc, #180]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 80021c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ca:	f003 0301 	and.w	r3, r3, #1
 80021ce:	61bb      	str	r3, [r7, #24]
 80021d0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021d2:	2300      	movs	r3, #0
 80021d4:	617b      	str	r3, [r7, #20]
 80021d6:	4b29      	ldr	r3, [pc, #164]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 80021d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021da:	4a28      	ldr	r2, [pc, #160]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 80021dc:	f043 0301 	orr.w	r3, r3, #1
 80021e0:	6313      	str	r3, [r2, #48]	; 0x30
 80021e2:	4b26      	ldr	r3, [pc, #152]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 80021e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e6:	f003 0301 	and.w	r3, r3, #1
 80021ea:	617b      	str	r3, [r7, #20]
 80021ec:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    PA1     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = RR_ENCODER_A_Pin|RR_ENCODER_B_Pin;
 80021ee:	2303      	movs	r3, #3
 80021f0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021f2:	2302      	movs	r3, #2
 80021f4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021f6:	2300      	movs	r3, #0
 80021f8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021fa:	2300      	movs	r3, #0
 80021fc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80021fe:	2301      	movs	r3, #1
 8002200:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002202:	f107 031c 	add.w	r3, r7, #28
 8002206:	4619      	mov	r1, r3
 8002208:	481d      	ldr	r0, [pc, #116]	; (8002280 <HAL_TIM_Encoder_MspInit+0xec>)
 800220a:	f000 fee7 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800220e:	e030      	b.n	8002272 <HAL_TIM_Encoder_MspInit+0xde>
  else if(htim_encoder->Instance==TIM3)
 8002210:	687b      	ldr	r3, [r7, #4]
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	4a1b      	ldr	r2, [pc, #108]	; (8002284 <HAL_TIM_Encoder_MspInit+0xf0>)
 8002216:	4293      	cmp	r3, r2
 8002218:	d12b      	bne.n	8002272 <HAL_TIM_Encoder_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800221a:	2300      	movs	r3, #0
 800221c:	613b      	str	r3, [r7, #16]
 800221e:	4b17      	ldr	r3, [pc, #92]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002222:	4a16      	ldr	r2, [pc, #88]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002224:	f043 0302 	orr.w	r3, r3, #2
 8002228:	6413      	str	r3, [r2, #64]	; 0x40
 800222a:	4b14      	ldr	r3, [pc, #80]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 800222c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222e:	f003 0302 	and.w	r3, r3, #2
 8002232:	613b      	str	r3, [r7, #16]
 8002234:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002236:	2300      	movs	r3, #0
 8002238:	60fb      	str	r3, [r7, #12]
 800223a:	4b10      	ldr	r3, [pc, #64]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 800223c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800223e:	4a0f      	ldr	r2, [pc, #60]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002240:	f043 0301 	orr.w	r3, r3, #1
 8002244:	6313      	str	r3, [r2, #48]	; 0x30
 8002246:	4b0d      	ldr	r3, [pc, #52]	; (800227c <HAL_TIM_Encoder_MspInit+0xe8>)
 8002248:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	60fb      	str	r3, [r7, #12]
 8002250:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = FR_ENCODER_A_Pin|FR_ENCODER_B_Pin;
 8002252:	23c0      	movs	r3, #192	; 0xc0
 8002254:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002256:	2302      	movs	r3, #2
 8002258:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800225a:	2300      	movs	r3, #0
 800225c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800225e:	2300      	movs	r3, #0
 8002260:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002262:	2302      	movs	r3, #2
 8002264:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002266:	f107 031c 	add.w	r3, r7, #28
 800226a:	4619      	mov	r1, r3
 800226c:	4804      	ldr	r0, [pc, #16]	; (8002280 <HAL_TIM_Encoder_MspInit+0xec>)
 800226e:	f000 feb5 	bl	8002fdc <HAL_GPIO_Init>
}
 8002272:	bf00      	nop
 8002274:	3730      	adds	r7, #48	; 0x30
 8002276:	46bd      	mov	sp, r7
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	40023800 	.word	0x40023800
 8002280:	40020000 	.word	0x40020000
 8002284:	40000400 	.word	0x40000400

08002288 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002288:	b580      	push	{r7, lr}
 800228a:	b08c      	sub	sp, #48	; 0x30
 800228c:	af00      	add	r7, sp, #0
 800228e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002290:	f107 031c 	add.w	r3, r7, #28
 8002294:	2200      	movs	r2, #0
 8002296:	601a      	str	r2, [r3, #0]
 8002298:	605a      	str	r2, [r3, #4]
 800229a:	609a      	str	r2, [r3, #8]
 800229c:	60da      	str	r2, [r3, #12]
 800229e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	4a49      	ldr	r2, [pc, #292]	; (80023cc <HAL_TIM_MspPostInit+0x144>)
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d11f      	bne.n	80022ea <HAL_TIM_MspPostInit+0x62>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80022aa:	2300      	movs	r3, #0
 80022ac:	61bb      	str	r3, [r7, #24]
 80022ae:	4b48      	ldr	r3, [pc, #288]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 80022b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022b2:	4a47      	ldr	r2, [pc, #284]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 80022b4:	f043 0310 	orr.w	r3, r3, #16
 80022b8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ba:	4b45      	ldr	r3, [pc, #276]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 80022bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022be:	f003 0310 	and.w	r3, r3, #16
 80022c2:	61bb      	str	r3, [r7, #24]
 80022c4:	69bb      	ldr	r3, [r7, #24]
    /**TIM1 GPIO Configuration
    PE9     ------> TIM1_CH1
    PE11     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = FR_MOTOR_PWM_Pin|RR_MOTOR_PWM_Pin;
 80022c6:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 80022ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022cc:	2302      	movs	r3, #2
 80022ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80022d4:	2300      	movs	r3, #0
 80022d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80022d8:	2301      	movs	r3, #1
 80022da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4619      	mov	r1, r3
 80022e2:	483c      	ldr	r0, [pc, #240]	; (80023d4 <HAL_TIM_MspPostInit+0x14c>)
 80022e4:	f000 fe7a 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM9_MspPostInit 1 */

  /* USER CODE END TIM9_MspPostInit 1 */
  }

}
 80022e8:	e06c      	b.n	80023c4 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM4)
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	681b      	ldr	r3, [r3, #0]
 80022ee:	4a3a      	ldr	r2, [pc, #232]	; (80023d8 <HAL_TIM_MspPostInit+0x150>)
 80022f0:	4293      	cmp	r3, r2
 80022f2:	d11f      	bne.n	8002334 <HAL_TIM_MspPostInit+0xac>
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80022f4:	2300      	movs	r3, #0
 80022f6:	617b      	str	r3, [r7, #20]
 80022f8:	4b35      	ldr	r3, [pc, #212]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 80022fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fc:	4a34      	ldr	r2, [pc, #208]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 80022fe:	f043 0308 	orr.w	r3, r3, #8
 8002302:	6313      	str	r3, [r2, #48]	; 0x30
 8002304:	4b32      	ldr	r3, [pc, #200]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 8002306:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002308:	f003 0308 	and.w	r3, r3, #8
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = SERVO_5_Pin;
 8002310:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002314:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002316:	2302      	movs	r3, #2
 8002318:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800231a:	2300      	movs	r3, #0
 800231c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800231e:	2300      	movs	r3, #0
 8002320:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002322:	2302      	movs	r3, #2
 8002324:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SERVO_5_GPIO_Port, &GPIO_InitStruct);
 8002326:	f107 031c 	add.w	r3, r7, #28
 800232a:	4619      	mov	r1, r3
 800232c:	482b      	ldr	r0, [pc, #172]	; (80023dc <HAL_TIM_MspPostInit+0x154>)
 800232e:	f000 fe55 	bl	8002fdc <HAL_GPIO_Init>
}
 8002332:	e047      	b.n	80023c4 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM8)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a29      	ldr	r2, [pc, #164]	; (80023e0 <HAL_TIM_MspPostInit+0x158>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d11f      	bne.n	800237e <HAL_TIM_MspPostInit+0xf6>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b23      	ldr	r3, [pc, #140]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 8002344:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002346:	4a22      	ldr	r2, [pc, #136]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 8002348:	f043 0304 	orr.w	r3, r3, #4
 800234c:	6313      	str	r3, [r2, #48]	; 0x30
 800234e:	4b20      	ldr	r3, [pc, #128]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 8002350:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002352:	f003 0304 	and.w	r3, r3, #4
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = SERVO_4_Pin|SERVO_3_Pin|SERVO_2_Pin|SERVO_1_Pin;
 800235a:	f44f 7370 	mov.w	r3, #960	; 0x3c0
 800235e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002360:	2302      	movs	r3, #2
 8002362:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002364:	2300      	movs	r3, #0
 8002366:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002368:	2300      	movs	r3, #0
 800236a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 800236c:	2303      	movs	r3, #3
 800236e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002370:	f107 031c 	add.w	r3, r7, #28
 8002374:	4619      	mov	r1, r3
 8002376:	481b      	ldr	r0, [pc, #108]	; (80023e4 <HAL_TIM_MspPostInit+0x15c>)
 8002378:	f000 fe30 	bl	8002fdc <HAL_GPIO_Init>
}
 800237c:	e022      	b.n	80023c4 <HAL_TIM_MspPostInit+0x13c>
  else if(htim->Instance==TIM9)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	4a19      	ldr	r2, [pc, #100]	; (80023e8 <HAL_TIM_MspPostInit+0x160>)
 8002384:	4293      	cmp	r3, r2
 8002386:	d11d      	bne.n	80023c4 <HAL_TIM_MspPostInit+0x13c>
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002388:	2300      	movs	r3, #0
 800238a:	60fb      	str	r3, [r7, #12]
 800238c:	4b10      	ldr	r3, [pc, #64]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 800238e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002390:	4a0f      	ldr	r2, [pc, #60]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 8002392:	f043 0301 	orr.w	r3, r3, #1
 8002396:	6313      	str	r3, [r2, #48]	; 0x30
 8002398:	4b0d      	ldr	r3, [pc, #52]	; (80023d0 <HAL_TIM_MspPostInit+0x148>)
 800239a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800239c:	f003 0301 	and.w	r3, r3, #1
 80023a0:	60fb      	str	r3, [r7, #12]
 80023a2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = SHOOTER_PWM_Pin;
 80023a4:	2304      	movs	r3, #4
 80023a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023a8:	2302      	movs	r3, #2
 80023aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023ac:	2300      	movs	r3, #0
 80023ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023b0:	2300      	movs	r3, #0
 80023b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM9;
 80023b4:	2303      	movs	r3, #3
 80023b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(SHOOTER_PWM_GPIO_Port, &GPIO_InitStruct);
 80023b8:	f107 031c 	add.w	r3, r7, #28
 80023bc:	4619      	mov	r1, r3
 80023be:	480b      	ldr	r0, [pc, #44]	; (80023ec <HAL_TIM_MspPostInit+0x164>)
 80023c0:	f000 fe0c 	bl	8002fdc <HAL_GPIO_Init>
}
 80023c4:	bf00      	nop
 80023c6:	3730      	adds	r7, #48	; 0x30
 80023c8:	46bd      	mov	sp, r7
 80023ca:	bd80      	pop	{r7, pc}
 80023cc:	40010000 	.word	0x40010000
 80023d0:	40023800 	.word	0x40023800
 80023d4:	40021000 	.word	0x40021000
 80023d8:	40000800 	.word	0x40000800
 80023dc:	40020c00 	.word	0x40020c00
 80023e0:	40010400 	.word	0x40010400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40014000 	.word	0x40014000
 80023ec:	40020000 	.word	0x40020000

080023f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b08a      	sub	sp, #40	; 0x28
 80023f4:	af00      	add	r7, sp, #0
 80023f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f8:	f107 0314 	add.w	r3, r7, #20
 80023fc:	2200      	movs	r2, #0
 80023fe:	601a      	str	r2, [r3, #0]
 8002400:	605a      	str	r2, [r3, #4]
 8002402:	609a      	str	r2, [r3, #8]
 8002404:	60da      	str	r2, [r3, #12]
 8002406:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART4)
 8002408:	687b      	ldr	r3, [r7, #4]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	4a19      	ldr	r2, [pc, #100]	; (8002474 <HAL_UART_MspInit+0x84>)
 800240e:	4293      	cmp	r3, r2
 8002410:	d12c      	bne.n	800246c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN UART4_MspInit 0 */

  /* USER CODE END UART4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002412:	2300      	movs	r3, #0
 8002414:	613b      	str	r3, [r7, #16]
 8002416:	4b18      	ldr	r3, [pc, #96]	; (8002478 <HAL_UART_MspInit+0x88>)
 8002418:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800241a:	4a17      	ldr	r2, [pc, #92]	; (8002478 <HAL_UART_MspInit+0x88>)
 800241c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002420:	6413      	str	r3, [r2, #64]	; 0x40
 8002422:	4b15      	ldr	r3, [pc, #84]	; (8002478 <HAL_UART_MspInit+0x88>)
 8002424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002426:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800242a:	613b      	str	r3, [r7, #16]
 800242c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800242e:	2300      	movs	r3, #0
 8002430:	60fb      	str	r3, [r7, #12]
 8002432:	4b11      	ldr	r3, [pc, #68]	; (8002478 <HAL_UART_MspInit+0x88>)
 8002434:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002436:	4a10      	ldr	r2, [pc, #64]	; (8002478 <HAL_UART_MspInit+0x88>)
 8002438:	f043 0304 	orr.w	r3, r3, #4
 800243c:	6313      	str	r3, [r2, #48]	; 0x30
 800243e:	4b0e      	ldr	r3, [pc, #56]	; (8002478 <HAL_UART_MspInit+0x88>)
 8002440:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002442:	f003 0304 	and.w	r3, r3, #4
 8002446:	60fb      	str	r3, [r7, #12]
 8002448:	68fb      	ldr	r3, [r7, #12]
    /**UART4 GPIO Configuration
    PC10     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = BLUTOOTH_TX_Pin|BLUTOOTH_RX_Pin;
 800244a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800244e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002450:	2302      	movs	r3, #2
 8002452:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002454:	2300      	movs	r3, #0
 8002456:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002458:	2303      	movs	r3, #3
 800245a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800245c:	2308      	movs	r3, #8
 800245e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	4619      	mov	r1, r3
 8002466:	4805      	ldr	r0, [pc, #20]	; (800247c <HAL_UART_MspInit+0x8c>)
 8002468:	f000 fdb8 	bl	8002fdc <HAL_GPIO_Init>
  /* USER CODE BEGIN UART4_MspInit 1 */

  /* USER CODE END UART4_MspInit 1 */
  }

}
 800246c:	bf00      	nop
 800246e:	3728      	adds	r7, #40	; 0x28
 8002470:	46bd      	mov	sp, r7
 8002472:	bd80      	pop	{r7, pc}
 8002474:	40004c00 	.word	0x40004c00
 8002478:	40023800 	.word	0x40023800
 800247c:	40020800 	.word	0x40020800

08002480 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002480:	b480      	push	{r7}
 8002482:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002484:	e7fe      	b.n	8002484 <NMI_Handler+0x4>

08002486 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002486:	b480      	push	{r7}
 8002488:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800248a:	e7fe      	b.n	800248a <HardFault_Handler+0x4>

0800248c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800248c:	b480      	push	{r7}
 800248e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002490:	e7fe      	b.n	8002490 <MemManage_Handler+0x4>

08002492 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002492:	b480      	push	{r7}
 8002494:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002496:	e7fe      	b.n	8002496 <BusFault_Handler+0x4>

08002498 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002498:	b480      	push	{r7}
 800249a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800249c:	e7fe      	b.n	800249c <UsageFault_Handler+0x4>

0800249e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800249e:	b480      	push	{r7}
 80024a0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80024a2:	bf00      	nop
 80024a4:	46bd      	mov	sp, r7
 80024a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024aa:	4770      	bx	lr

080024ac <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80024ac:	b480      	push	{r7}
 80024ae:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80024b0:	bf00      	nop
 80024b2:	46bd      	mov	sp, r7
 80024b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024b8:	4770      	bx	lr

080024ba <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80024ba:	b480      	push	{r7}
 80024bc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80024be:	bf00      	nop
 80024c0:	46bd      	mov	sp, r7
 80024c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c6:	4770      	bx	lr

080024c8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80024cc:	f000 f890 	bl	80025f0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}

080024d4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024d4:	b480      	push	{r7}
 80024d6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024d8:	4b06      	ldr	r3, [pc, #24]	; (80024f4 <SystemInit+0x20>)
 80024da:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024de:	4a05      	ldr	r2, [pc, #20]	; (80024f4 <SystemInit+0x20>)
 80024e0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024e4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024e8:	bf00      	nop
 80024ea:	46bd      	mov	sp, r7
 80024ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024f0:	4770      	bx	lr
 80024f2:	bf00      	nop
 80024f4:	e000ed00 	.word	0xe000ed00

080024f8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80024f8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002530 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 80024fc:	f7ff ffea 	bl	80024d4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002500:	480c      	ldr	r0, [pc, #48]	; (8002534 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002502:	490d      	ldr	r1, [pc, #52]	; (8002538 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002504:	4a0d      	ldr	r2, [pc, #52]	; (800253c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002506:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002508:	e002      	b.n	8002510 <LoopCopyDataInit>

0800250a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800250a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800250c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800250e:	3304      	adds	r3, #4

08002510 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002510:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002512:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002514:	d3f9      	bcc.n	800250a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002516:	4a0a      	ldr	r2, [pc, #40]	; (8002540 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002518:	4c0a      	ldr	r4, [pc, #40]	; (8002544 <LoopFillZerobss+0x22>)
  movs r3, #0
 800251a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800251c:	e001      	b.n	8002522 <LoopFillZerobss>

0800251e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800251e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002520:	3204      	adds	r2, #4

08002522 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002522:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002524:	d3fb      	bcc.n	800251e <FillZerobss>
 
/* Call static constructors */
    bl __libc_init_array
 8002526:	f002 fffb 	bl	8005520 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800252a:	f7fe fb29 	bl	8000b80 <main>
  bx  lr    
 800252e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002530:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002534:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002538:	20000108 	.word	0x20000108
  ldr r2, =_sidata
 800253c:	080055a8 	.word	0x080055a8
  ldr r2, =_sbss
 8002540:	20000108 	.word	0x20000108
  ldr r4, =_ebss
 8002544:	200005a4 	.word	0x200005a4

08002548 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002548:	e7fe      	b.n	8002548 <ADC_IRQHandler>
	...

0800254c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800254c:	b580      	push	{r7, lr}
 800254e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002550:	4b0e      	ldr	r3, [pc, #56]	; (800258c <HAL_Init+0x40>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	4a0d      	ldr	r2, [pc, #52]	; (800258c <HAL_Init+0x40>)
 8002556:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800255a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800255c:	4b0b      	ldr	r3, [pc, #44]	; (800258c <HAL_Init+0x40>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4a0a      	ldr	r2, [pc, #40]	; (800258c <HAL_Init+0x40>)
 8002562:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002566:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002568:	4b08      	ldr	r3, [pc, #32]	; (800258c <HAL_Init+0x40>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4a07      	ldr	r2, [pc, #28]	; (800258c <HAL_Init+0x40>)
 800256e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002572:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002574:	2003      	movs	r0, #3
 8002576:	f000 fcfd 	bl	8002f74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800257a:	200f      	movs	r0, #15
 800257c:	f000 f808 	bl	8002590 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002580:	f7ff fc26 	bl	8001dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002584:	2300      	movs	r3, #0
}
 8002586:	4618      	mov	r0, r3
 8002588:	bd80      	pop	{r7, pc}
 800258a:	bf00      	nop
 800258c:	40023c00 	.word	0x40023c00

08002590 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002590:	b580      	push	{r7, lr}
 8002592:	b082      	sub	sp, #8
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002598:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_InitTick+0x54>)
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	4b12      	ldr	r3, [pc, #72]	; (80025e8 <HAL_InitTick+0x58>)
 800259e:	781b      	ldrb	r3, [r3, #0]
 80025a0:	4619      	mov	r1, r3
 80025a2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80025a6:	fbb3 f3f1 	udiv	r3, r3, r1
 80025aa:	fbb2 f3f3 	udiv	r3, r2, r3
 80025ae:	4618      	mov	r0, r3
 80025b0:	f000 fd07 	bl	8002fc2 <HAL_SYSTICK_Config>
 80025b4:	4603      	mov	r3, r0
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d001      	beq.n	80025be <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80025ba:	2301      	movs	r3, #1
 80025bc:	e00e      	b.n	80025dc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2b0f      	cmp	r3, #15
 80025c2:	d80a      	bhi.n	80025da <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80025c4:	2200      	movs	r2, #0
 80025c6:	6879      	ldr	r1, [r7, #4]
 80025c8:	f04f 30ff 	mov.w	r0, #4294967295
 80025cc:	f000 fcdd 	bl	8002f8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80025d0:	4a06      	ldr	r2, [pc, #24]	; (80025ec <HAL_InitTick+0x5c>)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80025d6:	2300      	movs	r3, #0
 80025d8:	e000      	b.n	80025dc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
}
 80025dc:	4618      	mov	r0, r3
 80025de:	3708      	adds	r7, #8
 80025e0:	46bd      	mov	sp, r7
 80025e2:	bd80      	pop	{r7, pc}
 80025e4:	200000fc 	.word	0x200000fc
 80025e8:	20000104 	.word	0x20000104
 80025ec:	20000100 	.word	0x20000100

080025f0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80025f0:	b480      	push	{r7}
 80025f2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80025f4:	4b06      	ldr	r3, [pc, #24]	; (8002610 <HAL_IncTick+0x20>)
 80025f6:	781b      	ldrb	r3, [r3, #0]
 80025f8:	461a      	mov	r2, r3
 80025fa:	4b06      	ldr	r3, [pc, #24]	; (8002614 <HAL_IncTick+0x24>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4413      	add	r3, r2
 8002600:	4a04      	ldr	r2, [pc, #16]	; (8002614 <HAL_IncTick+0x24>)
 8002602:	6013      	str	r3, [r2, #0]
}
 8002604:	bf00      	nop
 8002606:	46bd      	mov	sp, r7
 8002608:	f85d 7b04 	ldr.w	r7, [sp], #4
 800260c:	4770      	bx	lr
 800260e:	bf00      	nop
 8002610:	20000104 	.word	0x20000104
 8002614:	200005a0 	.word	0x200005a0

08002618 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  return uwTick;
 800261c:	4b03      	ldr	r3, [pc, #12]	; (800262c <HAL_GetTick+0x14>)
 800261e:	681b      	ldr	r3, [r3, #0]
}
 8002620:	4618      	mov	r0, r3
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
 800262a:	bf00      	nop
 800262c:	200005a0 	.word	0x200005a0

08002630 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002630:	b580      	push	{r7, lr}
 8002632:	b084      	sub	sp, #16
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002638:	f7ff ffee 	bl	8002618 <HAL_GetTick>
 800263c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002642:	68fb      	ldr	r3, [r7, #12]
 8002644:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002648:	d005      	beq.n	8002656 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800264a:	4b0a      	ldr	r3, [pc, #40]	; (8002674 <HAL_Delay+0x44>)
 800264c:	781b      	ldrb	r3, [r3, #0]
 800264e:	461a      	mov	r2, r3
 8002650:	68fb      	ldr	r3, [r7, #12]
 8002652:	4413      	add	r3, r2
 8002654:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002656:	bf00      	nop
 8002658:	f7ff ffde 	bl	8002618 <HAL_GetTick>
 800265c:	4602      	mov	r2, r0
 800265e:	68bb      	ldr	r3, [r7, #8]
 8002660:	1ad3      	subs	r3, r2, r3
 8002662:	68fa      	ldr	r2, [r7, #12]
 8002664:	429a      	cmp	r2, r3
 8002666:	d8f7      	bhi.n	8002658 <HAL_Delay+0x28>
  {
  }
}
 8002668:	bf00      	nop
 800266a:	bf00      	nop
 800266c:	3710      	adds	r7, #16
 800266e:	46bd      	mov	sp, r7
 8002670:	bd80      	pop	{r7, pc}
 8002672:	bf00      	nop
 8002674:	20000104 	.word	0x20000104

08002678 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002678:	b580      	push	{r7, lr}
 800267a:	b084      	sub	sp, #16
 800267c:	af00      	add	r7, sp, #0
 800267e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002680:	2300      	movs	r3, #0
 8002682:	73fb      	strb	r3, [r7, #15]

  /* Check ADC handle */
  if (hadc == NULL)
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	2b00      	cmp	r3, #0
 8002688:	d101      	bne.n	800268e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800268a:	2301      	movs	r3, #1
 800268c:	e033      	b.n	80026f6 <HAL_ADC_Init+0x7e>
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if (hadc->State == HAL_ADC_STATE_RESET)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002692:	2b00      	cmp	r3, #0
 8002694:	d109      	bne.n	80026aa <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002696:	6878      	ldr	r0, [r7, #4]
 8002698:	f7ff fbc2 	bl	8001e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2200      	movs	r2, #0
 80026a0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	2200      	movs	r2, #0
 80026a6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ae:	f003 0310 	and.w	r3, r3, #16
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d118      	bne.n	80026e8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80026be:	f023 0302 	bic.w	r3, r3, #2
 80026c2:	f043 0202 	orr.w	r2, r3, #2
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Set ADC parameters */
    ADC_Init(hadc);
 80026ca:	6878      	ldr	r0, [r7, #4]
 80026cc:	f000 faa4 	bl	8002c18 <ADC_Init>

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	2200      	movs	r2, #0
 80026d4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026da:	f023 0303 	bic.w	r3, r3, #3
 80026de:	f043 0201 	orr.w	r2, r3, #1
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	641a      	str	r2, [r3, #64]	; 0x40
 80026e6:	e001      	b.n	80026ec <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80026e8:	2301      	movs	r3, #1
 80026ea:	73fb      	strb	r3, [r7, #15]
  }

  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	2200      	movs	r2, #0
 80026f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80026f4:	7bfb      	ldrb	r3, [r7, #15]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3710      	adds	r7, #16
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
	...

08002700 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 8002700:	b480      	push	{r7}
 8002702:	b085      	sub	sp, #20
 8002704:	af00      	add	r7, sp, #0
 8002706:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002708:	2300      	movs	r3, #0
 800270a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));

  /* Process locked */
  __HAL_LOCK(hadc);
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002712:	2b01      	cmp	r3, #1
 8002714:	d101      	bne.n	800271a <HAL_ADC_Start+0x1a>
 8002716:	2302      	movs	r3, #2
 8002718:	e0b2      	b.n	8002880 <HAL_ADC_Start+0x180>
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	2201      	movs	r2, #1
 800271e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during
  Tstab time the ADC's stabilization */
  if ((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	689b      	ldr	r3, [r3, #8]
 8002728:	f003 0301 	and.w	r3, r3, #1
 800272c:	2b01      	cmp	r3, #1
 800272e:	d018      	beq.n	8002762 <HAL_ADC_Start+0x62>
  {
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	689a      	ldr	r2, [r3, #8]
 8002736:	687b      	ldr	r3, [r7, #4]
 8002738:	681b      	ldr	r3, [r3, #0]
 800273a:	f042 0201 	orr.w	r2, r2, #1
 800273e:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002740:	4b52      	ldr	r3, [pc, #328]	; (800288c <HAL_ADC_Start+0x18c>)
 8002742:	681b      	ldr	r3, [r3, #0]
 8002744:	4a52      	ldr	r2, [pc, #328]	; (8002890 <HAL_ADC_Start+0x190>)
 8002746:	fba2 2303 	umull	r2, r3, r2, r3
 800274a:	0c9a      	lsrs	r2, r3, #18
 800274c:	4613      	mov	r3, r2
 800274e:	005b      	lsls	r3, r3, #1
 8002750:	4413      	add	r3, r2
 8002752:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 8002754:	e002      	b.n	800275c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002756:	68bb      	ldr	r3, [r7, #8]
 8002758:	3b01      	subs	r3, #1
 800275a:	60bb      	str	r3, [r7, #8]
    while (counter != 0U)
 800275c:	68bb      	ldr	r3, [r7, #8]
 800275e:	2b00      	cmp	r3, #0
 8002760:	d1f9      	bne.n	8002756 <HAL_ADC_Start+0x56>
    }
  }

  /* Start conversion if ADC is effectively enabled */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	681b      	ldr	r3, [r3, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	f003 0301 	and.w	r3, r3, #1
 800276c:	2b01      	cmp	r3, #1
 800276e:	d17a      	bne.n	8002866 <HAL_ADC_Start+0x166>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002774:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002778:	f023 0301 	bic.w	r3, r3, #1
 800277c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);

    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	685b      	ldr	r3, [r3, #4]
 800278a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278e:	2b00      	cmp	r3, #0
 8002790:	d007      	beq.n	80027a2 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002796:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800279a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027a6:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80027aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80027ae:	d106      	bne.n	80027be <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027b4:	f023 0206 	bic.w	r2, r3, #6
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	645a      	str	r2, [r3, #68]	; 0x44
 80027bc:	e002      	b.n	80027c4 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2200      	movs	r2, #0
 80027c2:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	2200      	movs	r2, #0
 80027c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80027cc:	4b31      	ldr	r3, [pc, #196]	; (8002894 <HAL_ADC_Start+0x194>)
 80027ce:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80027d8:	601a      	str	r2, [r3, #0]

    /* Check if Multimode enabled */
    if (HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80027da:	68fb      	ldr	r3, [r7, #12]
 80027dc:	685b      	ldr	r3, [r3, #4]
 80027de:	f003 031f 	and.w	r3, r3, #31
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d12a      	bne.n	800283c <HAL_ADC_Start+0x13c>
    {
#if defined(ADC2) && defined(ADC3)
      if ((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	4a2b      	ldr	r2, [pc, #172]	; (8002898 <HAL_ADC_Start+0x198>)
 80027ec:	4293      	cmp	r3, r2
 80027ee:	d015      	beq.n	800281c <HAL_ADC_Start+0x11c>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a29      	ldr	r2, [pc, #164]	; (800289c <HAL_ADC_Start+0x19c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d105      	bne.n	8002806 <HAL_ADC_Start+0x106>
 80027fa:	4b26      	ldr	r3, [pc, #152]	; (8002894 <HAL_ADC_Start+0x194>)
 80027fc:	685b      	ldr	r3, [r3, #4]
 80027fe:	f003 031f 	and.w	r3, r3, #31
 8002802:	2b00      	cmp	r3, #0
 8002804:	d00a      	beq.n	800281c <HAL_ADC_Start+0x11c>
          || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a25      	ldr	r2, [pc, #148]	; (80028a0 <HAL_ADC_Start+0x1a0>)
 800280c:	4293      	cmp	r3, r2
 800280e:	d136      	bne.n	800287e <HAL_ADC_Start+0x17e>
 8002810:	4b20      	ldr	r3, [pc, #128]	; (8002894 <HAL_ADC_Start+0x194>)
 8002812:	685b      	ldr	r3, [r3, #4]
 8002814:	f003 0310 	and.w	r3, r3, #16
 8002818:	2b00      	cmp	r3, #0
 800281a:	d130      	bne.n	800287e <HAL_ADC_Start+0x17e>
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002826:	2b00      	cmp	r3, #0
 8002828:	d129      	bne.n	800287e <HAL_ADC_Start+0x17e>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	689a      	ldr	r2, [r3, #8]
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002838:	609a      	str	r2, [r3, #8]
 800283a:	e020      	b.n	800287e <HAL_ADC_Start+0x17e>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if ((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	4a15      	ldr	r2, [pc, #84]	; (8002898 <HAL_ADC_Start+0x198>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d11b      	bne.n	800287e <HAL_ADC_Start+0x17e>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002850:	2b00      	cmp	r3, #0
 8002852:	d114      	bne.n	800287e <HAL_ADC_Start+0x17e>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	689a      	ldr	r2, [r3, #8]
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002862:	609a      	str	r2, [r3, #8]
 8002864:	e00b      	b.n	800287e <HAL_ADC_Start+0x17e>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800286a:	f043 0210 	orr.w	r2, r3, #16
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002876:	f043 0201 	orr.w	r2, r3, #1
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Return function status */
  return HAL_OK;
 800287e:	2300      	movs	r3, #0
}
 8002880:	4618      	mov	r0, r3
 8002882:	3714      	adds	r7, #20
 8002884:	46bd      	mov	sp, r7
 8002886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288a:	4770      	bx	lr
 800288c:	200000fc 	.word	0x200000fc
 8002890:	431bde83 	.word	0x431bde83
 8002894:	40012300 	.word	0x40012300
 8002898:	40012000 	.word	0x40012000
 800289c:	40012100 	.word	0x40012100
 80028a0:	40012200 	.word	0x40012200

080028a4 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 80028ae:	2300      	movs	r3, #0
 80028b0:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	689b      	ldr	r3, [r3, #8]
 80028b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80028bc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80028c0:	d113      	bne.n	80028ea <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA))
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	689b      	ldr	r3, [r3, #8]
 80028c8:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80028cc:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80028d0:	d10b      	bne.n	80028ea <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d6:	f043 0220 	orr.w	r2, r3, #32
 80028da:	687b      	ldr	r3, [r7, #4]
 80028dc:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	2200      	movs	r2, #0
 80028e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e063      	b.n	80029b2 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */
  tickstart = HAL_GetTick();
 80028ea:	f7ff fe95 	bl	8002618 <HAL_GetTick>
 80028ee:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80028f0:	e021      	b.n	8002936 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 80028f2:	683b      	ldr	r3, [r7, #0]
 80028f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028f8:	d01d      	beq.n	8002936 <HAL_ADC_PollForConversion+0x92>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 80028fa:	683b      	ldr	r3, [r7, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d007      	beq.n	8002910 <HAL_ADC_PollForConversion+0x6c>
 8002900:	f7ff fe8a 	bl	8002618 <HAL_GetTick>
 8002904:	4602      	mov	r2, r0
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	1ad3      	subs	r3, r2, r3
 800290a:	683a      	ldr	r2, [r7, #0]
 800290c:	429a      	cmp	r2, r3
 800290e:	d212      	bcs.n	8002936 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b02      	cmp	r3, #2
 800291c:	d00b      	beq.n	8002936 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002922:	f043 0204 	orr.w	r2, r3, #4
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	2200      	movs	r2, #0
 800292e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_TIMEOUT;
 8002932:	2303      	movs	r3, #3
 8002934:	e03d      	b.n	80029b2 <HAL_ADC_PollForConversion+0x10e>
  while (!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	681b      	ldr	r3, [r3, #0]
 800293c:	f003 0302 	and.w	r3, r3, #2
 8002940:	2b02      	cmp	r3, #2
 8002942:	d1d6      	bne.n	80028f2 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }

  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	681b      	ldr	r3, [r3, #0]
 8002948:	f06f 0212 	mvn.w	r2, #18
 800294c:	601a      	str	r2, [r3, #0]

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002952:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	681b      	ldr	r3, [r3, #0]
 800295e:	689b      	ldr	r3, [r3, #8]
 8002960:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002964:	2b00      	cmp	r3, #0
 8002966:	d123      	bne.n	80029b0 <HAL_ADC_PollForConversion+0x10c>
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	7e1b      	ldrb	r3, [r3, #24]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800296c:	2b00      	cmp	r3, #0
 800296e:	d11f      	bne.n	80029b0 <HAL_ADC_PollForConversion+0x10c>
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002976:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
      (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800297a:	2b00      	cmp	r3, #0
 800297c:	d006      	beq.n	800298c <HAL_ADC_PollForConversion+0xe8>
       HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)))
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	689b      	ldr	r3, [r3, #8]
 8002984:	f403 6380 	and.w	r3, r3, #1024	; 0x400
      (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002988:	2b00      	cmp	r3, #0
 800298a:	d111      	bne.n	80029b0 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002990:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	641a      	str	r2, [r3, #64]	; 0x40

    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d105      	bne.n	80029b0 <HAL_ADC_PollForConversion+0x10c>
    {
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029a8:	f043 0201 	orr.w	r2, r3, #1
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  /* Return ADC state */
  return HAL_OK;
 80029b0:	2300      	movs	r3, #0
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	3710      	adds	r7, #16
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}

080029ba <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 80029ba:	b480      	push	{r7}
 80029bc:	b083      	sub	sp, #12
 80029be:	af00      	add	r7, sp, #0
 80029c0:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */
  return hadc->Instance->DR;
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80029c8:	4618      	mov	r0, r3
 80029ca:	370c      	adds	r7, #12
 80029cc:	46bd      	mov	sp, r7
 80029ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029d2:	4770      	bx	lr

080029d4 <HAL_ADC_ConfigChannel>:
*         the configuration information for the specified ADC.
* @param  sConfig ADC configuration structure.
* @retval HAL status
*/
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80029d4:	b480      	push	{r7}
 80029d6:	b085      	sub	sp, #20
 80029d8:	af00      	add	r7, sp, #0
 80029da:	6078      	str	r0, [r7, #4]
 80029dc:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80029de:	2300      	movs	r3, #0
 80029e0:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));

  /* Process locked */
  __HAL_LOCK(hadc);
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80029e8:	2b01      	cmp	r3, #1
 80029ea:	d101      	bne.n	80029f0 <HAL_ADC_ConfigChannel+0x1c>
 80029ec:	2302      	movs	r3, #2
 80029ee:	e105      	b.n	8002bfc <HAL_ADC_ConfigChannel+0x228>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2201      	movs	r2, #1
 80029f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80029f8:	683b      	ldr	r3, [r7, #0]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	2b09      	cmp	r3, #9
 80029fe:	d925      	bls.n	8002a4c <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	681b      	ldr	r3, [r3, #0]
 8002a04:	68d9      	ldr	r1, [r3, #12]
 8002a06:	683b      	ldr	r3, [r7, #0]
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	461a      	mov	r2, r3
 8002a0e:	4613      	mov	r3, r2
 8002a10:	005b      	lsls	r3, r3, #1
 8002a12:	4413      	add	r3, r2
 8002a14:	3b1e      	subs	r3, #30
 8002a16:	2207      	movs	r2, #7
 8002a18:	fa02 f303 	lsl.w	r3, r2, r3
 8002a1c:	43da      	mvns	r2, r3
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	400a      	ands	r2, r1
 8002a24:	60da      	str	r2, [r3, #12]

    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	681b      	ldr	r3, [r3, #0]
 8002a2a:	68d9      	ldr	r1, [r3, #12]
 8002a2c:	683b      	ldr	r3, [r7, #0]
 8002a2e:	689a      	ldr	r2, [r3, #8]
 8002a30:	683b      	ldr	r3, [r7, #0]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	b29b      	uxth	r3, r3
 8002a36:	4618      	mov	r0, r3
 8002a38:	4603      	mov	r3, r0
 8002a3a:	005b      	lsls	r3, r3, #1
 8002a3c:	4403      	add	r3, r0
 8002a3e:	3b1e      	subs	r3, #30
 8002a40:	409a      	lsls	r2, r3
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	430a      	orrs	r2, r1
 8002a48:	60da      	str	r2, [r3, #12]
 8002a4a:	e022      	b.n	8002a92 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002a4c:	687b      	ldr	r3, [r7, #4]
 8002a4e:	681b      	ldr	r3, [r3, #0]
 8002a50:	6919      	ldr	r1, [r3, #16]
 8002a52:	683b      	ldr	r3, [r7, #0]
 8002a54:	681b      	ldr	r3, [r3, #0]
 8002a56:	b29b      	uxth	r3, r3
 8002a58:	461a      	mov	r2, r3
 8002a5a:	4613      	mov	r3, r2
 8002a5c:	005b      	lsls	r3, r3, #1
 8002a5e:	4413      	add	r3, r2
 8002a60:	2207      	movs	r2, #7
 8002a62:	fa02 f303 	lsl.w	r3, r2, r3
 8002a66:	43da      	mvns	r2, r3
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	400a      	ands	r2, r1
 8002a6e:	611a      	str	r2, [r3, #16]

    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	6919      	ldr	r1, [r3, #16]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	689a      	ldr	r2, [r3, #8]
 8002a7a:	683b      	ldr	r3, [r7, #0]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	b29b      	uxth	r3, r3
 8002a80:	4618      	mov	r0, r3
 8002a82:	4603      	mov	r3, r0
 8002a84:	005b      	lsls	r3, r3, #1
 8002a86:	4403      	add	r3, r0
 8002a88:	409a      	lsls	r2, r3
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	681b      	ldr	r3, [r3, #0]
 8002a8e:	430a      	orrs	r2, r1
 8002a90:	611a      	str	r2, [r3, #16]
  }

  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	685b      	ldr	r3, [r3, #4]
 8002a96:	2b06      	cmp	r3, #6
 8002a98:	d824      	bhi.n	8002ae4 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002a9a:	687b      	ldr	r3, [r7, #4]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002aa0:	683b      	ldr	r3, [r7, #0]
 8002aa2:	685a      	ldr	r2, [r3, #4]
 8002aa4:	4613      	mov	r3, r2
 8002aa6:	009b      	lsls	r3, r3, #2
 8002aa8:	4413      	add	r3, r2
 8002aaa:	3b05      	subs	r3, #5
 8002aac:	221f      	movs	r2, #31
 8002aae:	fa02 f303 	lsl.w	r3, r2, r3
 8002ab2:	43da      	mvns	r2, r3
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	400a      	ands	r2, r1
 8002aba:	635a      	str	r2, [r3, #52]	; 0x34

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ac2:	683b      	ldr	r3, [r7, #0]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	b29b      	uxth	r3, r3
 8002ac8:	4618      	mov	r0, r3
 8002aca:	683b      	ldr	r3, [r7, #0]
 8002acc:	685a      	ldr	r2, [r3, #4]
 8002ace:	4613      	mov	r3, r2
 8002ad0:	009b      	lsls	r3, r3, #2
 8002ad2:	4413      	add	r3, r2
 8002ad4:	3b05      	subs	r3, #5
 8002ad6:	fa00 f203 	lsl.w	r2, r0, r3
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	681b      	ldr	r3, [r3, #0]
 8002ade:	430a      	orrs	r2, r1
 8002ae0:	635a      	str	r2, [r3, #52]	; 0x34
 8002ae2:	e04c      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ae4:	683b      	ldr	r3, [r7, #0]
 8002ae6:	685b      	ldr	r3, [r3, #4]
 8002ae8:	2b0c      	cmp	r3, #12
 8002aea:	d824      	bhi.n	8002b36 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002af2:	683b      	ldr	r3, [r7, #0]
 8002af4:	685a      	ldr	r2, [r3, #4]
 8002af6:	4613      	mov	r3, r2
 8002af8:	009b      	lsls	r3, r3, #2
 8002afa:	4413      	add	r3, r2
 8002afc:	3b23      	subs	r3, #35	; 0x23
 8002afe:	221f      	movs	r2, #31
 8002b00:	fa02 f303 	lsl.w	r3, r2, r3
 8002b04:	43da      	mvns	r2, r3
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	400a      	ands	r2, r1
 8002b0c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002b14:	683b      	ldr	r3, [r7, #0]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	b29b      	uxth	r3, r3
 8002b1a:	4618      	mov	r0, r3
 8002b1c:	683b      	ldr	r3, [r7, #0]
 8002b1e:	685a      	ldr	r2, [r3, #4]
 8002b20:	4613      	mov	r3, r2
 8002b22:	009b      	lsls	r3, r3, #2
 8002b24:	4413      	add	r3, r2
 8002b26:	3b23      	subs	r3, #35	; 0x23
 8002b28:	fa00 f203 	lsl.w	r2, r0, r3
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	430a      	orrs	r2, r1
 8002b32:	631a      	str	r2, [r3, #48]	; 0x30
 8002b34:	e023      	b.n	8002b7e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b3c:	683b      	ldr	r3, [r7, #0]
 8002b3e:	685a      	ldr	r2, [r3, #4]
 8002b40:	4613      	mov	r3, r2
 8002b42:	009b      	lsls	r3, r3, #2
 8002b44:	4413      	add	r3, r2
 8002b46:	3b41      	subs	r3, #65	; 0x41
 8002b48:	221f      	movs	r2, #31
 8002b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002b4e:	43da      	mvns	r2, r3
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	400a      	ands	r2, r1
 8002b56:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002b5e:	683b      	ldr	r3, [r7, #0]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	b29b      	uxth	r3, r3
 8002b64:	4618      	mov	r0, r3
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	685a      	ldr	r2, [r3, #4]
 8002b6a:	4613      	mov	r3, r2
 8002b6c:	009b      	lsls	r3, r3, #2
 8002b6e:	4413      	add	r3, r2
 8002b70:	3b41      	subs	r3, #65	; 0x41
 8002b72:	fa00 f203 	lsl.w	r2, r0, r3
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	430a      	orrs	r2, r1
 8002b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b7e:	4b22      	ldr	r3, [pc, #136]	; (8002c08 <HAL_ADC_ConfigChannel+0x234>)
 8002b80:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	4a21      	ldr	r2, [pc, #132]	; (8002c0c <HAL_ADC_ConfigChannel+0x238>)
 8002b88:	4293      	cmp	r3, r2
 8002b8a:	d109      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1cc>
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	2b12      	cmp	r3, #18
 8002b92:	d105      	bne.n	8002ba0 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002b94:	68fb      	ldr	r3, [r7, #12]
 8002b96:	685b      	ldr	r3, [r3, #4]
 8002b98:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	605a      	str	r2, [r3, #4]
  }

  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002ba0:	687b      	ldr	r3, [r7, #4]
 8002ba2:	681b      	ldr	r3, [r3, #0]
 8002ba4:	4a19      	ldr	r2, [pc, #100]	; (8002c0c <HAL_ADC_ConfigChannel+0x238>)
 8002ba6:	4293      	cmp	r3, r2
 8002ba8:	d123      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x21e>
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	2b10      	cmp	r3, #16
 8002bb0:	d003      	beq.n	8002bba <HAL_ADC_ConfigChannel+0x1e6>
 8002bb2:	683b      	ldr	r3, [r7, #0]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	2b11      	cmp	r3, #17
 8002bb8:	d11b      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002bba:	68fb      	ldr	r3, [r7, #12]
 8002bbc:	685b      	ldr	r3, [r3, #4]
 8002bbe:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002bc2:	68fb      	ldr	r3, [r7, #12]
 8002bc4:	605a      	str	r2, [r3, #4]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002bc6:	683b      	ldr	r3, [r7, #0]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	2b10      	cmp	r3, #16
 8002bcc:	d111      	bne.n	8002bf2 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002bce:	4b10      	ldr	r3, [pc, #64]	; (8002c10 <HAL_ADC_ConfigChannel+0x23c>)
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	4a10      	ldr	r2, [pc, #64]	; (8002c14 <HAL_ADC_ConfigChannel+0x240>)
 8002bd4:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd8:	0c9a      	lsrs	r2, r3, #18
 8002bda:	4613      	mov	r3, r2
 8002bdc:	009b      	lsls	r3, r3, #2
 8002bde:	4413      	add	r3, r2
 8002be0:	005b      	lsls	r3, r3, #1
 8002be2:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002be4:	e002      	b.n	8002bec <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002be6:	68bb      	ldr	r3, [r7, #8]
 8002be8:	3b01      	subs	r3, #1
 8002bea:	60bb      	str	r3, [r7, #8]
      while (counter != 0U)
 8002bec:	68bb      	ldr	r3, [r7, #8]
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d1f9      	bne.n	8002be6 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2200      	movs	r2, #0
 8002bf6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return HAL_OK;
 8002bfa:	2300      	movs	r3, #0
}
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	3714      	adds	r7, #20
 8002c00:	46bd      	mov	sp, r7
 8002c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c06:	4770      	bx	lr
 8002c08:	40012300 	.word	0x40012300
 8002c0c:	40012000 	.word	0x40012000
 8002c10:	200000fc 	.word	0x200000fc
 8002c14:	431bde83 	.word	0x431bde83

08002c18 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	b085      	sub	sp, #20
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]

  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002c20:	4b79      	ldr	r3, [pc, #484]	; (8002e08 <ADC_Init+0x1f0>)
 8002c22:	60fb      	str	r3, [r7, #12]

  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002c24:	68fb      	ldr	r3, [r7, #12]
 8002c26:	685b      	ldr	r3, [r3, #4]
 8002c28:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002c2c:	68fb      	ldr	r3, [r7, #12]
 8002c2e:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002c30:	68fb      	ldr	r3, [r7, #12]
 8002c32:	685a      	ldr	r2, [r3, #4]
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	685b      	ldr	r3, [r3, #4]
 8002c38:	431a      	orrs	r2, r3
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	605a      	str	r2, [r3, #4]

  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	685a      	ldr	r2, [r3, #4]
 8002c44:	687b      	ldr	r3, [r7, #4]
 8002c46:	681b      	ldr	r3, [r3, #0]
 8002c48:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002c4c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002c4e:	687b      	ldr	r3, [r7, #4]
 8002c50:	681b      	ldr	r3, [r3, #0]
 8002c52:	6859      	ldr	r1, [r3, #4]
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	691b      	ldr	r3, [r3, #16]
 8002c58:	021a      	lsls	r2, r3, #8
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]

  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002c70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	681b      	ldr	r3, [r3, #0]
 8002c76:	6859      	ldr	r1, [r3, #4]
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	689a      	ldr	r2, [r3, #8]
 8002c7c:	687b      	ldr	r3, [r7, #4]
 8002c7e:	681b      	ldr	r3, [r3, #0]
 8002c80:	430a      	orrs	r2, r1
 8002c82:	605a      	str	r2, [r3, #4]

  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	689a      	ldr	r2, [r3, #8]
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c92:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6899      	ldr	r1, [r3, #8]
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	68da      	ldr	r2, [r3, #12]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	430a      	orrs	r2, r1
 8002ca4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002caa:	4a58      	ldr	r2, [pc, #352]	; (8002e0c <ADC_Init+0x1f4>)
 8002cac:	4293      	cmp	r3, r2
 8002cae:	d022      	beq.n	8002cf6 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	689a      	ldr	r2, [r3, #8]
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002cbe:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	6899      	ldr	r1, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	430a      	orrs	r2, r1
 8002cd0:	609a      	str	r2, [r3, #8]

    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002ce0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	6899      	ldr	r1, [r3, #8]
 8002ce8:	687b      	ldr	r3, [r7, #4]
 8002cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	430a      	orrs	r2, r1
 8002cf2:	609a      	str	r2, [r3, #8]
 8002cf4:	e00f      	b.n	8002d16 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	689a      	ldr	r2, [r3, #8]
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002d04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	689a      	ldr	r2, [r3, #8]
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002d14:	609a      	str	r2, [r3, #8]
  }

  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	689a      	ldr	r2, [r3, #8]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	f022 0202 	bic.w	r2, r2, #2
 8002d24:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	6899      	ldr	r1, [r3, #8]
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	7e1b      	ldrb	r3, [r3, #24]
 8002d30:	005a      	lsls	r2, r3, #1
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	609a      	str	r2, [r3, #8]

  if (hadc->Init.DiscontinuousConvMode != DISABLE)
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d01b      	beq.n	8002d7c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));

    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	681b      	ldr	r3, [r3, #0]
 8002d48:	685a      	ldr	r2, [r3, #4]
 8002d4a:	687b      	ldr	r3, [r7, #4]
 8002d4c:	681b      	ldr	r3, [r3, #0]
 8002d4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002d52:	605a      	str	r2, [r3, #4]

    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	685a      	ldr	r2, [r3, #4]
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002d62:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	6859      	ldr	r1, [r3, #4]
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6e:	3b01      	subs	r3, #1
 8002d70:	035a      	lsls	r2, r3, #13
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	430a      	orrs	r2, r1
 8002d78:	605a      	str	r2, [r3, #4]
 8002d7a:	e007      	b.n	8002d8c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	685a      	ldr	r2, [r3, #4]
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002d8a:	605a      	str	r2, [r3, #4]
  }

  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002d9a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69db      	ldr	r3, [r3, #28]
 8002da6:	3b01      	subs	r3, #1
 8002da8:	051a      	lsls	r2, r3, #20
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	430a      	orrs	r2, r1
 8002db0:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002db2:	687b      	ldr	r3, [r7, #4]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	689a      	ldr	r2, [r3, #8]
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002dc0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	6899      	ldr	r1, [r3, #8]
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002dce:	025a      	lsls	r2, r3, #9
 8002dd0:	687b      	ldr	r3, [r7, #4]
 8002dd2:	681b      	ldr	r3, [r3, #0]
 8002dd4:	430a      	orrs	r2, r1
 8002dd6:	609a      	str	r2, [r3, #8]

  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	689a      	ldr	r2, [r3, #8]
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002de6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	6899      	ldr	r1, [r3, #8]
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	695b      	ldr	r3, [r3, #20]
 8002df2:	029a      	lsls	r2, r3, #10
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	430a      	orrs	r2, r1
 8002dfa:	609a      	str	r2, [r3, #8]
}
 8002dfc:	bf00      	nop
 8002dfe:	3714      	adds	r7, #20
 8002e00:	46bd      	mov	sp, r7
 8002e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e06:	4770      	bx	lr
 8002e08:	40012300 	.word	0x40012300
 8002e0c:	0f000001 	.word	0x0f000001

08002e10 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	; (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	; (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	6039      	str	r1, [r7, #0]
 8002e7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	db0a      	blt.n	8002e9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e88:	683b      	ldr	r3, [r7, #0]
 8002e8a:	b2da      	uxtb	r2, r3
 8002e8c:	490c      	ldr	r1, [pc, #48]	; (8002ec0 <__NVIC_SetPriority+0x4c>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	0112      	lsls	r2, r2, #4
 8002e94:	b2d2      	uxtb	r2, r2
 8002e96:	440b      	add	r3, r1
 8002e98:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e9c:	e00a      	b.n	8002eb4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	b2da      	uxtb	r2, r3
 8002ea2:	4908      	ldr	r1, [pc, #32]	; (8002ec4 <__NVIC_SetPriority+0x50>)
 8002ea4:	79fb      	ldrb	r3, [r7, #7]
 8002ea6:	f003 030f 	and.w	r3, r3, #15
 8002eaa:	3b04      	subs	r3, #4
 8002eac:	0112      	lsls	r2, r2, #4
 8002eae:	b2d2      	uxtb	r2, r2
 8002eb0:	440b      	add	r3, r1
 8002eb2:	761a      	strb	r2, [r3, #24]
}
 8002eb4:	bf00      	nop
 8002eb6:	370c      	adds	r7, #12
 8002eb8:	46bd      	mov	sp, r7
 8002eba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ebe:	4770      	bx	lr
 8002ec0:	e000e100 	.word	0xe000e100
 8002ec4:	e000ed00 	.word	0xe000ed00

08002ec8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ec8:	b480      	push	{r7}
 8002eca:	b089      	sub	sp, #36	; 0x24
 8002ecc:	af00      	add	r7, sp, #0
 8002ece:	60f8      	str	r0, [r7, #12]
 8002ed0:	60b9      	str	r1, [r7, #8]
 8002ed2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ed4:	68fb      	ldr	r3, [r7, #12]
 8002ed6:	f003 0307 	and.w	r3, r3, #7
 8002eda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002edc:	69fb      	ldr	r3, [r7, #28]
 8002ede:	f1c3 0307 	rsb	r3, r3, #7
 8002ee2:	2b04      	cmp	r3, #4
 8002ee4:	bf28      	it	cs
 8002ee6:	2304      	movcs	r3, #4
 8002ee8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002eea:	69fb      	ldr	r3, [r7, #28]
 8002eec:	3304      	adds	r3, #4
 8002eee:	2b06      	cmp	r3, #6
 8002ef0:	d902      	bls.n	8002ef8 <NVIC_EncodePriority+0x30>
 8002ef2:	69fb      	ldr	r3, [r7, #28]
 8002ef4:	3b03      	subs	r3, #3
 8002ef6:	e000      	b.n	8002efa <NVIC_EncodePriority+0x32>
 8002ef8:	2300      	movs	r3, #0
 8002efa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002efc:	f04f 32ff 	mov.w	r2, #4294967295
 8002f00:	69bb      	ldr	r3, [r7, #24]
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43da      	mvns	r2, r3
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	401a      	ands	r2, r3
 8002f0c:	697b      	ldr	r3, [r7, #20]
 8002f0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f10:	f04f 31ff 	mov.w	r1, #4294967295
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fa01 f303 	lsl.w	r3, r1, r3
 8002f1a:	43d9      	mvns	r1, r3
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f20:	4313      	orrs	r3, r2
         );
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	3724      	adds	r7, #36	; 0x24
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr
	...

08002f30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	b082      	sub	sp, #8
 8002f34:	af00      	add	r7, sp, #0
 8002f36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	3b01      	subs	r3, #1
 8002f3c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002f40:	d301      	bcc.n	8002f46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f42:	2301      	movs	r3, #1
 8002f44:	e00f      	b.n	8002f66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f46:	4a0a      	ldr	r2, [pc, #40]	; (8002f70 <SysTick_Config+0x40>)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	3b01      	subs	r3, #1
 8002f4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f4e:	210f      	movs	r1, #15
 8002f50:	f04f 30ff 	mov.w	r0, #4294967295
 8002f54:	f7ff ff8e 	bl	8002e74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f58:	4b05      	ldr	r3, [pc, #20]	; (8002f70 <SysTick_Config+0x40>)
 8002f5a:	2200      	movs	r2, #0
 8002f5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f5e:	4b04      	ldr	r3, [pc, #16]	; (8002f70 <SysTick_Config+0x40>)
 8002f60:	2207      	movs	r2, #7
 8002f62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f64:	2300      	movs	r3, #0
}
 8002f66:	4618      	mov	r0, r3
 8002f68:	3708      	adds	r7, #8
 8002f6a:	46bd      	mov	sp, r7
 8002f6c:	bd80      	pop	{r7, pc}
 8002f6e:	bf00      	nop
 8002f70:	e000e010 	.word	0xe000e010

08002f74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f74:	b580      	push	{r7, lr}
 8002f76:	b082      	sub	sp, #8
 8002f78:	af00      	add	r7, sp, #0
 8002f7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f7c:	6878      	ldr	r0, [r7, #4]
 8002f7e:	f7ff ff47 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002f82:	bf00      	nop
 8002f84:	3708      	adds	r7, #8
 8002f86:	46bd      	mov	sp, r7
 8002f88:	bd80      	pop	{r7, pc}

08002f8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f8a:	b580      	push	{r7, lr}
 8002f8c:	b086      	sub	sp, #24
 8002f8e:	af00      	add	r7, sp, #0
 8002f90:	4603      	mov	r3, r0
 8002f92:	60b9      	str	r1, [r7, #8]
 8002f94:	607a      	str	r2, [r7, #4]
 8002f96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f9c:	f7ff ff5c 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002fa0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002fa2:	687a      	ldr	r2, [r7, #4]
 8002fa4:	68b9      	ldr	r1, [r7, #8]
 8002fa6:	6978      	ldr	r0, [r7, #20]
 8002fa8:	f7ff ff8e 	bl	8002ec8 <NVIC_EncodePriority>
 8002fac:	4602      	mov	r2, r0
 8002fae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fb2:	4611      	mov	r1, r2
 8002fb4:	4618      	mov	r0, r3
 8002fb6:	f7ff ff5d 	bl	8002e74 <__NVIC_SetPriority>
}
 8002fba:	bf00      	nop
 8002fbc:	3718      	adds	r7, #24
 8002fbe:	46bd      	mov	sp, r7
 8002fc0:	bd80      	pop	{r7, pc}

08002fc2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fc2:	b580      	push	{r7, lr}
 8002fc4:	b082      	sub	sp, #8
 8002fc6:	af00      	add	r7, sp, #0
 8002fc8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fca:	6878      	ldr	r0, [r7, #4]
 8002fcc:	f7ff ffb0 	bl	8002f30 <SysTick_Config>
 8002fd0:	4603      	mov	r3, r0
}
 8002fd2:	4618      	mov	r0, r3
 8002fd4:	3708      	adds	r7, #8
 8002fd6:	46bd      	mov	sp, r7
 8002fd8:	bd80      	pop	{r7, pc}
	...

08002fdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fdc:	b480      	push	{r7}
 8002fde:	b089      	sub	sp, #36	; 0x24
 8002fe0:	af00      	add	r7, sp, #0
 8002fe2:	6078      	str	r0, [r7, #4]
 8002fe4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002fe6:	2300      	movs	r3, #0
 8002fe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002fea:	2300      	movs	r3, #0
 8002fec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002fee:	2300      	movs	r3, #0
 8002ff0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ff2:	2300      	movs	r3, #0
 8002ff4:	61fb      	str	r3, [r7, #28]
 8002ff6:	e16b      	b.n	80032d0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002ff8:	2201      	movs	r2, #1
 8002ffa:	69fb      	ldr	r3, [r7, #28]
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	697a      	ldr	r2, [r7, #20]
 8003008:	4013      	ands	r3, r2
 800300a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800300c:	693a      	ldr	r2, [r7, #16]
 800300e:	697b      	ldr	r3, [r7, #20]
 8003010:	429a      	cmp	r2, r3
 8003012:	f040 815a 	bne.w	80032ca <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003016:	683b      	ldr	r3, [r7, #0]
 8003018:	685b      	ldr	r3, [r3, #4]
 800301a:	f003 0303 	and.w	r3, r3, #3
 800301e:	2b01      	cmp	r3, #1
 8003020:	d005      	beq.n	800302e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	685b      	ldr	r3, [r3, #4]
 8003026:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800302a:	2b02      	cmp	r3, #2
 800302c:	d130      	bne.n	8003090 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003034:	69fb      	ldr	r3, [r7, #28]
 8003036:	005b      	lsls	r3, r3, #1
 8003038:	2203      	movs	r2, #3
 800303a:	fa02 f303 	lsl.w	r3, r2, r3
 800303e:	43db      	mvns	r3, r3
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	4013      	ands	r3, r2
 8003044:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003046:	683b      	ldr	r3, [r7, #0]
 8003048:	68da      	ldr	r2, [r3, #12]
 800304a:	69fb      	ldr	r3, [r7, #28]
 800304c:	005b      	lsls	r3, r3, #1
 800304e:	fa02 f303 	lsl.w	r3, r2, r3
 8003052:	69ba      	ldr	r2, [r7, #24]
 8003054:	4313      	orrs	r3, r2
 8003056:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	69ba      	ldr	r2, [r7, #24]
 800305c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003064:	2201      	movs	r2, #1
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa02 f303 	lsl.w	r3, r2, r3
 800306c:	43db      	mvns	r3, r3
 800306e:	69ba      	ldr	r2, [r7, #24]
 8003070:	4013      	ands	r3, r2
 8003072:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003074:	683b      	ldr	r3, [r7, #0]
 8003076:	685b      	ldr	r3, [r3, #4]
 8003078:	091b      	lsrs	r3, r3, #4
 800307a:	f003 0201 	and.w	r2, r3, #1
 800307e:	69fb      	ldr	r3, [r7, #28]
 8003080:	fa02 f303 	lsl.w	r3, r2, r3
 8003084:	69ba      	ldr	r2, [r7, #24]
 8003086:	4313      	orrs	r3, r2
 8003088:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	69ba      	ldr	r2, [r7, #24]
 800308e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003090:	683b      	ldr	r3, [r7, #0]
 8003092:	685b      	ldr	r3, [r3, #4]
 8003094:	f003 0303 	and.w	r3, r3, #3
 8003098:	2b03      	cmp	r3, #3
 800309a:	d017      	beq.n	80030cc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80030a2:	69fb      	ldr	r3, [r7, #28]
 80030a4:	005b      	lsls	r3, r3, #1
 80030a6:	2203      	movs	r2, #3
 80030a8:	fa02 f303 	lsl.w	r3, r2, r3
 80030ac:	43db      	mvns	r3, r3
 80030ae:	69ba      	ldr	r2, [r7, #24]
 80030b0:	4013      	ands	r3, r2
 80030b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80030b4:	683b      	ldr	r3, [r7, #0]
 80030b6:	689a      	ldr	r2, [r3, #8]
 80030b8:	69fb      	ldr	r3, [r7, #28]
 80030ba:	005b      	lsls	r3, r3, #1
 80030bc:	fa02 f303 	lsl.w	r3, r2, r3
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	4313      	orrs	r3, r2
 80030c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	69ba      	ldr	r2, [r7, #24]
 80030ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80030cc:	683b      	ldr	r3, [r7, #0]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f003 0303 	and.w	r3, r3, #3
 80030d4:	2b02      	cmp	r3, #2
 80030d6:	d123      	bne.n	8003120 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80030d8:	69fb      	ldr	r3, [r7, #28]
 80030da:	08da      	lsrs	r2, r3, #3
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	3208      	adds	r2, #8
 80030e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80030e4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80030e6:	69fb      	ldr	r3, [r7, #28]
 80030e8:	f003 0307 	and.w	r3, r3, #7
 80030ec:	009b      	lsls	r3, r3, #2
 80030ee:	220f      	movs	r2, #15
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	43db      	mvns	r3, r3
 80030f6:	69ba      	ldr	r2, [r7, #24]
 80030f8:	4013      	ands	r3, r2
 80030fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80030fc:	683b      	ldr	r3, [r7, #0]
 80030fe:	691a      	ldr	r2, [r3, #16]
 8003100:	69fb      	ldr	r3, [r7, #28]
 8003102:	f003 0307 	and.w	r3, r3, #7
 8003106:	009b      	lsls	r3, r3, #2
 8003108:	fa02 f303 	lsl.w	r3, r2, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4313      	orrs	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	08da      	lsrs	r2, r3, #3
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	3208      	adds	r2, #8
 800311a:	69b9      	ldr	r1, [r7, #24]
 800311c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003126:	69fb      	ldr	r3, [r7, #28]
 8003128:	005b      	lsls	r3, r3, #1
 800312a:	2203      	movs	r2, #3
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	43db      	mvns	r3, r3
 8003132:	69ba      	ldr	r2, [r7, #24]
 8003134:	4013      	ands	r3, r2
 8003136:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003138:	683b      	ldr	r3, [r7, #0]
 800313a:	685b      	ldr	r3, [r3, #4]
 800313c:	f003 0203 	and.w	r2, r3, #3
 8003140:	69fb      	ldr	r3, [r7, #28]
 8003142:	005b      	lsls	r3, r3, #1
 8003144:	fa02 f303 	lsl.w	r3, r2, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4313      	orrs	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	69ba      	ldr	r2, [r7, #24]
 8003152:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003154:	683b      	ldr	r3, [r7, #0]
 8003156:	685b      	ldr	r3, [r3, #4]
 8003158:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800315c:	2b00      	cmp	r3, #0
 800315e:	f000 80b4 	beq.w	80032ca <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003162:	2300      	movs	r3, #0
 8003164:	60fb      	str	r3, [r7, #12]
 8003166:	4b60      	ldr	r3, [pc, #384]	; (80032e8 <HAL_GPIO_Init+0x30c>)
 8003168:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800316a:	4a5f      	ldr	r2, [pc, #380]	; (80032e8 <HAL_GPIO_Init+0x30c>)
 800316c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003170:	6453      	str	r3, [r2, #68]	; 0x44
 8003172:	4b5d      	ldr	r3, [pc, #372]	; (80032e8 <HAL_GPIO_Init+0x30c>)
 8003174:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003176:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800317e:	4a5b      	ldr	r2, [pc, #364]	; (80032ec <HAL_GPIO_Init+0x310>)
 8003180:	69fb      	ldr	r3, [r7, #28]
 8003182:	089b      	lsrs	r3, r3, #2
 8003184:	3302      	adds	r3, #2
 8003186:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800318a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800318c:	69fb      	ldr	r3, [r7, #28]
 800318e:	f003 0303 	and.w	r3, r3, #3
 8003192:	009b      	lsls	r3, r3, #2
 8003194:	220f      	movs	r2, #15
 8003196:	fa02 f303 	lsl.w	r3, r2, r3
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	4a52      	ldr	r2, [pc, #328]	; (80032f0 <HAL_GPIO_Init+0x314>)
 80031a6:	4293      	cmp	r3, r2
 80031a8:	d02b      	beq.n	8003202 <HAL_GPIO_Init+0x226>
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	4a51      	ldr	r2, [pc, #324]	; (80032f4 <HAL_GPIO_Init+0x318>)
 80031ae:	4293      	cmp	r3, r2
 80031b0:	d025      	beq.n	80031fe <HAL_GPIO_Init+0x222>
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	4a50      	ldr	r2, [pc, #320]	; (80032f8 <HAL_GPIO_Init+0x31c>)
 80031b6:	4293      	cmp	r3, r2
 80031b8:	d01f      	beq.n	80031fa <HAL_GPIO_Init+0x21e>
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	4a4f      	ldr	r2, [pc, #316]	; (80032fc <HAL_GPIO_Init+0x320>)
 80031be:	4293      	cmp	r3, r2
 80031c0:	d019      	beq.n	80031f6 <HAL_GPIO_Init+0x21a>
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	4a4e      	ldr	r2, [pc, #312]	; (8003300 <HAL_GPIO_Init+0x324>)
 80031c6:	4293      	cmp	r3, r2
 80031c8:	d013      	beq.n	80031f2 <HAL_GPIO_Init+0x216>
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	4a4d      	ldr	r2, [pc, #308]	; (8003304 <HAL_GPIO_Init+0x328>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d00d      	beq.n	80031ee <HAL_GPIO_Init+0x212>
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	4a4c      	ldr	r2, [pc, #304]	; (8003308 <HAL_GPIO_Init+0x32c>)
 80031d6:	4293      	cmp	r3, r2
 80031d8:	d007      	beq.n	80031ea <HAL_GPIO_Init+0x20e>
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	4a4b      	ldr	r2, [pc, #300]	; (800330c <HAL_GPIO_Init+0x330>)
 80031de:	4293      	cmp	r3, r2
 80031e0:	d101      	bne.n	80031e6 <HAL_GPIO_Init+0x20a>
 80031e2:	2307      	movs	r3, #7
 80031e4:	e00e      	b.n	8003204 <HAL_GPIO_Init+0x228>
 80031e6:	2308      	movs	r3, #8
 80031e8:	e00c      	b.n	8003204 <HAL_GPIO_Init+0x228>
 80031ea:	2306      	movs	r3, #6
 80031ec:	e00a      	b.n	8003204 <HAL_GPIO_Init+0x228>
 80031ee:	2305      	movs	r3, #5
 80031f0:	e008      	b.n	8003204 <HAL_GPIO_Init+0x228>
 80031f2:	2304      	movs	r3, #4
 80031f4:	e006      	b.n	8003204 <HAL_GPIO_Init+0x228>
 80031f6:	2303      	movs	r3, #3
 80031f8:	e004      	b.n	8003204 <HAL_GPIO_Init+0x228>
 80031fa:	2302      	movs	r3, #2
 80031fc:	e002      	b.n	8003204 <HAL_GPIO_Init+0x228>
 80031fe:	2301      	movs	r3, #1
 8003200:	e000      	b.n	8003204 <HAL_GPIO_Init+0x228>
 8003202:	2300      	movs	r3, #0
 8003204:	69fa      	ldr	r2, [r7, #28]
 8003206:	f002 0203 	and.w	r2, r2, #3
 800320a:	0092      	lsls	r2, r2, #2
 800320c:	4093      	lsls	r3, r2
 800320e:	69ba      	ldr	r2, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003214:	4935      	ldr	r1, [pc, #212]	; (80032ec <HAL_GPIO_Init+0x310>)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	089b      	lsrs	r3, r3, #2
 800321a:	3302      	adds	r3, #2
 800321c:	69ba      	ldr	r2, [r7, #24]
 800321e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003222:	4b3b      	ldr	r3, [pc, #236]	; (8003310 <HAL_GPIO_Init+0x334>)
 8003224:	689b      	ldr	r3, [r3, #8]
 8003226:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	43db      	mvns	r3, r3
 800322c:	69ba      	ldr	r2, [r7, #24]
 800322e:	4013      	ands	r3, r2
 8003230:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800323a:	2b00      	cmp	r3, #0
 800323c:	d003      	beq.n	8003246 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800323e:	69ba      	ldr	r2, [r7, #24]
 8003240:	693b      	ldr	r3, [r7, #16]
 8003242:	4313      	orrs	r3, r2
 8003244:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003246:	4a32      	ldr	r2, [pc, #200]	; (8003310 <HAL_GPIO_Init+0x334>)
 8003248:	69bb      	ldr	r3, [r7, #24]
 800324a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800324c:	4b30      	ldr	r3, [pc, #192]	; (8003310 <HAL_GPIO_Init+0x334>)
 800324e:	68db      	ldr	r3, [r3, #12]
 8003250:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	43db      	mvns	r3, r3
 8003256:	69ba      	ldr	r2, [r7, #24]
 8003258:	4013      	ands	r3, r2
 800325a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800325c:	683b      	ldr	r3, [r7, #0]
 800325e:	685b      	ldr	r3, [r3, #4]
 8003260:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003264:	2b00      	cmp	r3, #0
 8003266:	d003      	beq.n	8003270 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003268:	69ba      	ldr	r2, [r7, #24]
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	4313      	orrs	r3, r2
 800326e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003270:	4a27      	ldr	r2, [pc, #156]	; (8003310 <HAL_GPIO_Init+0x334>)
 8003272:	69bb      	ldr	r3, [r7, #24]
 8003274:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003276:	4b26      	ldr	r3, [pc, #152]	; (8003310 <HAL_GPIO_Init+0x334>)
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800327c:	693b      	ldr	r3, [r7, #16]
 800327e:	43db      	mvns	r3, r3
 8003280:	69ba      	ldr	r2, [r7, #24]
 8003282:	4013      	ands	r3, r2
 8003284:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003286:	683b      	ldr	r3, [r7, #0]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d003      	beq.n	800329a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003292:	69ba      	ldr	r2, [r7, #24]
 8003294:	693b      	ldr	r3, [r7, #16]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800329a:	4a1d      	ldr	r2, [pc, #116]	; (8003310 <HAL_GPIO_Init+0x334>)
 800329c:	69bb      	ldr	r3, [r7, #24]
 800329e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80032a0:	4b1b      	ldr	r3, [pc, #108]	; (8003310 <HAL_GPIO_Init+0x334>)
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032a6:	693b      	ldr	r3, [r7, #16]
 80032a8:	43db      	mvns	r3, r3
 80032aa:	69ba      	ldr	r2, [r7, #24]
 80032ac:	4013      	ands	r3, r2
 80032ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80032b8:	2b00      	cmp	r3, #0
 80032ba:	d003      	beq.n	80032c4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80032bc:	69ba      	ldr	r2, [r7, #24]
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	4313      	orrs	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80032c4:	4a12      	ldr	r2, [pc, #72]	; (8003310 <HAL_GPIO_Init+0x334>)
 80032c6:	69bb      	ldr	r3, [r7, #24]
 80032c8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80032ca:	69fb      	ldr	r3, [r7, #28]
 80032cc:	3301      	adds	r3, #1
 80032ce:	61fb      	str	r3, [r7, #28]
 80032d0:	69fb      	ldr	r3, [r7, #28]
 80032d2:	2b0f      	cmp	r3, #15
 80032d4:	f67f ae90 	bls.w	8002ff8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80032d8:	bf00      	nop
 80032da:	bf00      	nop
 80032dc:	3724      	adds	r7, #36	; 0x24
 80032de:	46bd      	mov	sp, r7
 80032e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e4:	4770      	bx	lr
 80032e6:	bf00      	nop
 80032e8:	40023800 	.word	0x40023800
 80032ec:	40013800 	.word	0x40013800
 80032f0:	40020000 	.word	0x40020000
 80032f4:	40020400 	.word	0x40020400
 80032f8:	40020800 	.word	0x40020800
 80032fc:	40020c00 	.word	0x40020c00
 8003300:	40021000 	.word	0x40021000
 8003304:	40021400 	.word	0x40021400
 8003308:	40021800 	.word	0x40021800
 800330c:	40021c00 	.word	0x40021c00
 8003310:	40013c00 	.word	0x40013c00

08003314 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003314:	b480      	push	{r7}
 8003316:	b083      	sub	sp, #12
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]
 800331c:	460b      	mov	r3, r1
 800331e:	807b      	strh	r3, [r7, #2]
 8003320:	4613      	mov	r3, r2
 8003322:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003324:	787b      	ldrb	r3, [r7, #1]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d003      	beq.n	8003332 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800332a:	887a      	ldrh	r2, [r7, #2]
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003330:	e003      	b.n	800333a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003332:	887b      	ldrh	r3, [r7, #2]
 8003334:	041a      	lsls	r2, r3, #16
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	619a      	str	r2, [r3, #24]
}
 800333a:	bf00      	nop
 800333c:	370c      	adds	r7, #12
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b084      	sub	sp, #16
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	2b00      	cmp	r3, #0
 8003354:	d101      	bne.n	800335a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003356:	2301      	movs	r3, #1
 8003358:	e12b      	b.n	80035b2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003360:	b2db      	uxtb	r3, r3
 8003362:	2b00      	cmp	r3, #0
 8003364:	d106      	bne.n	8003374 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	2200      	movs	r2, #0
 800336a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800336e:	6878      	ldr	r0, [r7, #4]
 8003370:	f7fe fde6 	bl	8001f40 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2224      	movs	r2, #36	; 0x24
 8003378:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	681a      	ldr	r2, [r3, #0]
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	f022 0201 	bic.w	r2, r2, #1
 800338a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800338c:	687b      	ldr	r3, [r7, #4]
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	681a      	ldr	r2, [r3, #0]
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800339a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	681b      	ldr	r3, [r3, #0]
 80033a0:	681a      	ldr	r2, [r3, #0]
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80033aa:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80033ac:	f000 fd40 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 80033b0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	685b      	ldr	r3, [r3, #4]
 80033b6:	4a81      	ldr	r2, [pc, #516]	; (80035bc <HAL_I2C_Init+0x274>)
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d807      	bhi.n	80033cc <HAL_I2C_Init+0x84>
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	4a80      	ldr	r2, [pc, #512]	; (80035c0 <HAL_I2C_Init+0x278>)
 80033c0:	4293      	cmp	r3, r2
 80033c2:	bf94      	ite	ls
 80033c4:	2301      	movls	r3, #1
 80033c6:	2300      	movhi	r3, #0
 80033c8:	b2db      	uxtb	r3, r3
 80033ca:	e006      	b.n	80033da <HAL_I2C_Init+0x92>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	4a7d      	ldr	r2, [pc, #500]	; (80035c4 <HAL_I2C_Init+0x27c>)
 80033d0:	4293      	cmp	r3, r2
 80033d2:	bf94      	ite	ls
 80033d4:	2301      	movls	r3, #1
 80033d6:	2300      	movhi	r3, #0
 80033d8:	b2db      	uxtb	r3, r3
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d001      	beq.n	80033e2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80033de:	2301      	movs	r3, #1
 80033e0:	e0e7      	b.n	80035b2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	4a78      	ldr	r2, [pc, #480]	; (80035c8 <HAL_I2C_Init+0x280>)
 80033e6:	fba2 2303 	umull	r2, r3, r2, r3
 80033ea:	0c9b      	lsrs	r3, r3, #18
 80033ec:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	685b      	ldr	r3, [r3, #4]
 80033f4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	430a      	orrs	r2, r1
 8003400:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	681b      	ldr	r3, [r3, #0]
 8003406:	6a1b      	ldr	r3, [r3, #32]
 8003408:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	685b      	ldr	r3, [r3, #4]
 8003410:	4a6a      	ldr	r2, [pc, #424]	; (80035bc <HAL_I2C_Init+0x274>)
 8003412:	4293      	cmp	r3, r2
 8003414:	d802      	bhi.n	800341c <HAL_I2C_Init+0xd4>
 8003416:	68bb      	ldr	r3, [r7, #8]
 8003418:	3301      	adds	r3, #1
 800341a:	e009      	b.n	8003430 <HAL_I2C_Init+0xe8>
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003422:	fb02 f303 	mul.w	r3, r2, r3
 8003426:	4a69      	ldr	r2, [pc, #420]	; (80035cc <HAL_I2C_Init+0x284>)
 8003428:	fba2 2303 	umull	r2, r3, r2, r3
 800342c:	099b      	lsrs	r3, r3, #6
 800342e:	3301      	adds	r3, #1
 8003430:	687a      	ldr	r2, [r7, #4]
 8003432:	6812      	ldr	r2, [r2, #0]
 8003434:	430b      	orrs	r3, r1
 8003436:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	69db      	ldr	r3, [r3, #28]
 800343e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003442:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	495c      	ldr	r1, [pc, #368]	; (80035bc <HAL_I2C_Init+0x274>)
 800344c:	428b      	cmp	r3, r1
 800344e:	d819      	bhi.n	8003484 <HAL_I2C_Init+0x13c>
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	1e59      	subs	r1, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	685b      	ldr	r3, [r3, #4]
 8003458:	005b      	lsls	r3, r3, #1
 800345a:	fbb1 f3f3 	udiv	r3, r1, r3
 800345e:	1c59      	adds	r1, r3, #1
 8003460:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003464:	400b      	ands	r3, r1
 8003466:	2b00      	cmp	r3, #0
 8003468:	d00a      	beq.n	8003480 <HAL_I2C_Init+0x138>
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	1e59      	subs	r1, r3, #1
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	685b      	ldr	r3, [r3, #4]
 8003472:	005b      	lsls	r3, r3, #1
 8003474:	fbb1 f3f3 	udiv	r3, r1, r3
 8003478:	3301      	adds	r3, #1
 800347a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800347e:	e051      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 8003480:	2304      	movs	r3, #4
 8003482:	e04f      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	689b      	ldr	r3, [r3, #8]
 8003488:	2b00      	cmp	r3, #0
 800348a:	d111      	bne.n	80034b0 <HAL_I2C_Init+0x168>
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	1e58      	subs	r0, r3, #1
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6859      	ldr	r1, [r3, #4]
 8003494:	460b      	mov	r3, r1
 8003496:	005b      	lsls	r3, r3, #1
 8003498:	440b      	add	r3, r1
 800349a:	fbb0 f3f3 	udiv	r3, r0, r3
 800349e:	3301      	adds	r3, #1
 80034a0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	bf0c      	ite	eq
 80034a8:	2301      	moveq	r3, #1
 80034aa:	2300      	movne	r3, #0
 80034ac:	b2db      	uxtb	r3, r3
 80034ae:	e012      	b.n	80034d6 <HAL_I2C_Init+0x18e>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	1e58      	subs	r0, r3, #1
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	6859      	ldr	r1, [r3, #4]
 80034b8:	460b      	mov	r3, r1
 80034ba:	009b      	lsls	r3, r3, #2
 80034bc:	440b      	add	r3, r1
 80034be:	0099      	lsls	r1, r3, #2
 80034c0:	440b      	add	r3, r1
 80034c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80034c6:	3301      	adds	r3, #1
 80034c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	bf0c      	ite	eq
 80034d0:	2301      	moveq	r3, #1
 80034d2:	2300      	movne	r3, #0
 80034d4:	b2db      	uxtb	r3, r3
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d001      	beq.n	80034de <HAL_I2C_Init+0x196>
 80034da:	2301      	movs	r3, #1
 80034dc:	e022      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	689b      	ldr	r3, [r3, #8]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d10e      	bne.n	8003504 <HAL_I2C_Init+0x1bc>
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	1e58      	subs	r0, r3, #1
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6859      	ldr	r1, [r3, #4]
 80034ee:	460b      	mov	r3, r1
 80034f0:	005b      	lsls	r3, r3, #1
 80034f2:	440b      	add	r3, r1
 80034f4:	fbb0 f3f3 	udiv	r3, r0, r3
 80034f8:	3301      	adds	r3, #1
 80034fa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80034fe:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003502:	e00f      	b.n	8003524 <HAL_I2C_Init+0x1dc>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	1e58      	subs	r0, r3, #1
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	6859      	ldr	r1, [r3, #4]
 800350c:	460b      	mov	r3, r1
 800350e:	009b      	lsls	r3, r3, #2
 8003510:	440b      	add	r3, r1
 8003512:	0099      	lsls	r1, r3, #2
 8003514:	440b      	add	r3, r1
 8003516:	fbb0 f3f3 	udiv	r3, r0, r3
 800351a:	3301      	adds	r3, #1
 800351c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003520:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003524:	6879      	ldr	r1, [r7, #4]
 8003526:	6809      	ldr	r1, [r1, #0]
 8003528:	4313      	orrs	r3, r2
 800352a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	69da      	ldr	r2, [r3, #28]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6a1b      	ldr	r3, [r3, #32]
 800353e:	431a      	orrs	r2, r3
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	430a      	orrs	r2, r1
 8003546:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	689b      	ldr	r3, [r3, #8]
 800354e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003552:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003556:	687a      	ldr	r2, [r7, #4]
 8003558:	6911      	ldr	r1, [r2, #16]
 800355a:	687a      	ldr	r2, [r7, #4]
 800355c:	68d2      	ldr	r2, [r2, #12]
 800355e:	4311      	orrs	r1, r2
 8003560:	687a      	ldr	r2, [r7, #4]
 8003562:	6812      	ldr	r2, [r2, #0]
 8003564:	430b      	orrs	r3, r1
 8003566:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	68db      	ldr	r3, [r3, #12]
 800356e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	695a      	ldr	r2, [r3, #20]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	699b      	ldr	r3, [r3, #24]
 800357a:	431a      	orrs	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	681a      	ldr	r2, [r3, #0]
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	f042 0201 	orr.w	r2, r2, #1
 8003592:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	2200      	movs	r2, #0
 8003598:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	2220      	movs	r2, #32
 800359e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	2200      	movs	r2, #0
 80035a6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2200      	movs	r2, #0
 80035ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80035b0:	2300      	movs	r3, #0
}
 80035b2:	4618      	mov	r0, r3
 80035b4:	3710      	adds	r7, #16
 80035b6:	46bd      	mov	sp, r7
 80035b8:	bd80      	pop	{r7, pc}
 80035ba:	bf00      	nop
 80035bc:	000186a0 	.word	0x000186a0
 80035c0:	001e847f 	.word	0x001e847f
 80035c4:	003d08ff 	.word	0x003d08ff
 80035c8:	431bde83 	.word	0x431bde83
 80035cc:	10624dd3 	.word	0x10624dd3

080035d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	b086      	sub	sp, #24
 80035d4:	af00      	add	r7, sp, #0
 80035d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e267      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d075      	beq.n	80036da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80035ee:	4b88      	ldr	r3, [pc, #544]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80035f0:	689b      	ldr	r3, [r3, #8]
 80035f2:	f003 030c 	and.w	r3, r3, #12
 80035f6:	2b04      	cmp	r3, #4
 80035f8:	d00c      	beq.n	8003614 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035fa:	4b85      	ldr	r3, [pc, #532]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80035fc:	689b      	ldr	r3, [r3, #8]
 80035fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003602:	2b08      	cmp	r3, #8
 8003604:	d112      	bne.n	800362c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003606:	4b82      	ldr	r3, [pc, #520]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800360e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003612:	d10b      	bne.n	800362c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003614:	4b7e      	ldr	r3, [pc, #504]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800361c:	2b00      	cmp	r3, #0
 800361e:	d05b      	beq.n	80036d8 <HAL_RCC_OscConfig+0x108>
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	685b      	ldr	r3, [r3, #4]
 8003624:	2b00      	cmp	r3, #0
 8003626:	d157      	bne.n	80036d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e242      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003634:	d106      	bne.n	8003644 <HAL_RCC_OscConfig+0x74>
 8003636:	4b76      	ldr	r3, [pc, #472]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	4a75      	ldr	r2, [pc, #468]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800363c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003640:	6013      	str	r3, [r2, #0]
 8003642:	e01d      	b.n	8003680 <HAL_RCC_OscConfig+0xb0>
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	685b      	ldr	r3, [r3, #4]
 8003648:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800364c:	d10c      	bne.n	8003668 <HAL_RCC_OscConfig+0x98>
 800364e:	4b70      	ldr	r3, [pc, #448]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	4a6f      	ldr	r2, [pc, #444]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003654:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003658:	6013      	str	r3, [r2, #0]
 800365a:	4b6d      	ldr	r3, [pc, #436]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	4a6c      	ldr	r2, [pc, #432]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003660:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003664:	6013      	str	r3, [r2, #0]
 8003666:	e00b      	b.n	8003680 <HAL_RCC_OscConfig+0xb0>
 8003668:	4b69      	ldr	r3, [pc, #420]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a68      	ldr	r2, [pc, #416]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800366e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003672:	6013      	str	r3, [r2, #0]
 8003674:	4b66      	ldr	r3, [pc, #408]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	4a65      	ldr	r2, [pc, #404]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800367a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800367e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	685b      	ldr	r3, [r3, #4]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d013      	beq.n	80036b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003688:	f7fe ffc6 	bl	8002618 <HAL_GetTick>
 800368c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800368e:	e008      	b.n	80036a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003690:	f7fe ffc2 	bl	8002618 <HAL_GetTick>
 8003694:	4602      	mov	r2, r0
 8003696:	693b      	ldr	r3, [r7, #16]
 8003698:	1ad3      	subs	r3, r2, r3
 800369a:	2b64      	cmp	r3, #100	; 0x64
 800369c:	d901      	bls.n	80036a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800369e:	2303      	movs	r3, #3
 80036a0:	e207      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80036a2:	4b5b      	ldr	r3, [pc, #364]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036aa:	2b00      	cmp	r3, #0
 80036ac:	d0f0      	beq.n	8003690 <HAL_RCC_OscConfig+0xc0>
 80036ae:	e014      	b.n	80036da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036b0:	f7fe ffb2 	bl	8002618 <HAL_GetTick>
 80036b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036b6:	e008      	b.n	80036ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80036b8:	f7fe ffae 	bl	8002618 <HAL_GetTick>
 80036bc:	4602      	mov	r2, r0
 80036be:	693b      	ldr	r3, [r7, #16]
 80036c0:	1ad3      	subs	r3, r2, r3
 80036c2:	2b64      	cmp	r3, #100	; 0x64
 80036c4:	d901      	bls.n	80036ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80036c6:	2303      	movs	r3, #3
 80036c8:	e1f3      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80036ca:	4b51      	ldr	r3, [pc, #324]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036cc:	681b      	ldr	r3, [r3, #0]
 80036ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80036d2:	2b00      	cmp	r3, #0
 80036d4:	d1f0      	bne.n	80036b8 <HAL_RCC_OscConfig+0xe8>
 80036d6:	e000      	b.n	80036da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d063      	beq.n	80037ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036e6:	4b4a      	ldr	r3, [pc, #296]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036e8:	689b      	ldr	r3, [r3, #8]
 80036ea:	f003 030c 	and.w	r3, r3, #12
 80036ee:	2b00      	cmp	r3, #0
 80036f0:	d00b      	beq.n	800370a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036f2:	4b47      	ldr	r3, [pc, #284]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80036fa:	2b08      	cmp	r3, #8
 80036fc:	d11c      	bne.n	8003738 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036fe:	4b44      	ldr	r3, [pc, #272]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003700:	685b      	ldr	r3, [r3, #4]
 8003702:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003706:	2b00      	cmp	r3, #0
 8003708:	d116      	bne.n	8003738 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800370a:	4b41      	ldr	r3, [pc, #260]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	f003 0302 	and.w	r3, r3, #2
 8003712:	2b00      	cmp	r3, #0
 8003714:	d005      	beq.n	8003722 <HAL_RCC_OscConfig+0x152>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	68db      	ldr	r3, [r3, #12]
 800371a:	2b01      	cmp	r3, #1
 800371c:	d001      	beq.n	8003722 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800371e:	2301      	movs	r3, #1
 8003720:	e1c7      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003722:	4b3b      	ldr	r3, [pc, #236]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	691b      	ldr	r3, [r3, #16]
 800372e:	00db      	lsls	r3, r3, #3
 8003730:	4937      	ldr	r1, [pc, #220]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003732:	4313      	orrs	r3, r2
 8003734:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003736:	e03a      	b.n	80037ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	68db      	ldr	r3, [r3, #12]
 800373c:	2b00      	cmp	r3, #0
 800373e:	d020      	beq.n	8003782 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003740:	4b34      	ldr	r3, [pc, #208]	; (8003814 <HAL_RCC_OscConfig+0x244>)
 8003742:	2201      	movs	r2, #1
 8003744:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003746:	f7fe ff67 	bl	8002618 <HAL_GetTick>
 800374a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800374c:	e008      	b.n	8003760 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800374e:	f7fe ff63 	bl	8002618 <HAL_GetTick>
 8003752:	4602      	mov	r2, r0
 8003754:	693b      	ldr	r3, [r7, #16]
 8003756:	1ad3      	subs	r3, r2, r3
 8003758:	2b02      	cmp	r3, #2
 800375a:	d901      	bls.n	8003760 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800375c:	2303      	movs	r3, #3
 800375e:	e1a8      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003760:	4b2b      	ldr	r3, [pc, #172]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	f003 0302 	and.w	r3, r3, #2
 8003768:	2b00      	cmp	r3, #0
 800376a:	d0f0      	beq.n	800374e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800376c:	4b28      	ldr	r3, [pc, #160]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	691b      	ldr	r3, [r3, #16]
 8003778:	00db      	lsls	r3, r3, #3
 800377a:	4925      	ldr	r1, [pc, #148]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 800377c:	4313      	orrs	r3, r2
 800377e:	600b      	str	r3, [r1, #0]
 8003780:	e015      	b.n	80037ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003782:	4b24      	ldr	r3, [pc, #144]	; (8003814 <HAL_RCC_OscConfig+0x244>)
 8003784:	2200      	movs	r2, #0
 8003786:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003788:	f7fe ff46 	bl	8002618 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800378e:	e008      	b.n	80037a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003790:	f7fe ff42 	bl	8002618 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	2b02      	cmp	r3, #2
 800379c:	d901      	bls.n	80037a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800379e:	2303      	movs	r3, #3
 80037a0:	e187      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80037a2:	4b1b      	ldr	r3, [pc, #108]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	f003 0302 	and.w	r3, r3, #2
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d1f0      	bne.n	8003790 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f003 0308 	and.w	r3, r3, #8
 80037b6:	2b00      	cmp	r3, #0
 80037b8:	d036      	beq.n	8003828 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	695b      	ldr	r3, [r3, #20]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d016      	beq.n	80037f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80037c2:	4b15      	ldr	r3, [pc, #84]	; (8003818 <HAL_RCC_OscConfig+0x248>)
 80037c4:	2201      	movs	r2, #1
 80037c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037c8:	f7fe ff26 	bl	8002618 <HAL_GetTick>
 80037cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037ce:	e008      	b.n	80037e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037d0:	f7fe ff22 	bl	8002618 <HAL_GetTick>
 80037d4:	4602      	mov	r2, r0
 80037d6:	693b      	ldr	r3, [r7, #16]
 80037d8:	1ad3      	subs	r3, r2, r3
 80037da:	2b02      	cmp	r3, #2
 80037dc:	d901      	bls.n	80037e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037de:	2303      	movs	r3, #3
 80037e0:	e167      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037e2:	4b0b      	ldr	r3, [pc, #44]	; (8003810 <HAL_RCC_OscConfig+0x240>)
 80037e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d0f0      	beq.n	80037d0 <HAL_RCC_OscConfig+0x200>
 80037ee:	e01b      	b.n	8003828 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037f0:	4b09      	ldr	r3, [pc, #36]	; (8003818 <HAL_RCC_OscConfig+0x248>)
 80037f2:	2200      	movs	r2, #0
 80037f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037f6:	f7fe ff0f 	bl	8002618 <HAL_GetTick>
 80037fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037fc:	e00e      	b.n	800381c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80037fe:	f7fe ff0b 	bl	8002618 <HAL_GetTick>
 8003802:	4602      	mov	r2, r0
 8003804:	693b      	ldr	r3, [r7, #16]
 8003806:	1ad3      	subs	r3, r2, r3
 8003808:	2b02      	cmp	r3, #2
 800380a:	d907      	bls.n	800381c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800380c:	2303      	movs	r3, #3
 800380e:	e150      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
 8003810:	40023800 	.word	0x40023800
 8003814:	42470000 	.word	0x42470000
 8003818:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800381c:	4b88      	ldr	r3, [pc, #544]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800381e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003820:	f003 0302 	and.w	r3, r3, #2
 8003824:	2b00      	cmp	r3, #0
 8003826:	d1ea      	bne.n	80037fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 0304 	and.w	r3, r3, #4
 8003830:	2b00      	cmp	r3, #0
 8003832:	f000 8097 	beq.w	8003964 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003836:	2300      	movs	r3, #0
 8003838:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800383a:	4b81      	ldr	r3, [pc, #516]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003842:	2b00      	cmp	r3, #0
 8003844:	d10f      	bne.n	8003866 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003846:	2300      	movs	r3, #0
 8003848:	60bb      	str	r3, [r7, #8]
 800384a:	4b7d      	ldr	r3, [pc, #500]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800384c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800384e:	4a7c      	ldr	r2, [pc, #496]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003850:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003854:	6413      	str	r3, [r2, #64]	; 0x40
 8003856:	4b7a      	ldr	r3, [pc, #488]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800385e:	60bb      	str	r3, [r7, #8]
 8003860:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003862:	2301      	movs	r3, #1
 8003864:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003866:	4b77      	ldr	r3, [pc, #476]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800386e:	2b00      	cmp	r3, #0
 8003870:	d118      	bne.n	80038a4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003872:	4b74      	ldr	r3, [pc, #464]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4a73      	ldr	r2, [pc, #460]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 8003878:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800387c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800387e:	f7fe fecb 	bl	8002618 <HAL_GetTick>
 8003882:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003884:	e008      	b.n	8003898 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003886:	f7fe fec7 	bl	8002618 <HAL_GetTick>
 800388a:	4602      	mov	r2, r0
 800388c:	693b      	ldr	r3, [r7, #16]
 800388e:	1ad3      	subs	r3, r2, r3
 8003890:	2b02      	cmp	r3, #2
 8003892:	d901      	bls.n	8003898 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003894:	2303      	movs	r3, #3
 8003896:	e10c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003898:	4b6a      	ldr	r3, [pc, #424]	; (8003a44 <HAL_RCC_OscConfig+0x474>)
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d0f0      	beq.n	8003886 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	2b01      	cmp	r3, #1
 80038aa:	d106      	bne.n	80038ba <HAL_RCC_OscConfig+0x2ea>
 80038ac:	4b64      	ldr	r3, [pc, #400]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038b0:	4a63      	ldr	r2, [pc, #396]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038b2:	f043 0301 	orr.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	; 0x70
 80038b8:	e01c      	b.n	80038f4 <HAL_RCC_OscConfig+0x324>
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	2b05      	cmp	r3, #5
 80038c0:	d10c      	bne.n	80038dc <HAL_RCC_OscConfig+0x30c>
 80038c2:	4b5f      	ldr	r3, [pc, #380]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038c4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038c6:	4a5e      	ldr	r2, [pc, #376]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038c8:	f043 0304 	orr.w	r3, r3, #4
 80038cc:	6713      	str	r3, [r2, #112]	; 0x70
 80038ce:	4b5c      	ldr	r3, [pc, #368]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038d2:	4a5b      	ldr	r2, [pc, #364]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038d4:	f043 0301 	orr.w	r3, r3, #1
 80038d8:	6713      	str	r3, [r2, #112]	; 0x70
 80038da:	e00b      	b.n	80038f4 <HAL_RCC_OscConfig+0x324>
 80038dc:	4b58      	ldr	r3, [pc, #352]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038e0:	4a57      	ldr	r2, [pc, #348]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038e2:	f023 0301 	bic.w	r3, r3, #1
 80038e6:	6713      	str	r3, [r2, #112]	; 0x70
 80038e8:	4b55      	ldr	r3, [pc, #340]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80038ec:	4a54      	ldr	r2, [pc, #336]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80038ee:	f023 0304 	bic.w	r3, r3, #4
 80038f2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	689b      	ldr	r3, [r3, #8]
 80038f8:	2b00      	cmp	r3, #0
 80038fa:	d015      	beq.n	8003928 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038fc:	f7fe fe8c 	bl	8002618 <HAL_GetTick>
 8003900:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003902:	e00a      	b.n	800391a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003904:	f7fe fe88 	bl	8002618 <HAL_GetTick>
 8003908:	4602      	mov	r2, r0
 800390a:	693b      	ldr	r3, [r7, #16]
 800390c:	1ad3      	subs	r3, r2, r3
 800390e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003912:	4293      	cmp	r3, r2
 8003914:	d901      	bls.n	800391a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003916:	2303      	movs	r3, #3
 8003918:	e0cb      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800391a:	4b49      	ldr	r3, [pc, #292]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800391c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800391e:	f003 0302 	and.w	r3, r3, #2
 8003922:	2b00      	cmp	r3, #0
 8003924:	d0ee      	beq.n	8003904 <HAL_RCC_OscConfig+0x334>
 8003926:	e014      	b.n	8003952 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003928:	f7fe fe76 	bl	8002618 <HAL_GetTick>
 800392c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800392e:	e00a      	b.n	8003946 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003930:	f7fe fe72 	bl	8002618 <HAL_GetTick>
 8003934:	4602      	mov	r2, r0
 8003936:	693b      	ldr	r3, [r7, #16]
 8003938:	1ad3      	subs	r3, r2, r3
 800393a:	f241 3288 	movw	r2, #5000	; 0x1388
 800393e:	4293      	cmp	r3, r2
 8003940:	d901      	bls.n	8003946 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003942:	2303      	movs	r3, #3
 8003944:	e0b5      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003946:	4b3e      	ldr	r3, [pc, #248]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003948:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800394a:	f003 0302 	and.w	r3, r3, #2
 800394e:	2b00      	cmp	r3, #0
 8003950:	d1ee      	bne.n	8003930 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003952:	7dfb      	ldrb	r3, [r7, #23]
 8003954:	2b01      	cmp	r3, #1
 8003956:	d105      	bne.n	8003964 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003958:	4b39      	ldr	r3, [pc, #228]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800395a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395c:	4a38      	ldr	r2, [pc, #224]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 800395e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003962:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	699b      	ldr	r3, [r3, #24]
 8003968:	2b00      	cmp	r3, #0
 800396a:	f000 80a1 	beq.w	8003ab0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800396e:	4b34      	ldr	r3, [pc, #208]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003970:	689b      	ldr	r3, [r3, #8]
 8003972:	f003 030c 	and.w	r3, r3, #12
 8003976:	2b08      	cmp	r3, #8
 8003978:	d05c      	beq.n	8003a34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	699b      	ldr	r3, [r3, #24]
 800397e:	2b02      	cmp	r3, #2
 8003980:	d141      	bne.n	8003a06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003982:	4b31      	ldr	r3, [pc, #196]	; (8003a48 <HAL_RCC_OscConfig+0x478>)
 8003984:	2200      	movs	r2, #0
 8003986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003988:	f7fe fe46 	bl	8002618 <HAL_GetTick>
 800398c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800398e:	e008      	b.n	80039a2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003990:	f7fe fe42 	bl	8002618 <HAL_GetTick>
 8003994:	4602      	mov	r2, r0
 8003996:	693b      	ldr	r3, [r7, #16]
 8003998:	1ad3      	subs	r3, r2, r3
 800399a:	2b02      	cmp	r3, #2
 800399c:	d901      	bls.n	80039a2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800399e:	2303      	movs	r3, #3
 80039a0:	e087      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039a2:	4b27      	ldr	r3, [pc, #156]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d1f0      	bne.n	8003990 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	69da      	ldr	r2, [r3, #28]
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6a1b      	ldr	r3, [r3, #32]
 80039b6:	431a      	orrs	r2, r3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039bc:	019b      	lsls	r3, r3, #6
 80039be:	431a      	orrs	r2, r3
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039c4:	085b      	lsrs	r3, r3, #1
 80039c6:	3b01      	subs	r3, #1
 80039c8:	041b      	lsls	r3, r3, #16
 80039ca:	431a      	orrs	r2, r3
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039d0:	061b      	lsls	r3, r3, #24
 80039d2:	491b      	ldr	r1, [pc, #108]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039d4:	4313      	orrs	r3, r2
 80039d6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039d8:	4b1b      	ldr	r3, [pc, #108]	; (8003a48 <HAL_RCC_OscConfig+0x478>)
 80039da:	2201      	movs	r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039de:	f7fe fe1b 	bl	8002618 <HAL_GetTick>
 80039e2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039e4:	e008      	b.n	80039f8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80039e6:	f7fe fe17 	bl	8002618 <HAL_GetTick>
 80039ea:	4602      	mov	r2, r0
 80039ec:	693b      	ldr	r3, [r7, #16]
 80039ee:	1ad3      	subs	r3, r2, r3
 80039f0:	2b02      	cmp	r3, #2
 80039f2:	d901      	bls.n	80039f8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039f4:	2303      	movs	r3, #3
 80039f6:	e05c      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039f8:	4b11      	ldr	r3, [pc, #68]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d0f0      	beq.n	80039e6 <HAL_RCC_OscConfig+0x416>
 8003a04:	e054      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003a06:	4b10      	ldr	r3, [pc, #64]	; (8003a48 <HAL_RCC_OscConfig+0x478>)
 8003a08:	2200      	movs	r2, #0
 8003a0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003a0c:	f7fe fe04 	bl	8002618 <HAL_GetTick>
 8003a10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a12:	e008      	b.n	8003a26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003a14:	f7fe fe00 	bl	8002618 <HAL_GetTick>
 8003a18:	4602      	mov	r2, r0
 8003a1a:	693b      	ldr	r3, [r7, #16]
 8003a1c:	1ad3      	subs	r3, r2, r3
 8003a1e:	2b02      	cmp	r3, #2
 8003a20:	d901      	bls.n	8003a26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003a22:	2303      	movs	r3, #3
 8003a24:	e045      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003a26:	4b06      	ldr	r3, [pc, #24]	; (8003a40 <HAL_RCC_OscConfig+0x470>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d1f0      	bne.n	8003a14 <HAL_RCC_OscConfig+0x444>
 8003a32:	e03d      	b.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	699b      	ldr	r3, [r3, #24]
 8003a38:	2b01      	cmp	r3, #1
 8003a3a:	d107      	bne.n	8003a4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a3c:	2301      	movs	r3, #1
 8003a3e:	e038      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
 8003a40:	40023800 	.word	0x40023800
 8003a44:	40007000 	.word	0x40007000
 8003a48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a4c:	4b1b      	ldr	r3, [pc, #108]	; (8003abc <HAL_RCC_OscConfig+0x4ec>)
 8003a4e:	685b      	ldr	r3, [r3, #4]
 8003a50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	699b      	ldr	r3, [r3, #24]
 8003a56:	2b01      	cmp	r3, #1
 8003a58:	d028      	beq.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a64:	429a      	cmp	r2, r3
 8003a66:	d121      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a72:	429a      	cmp	r2, r3
 8003a74:	d11a      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a76:	68fa      	ldr	r2, [r7, #12]
 8003a78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003a7c:	4013      	ands	r3, r2
 8003a7e:	687a      	ldr	r2, [r7, #4]
 8003a80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003a82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d111      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a92:	085b      	lsrs	r3, r3, #1
 8003a94:	3b01      	subs	r3, #1
 8003a96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a98:	429a      	cmp	r2, r3
 8003a9a:	d107      	bne.n	8003aac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003aa6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d001      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003aac:	2301      	movs	r3, #1
 8003aae:	e000      	b.n	8003ab2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003ab0:	2300      	movs	r3, #0
}
 8003ab2:	4618      	mov	r0, r3
 8003ab4:	3718      	adds	r7, #24
 8003ab6:	46bd      	mov	sp, r7
 8003ab8:	bd80      	pop	{r7, pc}
 8003aba:	bf00      	nop
 8003abc:	40023800 	.word	0x40023800

08003ac0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	b084      	sub	sp, #16
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
 8003ac8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2b00      	cmp	r3, #0
 8003ace:	d101      	bne.n	8003ad4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003ad0:	2301      	movs	r3, #1
 8003ad2:	e0cc      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003ad4:	4b68      	ldr	r3, [pc, #416]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	f003 0307 	and.w	r3, r3, #7
 8003adc:	683a      	ldr	r2, [r7, #0]
 8003ade:	429a      	cmp	r2, r3
 8003ae0:	d90c      	bls.n	8003afc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ae2:	4b65      	ldr	r3, [pc, #404]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003ae4:	683a      	ldr	r2, [r7, #0]
 8003ae6:	b2d2      	uxtb	r2, r2
 8003ae8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aea:	4b63      	ldr	r3, [pc, #396]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003aec:	681b      	ldr	r3, [r3, #0]
 8003aee:	f003 0307 	and.w	r3, r3, #7
 8003af2:	683a      	ldr	r2, [r7, #0]
 8003af4:	429a      	cmp	r2, r3
 8003af6:	d001      	beq.n	8003afc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003af8:	2301      	movs	r3, #1
 8003afa:	e0b8      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	f003 0302 	and.w	r3, r3, #2
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d020      	beq.n	8003b4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f003 0304 	and.w	r3, r3, #4
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d005      	beq.n	8003b20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b14:	4b59      	ldr	r3, [pc, #356]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	689b      	ldr	r3, [r3, #8]
 8003b18:	4a58      	ldr	r2, [pc, #352]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003b1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f003 0308 	and.w	r3, r3, #8
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d005      	beq.n	8003b38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003b2c:	4b53      	ldr	r3, [pc, #332]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	4a52      	ldr	r2, [pc, #328]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003b36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b38:	4b50      	ldr	r3, [pc, #320]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b3a:	689b      	ldr	r3, [r3, #8]
 8003b3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	494d      	ldr	r1, [pc, #308]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	f003 0301 	and.w	r3, r3, #1
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d044      	beq.n	8003be0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	2b01      	cmp	r3, #1
 8003b5c:	d107      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b5e:	4b47      	ldr	r3, [pc, #284]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d119      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e07f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	685b      	ldr	r3, [r3, #4]
 8003b72:	2b02      	cmp	r3, #2
 8003b74:	d003      	beq.n	8003b7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b7a:	2b03      	cmp	r3, #3
 8003b7c:	d107      	bne.n	8003b8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b7e:	4b3f      	ldr	r3, [pc, #252]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b8a:	2301      	movs	r3, #1
 8003b8c:	e06f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b8e:	4b3b      	ldr	r3, [pc, #236]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 0302 	and.w	r3, r3, #2
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d101      	bne.n	8003b9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b9a:	2301      	movs	r3, #1
 8003b9c:	e067      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b9e:	4b37      	ldr	r3, [pc, #220]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f023 0203 	bic.w	r2, r3, #3
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	4934      	ldr	r1, [pc, #208]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bac:	4313      	orrs	r3, r2
 8003bae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003bb0:	f7fe fd32 	bl	8002618 <HAL_GetTick>
 8003bb4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bb6:	e00a      	b.n	8003bce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003bb8:	f7fe fd2e 	bl	8002618 <HAL_GetTick>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	1ad3      	subs	r3, r2, r3
 8003bc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8003bc6:	4293      	cmp	r3, r2
 8003bc8:	d901      	bls.n	8003bce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003bca:	2303      	movs	r3, #3
 8003bcc:	e04f      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003bce:	4b2b      	ldr	r3, [pc, #172]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003bd0:	689b      	ldr	r3, [r3, #8]
 8003bd2:	f003 020c 	and.w	r2, r3, #12
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	685b      	ldr	r3, [r3, #4]
 8003bda:	009b      	lsls	r3, r3, #2
 8003bdc:	429a      	cmp	r2, r3
 8003bde:	d1eb      	bne.n	8003bb8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003be0:	4b25      	ldr	r3, [pc, #148]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	f003 0307 	and.w	r3, r3, #7
 8003be8:	683a      	ldr	r2, [r7, #0]
 8003bea:	429a      	cmp	r2, r3
 8003bec:	d20c      	bcs.n	8003c08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bee:	4b22      	ldr	r3, [pc, #136]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf0:	683a      	ldr	r2, [r7, #0]
 8003bf2:	b2d2      	uxtb	r2, r2
 8003bf4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bf6:	4b20      	ldr	r3, [pc, #128]	; (8003c78 <HAL_RCC_ClockConfig+0x1b8>)
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0307 	and.w	r3, r3, #7
 8003bfe:	683a      	ldr	r2, [r7, #0]
 8003c00:	429a      	cmp	r2, r3
 8003c02:	d001      	beq.n	8003c08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003c04:	2301      	movs	r3, #1
 8003c06:	e032      	b.n	8003c6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	f003 0304 	and.w	r3, r3, #4
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d008      	beq.n	8003c26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003c14:	4b19      	ldr	r3, [pc, #100]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c16:	689b      	ldr	r3, [r3, #8]
 8003c18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	68db      	ldr	r3, [r3, #12]
 8003c20:	4916      	ldr	r1, [pc, #88]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c22:	4313      	orrs	r3, r2
 8003c24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	681b      	ldr	r3, [r3, #0]
 8003c2a:	f003 0308 	and.w	r3, r3, #8
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d009      	beq.n	8003c46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c32:	4b12      	ldr	r3, [pc, #72]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c34:	689b      	ldr	r3, [r3, #8]
 8003c36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	691b      	ldr	r3, [r3, #16]
 8003c3e:	00db      	lsls	r3, r3, #3
 8003c40:	490e      	ldr	r1, [pc, #56]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c42:	4313      	orrs	r3, r2
 8003c44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003c46:	f000 f821 	bl	8003c8c <HAL_RCC_GetSysClockFreq>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	4b0b      	ldr	r3, [pc, #44]	; (8003c7c <HAL_RCC_ClockConfig+0x1bc>)
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	091b      	lsrs	r3, r3, #4
 8003c52:	f003 030f 	and.w	r3, r3, #15
 8003c56:	490a      	ldr	r1, [pc, #40]	; (8003c80 <HAL_RCC_ClockConfig+0x1c0>)
 8003c58:	5ccb      	ldrb	r3, [r1, r3]
 8003c5a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c5e:	4a09      	ldr	r2, [pc, #36]	; (8003c84 <HAL_RCC_ClockConfig+0x1c4>)
 8003c60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003c62:	4b09      	ldr	r3, [pc, #36]	; (8003c88 <HAL_RCC_ClockConfig+0x1c8>)
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4618      	mov	r0, r3
 8003c68:	f7fe fc92 	bl	8002590 <HAL_InitTick>

  return HAL_OK;
 8003c6c:	2300      	movs	r3, #0
}
 8003c6e:	4618      	mov	r0, r3
 8003c70:	3710      	adds	r7, #16
 8003c72:	46bd      	mov	sp, r7
 8003c74:	bd80      	pop	{r7, pc}
 8003c76:	bf00      	nop
 8003c78:	40023c00 	.word	0x40023c00
 8003c7c:	40023800 	.word	0x40023800
 8003c80:	08005580 	.word	0x08005580
 8003c84:	200000fc 	.word	0x200000fc
 8003c88:	20000100 	.word	0x20000100

08003c8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c90:	b090      	sub	sp, #64	; 0x40
 8003c92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003c94:	2300      	movs	r3, #0
 8003c96:	637b      	str	r3, [r7, #52]	; 0x34
 8003c98:	2300      	movs	r3, #0
 8003c9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003c9c:	2300      	movs	r3, #0
 8003c9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8003ca0:	2300      	movs	r3, #0
 8003ca2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ca4:	4b59      	ldr	r3, [pc, #356]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ca6:	689b      	ldr	r3, [r3, #8]
 8003ca8:	f003 030c 	and.w	r3, r3, #12
 8003cac:	2b08      	cmp	r3, #8
 8003cae:	d00d      	beq.n	8003ccc <HAL_RCC_GetSysClockFreq+0x40>
 8003cb0:	2b08      	cmp	r3, #8
 8003cb2:	f200 80a1 	bhi.w	8003df8 <HAL_RCC_GetSysClockFreq+0x16c>
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d002      	beq.n	8003cc0 <HAL_RCC_GetSysClockFreq+0x34>
 8003cba:	2b04      	cmp	r3, #4
 8003cbc:	d003      	beq.n	8003cc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003cbe:	e09b      	b.n	8003df8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003cc0:	4b53      	ldr	r3, [pc, #332]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003cc2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8003cc4:	e09b      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003cc6:	4b53      	ldr	r3, [pc, #332]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cc8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003cca:	e098      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003ccc:	4b4f      	ldr	r3, [pc, #316]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003cd4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003cd6:	4b4d      	ldr	r3, [pc, #308]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003cd8:	685b      	ldr	r3, [r3, #4]
 8003cda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003cde:	2b00      	cmp	r3, #0
 8003ce0:	d028      	beq.n	8003d34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003ce2:	4b4a      	ldr	r3, [pc, #296]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	099b      	lsrs	r3, r3, #6
 8003ce8:	2200      	movs	r2, #0
 8003cea:	623b      	str	r3, [r7, #32]
 8003cec:	627a      	str	r2, [r7, #36]	; 0x24
 8003cee:	6a3b      	ldr	r3, [r7, #32]
 8003cf0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8003cf4:	2100      	movs	r1, #0
 8003cf6:	4b47      	ldr	r3, [pc, #284]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003cf8:	fb03 f201 	mul.w	r2, r3, r1
 8003cfc:	2300      	movs	r3, #0
 8003cfe:	fb00 f303 	mul.w	r3, r0, r3
 8003d02:	4413      	add	r3, r2
 8003d04:	4a43      	ldr	r2, [pc, #268]	; (8003e14 <HAL_RCC_GetSysClockFreq+0x188>)
 8003d06:	fba0 1202 	umull	r1, r2, r0, r2
 8003d0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003d0c:	460a      	mov	r2, r1
 8003d0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8003d10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8003d12:	4413      	add	r3, r2
 8003d14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003d16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003d18:	2200      	movs	r2, #0
 8003d1a:	61bb      	str	r3, [r7, #24]
 8003d1c:	61fa      	str	r2, [r7, #28]
 8003d1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003d22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003d26:	f7fc fdad 	bl	8000884 <__aeabi_uldivmod>
 8003d2a:	4602      	mov	r2, r0
 8003d2c:	460b      	mov	r3, r1
 8003d2e:	4613      	mov	r3, r2
 8003d30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003d32:	e053      	b.n	8003ddc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d34:	4b35      	ldr	r3, [pc, #212]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003d36:	685b      	ldr	r3, [r3, #4]
 8003d38:	099b      	lsrs	r3, r3, #6
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	613b      	str	r3, [r7, #16]
 8003d3e:	617a      	str	r2, [r7, #20]
 8003d40:	693b      	ldr	r3, [r7, #16]
 8003d42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003d46:	f04f 0b00 	mov.w	fp, #0
 8003d4a:	4652      	mov	r2, sl
 8003d4c:	465b      	mov	r3, fp
 8003d4e:	f04f 0000 	mov.w	r0, #0
 8003d52:	f04f 0100 	mov.w	r1, #0
 8003d56:	0159      	lsls	r1, r3, #5
 8003d58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003d5c:	0150      	lsls	r0, r2, #5
 8003d5e:	4602      	mov	r2, r0
 8003d60:	460b      	mov	r3, r1
 8003d62:	ebb2 080a 	subs.w	r8, r2, sl
 8003d66:	eb63 090b 	sbc.w	r9, r3, fp
 8003d6a:	f04f 0200 	mov.w	r2, #0
 8003d6e:	f04f 0300 	mov.w	r3, #0
 8003d72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003d76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003d7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8003d7e:	ebb2 0408 	subs.w	r4, r2, r8
 8003d82:	eb63 0509 	sbc.w	r5, r3, r9
 8003d86:	f04f 0200 	mov.w	r2, #0
 8003d8a:	f04f 0300 	mov.w	r3, #0
 8003d8e:	00eb      	lsls	r3, r5, #3
 8003d90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003d94:	00e2      	lsls	r2, r4, #3
 8003d96:	4614      	mov	r4, r2
 8003d98:	461d      	mov	r5, r3
 8003d9a:	eb14 030a 	adds.w	r3, r4, sl
 8003d9e:	603b      	str	r3, [r7, #0]
 8003da0:	eb45 030b 	adc.w	r3, r5, fp
 8003da4:	607b      	str	r3, [r7, #4]
 8003da6:	f04f 0200 	mov.w	r2, #0
 8003daa:	f04f 0300 	mov.w	r3, #0
 8003dae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003db2:	4629      	mov	r1, r5
 8003db4:	028b      	lsls	r3, r1, #10
 8003db6:	4621      	mov	r1, r4
 8003db8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003dbc:	4621      	mov	r1, r4
 8003dbe:	028a      	lsls	r2, r1, #10
 8003dc0:	4610      	mov	r0, r2
 8003dc2:	4619      	mov	r1, r3
 8003dc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003dc6:	2200      	movs	r2, #0
 8003dc8:	60bb      	str	r3, [r7, #8]
 8003dca:	60fa      	str	r2, [r7, #12]
 8003dcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003dd0:	f7fc fd58 	bl	8000884 <__aeabi_uldivmod>
 8003dd4:	4602      	mov	r2, r0
 8003dd6:	460b      	mov	r3, r1
 8003dd8:	4613      	mov	r3, r2
 8003dda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ddc:	4b0b      	ldr	r3, [pc, #44]	; (8003e0c <HAL_RCC_GetSysClockFreq+0x180>)
 8003dde:	685b      	ldr	r3, [r3, #4]
 8003de0:	0c1b      	lsrs	r3, r3, #16
 8003de2:	f003 0303 	and.w	r3, r3, #3
 8003de6:	3301      	adds	r3, #1
 8003de8:	005b      	lsls	r3, r3, #1
 8003dea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8003dec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8003dee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003df0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003df4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003df6:	e002      	b.n	8003dfe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003df8:	4b05      	ldr	r3, [pc, #20]	; (8003e10 <HAL_RCC_GetSysClockFreq+0x184>)
 8003dfa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8003dfc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003dfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8003e00:	4618      	mov	r0, r3
 8003e02:	3740      	adds	r7, #64	; 0x40
 8003e04:	46bd      	mov	sp, r7
 8003e06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e0a:	bf00      	nop
 8003e0c:	40023800 	.word	0x40023800
 8003e10:	00f42400 	.word	0x00f42400
 8003e14:	016e3600 	.word	0x016e3600

08003e18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e18:	b480      	push	{r7}
 8003e1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e1c:	4b03      	ldr	r3, [pc, #12]	; (8003e2c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e1e:	681b      	ldr	r3, [r3, #0]
}
 8003e20:	4618      	mov	r0, r3
 8003e22:	46bd      	mov	sp, r7
 8003e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e28:	4770      	bx	lr
 8003e2a:	bf00      	nop
 8003e2c:	200000fc 	.word	0x200000fc

08003e30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e30:	b580      	push	{r7, lr}
 8003e32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003e34:	f7ff fff0 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e38:	4602      	mov	r2, r0
 8003e3a:	4b05      	ldr	r3, [pc, #20]	; (8003e50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e3c:	689b      	ldr	r3, [r3, #8]
 8003e3e:	0a9b      	lsrs	r3, r3, #10
 8003e40:	f003 0307 	and.w	r3, r3, #7
 8003e44:	4903      	ldr	r1, [pc, #12]	; (8003e54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e46:	5ccb      	ldrb	r3, [r1, r3]
 8003e48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e4c:	4618      	mov	r0, r3
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	40023800 	.word	0x40023800
 8003e54:	08005590 	.word	0x08005590

08003e58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003e5c:	f7ff ffdc 	bl	8003e18 <HAL_RCC_GetHCLKFreq>
 8003e60:	4602      	mov	r2, r0
 8003e62:	4b05      	ldr	r3, [pc, #20]	; (8003e78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	0b5b      	lsrs	r3, r3, #13
 8003e68:	f003 0307 	and.w	r3, r3, #7
 8003e6c:	4903      	ldr	r1, [pc, #12]	; (8003e7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003e6e:	5ccb      	ldrb	r3, [r1, r3]
 8003e70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e74:	4618      	mov	r0, r3
 8003e76:	bd80      	pop	{r7, pc}
 8003e78:	40023800 	.word	0x40023800
 8003e7c:	08005590 	.word	0x08005590

08003e80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	b082      	sub	sp, #8
 8003e84:	af00      	add	r7, sp, #0
 8003e86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	2b00      	cmp	r3, #0
 8003e8c:	d101      	bne.n	8003e92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003e8e:	2301      	movs	r3, #1
 8003e90:	e07b      	b.n	8003f8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d108      	bne.n	8003eac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	685b      	ldr	r3, [r3, #4]
 8003e9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ea2:	d009      	beq.n	8003eb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	61da      	str	r2, [r3, #28]
 8003eaa:	e005      	b.n	8003eb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	2200      	movs	r2, #0
 8003ebc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003ec4:	b2db      	uxtb	r3, r3
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d106      	bne.n	8003ed8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	2200      	movs	r2, #0
 8003ece:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ed2:	6878      	ldr	r0, [r7, #4]
 8003ed4:	f7fe f87c 	bl	8001fd0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	2202      	movs	r2, #2
 8003edc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	681a      	ldr	r2, [r3, #0]
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003eee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	685b      	ldr	r3, [r3, #4]
 8003ef4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003f00:	431a      	orrs	r2, r3
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	68db      	ldr	r3, [r3, #12]
 8003f06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003f0a:	431a      	orrs	r2, r3
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	691b      	ldr	r3, [r3, #16]
 8003f10:	f003 0302 	and.w	r3, r3, #2
 8003f14:	431a      	orrs	r2, r3
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	695b      	ldr	r3, [r3, #20]
 8003f1a:	f003 0301 	and.w	r3, r3, #1
 8003f1e:	431a      	orrs	r2, r3
 8003f20:	687b      	ldr	r3, [r7, #4]
 8003f22:	699b      	ldr	r3, [r3, #24]
 8003f24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003f28:	431a      	orrs	r2, r3
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	69db      	ldr	r3, [r3, #28]
 8003f2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003f32:	431a      	orrs	r2, r3
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a1b      	ldr	r3, [r3, #32]
 8003f38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f3c:	ea42 0103 	orr.w	r1, r2, r3
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	430a      	orrs	r2, r1
 8003f4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	699b      	ldr	r3, [r3, #24]
 8003f54:	0c1b      	lsrs	r3, r3, #16
 8003f56:	f003 0104 	and.w	r1, r3, #4
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f5e:	f003 0210 	and.w	r2, r3, #16
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	430a      	orrs	r2, r1
 8003f68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	69da      	ldr	r2, [r3, #28]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2201      	movs	r2, #1
 8003f84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003f88:	2300      	movs	r3, #0
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3708      	adds	r7, #8
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b082      	sub	sp, #8
 8003f96:	af00      	add	r7, sp, #0
 8003f98:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d101      	bne.n	8003fa4 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	e041      	b.n	8004028 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003faa:	b2db      	uxtb	r3, r3
 8003fac:	2b00      	cmp	r3, #0
 8003fae:	d106      	bne.n	8003fbe <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f7fe f871 	bl	80020a0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	3304      	adds	r3, #4
 8003fce:	4619      	mov	r1, r3
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	f000 fbef 	bl	80047b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2201      	movs	r2, #1
 8003fda:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	2201      	movs	r2, #1
 8003fe2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2201      	movs	r2, #1
 8003fea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	2201      	movs	r2, #1
 8003ff2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2201      	movs	r2, #1
 8003ffa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2201      	movs	r2, #1
 8004002:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2201      	movs	r2, #1
 800400a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	2201      	movs	r2, #1
 8004012:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	2201      	movs	r2, #1
 800401a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2201      	movs	r2, #1
 8004022:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004026:	2300      	movs	r3, #0
}
 8004028:	4618      	mov	r0, r3
 800402a:	3708      	adds	r7, #8
 800402c:	46bd      	mov	sp, r7
 800402e:	bd80      	pop	{r7, pc}

08004030 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004030:	b480      	push	{r7}
 8004032:	b085      	sub	sp, #20
 8004034:	af00      	add	r7, sp, #0
 8004036:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800403e:	b2db      	uxtb	r3, r3
 8004040:	2b01      	cmp	r3, #1
 8004042:	d001      	beq.n	8004048 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004044:	2301      	movs	r3, #1
 8004046:	e04e      	b.n	80040e6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	2202      	movs	r2, #2
 800404c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	68da      	ldr	r2, [r3, #12]
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	f042 0201 	orr.w	r2, r2, #1
 800405e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4a23      	ldr	r2, [pc, #140]	; (80040f4 <HAL_TIM_Base_Start_IT+0xc4>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d022      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x80>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004072:	d01d      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x80>
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	681b      	ldr	r3, [r3, #0]
 8004078:	4a1f      	ldr	r2, [pc, #124]	; (80040f8 <HAL_TIM_Base_Start_IT+0xc8>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d018      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x80>
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	4a1e      	ldr	r2, [pc, #120]	; (80040fc <HAL_TIM_Base_Start_IT+0xcc>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d013      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x80>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	4a1c      	ldr	r2, [pc, #112]	; (8004100 <HAL_TIM_Base_Start_IT+0xd0>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d00e      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x80>
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a1b      	ldr	r2, [pc, #108]	; (8004104 <HAL_TIM_Base_Start_IT+0xd4>)
 8004098:	4293      	cmp	r3, r2
 800409a:	d009      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x80>
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	4a19      	ldr	r2, [pc, #100]	; (8004108 <HAL_TIM_Base_Start_IT+0xd8>)
 80040a2:	4293      	cmp	r3, r2
 80040a4:	d004      	beq.n	80040b0 <HAL_TIM_Base_Start_IT+0x80>
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	4a18      	ldr	r2, [pc, #96]	; (800410c <HAL_TIM_Base_Start_IT+0xdc>)
 80040ac:	4293      	cmp	r3, r2
 80040ae:	d111      	bne.n	80040d4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	689b      	ldr	r3, [r3, #8]
 80040b6:	f003 0307 	and.w	r3, r3, #7
 80040ba:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	2b06      	cmp	r3, #6
 80040c0:	d010      	beq.n	80040e4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	681a      	ldr	r2, [r3, #0]
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	f042 0201 	orr.w	r2, r2, #1
 80040d0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80040d2:	e007      	b.n	80040e4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f042 0201 	orr.w	r2, r2, #1
 80040e2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80040e4:	2300      	movs	r3, #0
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3714      	adds	r7, #20
 80040ea:	46bd      	mov	sp, r7
 80040ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040f0:	4770      	bx	lr
 80040f2:	bf00      	nop
 80040f4:	40010000 	.word	0x40010000
 80040f8:	40000400 	.word	0x40000400
 80040fc:	40000800 	.word	0x40000800
 8004100:	40000c00 	.word	0x40000c00
 8004104:	40010400 	.word	0x40010400
 8004108:	40014000 	.word	0x40014000
 800410c:	40001800 	.word	0x40001800

08004110 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004110:	b580      	push	{r7, lr}
 8004112:	b082      	sub	sp, #8
 8004114:	af00      	add	r7, sp, #0
 8004116:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	2b00      	cmp	r3, #0
 800411c:	d101      	bne.n	8004122 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800411e:	2301      	movs	r3, #1
 8004120:	e041      	b.n	80041a6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004122:	687b      	ldr	r3, [r7, #4]
 8004124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004128:	b2db      	uxtb	r3, r3
 800412a:	2b00      	cmp	r3, #0
 800412c:	d106      	bne.n	800413c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	2200      	movs	r2, #0
 8004132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004136:	6878      	ldr	r0, [r7, #4]
 8004138:	f000 f839 	bl	80041ae <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2202      	movs	r2, #2
 8004140:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	3304      	adds	r3, #4
 800414c:	4619      	mov	r1, r3
 800414e:	4610      	mov	r0, r2
 8004150:	f000 fb30 	bl	80047b4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	2201      	movs	r2, #1
 8004158:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	2201      	movs	r2, #1
 8004160:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	2201      	movs	r2, #1
 8004168:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	2201      	movs	r2, #1
 8004170:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	2201      	movs	r2, #1
 8004178:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	2201      	movs	r2, #1
 8004180:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	2201      	movs	r2, #1
 8004188:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	2201      	movs	r2, #1
 8004190:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	2201      	movs	r2, #1
 8004198:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80041a4:	2300      	movs	r3, #0
}
 80041a6:	4618      	mov	r0, r3
 80041a8:	3708      	adds	r7, #8
 80041aa:	46bd      	mov	sp, r7
 80041ac:	bd80      	pop	{r7, pc}

080041ae <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80041ae:	b480      	push	{r7}
 80041b0:	b083      	sub	sp, #12
 80041b2:	af00      	add	r7, sp, #0
 80041b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80041b6:	bf00      	nop
 80041b8:	370c      	adds	r7, #12
 80041ba:	46bd      	mov	sp, r7
 80041bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c0:	4770      	bx	lr
	...

080041c4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80041c4:	b580      	push	{r7, lr}
 80041c6:	b084      	sub	sp, #16
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
 80041cc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80041ce:	683b      	ldr	r3, [r7, #0]
 80041d0:	2b00      	cmp	r3, #0
 80041d2:	d109      	bne.n	80041e8 <HAL_TIM_PWM_Start+0x24>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041da:	b2db      	uxtb	r3, r3
 80041dc:	2b01      	cmp	r3, #1
 80041de:	bf14      	ite	ne
 80041e0:	2301      	movne	r3, #1
 80041e2:	2300      	moveq	r3, #0
 80041e4:	b2db      	uxtb	r3, r3
 80041e6:	e022      	b.n	800422e <HAL_TIM_PWM_Start+0x6a>
 80041e8:	683b      	ldr	r3, [r7, #0]
 80041ea:	2b04      	cmp	r3, #4
 80041ec:	d109      	bne.n	8004202 <HAL_TIM_PWM_Start+0x3e>
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80041f4:	b2db      	uxtb	r3, r3
 80041f6:	2b01      	cmp	r3, #1
 80041f8:	bf14      	ite	ne
 80041fa:	2301      	movne	r3, #1
 80041fc:	2300      	moveq	r3, #0
 80041fe:	b2db      	uxtb	r3, r3
 8004200:	e015      	b.n	800422e <HAL_TIM_PWM_Start+0x6a>
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	2b08      	cmp	r3, #8
 8004206:	d109      	bne.n	800421c <HAL_TIM_PWM_Start+0x58>
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800420e:	b2db      	uxtb	r3, r3
 8004210:	2b01      	cmp	r3, #1
 8004212:	bf14      	ite	ne
 8004214:	2301      	movne	r3, #1
 8004216:	2300      	moveq	r3, #0
 8004218:	b2db      	uxtb	r3, r3
 800421a:	e008      	b.n	800422e <HAL_TIM_PWM_Start+0x6a>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004222:	b2db      	uxtb	r3, r3
 8004224:	2b01      	cmp	r3, #1
 8004226:	bf14      	ite	ne
 8004228:	2301      	movne	r3, #1
 800422a:	2300      	moveq	r3, #0
 800422c:	b2db      	uxtb	r3, r3
 800422e:	2b00      	cmp	r3, #0
 8004230:	d001      	beq.n	8004236 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004232:	2301      	movs	r3, #1
 8004234:	e07c      	b.n	8004330 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004236:	683b      	ldr	r3, [r7, #0]
 8004238:	2b00      	cmp	r3, #0
 800423a:	d104      	bne.n	8004246 <HAL_TIM_PWM_Start+0x82>
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2202      	movs	r2, #2
 8004240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004244:	e013      	b.n	800426e <HAL_TIM_PWM_Start+0xaa>
 8004246:	683b      	ldr	r3, [r7, #0]
 8004248:	2b04      	cmp	r3, #4
 800424a:	d104      	bne.n	8004256 <HAL_TIM_PWM_Start+0x92>
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	2202      	movs	r2, #2
 8004250:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004254:	e00b      	b.n	800426e <HAL_TIM_PWM_Start+0xaa>
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	2b08      	cmp	r3, #8
 800425a:	d104      	bne.n	8004266 <HAL_TIM_PWM_Start+0xa2>
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	2202      	movs	r2, #2
 8004260:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004264:	e003      	b.n	800426e <HAL_TIM_PWM_Start+0xaa>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	2202      	movs	r2, #2
 800426a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	2201      	movs	r2, #1
 8004274:	6839      	ldr	r1, [r7, #0]
 8004276:	4618      	mov	r0, r3
 8004278:	f000 fd92 	bl	8004da0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	681b      	ldr	r3, [r3, #0]
 8004280:	4a2d      	ldr	r2, [pc, #180]	; (8004338 <HAL_TIM_PWM_Start+0x174>)
 8004282:	4293      	cmp	r3, r2
 8004284:	d004      	beq.n	8004290 <HAL_TIM_PWM_Start+0xcc>
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	4a2c      	ldr	r2, [pc, #176]	; (800433c <HAL_TIM_PWM_Start+0x178>)
 800428c:	4293      	cmp	r3, r2
 800428e:	d101      	bne.n	8004294 <HAL_TIM_PWM_Start+0xd0>
 8004290:	2301      	movs	r3, #1
 8004292:	e000      	b.n	8004296 <HAL_TIM_PWM_Start+0xd2>
 8004294:	2300      	movs	r3, #0
 8004296:	2b00      	cmp	r3, #0
 8004298:	d007      	beq.n	80042aa <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80042a8:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4a22      	ldr	r2, [pc, #136]	; (8004338 <HAL_TIM_PWM_Start+0x174>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d022      	beq.n	80042fa <HAL_TIM_PWM_Start+0x136>
 80042b4:	687b      	ldr	r3, [r7, #4]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042bc:	d01d      	beq.n	80042fa <HAL_TIM_PWM_Start+0x136>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	4a1f      	ldr	r2, [pc, #124]	; (8004340 <HAL_TIM_PWM_Start+0x17c>)
 80042c4:	4293      	cmp	r3, r2
 80042c6:	d018      	beq.n	80042fa <HAL_TIM_PWM_Start+0x136>
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	4a1d      	ldr	r2, [pc, #116]	; (8004344 <HAL_TIM_PWM_Start+0x180>)
 80042ce:	4293      	cmp	r3, r2
 80042d0:	d013      	beq.n	80042fa <HAL_TIM_PWM_Start+0x136>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4a1c      	ldr	r2, [pc, #112]	; (8004348 <HAL_TIM_PWM_Start+0x184>)
 80042d8:	4293      	cmp	r3, r2
 80042da:	d00e      	beq.n	80042fa <HAL_TIM_PWM_Start+0x136>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	4a16      	ldr	r2, [pc, #88]	; (800433c <HAL_TIM_PWM_Start+0x178>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d009      	beq.n	80042fa <HAL_TIM_PWM_Start+0x136>
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	681b      	ldr	r3, [r3, #0]
 80042ea:	4a18      	ldr	r2, [pc, #96]	; (800434c <HAL_TIM_PWM_Start+0x188>)
 80042ec:	4293      	cmp	r3, r2
 80042ee:	d004      	beq.n	80042fa <HAL_TIM_PWM_Start+0x136>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	4a16      	ldr	r2, [pc, #88]	; (8004350 <HAL_TIM_PWM_Start+0x18c>)
 80042f6:	4293      	cmp	r3, r2
 80042f8:	d111      	bne.n	800431e <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	689b      	ldr	r3, [r3, #8]
 8004300:	f003 0307 	and.w	r3, r3, #7
 8004304:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	2b06      	cmp	r3, #6
 800430a:	d010      	beq.n	800432e <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	681a      	ldr	r2, [r3, #0]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f042 0201 	orr.w	r2, r2, #1
 800431a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800431c:	e007      	b.n	800432e <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681a      	ldr	r2, [r3, #0]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	f042 0201 	orr.w	r2, r2, #1
 800432c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800432e:	2300      	movs	r3, #0
}
 8004330:	4618      	mov	r0, r3
 8004332:	3710      	adds	r7, #16
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	40010000 	.word	0x40010000
 800433c:	40010400 	.word	0x40010400
 8004340:	40000400 	.word	0x40000400
 8004344:	40000800 	.word	0x40000800
 8004348:	40000c00 	.word	0x40000c00
 800434c:	40014000 	.word	0x40014000
 8004350:	40001800 	.word	0x40001800

08004354 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim, const TIM_Encoder_InitTypeDef *sConfig)
{
 8004354:	b580      	push	{r7, lr}
 8004356:	b086      	sub	sp, #24
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b00      	cmp	r3, #0
 8004362:	d101      	bne.n	8004368 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e097      	b.n	8004498 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436e:	b2db      	uxtb	r3, r3
 8004370:	2b00      	cmp	r3, #0
 8004372:	d106      	bne.n	8004382 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2200      	movs	r2, #0
 8004378:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800437c:	6878      	ldr	r0, [r7, #4]
 800437e:	f7fd ff09 	bl	8002194 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	2202      	movs	r2, #2
 8004386:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	687a      	ldr	r2, [r7, #4]
 8004392:	6812      	ldr	r2, [r2, #0]
 8004394:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004398:	f023 0307 	bic.w	r3, r3, #7
 800439c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	681a      	ldr	r2, [r3, #0]
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	3304      	adds	r3, #4
 80043a6:	4619      	mov	r1, r3
 80043a8:	4610      	mov	r0, r2
 80043aa:	f000 fa03 	bl	80047b4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	699b      	ldr	r3, [r3, #24]
 80043bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	6a1b      	ldr	r3, [r3, #32]
 80043c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	681b      	ldr	r3, [r3, #0]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	4313      	orrs	r3, r2
 80043ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80043d0:	693b      	ldr	r3, [r7, #16]
 80043d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043d6:	f023 0303 	bic.w	r3, r3, #3
 80043da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689a      	ldr	r2, [r3, #8]
 80043e0:	683b      	ldr	r3, [r7, #0]
 80043e2:	699b      	ldr	r3, [r3, #24]
 80043e4:	021b      	lsls	r3, r3, #8
 80043e6:	4313      	orrs	r3, r2
 80043e8:	693a      	ldr	r2, [r7, #16]
 80043ea:	4313      	orrs	r3, r2
 80043ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80043ee:	693b      	ldr	r3, [r7, #16]
 80043f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80043f4:	f023 030c 	bic.w	r3, r3, #12
 80043f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80043fa:	693b      	ldr	r3, [r7, #16]
 80043fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004400:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004404:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	68da      	ldr	r2, [r3, #12]
 800440a:	683b      	ldr	r3, [r7, #0]
 800440c:	69db      	ldr	r3, [r3, #28]
 800440e:	021b      	lsls	r3, r3, #8
 8004410:	4313      	orrs	r3, r2
 8004412:	693a      	ldr	r2, [r7, #16]
 8004414:	4313      	orrs	r3, r2
 8004416:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8004418:	683b      	ldr	r3, [r7, #0]
 800441a:	691b      	ldr	r3, [r3, #16]
 800441c:	011a      	lsls	r2, r3, #4
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	6a1b      	ldr	r3, [r3, #32]
 8004422:	031b      	lsls	r3, r3, #12
 8004424:	4313      	orrs	r3, r2
 8004426:	693a      	ldr	r2, [r7, #16]
 8004428:	4313      	orrs	r3, r2
 800442a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800442c:	68fb      	ldr	r3, [r7, #12]
 800442e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8004432:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800443a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	685a      	ldr	r2, [r3, #4]
 8004440:	683b      	ldr	r3, [r7, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	011b      	lsls	r3, r3, #4
 8004446:	4313      	orrs	r3, r2
 8004448:	68fa      	ldr	r2, [r7, #12]
 800444a:	4313      	orrs	r3, r2
 800444c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	697a      	ldr	r2, [r7, #20]
 8004454:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	693a      	ldr	r2, [r7, #16]
 800445c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	68fa      	ldr	r2, [r7, #12]
 8004464:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2201      	movs	r2, #1
 800446a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	2201      	movs	r2, #1
 800447a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	2201      	movs	r2, #1
 8004482:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	2201      	movs	r2, #1
 800448a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	2201      	movs	r2, #1
 8004492:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004496:	2300      	movs	r3, #0
}
 8004498:	4618      	mov	r0, r3
 800449a:	3718      	adds	r7, #24
 800449c:	46bd      	mov	sp, r7
 800449e:	bd80      	pop	{r7, pc}

080044a0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80044a0:	b580      	push	{r7, lr}
 80044a2:	b086      	sub	sp, #24
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80044ac:	2300      	movs	r3, #0
 80044ae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80044b0:	68fb      	ldr	r3, [r7, #12]
 80044b2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044b6:	2b01      	cmp	r3, #1
 80044b8:	d101      	bne.n	80044be <HAL_TIM_PWM_ConfigChannel+0x1e>
 80044ba:	2302      	movs	r3, #2
 80044bc:	e0ae      	b.n	800461c <HAL_TIM_PWM_ConfigChannel+0x17c>
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	2b0c      	cmp	r3, #12
 80044ca:	f200 809f 	bhi.w	800460c <HAL_TIM_PWM_ConfigChannel+0x16c>
 80044ce:	a201      	add	r2, pc, #4	; (adr r2, 80044d4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 80044d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044d4:	08004509 	.word	0x08004509
 80044d8:	0800460d 	.word	0x0800460d
 80044dc:	0800460d 	.word	0x0800460d
 80044e0:	0800460d 	.word	0x0800460d
 80044e4:	08004549 	.word	0x08004549
 80044e8:	0800460d 	.word	0x0800460d
 80044ec:	0800460d 	.word	0x0800460d
 80044f0:	0800460d 	.word	0x0800460d
 80044f4:	0800458b 	.word	0x0800458b
 80044f8:	0800460d 	.word	0x0800460d
 80044fc:	0800460d 	.word	0x0800460d
 8004500:	0800460d 	.word	0x0800460d
 8004504:	080045cb 	.word	0x080045cb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	68b9      	ldr	r1, [r7, #8]
 800450e:	4618      	mov	r0, r3
 8004510:	f000 f9fc 	bl	800490c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004514:	68fb      	ldr	r3, [r7, #12]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	699a      	ldr	r2, [r3, #24]
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	681b      	ldr	r3, [r3, #0]
 800451e:	f042 0208 	orr.w	r2, r2, #8
 8004522:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	699a      	ldr	r2, [r3, #24]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0204 	bic.w	r2, r2, #4
 8004532:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	6999      	ldr	r1, [r3, #24]
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	691a      	ldr	r2, [r3, #16]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	430a      	orrs	r2, r1
 8004544:	619a      	str	r2, [r3, #24]
      break;
 8004546:	e064      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	681b      	ldr	r3, [r3, #0]
 800454c:	68b9      	ldr	r1, [r7, #8]
 800454e:	4618      	mov	r0, r3
 8004550:	f000 fa4c 	bl	80049ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	681b      	ldr	r3, [r3, #0]
 8004558:	699a      	ldr	r2, [r3, #24]
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004562:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	699a      	ldr	r2, [r3, #24]
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	681b      	ldr	r3, [r3, #0]
 800456e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004572:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	681b      	ldr	r3, [r3, #0]
 8004578:	6999      	ldr	r1, [r3, #24]
 800457a:	68bb      	ldr	r3, [r7, #8]
 800457c:	691b      	ldr	r3, [r3, #16]
 800457e:	021a      	lsls	r2, r3, #8
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	430a      	orrs	r2, r1
 8004586:	619a      	str	r2, [r3, #24]
      break;
 8004588:	e043      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	68b9      	ldr	r1, [r7, #8]
 8004590:	4618      	mov	r0, r3
 8004592:	f000 faa1 	bl	8004ad8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	69da      	ldr	r2, [r3, #28]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0208 	orr.w	r2, r2, #8
 80045a4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	69da      	ldr	r2, [r3, #28]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f022 0204 	bic.w	r2, r2, #4
 80045b4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	69d9      	ldr	r1, [r3, #28]
 80045bc:	68bb      	ldr	r3, [r7, #8]
 80045be:	691a      	ldr	r2, [r3, #16]
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	430a      	orrs	r2, r1
 80045c6:	61da      	str	r2, [r3, #28]
      break;
 80045c8:	e023      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	68b9      	ldr	r1, [r7, #8]
 80045d0:	4618      	mov	r0, r3
 80045d2:	f000 faf5 	bl	8004bc0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80045d6:	68fb      	ldr	r3, [r7, #12]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	69da      	ldr	r2, [r3, #28]
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	69da      	ldr	r2, [r3, #28]
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	681b      	ldr	r3, [r3, #0]
 80045fa:	69d9      	ldr	r1, [r3, #28]
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	691b      	ldr	r3, [r3, #16]
 8004600:	021a      	lsls	r2, r3, #8
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	430a      	orrs	r2, r1
 8004608:	61da      	str	r2, [r3, #28]
      break;
 800460a:	e002      	b.n	8004612 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 800460c:	2301      	movs	r3, #1
 800460e:	75fb      	strb	r3, [r7, #23]
      break;
 8004610:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	2200      	movs	r2, #0
 8004616:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800461a:	7dfb      	ldrb	r3, [r7, #23]
}
 800461c:	4618      	mov	r0, r3
 800461e:	3718      	adds	r7, #24
 8004620:	46bd      	mov	sp, r7
 8004622:	bd80      	pop	{r7, pc}

08004624 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004624:	b580      	push	{r7, lr}
 8004626:	b084      	sub	sp, #16
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
 800462c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800462e:	2300      	movs	r3, #0
 8004630:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004638:	2b01      	cmp	r3, #1
 800463a:	d101      	bne.n	8004640 <HAL_TIM_ConfigClockSource+0x1c>
 800463c:	2302      	movs	r3, #2
 800463e:	e0b4      	b.n	80047aa <HAL_TIM_ConfigClockSource+0x186>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2201      	movs	r2, #1
 8004644:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	2202      	movs	r2, #2
 800464c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	689b      	ldr	r3, [r3, #8]
 8004656:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800465e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004666:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	68ba      	ldr	r2, [r7, #8]
 800466e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004678:	d03e      	beq.n	80046f8 <HAL_TIM_ConfigClockSource+0xd4>
 800467a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800467e:	f200 8087 	bhi.w	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 8004682:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004686:	f000 8086 	beq.w	8004796 <HAL_TIM_ConfigClockSource+0x172>
 800468a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800468e:	d87f      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 8004690:	2b70      	cmp	r3, #112	; 0x70
 8004692:	d01a      	beq.n	80046ca <HAL_TIM_ConfigClockSource+0xa6>
 8004694:	2b70      	cmp	r3, #112	; 0x70
 8004696:	d87b      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 8004698:	2b60      	cmp	r3, #96	; 0x60
 800469a:	d050      	beq.n	800473e <HAL_TIM_ConfigClockSource+0x11a>
 800469c:	2b60      	cmp	r3, #96	; 0x60
 800469e:	d877      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046a0:	2b50      	cmp	r3, #80	; 0x50
 80046a2:	d03c      	beq.n	800471e <HAL_TIM_ConfigClockSource+0xfa>
 80046a4:	2b50      	cmp	r3, #80	; 0x50
 80046a6:	d873      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046a8:	2b40      	cmp	r3, #64	; 0x40
 80046aa:	d058      	beq.n	800475e <HAL_TIM_ConfigClockSource+0x13a>
 80046ac:	2b40      	cmp	r3, #64	; 0x40
 80046ae:	d86f      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046b0:	2b30      	cmp	r3, #48	; 0x30
 80046b2:	d064      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046b4:	2b30      	cmp	r3, #48	; 0x30
 80046b6:	d86b      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046b8:	2b20      	cmp	r3, #32
 80046ba:	d060      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046bc:	2b20      	cmp	r3, #32
 80046be:	d867      	bhi.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d05c      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046c4:	2b10      	cmp	r3, #16
 80046c6:	d05a      	beq.n	800477e <HAL_TIM_ConfigClockSource+0x15a>
 80046c8:	e062      	b.n	8004790 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80046d2:	683b      	ldr	r3, [r7, #0]
 80046d4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80046d6:	683b      	ldr	r3, [r7, #0]
 80046d8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80046da:	f000 fb41 	bl	8004d60 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	689b      	ldr	r3, [r3, #8]
 80046e4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80046ec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	681b      	ldr	r3, [r3, #0]
 80046f2:	68ba      	ldr	r2, [r7, #8]
 80046f4:	609a      	str	r2, [r3, #8]
      break;
 80046f6:	e04f      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004704:	683b      	ldr	r3, [r7, #0]
 8004706:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004708:	f000 fb2a 	bl	8004d60 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	689a      	ldr	r2, [r3, #8]
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800471a:	609a      	str	r2, [r3, #8]
      break;
 800471c:	e03c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004722:	683b      	ldr	r3, [r7, #0]
 8004724:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004726:	683b      	ldr	r3, [r7, #0]
 8004728:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800472a:	461a      	mov	r2, r3
 800472c:	f000 fa9e 	bl	8004c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	2150      	movs	r1, #80	; 0x50
 8004736:	4618      	mov	r0, r3
 8004738:	f000 faf7 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 800473c:	e02c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800473e:	687b      	ldr	r3, [r7, #4]
 8004740:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004746:	683b      	ldr	r3, [r7, #0]
 8004748:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 800474a:	461a      	mov	r2, r3
 800474c:	f000 fabd 	bl	8004cca <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004750:	687b      	ldr	r3, [r7, #4]
 8004752:	681b      	ldr	r3, [r3, #0]
 8004754:	2160      	movs	r1, #96	; 0x60
 8004756:	4618      	mov	r0, r3
 8004758:	f000 fae7 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 800475c:	e01c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800475e:	687b      	ldr	r3, [r7, #4]
 8004760:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 800476a:	461a      	mov	r2, r3
 800476c:	f000 fa7e 	bl	8004c6c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	681b      	ldr	r3, [r3, #0]
 8004774:	2140      	movs	r1, #64	; 0x40
 8004776:	4618      	mov	r0, r3
 8004778:	f000 fad7 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 800477c:	e00c      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	4619      	mov	r1, r3
 8004788:	4610      	mov	r0, r2
 800478a:	f000 face 	bl	8004d2a <TIM_ITRx_SetConfig>
      break;
 800478e:	e003      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004790:	2301      	movs	r3, #1
 8004792:	73fb      	strb	r3, [r7, #15]
      break;
 8004794:	e000      	b.n	8004798 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004796:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	2201      	movs	r2, #1
 800479c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	2200      	movs	r2, #0
 80047a4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80047a8:	7bfb      	ldrb	r3, [r7, #15]
}
 80047aa:	4618      	mov	r0, r3
 80047ac:	3710      	adds	r7, #16
 80047ae:	46bd      	mov	sp, r7
 80047b0:	bd80      	pop	{r7, pc}
	...

080047b4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80047b4:	b480      	push	{r7}
 80047b6:	b085      	sub	sp, #20
 80047b8:	af00      	add	r7, sp, #0
 80047ba:	6078      	str	r0, [r7, #4]
 80047bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	681b      	ldr	r3, [r3, #0]
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a46      	ldr	r2, [pc, #280]	; (80048e0 <TIM_Base_SetConfig+0x12c>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d013      	beq.n	80047f4 <TIM_Base_SetConfig+0x40>
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047d2:	d00f      	beq.n	80047f4 <TIM_Base_SetConfig+0x40>
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	4a43      	ldr	r2, [pc, #268]	; (80048e4 <TIM_Base_SetConfig+0x130>)
 80047d8:	4293      	cmp	r3, r2
 80047da:	d00b      	beq.n	80047f4 <TIM_Base_SetConfig+0x40>
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	4a42      	ldr	r2, [pc, #264]	; (80048e8 <TIM_Base_SetConfig+0x134>)
 80047e0:	4293      	cmp	r3, r2
 80047e2:	d007      	beq.n	80047f4 <TIM_Base_SetConfig+0x40>
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	4a41      	ldr	r2, [pc, #260]	; (80048ec <TIM_Base_SetConfig+0x138>)
 80047e8:	4293      	cmp	r3, r2
 80047ea:	d003      	beq.n	80047f4 <TIM_Base_SetConfig+0x40>
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	4a40      	ldr	r2, [pc, #256]	; (80048f0 <TIM_Base_SetConfig+0x13c>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d108      	bne.n	8004806 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047fc:	683b      	ldr	r3, [r7, #0]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	68fa      	ldr	r2, [r7, #12]
 8004802:	4313      	orrs	r3, r2
 8004804:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a35      	ldr	r2, [pc, #212]	; (80048e0 <TIM_Base_SetConfig+0x12c>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d02b      	beq.n	8004866 <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004814:	d027      	beq.n	8004866 <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a32      	ldr	r2, [pc, #200]	; (80048e4 <TIM_Base_SetConfig+0x130>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d023      	beq.n	8004866 <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a31      	ldr	r2, [pc, #196]	; (80048e8 <TIM_Base_SetConfig+0x134>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d01f      	beq.n	8004866 <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a30      	ldr	r2, [pc, #192]	; (80048ec <TIM_Base_SetConfig+0x138>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d01b      	beq.n	8004866 <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a2f      	ldr	r2, [pc, #188]	; (80048f0 <TIM_Base_SetConfig+0x13c>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d017      	beq.n	8004866 <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a2e      	ldr	r2, [pc, #184]	; (80048f4 <TIM_Base_SetConfig+0x140>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d013      	beq.n	8004866 <TIM_Base_SetConfig+0xb2>
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a2d      	ldr	r2, [pc, #180]	; (80048f8 <TIM_Base_SetConfig+0x144>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d00f      	beq.n	8004866 <TIM_Base_SetConfig+0xb2>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a2c      	ldr	r2, [pc, #176]	; (80048fc <TIM_Base_SetConfig+0x148>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d00b      	beq.n	8004866 <TIM_Base_SetConfig+0xb2>
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	4a2b      	ldr	r2, [pc, #172]	; (8004900 <TIM_Base_SetConfig+0x14c>)
 8004852:	4293      	cmp	r3, r2
 8004854:	d007      	beq.n	8004866 <TIM_Base_SetConfig+0xb2>
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	4a2a      	ldr	r2, [pc, #168]	; (8004904 <TIM_Base_SetConfig+0x150>)
 800485a:	4293      	cmp	r3, r2
 800485c:	d003      	beq.n	8004866 <TIM_Base_SetConfig+0xb2>
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	4a29      	ldr	r2, [pc, #164]	; (8004908 <TIM_Base_SetConfig+0x154>)
 8004862:	4293      	cmp	r3, r2
 8004864:	d108      	bne.n	8004878 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800486c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800486e:	683b      	ldr	r3, [r7, #0]
 8004870:	68db      	ldr	r3, [r3, #12]
 8004872:	68fa      	ldr	r2, [r7, #12]
 8004874:	4313      	orrs	r3, r2
 8004876:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004878:	68fb      	ldr	r3, [r7, #12]
 800487a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	4313      	orrs	r3, r2
 8004884:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	68fa      	ldr	r2, [r7, #12]
 800488a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800488c:	683b      	ldr	r3, [r7, #0]
 800488e:	689a      	ldr	r2, [r3, #8]
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004894:	683b      	ldr	r3, [r7, #0]
 8004896:	681a      	ldr	r2, [r3, #0]
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800489c:	687b      	ldr	r3, [r7, #4]
 800489e:	4a10      	ldr	r2, [pc, #64]	; (80048e0 <TIM_Base_SetConfig+0x12c>)
 80048a0:	4293      	cmp	r3, r2
 80048a2:	d003      	beq.n	80048ac <TIM_Base_SetConfig+0xf8>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	4a12      	ldr	r2, [pc, #72]	; (80048f0 <TIM_Base_SetConfig+0x13c>)
 80048a8:	4293      	cmp	r3, r2
 80048aa:	d103      	bne.n	80048b4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	691a      	ldr	r2, [r3, #16]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	691b      	ldr	r3, [r3, #16]
 80048be:	f003 0301 	and.w	r3, r3, #1
 80048c2:	2b01      	cmp	r3, #1
 80048c4:	d105      	bne.n	80048d2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	691b      	ldr	r3, [r3, #16]
 80048ca:	f023 0201 	bic.w	r2, r3, #1
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	611a      	str	r2, [r3, #16]
  }
}
 80048d2:	bf00      	nop
 80048d4:	3714      	adds	r7, #20
 80048d6:	46bd      	mov	sp, r7
 80048d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048dc:	4770      	bx	lr
 80048de:	bf00      	nop
 80048e0:	40010000 	.word	0x40010000
 80048e4:	40000400 	.word	0x40000400
 80048e8:	40000800 	.word	0x40000800
 80048ec:	40000c00 	.word	0x40000c00
 80048f0:	40010400 	.word	0x40010400
 80048f4:	40014000 	.word	0x40014000
 80048f8:	40014400 	.word	0x40014400
 80048fc:	40014800 	.word	0x40014800
 8004900:	40001800 	.word	0x40001800
 8004904:	40001c00 	.word	0x40001c00
 8004908:	40002000 	.word	0x40002000

0800490c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800490c:	b480      	push	{r7}
 800490e:	b087      	sub	sp, #28
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	6a1b      	ldr	r3, [r3, #32]
 800491a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	6a1b      	ldr	r3, [r3, #32]
 8004920:	f023 0201 	bic.w	r2, r3, #1
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	685b      	ldr	r3, [r3, #4]
 800492c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	699b      	ldr	r3, [r3, #24]
 8004932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800493a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800493c:	68fb      	ldr	r3, [r7, #12]
 800493e:	f023 0303 	bic.w	r3, r3, #3
 8004942:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004944:	683b      	ldr	r3, [r7, #0]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	68fa      	ldr	r2, [r7, #12]
 800494a:	4313      	orrs	r3, r2
 800494c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800494e:	697b      	ldr	r3, [r7, #20]
 8004950:	f023 0302 	bic.w	r3, r3, #2
 8004954:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004956:	683b      	ldr	r3, [r7, #0]
 8004958:	689b      	ldr	r3, [r3, #8]
 800495a:	697a      	ldr	r2, [r7, #20]
 800495c:	4313      	orrs	r3, r2
 800495e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	4a20      	ldr	r2, [pc, #128]	; (80049e4 <TIM_OC1_SetConfig+0xd8>)
 8004964:	4293      	cmp	r3, r2
 8004966:	d003      	beq.n	8004970 <TIM_OC1_SetConfig+0x64>
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	4a1f      	ldr	r2, [pc, #124]	; (80049e8 <TIM_OC1_SetConfig+0xdc>)
 800496c:	4293      	cmp	r3, r2
 800496e:	d10c      	bne.n	800498a <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004970:	697b      	ldr	r3, [r7, #20]
 8004972:	f023 0308 	bic.w	r3, r3, #8
 8004976:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	68db      	ldr	r3, [r3, #12]
 800497c:	697a      	ldr	r2, [r7, #20]
 800497e:	4313      	orrs	r3, r2
 8004980:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004982:	697b      	ldr	r3, [r7, #20]
 8004984:	f023 0304 	bic.w	r3, r3, #4
 8004988:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	4a15      	ldr	r2, [pc, #84]	; (80049e4 <TIM_OC1_SetConfig+0xd8>)
 800498e:	4293      	cmp	r3, r2
 8004990:	d003      	beq.n	800499a <TIM_OC1_SetConfig+0x8e>
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	4a14      	ldr	r2, [pc, #80]	; (80049e8 <TIM_OC1_SetConfig+0xdc>)
 8004996:	4293      	cmp	r3, r2
 8004998:	d111      	bne.n	80049be <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800499a:	693b      	ldr	r3, [r7, #16]
 800499c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80049a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80049a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80049aa:	683b      	ldr	r3, [r7, #0]
 80049ac:	695b      	ldr	r3, [r3, #20]
 80049ae:	693a      	ldr	r2, [r7, #16]
 80049b0:	4313      	orrs	r3, r2
 80049b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80049b4:	683b      	ldr	r3, [r7, #0]
 80049b6:	699b      	ldr	r3, [r3, #24]
 80049b8:	693a      	ldr	r2, [r7, #16]
 80049ba:	4313      	orrs	r3, r2
 80049bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	693a      	ldr	r2, [r7, #16]
 80049c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	68fa      	ldr	r2, [r7, #12]
 80049c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80049ca:	683b      	ldr	r3, [r7, #0]
 80049cc:	685a      	ldr	r2, [r3, #4]
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	697a      	ldr	r2, [r7, #20]
 80049d6:	621a      	str	r2, [r3, #32]
}
 80049d8:	bf00      	nop
 80049da:	371c      	adds	r7, #28
 80049dc:	46bd      	mov	sp, r7
 80049de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049e2:	4770      	bx	lr
 80049e4:	40010000 	.word	0x40010000
 80049e8:	40010400 	.word	0x40010400

080049ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80049ec:	b480      	push	{r7}
 80049ee:	b087      	sub	sp, #28
 80049f0:	af00      	add	r7, sp, #0
 80049f2:	6078      	str	r0, [r7, #4]
 80049f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	6a1b      	ldr	r3, [r3, #32]
 80049fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6a1b      	ldr	r3, [r3, #32]
 8004a00:	f023 0210 	bic.w	r2, r3, #16
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	699b      	ldr	r3, [r3, #24]
 8004a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004a1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a22:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004a24:	683b      	ldr	r3, [r7, #0]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	021b      	lsls	r3, r3, #8
 8004a2a:	68fa      	ldr	r2, [r7, #12]
 8004a2c:	4313      	orrs	r3, r2
 8004a2e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004a30:	697b      	ldr	r3, [r7, #20]
 8004a32:	f023 0320 	bic.w	r3, r3, #32
 8004a36:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004a38:	683b      	ldr	r3, [r7, #0]
 8004a3a:	689b      	ldr	r3, [r3, #8]
 8004a3c:	011b      	lsls	r3, r3, #4
 8004a3e:	697a      	ldr	r2, [r7, #20]
 8004a40:	4313      	orrs	r3, r2
 8004a42:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	4a22      	ldr	r2, [pc, #136]	; (8004ad0 <TIM_OC2_SetConfig+0xe4>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d003      	beq.n	8004a54 <TIM_OC2_SetConfig+0x68>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	4a21      	ldr	r2, [pc, #132]	; (8004ad4 <TIM_OC2_SetConfig+0xe8>)
 8004a50:	4293      	cmp	r3, r2
 8004a52:	d10d      	bne.n	8004a70 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004a54:	697b      	ldr	r3, [r7, #20]
 8004a56:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a5a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004a5c:	683b      	ldr	r3, [r7, #0]
 8004a5e:	68db      	ldr	r3, [r3, #12]
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	697a      	ldr	r2, [r7, #20]
 8004a64:	4313      	orrs	r3, r2
 8004a66:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004a68:	697b      	ldr	r3, [r7, #20]
 8004a6a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a6e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	4a17      	ldr	r2, [pc, #92]	; (8004ad0 <TIM_OC2_SetConfig+0xe4>)
 8004a74:	4293      	cmp	r3, r2
 8004a76:	d003      	beq.n	8004a80 <TIM_OC2_SetConfig+0x94>
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	4a16      	ldr	r2, [pc, #88]	; (8004ad4 <TIM_OC2_SetConfig+0xe8>)
 8004a7c:	4293      	cmp	r3, r2
 8004a7e:	d113      	bne.n	8004aa8 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004a80:	693b      	ldr	r3, [r7, #16]
 8004a82:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004a86:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004a88:	693b      	ldr	r3, [r7, #16]
 8004a8a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a8e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004a90:	683b      	ldr	r3, [r7, #0]
 8004a92:	695b      	ldr	r3, [r3, #20]
 8004a94:	009b      	lsls	r3, r3, #2
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	4313      	orrs	r3, r2
 8004a9a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004a9c:	683b      	ldr	r3, [r7, #0]
 8004a9e:	699b      	ldr	r3, [r3, #24]
 8004aa0:	009b      	lsls	r3, r3, #2
 8004aa2:	693a      	ldr	r2, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	693a      	ldr	r2, [r7, #16]
 8004aac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	68fa      	ldr	r2, [r7, #12]
 8004ab2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004ab4:	683b      	ldr	r3, [r7, #0]
 8004ab6:	685a      	ldr	r2, [r3, #4]
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	697a      	ldr	r2, [r7, #20]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
 8004ace:	bf00      	nop
 8004ad0:	40010000 	.word	0x40010000
 8004ad4:	40010400 	.word	0x40010400

08004ad8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b087      	sub	sp, #28
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a1b      	ldr	r3, [r3, #32]
 8004aec:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	685b      	ldr	r3, [r3, #4]
 8004af8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004b00:	68fb      	ldr	r3, [r7, #12]
 8004b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b06:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0303 	bic.w	r3, r3, #3
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004b1a:	697b      	ldr	r3, [r7, #20]
 8004b1c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004b20:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	689b      	ldr	r3, [r3, #8]
 8004b26:	021b      	lsls	r3, r3, #8
 8004b28:	697a      	ldr	r2, [r7, #20]
 8004b2a:	4313      	orrs	r3, r2
 8004b2c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	4a21      	ldr	r2, [pc, #132]	; (8004bb8 <TIM_OC3_SetConfig+0xe0>)
 8004b32:	4293      	cmp	r3, r2
 8004b34:	d003      	beq.n	8004b3e <TIM_OC3_SetConfig+0x66>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	4a20      	ldr	r2, [pc, #128]	; (8004bbc <TIM_OC3_SetConfig+0xe4>)
 8004b3a:	4293      	cmp	r3, r2
 8004b3c:	d10d      	bne.n	8004b5a <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004b3e:	697b      	ldr	r3, [r7, #20]
 8004b40:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004b44:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004b46:	683b      	ldr	r3, [r7, #0]
 8004b48:	68db      	ldr	r3, [r3, #12]
 8004b4a:	021b      	lsls	r3, r3, #8
 8004b4c:	697a      	ldr	r2, [r7, #20]
 8004b4e:	4313      	orrs	r3, r2
 8004b50:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004b52:	697b      	ldr	r3, [r7, #20]
 8004b54:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004b58:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	4a16      	ldr	r2, [pc, #88]	; (8004bb8 <TIM_OC3_SetConfig+0xe0>)
 8004b5e:	4293      	cmp	r3, r2
 8004b60:	d003      	beq.n	8004b6a <TIM_OC3_SetConfig+0x92>
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	4a15      	ldr	r2, [pc, #84]	; (8004bbc <TIM_OC3_SetConfig+0xe4>)
 8004b66:	4293      	cmp	r3, r2
 8004b68:	d113      	bne.n	8004b92 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004b6a:	693b      	ldr	r3, [r7, #16]
 8004b6c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004b70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004b78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	695b      	ldr	r3, [r3, #20]
 8004b7e:	011b      	lsls	r3, r3, #4
 8004b80:	693a      	ldr	r2, [r7, #16]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004b86:	683b      	ldr	r3, [r7, #0]
 8004b88:	699b      	ldr	r3, [r3, #24]
 8004b8a:	011b      	lsls	r3, r3, #4
 8004b8c:	693a      	ldr	r2, [r7, #16]
 8004b8e:	4313      	orrs	r3, r2
 8004b90:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	693a      	ldr	r2, [r7, #16]
 8004b96:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68fa      	ldr	r2, [r7, #12]
 8004b9c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004b9e:	683b      	ldr	r3, [r7, #0]
 8004ba0:	685a      	ldr	r2, [r3, #4]
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	697a      	ldr	r2, [r7, #20]
 8004baa:	621a      	str	r2, [r3, #32]
}
 8004bac:	bf00      	nop
 8004bae:	371c      	adds	r7, #28
 8004bb0:	46bd      	mov	sp, r7
 8004bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bb6:	4770      	bx	lr
 8004bb8:	40010000 	.word	0x40010000
 8004bbc:	40010400 	.word	0x40010400

08004bc0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004bc0:	b480      	push	{r7}
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	af00      	add	r7, sp, #0
 8004bc6:	6078      	str	r0, [r7, #4]
 8004bc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6a1b      	ldr	r3, [r3, #32]
 8004bce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6a1b      	ldr	r3, [r3, #32]
 8004bd4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	685b      	ldr	r3, [r3, #4]
 8004be0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004be2:	687b      	ldr	r3, [r7, #4]
 8004be4:	69db      	ldr	r3, [r3, #28]
 8004be6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004bee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004bf0:	68fb      	ldr	r3, [r7, #12]
 8004bf2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004bf6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	021b      	lsls	r3, r3, #8
 8004bfe:	68fa      	ldr	r2, [r7, #12]
 8004c00:	4313      	orrs	r3, r2
 8004c02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004c04:	693b      	ldr	r3, [r7, #16]
 8004c06:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004c0a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004c0c:	683b      	ldr	r3, [r7, #0]
 8004c0e:	689b      	ldr	r3, [r3, #8]
 8004c10:	031b      	lsls	r3, r3, #12
 8004c12:	693a      	ldr	r2, [r7, #16]
 8004c14:	4313      	orrs	r3, r2
 8004c16:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	4a12      	ldr	r2, [pc, #72]	; (8004c64 <TIM_OC4_SetConfig+0xa4>)
 8004c1c:	4293      	cmp	r3, r2
 8004c1e:	d003      	beq.n	8004c28 <TIM_OC4_SetConfig+0x68>
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	4a11      	ldr	r2, [pc, #68]	; (8004c68 <TIM_OC4_SetConfig+0xa8>)
 8004c24:	4293      	cmp	r3, r2
 8004c26:	d109      	bne.n	8004c3c <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004c28:	697b      	ldr	r3, [r7, #20]
 8004c2a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004c2e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004c30:	683b      	ldr	r3, [r7, #0]
 8004c32:	695b      	ldr	r3, [r3, #20]
 8004c34:	019b      	lsls	r3, r3, #6
 8004c36:	697a      	ldr	r2, [r7, #20]
 8004c38:	4313      	orrs	r3, r2
 8004c3a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	697a      	ldr	r2, [r7, #20]
 8004c40:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	68fa      	ldr	r2, [r7, #12]
 8004c46:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004c48:	683b      	ldr	r3, [r7, #0]
 8004c4a:	685a      	ldr	r2, [r3, #4]
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	693a      	ldr	r2, [r7, #16]
 8004c54:	621a      	str	r2, [r3, #32]
}
 8004c56:	bf00      	nop
 8004c58:	371c      	adds	r7, #28
 8004c5a:	46bd      	mov	sp, r7
 8004c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c60:	4770      	bx	lr
 8004c62:	bf00      	nop
 8004c64:	40010000 	.word	0x40010000
 8004c68:	40010400 	.word	0x40010400

08004c6c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004c6c:	b480      	push	{r7}
 8004c6e:	b087      	sub	sp, #28
 8004c70:	af00      	add	r7, sp, #0
 8004c72:	60f8      	str	r0, [r7, #12]
 8004c74:	60b9      	str	r1, [r7, #8]
 8004c76:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	6a1b      	ldr	r3, [r3, #32]
 8004c7c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	6a1b      	ldr	r3, [r3, #32]
 8004c82:	f023 0201 	bic.w	r2, r3, #1
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	699b      	ldr	r3, [r3, #24]
 8004c8e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004c90:	693b      	ldr	r3, [r7, #16]
 8004c92:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004c96:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	011b      	lsls	r3, r3, #4
 8004c9c:	693a      	ldr	r2, [r7, #16]
 8004c9e:	4313      	orrs	r3, r2
 8004ca0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004ca2:	697b      	ldr	r3, [r7, #20]
 8004ca4:	f023 030a 	bic.w	r3, r3, #10
 8004ca8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004caa:	697a      	ldr	r2, [r7, #20]
 8004cac:	68bb      	ldr	r3, [r7, #8]
 8004cae:	4313      	orrs	r3, r2
 8004cb0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004cb2:	68fb      	ldr	r3, [r7, #12]
 8004cb4:	693a      	ldr	r2, [r7, #16]
 8004cb6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004cb8:	68fb      	ldr	r3, [r7, #12]
 8004cba:	697a      	ldr	r2, [r7, #20]
 8004cbc:	621a      	str	r2, [r3, #32]
}
 8004cbe:	bf00      	nop
 8004cc0:	371c      	adds	r7, #28
 8004cc2:	46bd      	mov	sp, r7
 8004cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc8:	4770      	bx	lr

08004cca <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004cca:	b480      	push	{r7}
 8004ccc:	b087      	sub	sp, #28
 8004cce:	af00      	add	r7, sp, #0
 8004cd0:	60f8      	str	r0, [r7, #12]
 8004cd2:	60b9      	str	r1, [r7, #8]
 8004cd4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	6a1b      	ldr	r3, [r3, #32]
 8004cda:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	6a1b      	ldr	r3, [r3, #32]
 8004ce0:	f023 0210 	bic.w	r2, r3, #16
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	699b      	ldr	r3, [r3, #24]
 8004cec:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004cee:	693b      	ldr	r3, [r7, #16]
 8004cf0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004cf4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	031b      	lsls	r3, r3, #12
 8004cfa:	693a      	ldr	r2, [r7, #16]
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004d06:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004d08:	68bb      	ldr	r3, [r7, #8]
 8004d0a:	011b      	lsls	r3, r3, #4
 8004d0c:	697a      	ldr	r2, [r7, #20]
 8004d0e:	4313      	orrs	r3, r2
 8004d10:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004d12:	68fb      	ldr	r3, [r7, #12]
 8004d14:	693a      	ldr	r2, [r7, #16]
 8004d16:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004d18:	68fb      	ldr	r3, [r7, #12]
 8004d1a:	697a      	ldr	r2, [r7, #20]
 8004d1c:	621a      	str	r2, [r3, #32]
}
 8004d1e:	bf00      	nop
 8004d20:	371c      	adds	r7, #28
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004d2a:	b480      	push	{r7}
 8004d2c:	b085      	sub	sp, #20
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	689b      	ldr	r3, [r3, #8]
 8004d38:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004d3a:	68fb      	ldr	r3, [r7, #12]
 8004d3c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d40:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004d42:	683a      	ldr	r2, [r7, #0]
 8004d44:	68fb      	ldr	r3, [r7, #12]
 8004d46:	4313      	orrs	r3, r2
 8004d48:	f043 0307 	orr.w	r3, r3, #7
 8004d4c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d4e:	687b      	ldr	r3, [r7, #4]
 8004d50:	68fa      	ldr	r2, [r7, #12]
 8004d52:	609a      	str	r2, [r3, #8]
}
 8004d54:	bf00      	nop
 8004d56:	3714      	adds	r7, #20
 8004d58:	46bd      	mov	sp, r7
 8004d5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d5e:	4770      	bx	lr

08004d60 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004d60:	b480      	push	{r7}
 8004d62:	b087      	sub	sp, #28
 8004d64:	af00      	add	r7, sp, #0
 8004d66:	60f8      	str	r0, [r7, #12]
 8004d68:	60b9      	str	r1, [r7, #8]
 8004d6a:	607a      	str	r2, [r7, #4]
 8004d6c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	689b      	ldr	r3, [r3, #8]
 8004d72:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004d74:	697b      	ldr	r3, [r7, #20]
 8004d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004d7a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004d7c:	683b      	ldr	r3, [r7, #0]
 8004d7e:	021a      	lsls	r2, r3, #8
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	431a      	orrs	r2, r3
 8004d84:	68bb      	ldr	r3, [r7, #8]
 8004d86:	4313      	orrs	r3, r2
 8004d88:	697a      	ldr	r2, [r7, #20]
 8004d8a:	4313      	orrs	r3, r2
 8004d8c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	697a      	ldr	r2, [r7, #20]
 8004d92:	609a      	str	r2, [r3, #8]
}
 8004d94:	bf00      	nop
 8004d96:	371c      	adds	r7, #28
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b087      	sub	sp, #28
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	60f8      	str	r0, [r7, #12]
 8004da8:	60b9      	str	r1, [r7, #8]
 8004daa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004dac:	68bb      	ldr	r3, [r7, #8]
 8004dae:	f003 031f 	and.w	r3, r3, #31
 8004db2:	2201      	movs	r2, #1
 8004db4:	fa02 f303 	lsl.w	r3, r2, r3
 8004db8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004dba:	68fb      	ldr	r3, [r7, #12]
 8004dbc:	6a1a      	ldr	r2, [r3, #32]
 8004dbe:	697b      	ldr	r3, [r7, #20]
 8004dc0:	43db      	mvns	r3, r3
 8004dc2:	401a      	ands	r2, r3
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	6a1a      	ldr	r2, [r3, #32]
 8004dcc:	68bb      	ldr	r3, [r7, #8]
 8004dce:	f003 031f 	and.w	r3, r3, #31
 8004dd2:	6879      	ldr	r1, [r7, #4]
 8004dd4:	fa01 f303 	lsl.w	r3, r1, r3
 8004dd8:	431a      	orrs	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	621a      	str	r2, [r3, #32]
}
 8004dde:	bf00      	nop
 8004de0:	371c      	adds	r7, #28
 8004de2:	46bd      	mov	sp, r7
 8004de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de8:	4770      	bx	lr
	...

08004dec <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004dec:	b480      	push	{r7}
 8004dee:	b085      	sub	sp, #20
 8004df0:	af00      	add	r7, sp, #0
 8004df2:	6078      	str	r0, [r7, #4]
 8004df4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004df6:	687b      	ldr	r3, [r7, #4]
 8004df8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004dfc:	2b01      	cmp	r3, #1
 8004dfe:	d101      	bne.n	8004e04 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004e00:	2302      	movs	r3, #2
 8004e02:	e05a      	b.n	8004eba <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	2201      	movs	r2, #1
 8004e08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	2202      	movs	r2, #2
 8004e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	681b      	ldr	r3, [r3, #0]
 8004e20:	689b      	ldr	r3, [r3, #8]
 8004e22:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e2a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004e2c:	683b      	ldr	r3, [r7, #0]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	68fa      	ldr	r2, [r7, #12]
 8004e32:	4313      	orrs	r3, r2
 8004e34:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004e36:	687b      	ldr	r3, [r7, #4]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	68fa      	ldr	r2, [r7, #12]
 8004e3c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	4a21      	ldr	r2, [pc, #132]	; (8004ec8 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004e44:	4293      	cmp	r3, r2
 8004e46:	d022      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	681b      	ldr	r3, [r3, #0]
 8004e4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004e50:	d01d      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a1d      	ldr	r2, [pc, #116]	; (8004ecc <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004e58:	4293      	cmp	r3, r2
 8004e5a:	d018      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	681b      	ldr	r3, [r3, #0]
 8004e60:	4a1b      	ldr	r2, [pc, #108]	; (8004ed0 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004e62:	4293      	cmp	r3, r2
 8004e64:	d013      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	4a1a      	ldr	r2, [pc, #104]	; (8004ed4 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004e6c:	4293      	cmp	r3, r2
 8004e6e:	d00e      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	681b      	ldr	r3, [r3, #0]
 8004e74:	4a18      	ldr	r2, [pc, #96]	; (8004ed8 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004e76:	4293      	cmp	r3, r2
 8004e78:	d009      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e7a:	687b      	ldr	r3, [r7, #4]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	4a17      	ldr	r2, [pc, #92]	; (8004edc <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004e80:	4293      	cmp	r3, r2
 8004e82:	d004      	beq.n	8004e8e <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	4a15      	ldr	r2, [pc, #84]	; (8004ee0 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004e8a:	4293      	cmp	r3, r2
 8004e8c:	d10c      	bne.n	8004ea8 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004e94:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	68ba      	ldr	r2, [r7, #8]
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	68ba      	ldr	r2, [r7, #8]
 8004ea6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004eb8:	2300      	movs	r3, #0
}
 8004eba:	4618      	mov	r0, r3
 8004ebc:	3714      	adds	r7, #20
 8004ebe:	46bd      	mov	sp, r7
 8004ec0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ec4:	4770      	bx	lr
 8004ec6:	bf00      	nop
 8004ec8:	40010000 	.word	0x40010000
 8004ecc:	40000400 	.word	0x40000400
 8004ed0:	40000800 	.word	0x40000800
 8004ed4:	40000c00 	.word	0x40000c00
 8004ed8:	40010400 	.word	0x40010400
 8004edc:	40014000 	.word	0x40014000
 8004ee0:	40001800 	.word	0x40001800

08004ee4 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                const TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8004ee4:	b480      	push	{r7}
 8004ee6:	b085      	sub	sp, #20
 8004ee8:	af00      	add	r7, sp, #0
 8004eea:	6078      	str	r0, [r7, #4]
 8004eec:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8004eee:	2300      	movs	r3, #0
 8004ef0:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ef8:	2b01      	cmp	r3, #1
 8004efa:	d101      	bne.n	8004f00 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8004efc:	2302      	movs	r3, #2
 8004efe:	e03d      	b.n	8004f7c <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	2201      	movs	r2, #1
 8004f04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8004f0e:	683b      	ldr	r3, [r7, #0]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	4313      	orrs	r3, r2
 8004f14:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8004f16:	68fb      	ldr	r3, [r7, #12]
 8004f18:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004f1c:	683b      	ldr	r3, [r7, #0]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	685b      	ldr	r3, [r3, #4]
 8004f2e:	4313      	orrs	r3, r2
 8004f30:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8004f38:	683b      	ldr	r3, [r7, #0]
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	4313      	orrs	r3, r2
 8004f3e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004f46:	683b      	ldr	r3, [r7, #0]
 8004f48:	691b      	ldr	r3, [r3, #16]
 8004f4a:	4313      	orrs	r3, r2
 8004f4c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8004f4e:	68fb      	ldr	r3, [r7, #12]
 8004f50:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8004f54:	683b      	ldr	r3, [r7, #0]
 8004f56:	695b      	ldr	r3, [r3, #20]
 8004f58:	4313      	orrs	r3, r2
 8004f5a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	69db      	ldr	r3, [r3, #28]
 8004f66:	4313      	orrs	r3, r2
 8004f68:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	68fa      	ldr	r2, [r7, #12]
 8004f70:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8004f72:	687b      	ldr	r3, [r7, #4]
 8004f74:	2200      	movs	r2, #0
 8004f76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004f7a:	2300      	movs	r3, #0
}
 8004f7c:	4618      	mov	r0, r3
 8004f7e:	3714      	adds	r7, #20
 8004f80:	46bd      	mov	sp, r7
 8004f82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f86:	4770      	bx	lr

08004f88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004f88:	b580      	push	{r7, lr}
 8004f8a:	b082      	sub	sp, #8
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2b00      	cmp	r3, #0
 8004f94:	d101      	bne.n	8004f9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004f96:	2301      	movs	r3, #1
 8004f98:	e042      	b.n	8005020 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004fa0:	b2db      	uxtb	r3, r3
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d106      	bne.n	8004fb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	2200      	movs	r2, #0
 8004faa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004fae:	6878      	ldr	r0, [r7, #4]
 8004fb0:	f7fd fa1e 	bl	80023f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	2224      	movs	r2, #36	; 0x24
 8004fb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	68da      	ldr	r2, [r3, #12]
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004fca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004fcc:	6878      	ldr	r0, [r7, #4]
 8004fce:	f000 f82b 	bl	8005028 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	691a      	ldr	r2, [r3, #16]
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	681b      	ldr	r3, [r3, #0]
 8004fdc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004fe0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	695a      	ldr	r2, [r3, #20]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004ff0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	68da      	ldr	r2, [r3, #12]
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005000:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	2200      	movs	r2, #0
 8005006:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	2220      	movs	r2, #32
 800500c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	2220      	movs	r2, #32
 8005014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	2200      	movs	r2, #0
 800501c:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 800501e:	2300      	movs	r3, #0
}
 8005020:	4618      	mov	r0, r3
 8005022:	3708      	adds	r7, #8
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005028:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800502c:	b0c0      	sub	sp, #256	; 0x100
 800502e:	af00      	add	r7, sp, #0
 8005030:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005034:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005038:	681b      	ldr	r3, [r3, #0]
 800503a:	691b      	ldr	r3, [r3, #16]
 800503c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005040:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005044:	68d9      	ldr	r1, [r3, #12]
 8005046:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800504a:	681a      	ldr	r2, [r3, #0]
 800504c:	ea40 0301 	orr.w	r3, r0, r1
 8005050:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005052:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005056:	689a      	ldr	r2, [r3, #8]
 8005058:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800505c:	691b      	ldr	r3, [r3, #16]
 800505e:	431a      	orrs	r2, r3
 8005060:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005064:	695b      	ldr	r3, [r3, #20]
 8005066:	431a      	orrs	r2, r3
 8005068:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800506c:	69db      	ldr	r3, [r3, #28]
 800506e:	4313      	orrs	r3, r2
 8005070:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005074:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	68db      	ldr	r3, [r3, #12]
 800507c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005080:	f021 010c 	bic.w	r1, r1, #12
 8005084:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005088:	681a      	ldr	r2, [r3, #0]
 800508a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800508e:	430b      	orrs	r3, r1
 8005090:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005092:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	695b      	ldr	r3, [r3, #20]
 800509a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800509e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a2:	6999      	ldr	r1, [r3, #24]
 80050a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050a8:	681a      	ldr	r2, [r3, #0]
 80050aa:	ea40 0301 	orr.w	r3, r0, r1
 80050ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80050b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	4b8f      	ldr	r3, [pc, #572]	; (80052f4 <UART_SetConfig+0x2cc>)
 80050b8:	429a      	cmp	r2, r3
 80050ba:	d005      	beq.n	80050c8 <UART_SetConfig+0xa0>
 80050bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050c0:	681a      	ldr	r2, [r3, #0]
 80050c2:	4b8d      	ldr	r3, [pc, #564]	; (80052f8 <UART_SetConfig+0x2d0>)
 80050c4:	429a      	cmp	r2, r3
 80050c6:	d104      	bne.n	80050d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80050c8:	f7fe fec6 	bl	8003e58 <HAL_RCC_GetPCLK2Freq>
 80050cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80050d0:	e003      	b.n	80050da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80050d2:	f7fe fead 	bl	8003e30 <HAL_RCC_GetPCLK1Freq>
 80050d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80050da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80050de:	69db      	ldr	r3, [r3, #28]
 80050e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80050e4:	f040 810c 	bne.w	8005300 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80050e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80050ec:	2200      	movs	r2, #0
 80050ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80050f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80050f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80050fa:	4622      	mov	r2, r4
 80050fc:	462b      	mov	r3, r5
 80050fe:	1891      	adds	r1, r2, r2
 8005100:	65b9      	str	r1, [r7, #88]	; 0x58
 8005102:	415b      	adcs	r3, r3
 8005104:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005106:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800510a:	4621      	mov	r1, r4
 800510c:	eb12 0801 	adds.w	r8, r2, r1
 8005110:	4629      	mov	r1, r5
 8005112:	eb43 0901 	adc.w	r9, r3, r1
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005122:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005126:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800512a:	4690      	mov	r8, r2
 800512c:	4699      	mov	r9, r3
 800512e:	4623      	mov	r3, r4
 8005130:	eb18 0303 	adds.w	r3, r8, r3
 8005134:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005138:	462b      	mov	r3, r5
 800513a:	eb49 0303 	adc.w	r3, r9, r3
 800513e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005142:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005146:	685b      	ldr	r3, [r3, #4]
 8005148:	2200      	movs	r2, #0
 800514a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800514e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005152:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005156:	460b      	mov	r3, r1
 8005158:	18db      	adds	r3, r3, r3
 800515a:	653b      	str	r3, [r7, #80]	; 0x50
 800515c:	4613      	mov	r3, r2
 800515e:	eb42 0303 	adc.w	r3, r2, r3
 8005162:	657b      	str	r3, [r7, #84]	; 0x54
 8005164:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005168:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800516c:	f7fb fb8a 	bl	8000884 <__aeabi_uldivmod>
 8005170:	4602      	mov	r2, r0
 8005172:	460b      	mov	r3, r1
 8005174:	4b61      	ldr	r3, [pc, #388]	; (80052fc <UART_SetConfig+0x2d4>)
 8005176:	fba3 2302 	umull	r2, r3, r3, r2
 800517a:	095b      	lsrs	r3, r3, #5
 800517c:	011c      	lsls	r4, r3, #4
 800517e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005182:	2200      	movs	r2, #0
 8005184:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005188:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800518c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005190:	4642      	mov	r2, r8
 8005192:	464b      	mov	r3, r9
 8005194:	1891      	adds	r1, r2, r2
 8005196:	64b9      	str	r1, [r7, #72]	; 0x48
 8005198:	415b      	adcs	r3, r3
 800519a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800519c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80051a0:	4641      	mov	r1, r8
 80051a2:	eb12 0a01 	adds.w	sl, r2, r1
 80051a6:	4649      	mov	r1, r9
 80051a8:	eb43 0b01 	adc.w	fp, r3, r1
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80051b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80051bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80051c0:	4692      	mov	sl, r2
 80051c2:	469b      	mov	fp, r3
 80051c4:	4643      	mov	r3, r8
 80051c6:	eb1a 0303 	adds.w	r3, sl, r3
 80051ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80051ce:	464b      	mov	r3, r9
 80051d0:	eb4b 0303 	adc.w	r3, fp, r3
 80051d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80051d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051dc:	685b      	ldr	r3, [r3, #4]
 80051de:	2200      	movs	r2, #0
 80051e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80051e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80051e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80051ec:	460b      	mov	r3, r1
 80051ee:	18db      	adds	r3, r3, r3
 80051f0:	643b      	str	r3, [r7, #64]	; 0x40
 80051f2:	4613      	mov	r3, r2
 80051f4:	eb42 0303 	adc.w	r3, r2, r3
 80051f8:	647b      	str	r3, [r7, #68]	; 0x44
 80051fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80051fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005202:	f7fb fb3f 	bl	8000884 <__aeabi_uldivmod>
 8005206:	4602      	mov	r2, r0
 8005208:	460b      	mov	r3, r1
 800520a:	4611      	mov	r1, r2
 800520c:	4b3b      	ldr	r3, [pc, #236]	; (80052fc <UART_SetConfig+0x2d4>)
 800520e:	fba3 2301 	umull	r2, r3, r3, r1
 8005212:	095b      	lsrs	r3, r3, #5
 8005214:	2264      	movs	r2, #100	; 0x64
 8005216:	fb02 f303 	mul.w	r3, r2, r3
 800521a:	1acb      	subs	r3, r1, r3
 800521c:	00db      	lsls	r3, r3, #3
 800521e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005222:	4b36      	ldr	r3, [pc, #216]	; (80052fc <UART_SetConfig+0x2d4>)
 8005224:	fba3 2302 	umull	r2, r3, r3, r2
 8005228:	095b      	lsrs	r3, r3, #5
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005230:	441c      	add	r4, r3
 8005232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005236:	2200      	movs	r2, #0
 8005238:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800523c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005240:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005244:	4642      	mov	r2, r8
 8005246:	464b      	mov	r3, r9
 8005248:	1891      	adds	r1, r2, r2
 800524a:	63b9      	str	r1, [r7, #56]	; 0x38
 800524c:	415b      	adcs	r3, r3
 800524e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005250:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005254:	4641      	mov	r1, r8
 8005256:	1851      	adds	r1, r2, r1
 8005258:	6339      	str	r1, [r7, #48]	; 0x30
 800525a:	4649      	mov	r1, r9
 800525c:	414b      	adcs	r3, r1
 800525e:	637b      	str	r3, [r7, #52]	; 0x34
 8005260:	f04f 0200 	mov.w	r2, #0
 8005264:	f04f 0300 	mov.w	r3, #0
 8005268:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800526c:	4659      	mov	r1, fp
 800526e:	00cb      	lsls	r3, r1, #3
 8005270:	4651      	mov	r1, sl
 8005272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005276:	4651      	mov	r1, sl
 8005278:	00ca      	lsls	r2, r1, #3
 800527a:	4610      	mov	r0, r2
 800527c:	4619      	mov	r1, r3
 800527e:	4603      	mov	r3, r0
 8005280:	4642      	mov	r2, r8
 8005282:	189b      	adds	r3, r3, r2
 8005284:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005288:	464b      	mov	r3, r9
 800528a:	460a      	mov	r2, r1
 800528c:	eb42 0303 	adc.w	r3, r2, r3
 8005290:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	2200      	movs	r2, #0
 800529c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80052a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80052a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80052a8:	460b      	mov	r3, r1
 80052aa:	18db      	adds	r3, r3, r3
 80052ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80052ae:	4613      	mov	r3, r2
 80052b0:	eb42 0303 	adc.w	r3, r2, r3
 80052b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80052b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80052ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80052be:	f7fb fae1 	bl	8000884 <__aeabi_uldivmod>
 80052c2:	4602      	mov	r2, r0
 80052c4:	460b      	mov	r3, r1
 80052c6:	4b0d      	ldr	r3, [pc, #52]	; (80052fc <UART_SetConfig+0x2d4>)
 80052c8:	fba3 1302 	umull	r1, r3, r3, r2
 80052cc:	095b      	lsrs	r3, r3, #5
 80052ce:	2164      	movs	r1, #100	; 0x64
 80052d0:	fb01 f303 	mul.w	r3, r1, r3
 80052d4:	1ad3      	subs	r3, r2, r3
 80052d6:	00db      	lsls	r3, r3, #3
 80052d8:	3332      	adds	r3, #50	; 0x32
 80052da:	4a08      	ldr	r2, [pc, #32]	; (80052fc <UART_SetConfig+0x2d4>)
 80052dc:	fba2 2303 	umull	r2, r3, r2, r3
 80052e0:	095b      	lsrs	r3, r3, #5
 80052e2:	f003 0207 	and.w	r2, r3, #7
 80052e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80052ea:	681b      	ldr	r3, [r3, #0]
 80052ec:	4422      	add	r2, r4
 80052ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80052f0:	e106      	b.n	8005500 <UART_SetConfig+0x4d8>
 80052f2:	bf00      	nop
 80052f4:	40011000 	.word	0x40011000
 80052f8:	40011400 	.word	0x40011400
 80052fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005300:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005304:	2200      	movs	r2, #0
 8005306:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800530a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800530e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005312:	4642      	mov	r2, r8
 8005314:	464b      	mov	r3, r9
 8005316:	1891      	adds	r1, r2, r2
 8005318:	6239      	str	r1, [r7, #32]
 800531a:	415b      	adcs	r3, r3
 800531c:	627b      	str	r3, [r7, #36]	; 0x24
 800531e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005322:	4641      	mov	r1, r8
 8005324:	1854      	adds	r4, r2, r1
 8005326:	4649      	mov	r1, r9
 8005328:	eb43 0501 	adc.w	r5, r3, r1
 800532c:	f04f 0200 	mov.w	r2, #0
 8005330:	f04f 0300 	mov.w	r3, #0
 8005334:	00eb      	lsls	r3, r5, #3
 8005336:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800533a:	00e2      	lsls	r2, r4, #3
 800533c:	4614      	mov	r4, r2
 800533e:	461d      	mov	r5, r3
 8005340:	4643      	mov	r3, r8
 8005342:	18e3      	adds	r3, r4, r3
 8005344:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005348:	464b      	mov	r3, r9
 800534a:	eb45 0303 	adc.w	r3, r5, r3
 800534e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005356:	685b      	ldr	r3, [r3, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800535e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005362:	f04f 0200 	mov.w	r2, #0
 8005366:	f04f 0300 	mov.w	r3, #0
 800536a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800536e:	4629      	mov	r1, r5
 8005370:	008b      	lsls	r3, r1, #2
 8005372:	4621      	mov	r1, r4
 8005374:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005378:	4621      	mov	r1, r4
 800537a:	008a      	lsls	r2, r1, #2
 800537c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005380:	f7fb fa80 	bl	8000884 <__aeabi_uldivmod>
 8005384:	4602      	mov	r2, r0
 8005386:	460b      	mov	r3, r1
 8005388:	4b60      	ldr	r3, [pc, #384]	; (800550c <UART_SetConfig+0x4e4>)
 800538a:	fba3 2302 	umull	r2, r3, r3, r2
 800538e:	095b      	lsrs	r3, r3, #5
 8005390:	011c      	lsls	r4, r3, #4
 8005392:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005396:	2200      	movs	r2, #0
 8005398:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800539c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80053a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80053a4:	4642      	mov	r2, r8
 80053a6:	464b      	mov	r3, r9
 80053a8:	1891      	adds	r1, r2, r2
 80053aa:	61b9      	str	r1, [r7, #24]
 80053ac:	415b      	adcs	r3, r3
 80053ae:	61fb      	str	r3, [r7, #28]
 80053b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053b4:	4641      	mov	r1, r8
 80053b6:	1851      	adds	r1, r2, r1
 80053b8:	6139      	str	r1, [r7, #16]
 80053ba:	4649      	mov	r1, r9
 80053bc:	414b      	adcs	r3, r1
 80053be:	617b      	str	r3, [r7, #20]
 80053c0:	f04f 0200 	mov.w	r2, #0
 80053c4:	f04f 0300 	mov.w	r3, #0
 80053c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80053cc:	4659      	mov	r1, fp
 80053ce:	00cb      	lsls	r3, r1, #3
 80053d0:	4651      	mov	r1, sl
 80053d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053d6:	4651      	mov	r1, sl
 80053d8:	00ca      	lsls	r2, r1, #3
 80053da:	4610      	mov	r0, r2
 80053dc:	4619      	mov	r1, r3
 80053de:	4603      	mov	r3, r0
 80053e0:	4642      	mov	r2, r8
 80053e2:	189b      	adds	r3, r3, r2
 80053e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80053e8:	464b      	mov	r3, r9
 80053ea:	460a      	mov	r2, r1
 80053ec:	eb42 0303 	adc.w	r3, r2, r3
 80053f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80053f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053f8:	685b      	ldr	r3, [r3, #4]
 80053fa:	2200      	movs	r2, #0
 80053fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80053fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005400:	f04f 0200 	mov.w	r2, #0
 8005404:	f04f 0300 	mov.w	r3, #0
 8005408:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800540c:	4649      	mov	r1, r9
 800540e:	008b      	lsls	r3, r1, #2
 8005410:	4641      	mov	r1, r8
 8005412:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005416:	4641      	mov	r1, r8
 8005418:	008a      	lsls	r2, r1, #2
 800541a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800541e:	f7fb fa31 	bl	8000884 <__aeabi_uldivmod>
 8005422:	4602      	mov	r2, r0
 8005424:	460b      	mov	r3, r1
 8005426:	4611      	mov	r1, r2
 8005428:	4b38      	ldr	r3, [pc, #224]	; (800550c <UART_SetConfig+0x4e4>)
 800542a:	fba3 2301 	umull	r2, r3, r3, r1
 800542e:	095b      	lsrs	r3, r3, #5
 8005430:	2264      	movs	r2, #100	; 0x64
 8005432:	fb02 f303 	mul.w	r3, r2, r3
 8005436:	1acb      	subs	r3, r1, r3
 8005438:	011b      	lsls	r3, r3, #4
 800543a:	3332      	adds	r3, #50	; 0x32
 800543c:	4a33      	ldr	r2, [pc, #204]	; (800550c <UART_SetConfig+0x4e4>)
 800543e:	fba2 2303 	umull	r2, r3, r2, r3
 8005442:	095b      	lsrs	r3, r3, #5
 8005444:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005448:	441c      	add	r4, r3
 800544a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800544e:	2200      	movs	r2, #0
 8005450:	673b      	str	r3, [r7, #112]	; 0x70
 8005452:	677a      	str	r2, [r7, #116]	; 0x74
 8005454:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005458:	4642      	mov	r2, r8
 800545a:	464b      	mov	r3, r9
 800545c:	1891      	adds	r1, r2, r2
 800545e:	60b9      	str	r1, [r7, #8]
 8005460:	415b      	adcs	r3, r3
 8005462:	60fb      	str	r3, [r7, #12]
 8005464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005468:	4641      	mov	r1, r8
 800546a:	1851      	adds	r1, r2, r1
 800546c:	6039      	str	r1, [r7, #0]
 800546e:	4649      	mov	r1, r9
 8005470:	414b      	adcs	r3, r1
 8005472:	607b      	str	r3, [r7, #4]
 8005474:	f04f 0200 	mov.w	r2, #0
 8005478:	f04f 0300 	mov.w	r3, #0
 800547c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005480:	4659      	mov	r1, fp
 8005482:	00cb      	lsls	r3, r1, #3
 8005484:	4651      	mov	r1, sl
 8005486:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800548a:	4651      	mov	r1, sl
 800548c:	00ca      	lsls	r2, r1, #3
 800548e:	4610      	mov	r0, r2
 8005490:	4619      	mov	r1, r3
 8005492:	4603      	mov	r3, r0
 8005494:	4642      	mov	r2, r8
 8005496:	189b      	adds	r3, r3, r2
 8005498:	66bb      	str	r3, [r7, #104]	; 0x68
 800549a:	464b      	mov	r3, r9
 800549c:	460a      	mov	r2, r1
 800549e:	eb42 0303 	adc.w	r3, r2, r3
 80054a2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a8:	685b      	ldr	r3, [r3, #4]
 80054aa:	2200      	movs	r2, #0
 80054ac:	663b      	str	r3, [r7, #96]	; 0x60
 80054ae:	667a      	str	r2, [r7, #100]	; 0x64
 80054b0:	f04f 0200 	mov.w	r2, #0
 80054b4:	f04f 0300 	mov.w	r3, #0
 80054b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80054bc:	4649      	mov	r1, r9
 80054be:	008b      	lsls	r3, r1, #2
 80054c0:	4641      	mov	r1, r8
 80054c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054c6:	4641      	mov	r1, r8
 80054c8:	008a      	lsls	r2, r1, #2
 80054ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80054ce:	f7fb f9d9 	bl	8000884 <__aeabi_uldivmod>
 80054d2:	4602      	mov	r2, r0
 80054d4:	460b      	mov	r3, r1
 80054d6:	4b0d      	ldr	r3, [pc, #52]	; (800550c <UART_SetConfig+0x4e4>)
 80054d8:	fba3 1302 	umull	r1, r3, r3, r2
 80054dc:	095b      	lsrs	r3, r3, #5
 80054de:	2164      	movs	r1, #100	; 0x64
 80054e0:	fb01 f303 	mul.w	r3, r1, r3
 80054e4:	1ad3      	subs	r3, r2, r3
 80054e6:	011b      	lsls	r3, r3, #4
 80054e8:	3332      	adds	r3, #50	; 0x32
 80054ea:	4a08      	ldr	r2, [pc, #32]	; (800550c <UART_SetConfig+0x4e4>)
 80054ec:	fba2 2303 	umull	r2, r3, r2, r3
 80054f0:	095b      	lsrs	r3, r3, #5
 80054f2:	f003 020f 	and.w	r2, r3, #15
 80054f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054fa:	681b      	ldr	r3, [r3, #0]
 80054fc:	4422      	add	r2, r4
 80054fe:	609a      	str	r2, [r3, #8]
}
 8005500:	bf00      	nop
 8005502:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005506:	46bd      	mov	sp, r7
 8005508:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800550c:	51eb851f 	.word	0x51eb851f

08005510 <memset>:
 8005510:	4402      	add	r2, r0
 8005512:	4603      	mov	r3, r0
 8005514:	4293      	cmp	r3, r2
 8005516:	d100      	bne.n	800551a <memset+0xa>
 8005518:	4770      	bx	lr
 800551a:	f803 1b01 	strb.w	r1, [r3], #1
 800551e:	e7f9      	b.n	8005514 <memset+0x4>

08005520 <__libc_init_array>:
 8005520:	b570      	push	{r4, r5, r6, lr}
 8005522:	4d0d      	ldr	r5, [pc, #52]	; (8005558 <__libc_init_array+0x38>)
 8005524:	4c0d      	ldr	r4, [pc, #52]	; (800555c <__libc_init_array+0x3c>)
 8005526:	1b64      	subs	r4, r4, r5
 8005528:	10a4      	asrs	r4, r4, #2
 800552a:	2600      	movs	r6, #0
 800552c:	42a6      	cmp	r6, r4
 800552e:	d109      	bne.n	8005544 <__libc_init_array+0x24>
 8005530:	4d0b      	ldr	r5, [pc, #44]	; (8005560 <__libc_init_array+0x40>)
 8005532:	4c0c      	ldr	r4, [pc, #48]	; (8005564 <__libc_init_array+0x44>)
 8005534:	f000 f818 	bl	8005568 <_init>
 8005538:	1b64      	subs	r4, r4, r5
 800553a:	10a4      	asrs	r4, r4, #2
 800553c:	2600      	movs	r6, #0
 800553e:	42a6      	cmp	r6, r4
 8005540:	d105      	bne.n	800554e <__libc_init_array+0x2e>
 8005542:	bd70      	pop	{r4, r5, r6, pc}
 8005544:	f855 3b04 	ldr.w	r3, [r5], #4
 8005548:	4798      	blx	r3
 800554a:	3601      	adds	r6, #1
 800554c:	e7ee      	b.n	800552c <__libc_init_array+0xc>
 800554e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005552:	4798      	blx	r3
 8005554:	3601      	adds	r6, #1
 8005556:	e7f2      	b.n	800553e <__libc_init_array+0x1e>
 8005558:	080055a0 	.word	0x080055a0
 800555c:	080055a0 	.word	0x080055a0
 8005560:	080055a0 	.word	0x080055a0
 8005564:	080055a4 	.word	0x080055a4

08005568 <_init>:
 8005568:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800556a:	bf00      	nop
 800556c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800556e:	bc08      	pop	{r3}
 8005570:	469e      	mov	lr, r3
 8005572:	4770      	bx	lr

08005574 <_fini>:
 8005574:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005576:	bf00      	nop
 8005578:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800557a:	bc08      	pop	{r3}
 800557c:	469e      	mov	lr, r3
 800557e:	4770      	bx	lr
